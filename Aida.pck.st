'From Cuis 4.1 of 12 December 2012 [latest update: #1561] on 20 January 2013 at 8:24:59 pm'!
'Description Please enter a description for this package '!
!classDefinition: #AIDAModelAdaptorTest category: #'Aida-Tests'!
TestCase subclass: #AIDAModelAdaptorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'AIDAModelAdaptorTest class' category: #'Aida-Tests'!
AIDAModelAdaptorTest class
	instanceVariableNames: ''!

!classDefinition: #AIDASite category: #'Aida-Core'!
SwazooSite subclass: #AIDASite
	instanceVariableNames: 'style settings systemServices userServices timestamps counters other'
	classVariableNames: 'Default Dialect HourlySnapshot LastPreSnapshot LastSnapshot RandomGen SloveneCharacters'
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'AIDASite class' category: #'Aida-Core'!
AIDASite class
	instanceVariableNames: ''!

!classDefinition: #AIDASiteTest category: #'Aida-Tests'!
TestCase subclass: #AIDASiteTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'AIDASiteTest class' category: #'Aida-Tests'!
AIDASiteTest class
	instanceVariableNames: ''!

!classDefinition: #Address category: #'Aida-Parties'!
Object subclass: #Address
	instanceVariableNames: 'title firstName middleName lastName company street city stateProvince postalCode country phones fax emails web'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'Address class' category: #'Aida-Parties'!
Address class
	instanceVariableNames: ''!

!classDefinition: #AdvancedSearch category: #'Aida-Support'!
Object subclass: #AdvancedSearch
	instanceVariableNames: 'criteria results colMap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'AdvancedSearch class' category: #'Aida-Support'!
AdvancedSearch class
	instanceVariableNames: ''!

!classDefinition: #AidaModelAdaptor category: #'Aida-Internal'!
Object subclass: #AidaModelAdaptor
	instanceVariableNames: 'subject aspect index format buffer changed validationBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'AidaModelAdaptor class' category: #'Aida-Internal'!
AidaModelAdaptor class
	instanceVariableNames: ''!

!classDefinition: #AidaModelNullAdaptor category: #'Aida-Internal'!
ProtoObject subclass: #AidaModelNullAdaptor
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'AidaModelNullAdaptor class' category: #'Aida-Internal'!
AidaModelNullAdaptor class
	instanceVariableNames: ''!

!classDefinition: #AidaMutex category: #'Aida-Internal'!
Object subclass: #AidaMutex
	instanceVariableNames: 'semaphore owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'AidaMutex class' category: #'Aida-Internal'!
AidaMutex class
	instanceVariableNames: ''!

!classDefinition: #AidaProfiling category: #'Aida-Tests'!
Object subclass: #AidaProfiling
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'AidaProfiling class' category: #'Aida-Tests'!
AidaProfiling class
	instanceVariableNames: ''!

!classDefinition: #DailyCollection category: #'Aida-Support'!
Object subclass: #DailyCollection
	instanceVariableNames: 'days'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'DailyCollection class' category: #'Aida-Support'!
DailyCollection class
	instanceVariableNames: ''!

!classDefinition: #DailyValues category: #'Aida-Support'!
Object subclass: #DailyValues
	instanceVariableNames: 'days'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'DailyValues class' category: #'Aida-Support'!
DailyValues class
	instanceVariableNames: ''!

!classDefinition: #DefaultAuthenticator category: #'Aida-Internal'!
Object subclass: #DefaultAuthenticator
	instanceVariableNames: 'site'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'DefaultAuthenticator class' category: #'Aida-Internal'!
DefaultAuthenticator class
	instanceVariableNames: ''!

!classDefinition: #DelimitedFile category: #'Aida-Support'!
Object subclass: #DelimitedFile
	instanceVariableNames: 'filename delimiter codepage records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'DelimitedFile class' category: #'Aida-Support'!
DelimitedFile class
	instanceVariableNames: ''!

!classDefinition: #DocLink category: #'Aida-Internal'!
Object subclass: #DocLink
	instanceVariableNames: 'title url object'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'DocLink class' category: #'Aida-Internal'!
DocLink class
	instanceVariableNames: ''!

!classDefinition: #EMailMessenger category: #'Aida-Support'!
Object subclass: #EMailMessenger
	instanceVariableNames: 'repository queue sendingLoop client mailbox receivingLoop'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'EMailMessenger class' category: #'Aida-Support'!
EMailMessenger class
	instanceVariableNames: ''!

!classDefinition: #FileProxy category: #'Aida-Internal'!
Object subclass: #FileProxy
	instanceVariableNames: 'site filename timestamps content contentType size caching codepage elements bodyTagIndex imgTagIndexes linkTagIndexes servletTagIndexes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'FileProxy class' category: #'Aida-Internal'!
FileProxy class
	instanceVariableNames: ''!

!classDefinition: #HistoryOfValue category: #'Aida-Support'!
Object subclass: #HistoryOfValue
	instanceVariableNames: 'dates values changedDates authors comments historyCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'HistoryOfValue class' category: #'Aida-Support'!
HistoryOfValue class
	instanceVariableNames: ''!

!classDefinition: #ImageStream category: #'Aida-Imaging'!
Object subclass: #ImageStream
	instanceVariableNames: 'imageStream progressValue'
	classVariableNames: 'ColorPalette256 GrayPalette256 ImageKindTable'
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'ImageStream class' category: #'Aida-Imaging'!
ImageStream class
	instanceVariableNames: ''!

!classDefinition: #BmpImageStream category: #'Aida-Imaging'!
ImageStream subclass: #BmpImageStream
	instanceVariableNames: 'bfType bfSize bfReserved1 bfReserved2 bfOffBits biSize biWidth biHeight biPlanes biBitCount biCompression biSizeImage biXPelsPerMeter biYPelsPerMeter biClrUsed biClrImportant imagePalette imageObject'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'BmpImageStream class' category: #'Aida-Imaging'!
BmpImageStream class
	instanceVariableNames: ''!

!classDefinition: #BosImageStream category: #'Aida-Imaging'!
ImageStream subclass: #BosImageStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'BosImageStream class' category: #'Aida-Imaging'!
BosImageStream class
	instanceVariableNames: ''!

!classDefinition: #GifImageStream category: #'Aida-Imaging'!
ImageStream subclass: #GifImageStream
	instanceVariableNames: 'width height bitsPerPixel colorPalette rowByteSize xpos ypos pass interlace codeSize clearCode eoiCode freeCode maxCode prefixTable suffixTable remainBitCount bufByte bufStream transparentPixel'
	classVariableNames: 'Extension GraphicControlLabel ImageSeparator Terminator'
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'GifImageStream class' category: #'Aida-Imaging'!
GifImageStream class
	instanceVariableNames: ''!

!classDefinition: #JoomlaMenu category: #'Aida-Styles'!
ProtoObject subclass: #JoomlaMenu
	instanceVariableNames: 'pages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Styles'!
!classDefinition: 'JoomlaMenu class' category: #'Aida-Styles'!
JoomlaMenu class
	instanceVariableNames: ''!

!classDefinition: #MIMEMap category: #'Aida-Internal'!
Object subclass: #MIMEMap
	instanceVariableNames: 'mimeTypes fileExtensions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'MIMEMap class' category: #'Aida-Internal'!
MIMEMap class
	instanceVariableNames: ''!

!classDefinition: #Numberer category: #'Aida-Support'!
Object subclass: #Numberer
	instanceVariableNames: 'counters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Support'!
!classDefinition: 'Numberer class' category: #'Aida-Support'!
Numberer class
	instanceVariableNames: ''!

!classDefinition: #PartiesTest category: #'Aida-Tests'!
TestCase subclass: #PartiesTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'PartiesTest class' category: #'Aida-Tests'!
PartiesTest class
	instanceVariableNames: ''!

!classDefinition: #Party category: #'Aida-Parties'!
Object subclass: #Party
	instanceVariableNames: 'id name description addresses roles relatedPartyRoles events relatedObjects other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'Party class' category: #'Aida-Parties'!
Party class
	instanceVariableNames: ''!

!classDefinition: #OrganizationUnit category: #'Aida-Parties'!
Party subclass: #OrganizationUnit
	instanceVariableNames: 'type parent units specialRoles'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'OrganizationUnit class' category: #'Aida-Parties'!
OrganizationUnit class
	instanceVariableNames: ''!

!classDefinition: #Company category: #'Aida-Parties'!
OrganizationUnit subclass: #Company
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'Company class' category: #'Aida-Parties'!
Company class
	instanceVariableNames: ''!

!classDefinition: #PartyCollection category: #'Aida-Parties'!
Object subclass: #PartyCollection
	instanceVariableNames: 'parent parties'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'PartyCollection class' category: #'Aida-Parties'!
PartyCollection class
	instanceVariableNames: ''!

!classDefinition: #Person category: #'Aida-Parties'!
Party subclass: #Person
	instanceVariableNames: 'surname'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Parties'!
!classDefinition: 'Person class' category: #'Aida-Parties'!
Person class
	instanceVariableNames: ''!

!classDefinition: #Role category: #'Aida-Roles'!
Object subclass: #Role
	instanceVariableNames: 'name party relatedParty other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Roles'!
!classDefinition: 'Role class' category: #'Aida-Roles'!
Role class
	instanceVariableNames: ''!

!classDefinition: #MemberRole category: #'Aida-Roles'!
Role subclass: #MemberRole
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Roles'!
!classDefinition: 'MemberRole class' category: #'Aida-Roles'!
MemberRole class
	instanceVariableNames: ''!

!classDefinition: #RoleGroup category: #'Aida-Roles'!
Object subclass: #RoleGroup
	instanceVariableNames: 'name subroles'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Roles'!
!classDefinition: 'RoleGroup class' category: #'Aida-Roles'!
RoleGroup class
	instanceVariableNames: ''!

!classDefinition: #SchedulerTest category: #'Aida-Tests'!
TestCase subclass: #SchedulerTest
	instanceVariableNames: 'scheduler'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'SchedulerTest class' category: #'Aida-Tests'!
SchedulerTest class
	instanceVariableNames: ''!

!classDefinition: #SwazooAida category: #'Aida-Core'!
Object subclass: #SwazooAida
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'SwazooAida class' category: #'Aida-Core'!
SwazooAida class
	instanceVariableNames: ''!

!classDefinition: #SwazooIntegrationTest category: #'Aida-Tests'!
TestCase subclass: #SwazooIntegrationTest
	instanceVariableNames: 'server site'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'SwazooIntegrationTest class' category: #'Aida-Tests'!
SwazooIntegrationTest class
	instanceVariableNames: ''!

!classDefinition: #URLResolver category: #'Aida-Core'!
Object subclass: #URLResolver
	instanceVariableNames: 'site allWebPages allURLLinks counters totalCounter randomGen'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'URLResolver class' category: #'Aida-Core'!
URLResolver class
	instanceVariableNames: ''!

!classDefinition: #URLResolverTest category: #'Aida-Tests'!
TestCase subclass: #URLResolverTest
	instanceVariableNames: 'server site'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'URLResolverTest class' category: #'Aida-Tests'!
URLResolverTest class
	instanceVariableNames: ''!

!classDefinition: #VersionSpec category: #'Aida-Internal'!
Object subclass: #VersionSpec
	instanceVariableNames: 'object number current parent next'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'VersionSpec class' category: #'Aida-Internal'!
VersionSpec class
	instanceVariableNames: ''!

!classDefinition: #VersionSpecTest category: #'Aida-Tests'!
TestCase subclass: #VersionSpecTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'VersionSpecTest class' category: #'Aida-Tests'!
VersionSpecTest class
	instanceVariableNames: ''!

!classDefinition: #VersionedExample category: #'Aida-Tests'!
ProtoObject subclass: #VersionedExample
	instanceVariableNames: 'title body'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'VersionedExample class' category: #'Aida-Tests'!
VersionedExample class
	instanceVariableNames: ''!

!classDefinition: #VersionedObject category: #'Aida-Internal'!
Object subclass: #VersionedObject
	instanceVariableNames: 'version'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'VersionedObject class' category: #'Aida-Internal'!
VersionedObject class
	instanceVariableNames: ''!

!classDefinition: #VersionedObjectTest category: #'Aida-Tests'!
TestCase subclass: #VersionedObjectTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'VersionedObjectTest class' category: #'Aida-Tests'!
VersionedObjectTest class
	instanceVariableNames: ''!

!classDefinition: #WebAnchor category: #'Aida-Elements'!
ProtoObject subclass: #WebAnchor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebAnchor class' category: #'Aida-Elements'!
WebAnchor class
	instanceVariableNames: ''!

!classDefinition: #WebApplication category: #'Aida-Applications'!
Object subclass: #WebApplication
	instanceVariableNames: 'session observee contexts other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Applications'!
!classDefinition: 'WebApplication class' category: #'Aida-Applications'!
WebApplication class
	instanceVariableNames: ''!

!classDefinition: #VersionedExampleApp category: #'Aida-Tests'!
WebApplication subclass: #VersionedExampleApp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'VersionedExampleApp class' category: #'Aida-Tests'!
VersionedExampleApp class
	instanceVariableNames: ''!

!classDefinition: #WebApplicationTest category: #'Aida-Tests'!
TestCase subclass: #WebApplicationTest
	instanceVariableNames: 'server site session app request'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'WebApplicationTest class' category: #'Aida-Tests'!
WebApplicationTest class
	instanceVariableNames: ''!

!classDefinition: #WebAutocomplete2Field category: #'Aida-Widgets'!
ProtoObject subclass: #WebAutocomplete2Field
	instanceVariableNames: 'choicesAspect choicesObject choiceAspect elementToUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebAutocomplete2Field class' category: #'Aida-Widgets'!
WebAutocomplete2Field class
	instanceVariableNames: ''!

!classDefinition: #WebAutocompleteField category: #'Aida-Widgets'!
ProtoObject subclass: #WebAutocompleteField
	instanceVariableNames: 'choicesAspect choicesObject choiceAspect elementToUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebAutocompleteField class' category: #'Aida-Widgets'!
WebAutocompleteField class
	instanceVariableNames: ''!

!classDefinition: #WebButton category: #'Aida-Elements'!
ProtoObject subclass: #WebButton
	instanceVariableNames: 'type image size'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebButton class' category: #'Aida-Elements'!
WebButton class
	instanceVariableNames: ''!

!classDefinition: #WebCache category: #'Aida-Internal'!
Object subclass: #WebCache
	instanceVariableNames: 'objects other settings parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebCache class' category: #'Aida-Internal'!
WebCache class
	instanceVariableNames: ''!

!classDefinition: #WebCacheEntry category: #'Aida-Internal'!
Object subclass: #WebCacheEntry
	instanceVariableNames: 'content created timeout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebCacheEntry class' category: #'Aida-Internal'!
WebCacheEntry class
	instanceVariableNames: ''!

!classDefinition: #WebCaptcha category: #'Aida-Imaging'!
ProtoObject subclass: #WebCaptcha
	instanceVariableNames: 'text random'
	classVariableNames: 'Cache'
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'WebCaptcha class' category: #'Aida-Imaging'!
WebCaptcha class
	instanceVariableNames: ''!

!classDefinition: #WebChat category: #'Aida-Demos'!
Object subclass: #WebChat
	instanceVariableNames: 'lines announcers'
	classVariableNames: 'Singleton'
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebChat class' category: #'Aida-Demos'!
WebChat class
	instanceVariableNames: ''!

!classDefinition: #WebChatApp category: #'Aida-Demos'!
WebApplication subclass: #WebChatApp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebChatApp class' category: #'Aida-Demos'!
WebChatApp class
	instanceVariableNames: ''!

!classDefinition: #WebCheckBox category: #'Aida-Elements'!
ProtoObject subclass: #WebCheckBox
	instanceVariableNames: 'checked selected'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebCheckBox class' category: #'Aida-Elements'!
WebCheckBox class
	instanceVariableNames: ''!

!classDefinition: #WebClipboard category: #'Aida-Internal'!
Object subclass: #WebClipboard
	instanceVariableNames: 'title url object'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebClipboard class' category: #'Aida-Internal'!
WebClipboard class
	instanceVariableNames: ''!

!classDefinition: #WebCommand category: #'Aida-Internal'!
Object subclass: #WebCommand
	instanceVariableNames: 'command context element value other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebCommand class' category: #'Aida-Internal'!
WebCommand class
	instanceVariableNames: ''!

!classDefinition: #WebContext category: #'Aida-Internal'!
Object subclass: #WebContext
	instanceVariableNames: 'id parent child state window ids nextId process semaphore event answer result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebContext class' category: #'Aida-Internal'!
WebContext class
	instanceVariableNames: ''!

!classDefinition: #WebContextFirst category: #'Aida-Internal'!
ProtoObject subclass: #WebContextFirst
	instanceVariableNames: 'view mainSemaphore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebContextFirst class' category: #'Aida-Internal'!
WebContextFirst class
	instanceVariableNames: ''!

!classDefinition: #WebCounter category: #'Aida-Internal'!
Object subclass: #WebCounter
	instanceVariableNames: 'started day year dailyCounts hourlyCounts todayHourlyCounts total yearlyHistory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebCounter class' category: #'Aida-Internal'!
WebCounter class
	instanceVariableNames: ''!

!classDefinition: #WebCountry category: #'Aida-i18n'!
Object subclass: #WebCountry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-i18n'!
!classDefinition: 'WebCountry class' category: #'Aida-i18n'!
WebCountry class
	instanceVariableNames: ''!

!classDefinition: #WebDateInputField category: #'Aida-Widgets'!
ProtoObject subclass: #WebDateInputField
	instanceVariableNames: 'button'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebDateInputField class' category: #'Aida-Widgets'!
WebDateInputField class
	instanceVariableNames: ''!

!classDefinition: #WebDelayedField category: #'Aida-Widgets'!
ProtoObject subclass: #WebDelayedField
	instanceVariableNames: 'delay'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebDelayedField class' category: #'Aida-Widgets'!
WebDelayedField class
	instanceVariableNames: ''!

!classDefinition: #WebDemo category: #'Aida-Demos'!
Object subclass: #WebDemo
	instanceVariableNames: 'introduction date input delayedInput field1 field2 editField content submitValue deleted'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebDemo class' category: #'Aida-Demos'!
WebDemo class
	instanceVariableNames: ''!

!classDefinition: #WebDemoApp category: #'Aida-Demos'!
WebApplication subclass: #WebDemoApp
	instanceVariableNames: 'liveImage selectedClasses filename fileContentType fileStream startStamp'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebDemoApp class' category: #'Aida-Demos'!
WebDemoApp class
	instanceVariableNames: ''!

!classDefinition: #WebElement category: #'Aida-Elements'!
Object subclass: #WebElement
	instanceVariableNames: 'parent elements attributes eventHandlers other'
	classVariableNames: 'Colors'
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebElement class' category: #'Aida-Elements'!
WebElement class
	instanceVariableNames: ''!

!classDefinition: #JoomlaModule category: #'Aida-Styles'!
WebElement subclass: #JoomlaModule
	instanceVariableNames: 'header body'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Styles'!
!classDefinition: 'JoomlaModule class' category: #'Aida-Styles'!
JoomlaModule class
	instanceVariableNames: ''!

!classDefinition: #WebAudio category: #'Aida-Elements'!
WebElement subclass: #WebAudio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebAudio class' category: #'Aida-Elements'!
WebAudio class
	instanceVariableNames: ''!

!classDefinition: #WebCanvas category: #'Aida-Elements'!
WebElement subclass: #WebCanvas
	instanceVariableNames: 'text'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebCanvas class' category: #'Aida-Elements'!
WebCanvas class
	instanceVariableNames: ''!

!classDefinition: #WebComment category: #'Aida-Elements'!
WebElement subclass: #WebComment
	instanceVariableNames: 'text'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebComment class' category: #'Aida-Elements'!
WebComment class
	instanceVariableNames: ''!

!classDefinition: #WebEvent category: #'Aida-Internal'!
Object subclass: #WebEvent
	instanceVariableNames: 'event element context pageUrl value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebEvent class' category: #'Aida-Internal'!
WebEvent class
	instanceVariableNames: ''!

!classDefinition: #WebEventHandler category: #'Aida-Internal'!
Object subclass: #WebEventHandler
	instanceVariableNames: 'event element actionBlocks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebEventHandler class' category: #'Aida-Internal'!
WebEventHandler class
	instanceVariableNames: ''!

!classDefinition: #WebFieldSet category: #'Aida-Elements'!
WebElement subclass: #WebFieldSet
	instanceVariableNames: 'legend'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebFieldSet class' category: #'Aida-Elements'!
WebFieldSet class
	instanceVariableNames: ''!

!classDefinition: #WebFileInputField category: #'Aida-Elements'!
ProtoObject subclass: #WebFileInputField
	instanceVariableNames: 'filenameAspect contentTypeAspect writeStream writeBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebFileInputField class' category: #'Aida-Elements'!
WebFileInputField class
	instanceVariableNames: ''!

!classDefinition: #WebFileInputTest category: #'Aida-Tests'!
TestCase subclass: #WebFileInputTest
	instanceVariableNames: 'file filename'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'WebFileInputTest class' category: #'Aida-Tests'!
WebFileInputTest class
	instanceVariableNames: ''!

!classDefinition: #WebForm category: #'Aida-Elements'!
WebElement subclass: #WebForm
	instanceVariableNames: 'fields action tabOrder superform subforms'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebForm class' category: #'Aida-Elements'!
WebForm class
	instanceVariableNames: ''!

!classDefinition: #WebFormElement category: #'Aida-Elements'!
WebElement subclass: #WebFormElement
	instanceVariableNames: 'adaptor enterTabForm'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebFormElement class' category: #'Aida-Elements'!
WebFormElement class
	instanceVariableNames: ''!

!classDefinition: #WebGeolocation category: #'Aida-Internal'!
Object subclass: #WebGeolocation
	instanceVariableNames: 'timestamp latitude longitude accuracy altitude latitudeAccuracy heading speed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebGeolocation class' category: #'Aida-Internal'!
WebGeolocation class
	instanceVariableNames: ''!

!classDefinition: #WebGridColumn category: #'Aida-Widgets'!
Object subclass: #WebGridColumn
	instanceVariableNames: 'parent id name width align aspect linkAspect linkView viewBlock addBlock sorted filter filterWidth summaryType summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebGridColumn class' category: #'Aida-Widgets'!
WebGridColumn class
	instanceVariableNames: ''!

!classDefinition: #WebIFrame category: #'Aida-Elements'!
WebElement subclass: #WebIFrame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebIFrame class' category: #'Aida-Elements'!
WebIFrame class
	instanceVariableNames: ''!

!classDefinition: #WebImage category: #'Aida-Elements'!
WebElement subclass: #WebImage
	instanceVariableNames: 'image imageMap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebImage class' category: #'Aida-Elements'!
WebImage class
	instanceVariableNames: ''!

!classDefinition: #WebImageMap category: #'Aida-Elements'!
WebElement subclass: #WebImageMap
	instanceVariableNames: 'areas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebImageMap class' category: #'Aida-Elements'!
WebImageMap class
	instanceVariableNames: ''!

!classDefinition: #WebInPlaceEditable2Text category: #'Aida-Widgets'!
ProtoObject subclass: #WebInPlaceEditable2Text
	instanceVariableNames: 'size attribute formated allow triggerElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebInPlaceEditable2Text class' category: #'Aida-Widgets'!
WebInPlaceEditable2Text class
	instanceVariableNames: ''!

!classDefinition: #WebInPlaceEditableText category: #'Aida-Widgets'!
ProtoObject subclass: #WebInPlaceEditableText
	instanceVariableNames: 'size attribute formated allow triggerElement'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebInPlaceEditableText class' category: #'Aida-Widgets'!
WebInPlaceEditableText class
	instanceVariableNames: ''!

!classDefinition: #WebIndex category: #'Aida-Core'!
Object subclass: #WebIndex
	instanceVariableNames: 'index indexedObjects popularWords workQueue indexer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebIndex class' category: #'Aida-Core'!
WebIndex class
	instanceVariableNames: ''!

!classDefinition: #WebInputField category: #'Aida-Elements'!
ProtoObject subclass: #WebInputField
	instanceVariableNames: 'size maxLength type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebInputField class' category: #'Aida-Elements'!
WebInputField class
	instanceVariableNames: ''!

!classDefinition: #WebJSON category: #'Aida-Internal'!
Object subclass: #WebJSON
	instanceVariableNames: 'stream ctorMap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebJSON class' category: #'Aida-Internal'!
WebJSON class
	instanceVariableNames: ''!

!classDefinition: #WebJSONPresenter category: #'Aida-Internal'!
Object subclass: #WebJSONPresenter
	instanceVariableNames: 'session observee presenterBlock other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebJSONPresenter class' category: #'Aida-Internal'!
WebJSONPresenter class
	instanceVariableNames: ''!

!classDefinition: #WebJSONTest category: #'Aida-Tests'!
TestCase subclass: #WebJSONTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'WebJSONTest class' category: #'Aida-Tests'!
WebJSONTest class
	instanceVariableNames: ''!

!classDefinition: #WebLabel category: #'Aida-Elements'!
WebElement subclass: #WebLabel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebLabel class' category: #'Aida-Elements'!
WebLabel class
	instanceVariableNames: ''!

!classDefinition: #WebLanguage category: #'Aida-i18n'!
Object subclass: #WebLanguage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-i18n'!
!classDefinition: 'WebLanguage class' category: #'Aida-i18n'!
WebLanguage class
	instanceVariableNames: ''!

!classDefinition: #WebLink category: #'Aida-Elements'!
ProtoObject subclass: #WebLink
	instanceVariableNames: 'ooReference urlReference parms anchor security'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebLink class' category: #'Aida-Elements'!
WebLink class
	instanceVariableNames: ''!

!classDefinition: #WebList category: #'Aida-Elements'!
WebElement subclass: #WebList
	instanceVariableNames: 'name kind type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebList class' category: #'Aida-Elements'!
WebList class
	instanceVariableNames: ''!

!classDefinition: #WebListItem category: #'Aida-Elements'!
WebElement subclass: #WebListItem
	instanceVariableNames: 'tag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebListItem class' category: #'Aida-Elements'!
WebListItem class
	instanceVariableNames: ''!

!classDefinition: #WebLiveImage category: #'Aida-Imaging'!
ProtoObject subclass: #WebLiveImage
	instanceVariableNames: 'gif refreshed width height painter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'WebLiveImage class' category: #'Aida-Imaging'!
WebLiveImage class
	instanceVariableNames: ''!

!classDefinition: #WebGraph category: #'Aida-Imaging'!
WebLiveImage subclass: #WebGraph
	instanceVariableNames: 'data margin title graphics'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Imaging'!
!classDefinition: 'WebGraph class' category: #'Aida-Imaging'!
WebGraph class
	instanceVariableNames: ''!

!classDefinition: #WebLivePDFCreator category: #'Aida-Widgets'!
ProtoObject subclass: #WebLivePDFCreator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebLivePDFCreator class' category: #'Aida-Widgets'!
WebLivePDFCreator class
	instanceVariableNames: ''!

!classDefinition: #WebMenu category: #'Aida-Elements'!
ProtoObject subclass: #WebMenu
	instanceVariableNames: 'multiple selected adaptorToStore sort'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebMenu class' category: #'Aida-Elements'!
WebMenu class
	instanceVariableNames: ''!

!classDefinition: #WebMethodImage category: #'Aida-Internal'!
ProtoObject subclass: #WebMethodImage
	instanceVariableNames: 'lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebMethodImage class' category: #'Aida-Internal'!
WebMethodImage class
	instanceVariableNames: 'cache'!

!classDefinition: #WebMethodResource category: #'Aida-Internal'!
Object subclass: #WebMethodResource
	instanceVariableNames: 'site object method contentType preferedUrl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebMethodResource class' category: #'Aida-Internal'!
WebMethodResource class
	instanceVariableNames: ''!

!classDefinition: #WebMobileApplication category: #'Aida-Applications'!
WebApplication subclass: #WebMobileApplication
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Applications'!
!classDefinition: 'WebMobileApplication class' category: #'Aida-Applications'!
WebMobileApplication class
	instanceVariableNames: ''!

!classDefinition: #WebRadioButton category: #'Aida-Elements'!
ProtoObject subclass: #WebRadioButton
	instanceVariableNames: 'checked'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebRadioButton class' category: #'Aida-Elements'!
WebRadioButton class
	instanceVariableNames: ''!

!classDefinition: #WebRawText category: #'Aida-Elements'!
ProtoObject subclass: #WebRawText
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebRawText class' category: #'Aida-Elements'!
WebRawText class
	instanceVariableNames: ''!

!classDefinition: #WebRealtimeConnection category: #'Aida-Internal'!
Object subclass: #WebRealtimeConnection
	instanceVariableNames: 'type handler connection app view semaphore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebRealtimeConnection class' category: #'Aida-Internal'!
WebRealtimeConnection class
	instanceVariableNames: ''!

!classDefinition: #WebRealtimeHandler category: #'Aida-Internal'!
Object subclass: #WebRealtimeHandler
	instanceVariableNames: 'session connections'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebRealtimeHandler class' category: #'Aida-Internal'!
WebRealtimeHandler class
	instanceVariableNames: ''!

!classDefinition: #WebRichEditor category: #'Aida-Widgets'!
ProtoObject subclass: #WebRichEditor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebRichEditor class' category: #'Aida-Widgets'!
WebRichEditor class
	instanceVariableNames: ''!

!classDefinition: #WebRouter category: #'Aida-Internal'!
Object subclass: #WebRouter
	instanceVariableNames: 'site routes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebRouter class' category: #'Aida-Internal'!
WebRouter class
	instanceVariableNames: ''!

!classDefinition: #WebScheduledEvent category: #'Aida-Internal'!
Object subclass: #WebScheduledEvent
	instanceVariableNames: 'parent timestamp period method object block'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebScheduledEvent class' category: #'Aida-Internal'!
WebScheduledEvent class
	instanceVariableNames: ''!

!classDefinition: #WebScheduler category: #'Aida-Core'!
Object subclass: #WebScheduler
	instanceVariableNames: 'site queue loop mutex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebScheduler class' category: #'Aida-Core'!
WebScheduler class
	instanceVariableNames: ''!

!classDefinition: #WebScript category: #'Aida-Elements'!
WebElement subclass: #WebScript
	instanceVariableNames: 'script source'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebScript class' category: #'Aida-Elements'!
WebScript class
	instanceVariableNames: ''!

!classDefinition: #WebSecurityManager category: #'Aida-Core'!
Object subclass: #WebSecurityManager
	instanceVariableNames: 'site users groups authenticationScheme accessByObject settings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebSecurityManager class' category: #'Aida-Core'!
WebSecurityManager class
	instanceVariableNames: ''!

!classDefinition: #WebSecurityTest category: #'Aida-Tests'!
TestCase subclass: #WebSecurityTest
	instanceVariableNames: 'server site mgr'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'WebSecurityTest class' category: #'Aida-Tests'!
WebSecurityTest class
	instanceVariableNames: ''!

!classDefinition: #WebSeparator category: #'Aida-Elements'!
WebElement subclass: #WebSeparator
	instanceVariableNames: 'type size length'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebSeparator class' category: #'Aida-Elements'!
WebSeparator class
	instanceVariableNames: ''!

!classDefinition: #WebSession category: #'Aida-Core'!
Object subclass: #WebSession
	instanceVariableNames: 'ids created cookies parent user appsForObjects queue userValues other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebSession class' category: #'Aida-Core'!
WebSession class
	instanceVariableNames: ''!

!classDefinition: #WebSessionManager category: #'Aida-Core'!
Object subclass: #WebSessionManager
	instanceVariableNames: 'site sessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebSessionManager class' category: #'Aida-Core'!
WebSessionManager class
	instanceVariableNames: ''!

!classDefinition: #WebSessionMgmtTest category: #'Aida-Tests'!
TestCase subclass: #WebSessionMgmtTest
	instanceVariableNames: 'server site session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Tests'!
!classDefinition: 'WebSessionMgmtTest class' category: #'Aida-Tests'!
WebSessionMgmtTest class
	instanceVariableNames: ''!

!classDefinition: #WebSiteOwnerRole category: #'Aida-Roles'!
Role subclass: #WebSiteOwnerRole
	instanceVariableNames: 'webSite'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Roles'!
!classDefinition: 'WebSiteOwnerRole class' category: #'Aida-Roles'!
WebSiteOwnerRole class
	instanceVariableNames: ''!

!classDefinition: #WebStaticServer category: #'Aida-Internal'!
Object subclass: #WebStaticServer
	instanceVariableNames: 'site files'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebStaticServer class' category: #'Aida-Internal'!
WebStaticServer class
	instanceVariableNames: ''!

!classDefinition: #WebStatistics category: #'Aida-Core'!
Object subclass: #WebStatistics
	instanceVariableNames: 'site referers refererStopList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebStatistics class' category: #'Aida-Core'!
WebStatistics class
	instanceVariableNames: ''!

!classDefinition: #WebStubElement category: #'Aida-Elements'!
WebElement subclass: #WebStubElement
	instanceVariableNames: 'multiple collection selected aspectToStore objectToStore sort'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebStubElement class' category: #'Aida-Elements'!
WebStubElement class
	instanceVariableNames: ''!

!classDefinition: #WebStyle category: #'Aida-Styles'!
Object subclass: #WebStyle
	instanceVariableNames: 'site resources searchButton style'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Styles'!
!classDefinition: 'WebStyle class' category: #'Aida-Styles'!
WebStyle class
	instanceVariableNames: 'each'!

!classDefinition: #DefaultWebStyle category: #'Aida-Styles'!
WebStyle subclass: #DefaultWebStyle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Styles'!
!classDefinition: 'DefaultWebStyle class' category: #'Aida-Styles'!
DefaultWebStyle class
	instanceVariableNames: ''!

!classDefinition: #JoomlaStyle category: #'Aida-Styles'!
DefaultWebStyle subclass: #JoomlaStyle
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Styles'!
!classDefinition: 'JoomlaStyle class' category: #'Aida-Styles'!
JoomlaStyle class
	instanceVariableNames: ''!

!classDefinition: #WebTable category: #'Aida-Elements'!
WebElement subclass: #WebTable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebTable class' category: #'Aida-Elements'!
WebTable class
	instanceVariableNames: ''!

!classDefinition: #WebTableCell category: #'Aida-Elements'!
WebElement subclass: #WebTableCell
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebTableCell class' category: #'Aida-Elements'!
WebTableCell class
	instanceVariableNames: ''!

!classDefinition: #WebTableHeader category: #'Aida-Elements'!
ProtoObject subclass: #WebTableHeader
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebTableHeader class' category: #'Aida-Elements'!
WebTableHeader class
	instanceVariableNames: ''!

!classDefinition: #WebTableRow category: #'Aida-Elements'!
WebElement subclass: #WebTableRow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebTableRow class' category: #'Aida-Elements'!
WebTableRow class
	instanceVariableNames: ''!

!classDefinition: #WebTabs category: #'Aida-Widgets'!
ProtoObject subclass: #WebTabs
	instanceVariableNames: 'selected'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebTabs class' category: #'Aida-Widgets'!
WebTabs class
	instanceVariableNames: ''!

!classDefinition: #ViewTabs category: #'Aida-Widgets'!
WebTabs subclass: #ViewTabs
	instanceVariableNames: 'views'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'ViewTabs class' category: #'Aida-Widgets'!
ViewTabs class
	instanceVariableNames: ''!

!classDefinition: #WebText category: #'Aida-Elements'!
WebElement subclass: #WebText
	instanceVariableNames: 'text size textAttributes header paragraph font'
	classVariableNames: 'AttributeMarkup'
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebText class' category: #'Aida-Elements'!
WebText class
	instanceVariableNames: ''!

!classDefinition: #WebTextArea category: #'Aida-Elements'!
ProtoObject subclass: #WebTextArea
	instanceVariableNames: 'rows columns'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebTextArea class' category: #'Aida-Elements'!
WebTextArea class
	instanceVariableNames: ''!

!classDefinition: #WebTransactionMonitor category: #'Aida-Internal'!
Object subclass: #WebTransactionMonitor
	instanceVariableNames: ''
	classVariableNames: 'BusySessions LastCommit LocalServers Muttex NotificationSent Transactions'
	poolDictionaries: ''
	category: 'Aida-Internal'!
!classDefinition: 'WebTransactionMonitor class' category: #'Aida-Internal'!
WebTransactionMonitor class
	instanceVariableNames: 'lock'!

!classDefinition: #WebTranslDict category: #'Aida-i18n'!
Object subclass: #WebTranslDict
	instanceVariableNames: 'translator class method language dict changes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-i18n'!
!classDefinition: 'WebTranslDict class' category: #'Aida-i18n'!
WebTranslDict class
	instanceVariableNames: ''!

!classDefinition: #WebTranslator category: #'Aida-i18n'!
Object subclass: #WebTranslator
	instanceVariableNames: 'parent cache other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-i18n'!
!classDefinition: 'WebTranslator class' category: #'Aida-i18n'!
WebTranslator class
	instanceVariableNames: ''!

!classDefinition: #WebUser category: #'Aida-Core'!
Object subclass: #WebUser
	instanceVariableNames: 'parent id username password name surname company address city zip country website email phone fax other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebUser class' category: #'Aida-Core'!
WebUser class
	instanceVariableNames: ''!

!classDefinition: #WebUserGroup category: #'Aida-Core'!
Object subclass: #WebUserGroup
	instanceVariableNames: 'name users other'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Core'!
!classDefinition: 'WebUserGroup class' category: #'Aida-Core'!
WebUserGroup class
	instanceVariableNames: ''!

!classDefinition: #WebUserRole category: #'Aida-Roles'!
Role subclass: #WebUserRole
	instanceVariableNames: 'username password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Roles'!
!classDefinition: 'WebUserRole class' category: #'Aida-Roles'!
WebUserRole class
	instanceVariableNames: ''!

!classDefinition: #WebVideo category: #'Aida-Elements'!
WebElement subclass: #WebVideo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Elements'!
!classDefinition: 'WebVideo class' category: #'Aida-Elements'!
WebVideo class
	instanceVariableNames: ''!

!classDefinition: #WebWidget category: #'Aida-Applications'!
ProtoObject subclass: #WebWidget
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Applications'!
!classDefinition: 'WebWidget class' category: #'Aida-Applications'!
WebWidget class
	instanceVariableNames: ''!

!classDefinition: #WebDemoWidget category: #'Aida-Demos'!
WebWidget subclass: #WebDemoWidget
	instanceVariableNames: 'username password result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebDemoWidget class' category: #'Aida-Demos'!
WebDemoWidget class
	instanceVariableNames: ''!

!classDefinition: #WebDemoWidget2 category: #'Aida-Demos'!
WebWidget subclass: #WebDemoWidget2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Demos'!
!classDefinition: 'WebDemoWidget2 class' category: #'Aida-Demos'!
WebDemoWidget2 class
	instanceVariableNames: ''!

!classDefinition: #WebDialog category: #'Aida-Widgets'!
WebWidget subclass: #WebDialog
	instanceVariableNames: 'type text'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebDialog class' category: #'Aida-Widgets'!
WebDialog class
	instanceVariableNames: ''!

!classDefinition: #WebGrid category: #'Aida-Widgets'!
WebWidget subclass: #WebGrid
	instanceVariableNames: 'collection aspect object filtered columns page settings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebGrid class' category: #'Aida-Widgets'!
WebGrid class
	instanceVariableNames: ''!

!classDefinition: #WebNonHTMLResource category: #'Aida-Widgets'!
WebWidget subclass: #WebNonHTMLResource
	instanceVariableNames: 'content contentType filename'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebNonHTMLResource class' category: #'Aida-Widgets'!
WebNonHTMLResource class
	instanceVariableNames: ''!

!classDefinition: #WebRichEditorWakeup category: #'Aida-Widgets'!
WebWidget subclass: #WebRichEditorWakeup
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebRichEditorWakeup class' category: #'Aida-Widgets'!
WebRichEditorWakeup class
	instanceVariableNames: ''!

!classDefinition: #WebValidationError category: #'Aida-Widgets'!
WebWidget subclass: #WebValidationError
	instanceVariableNames: 'origin'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Widgets'!
!classDefinition: 'WebValidationError class' category: #'Aida-Widgets'!
WebValidationError class
	instanceVariableNames: ''!

!classDefinition: #WebWindow category: #'Aida-Applications'!
WebWidget subclass: #WebWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Applications'!
!classDefinition: 'WebWindow class' category: #'Aida-Applications'!
WebWindow class
	instanceVariableNames: ''!

!classDefinition: #WebPage category: #'Aida-Applications'!
WebWindow subclass: #WebPage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Aida-Applications'!
!classDefinition: 'WebPage class' category: #'Aida-Applications'!
WebPage class
	instanceVariableNames: ''!


!AIDASite commentStamp: '<historical>' prior: 0!
AIDASite as the most important class is an Aida/Web website with its system and user services, session and security managent, url resolving and many more. AIDASite>>answerTo: is the main entry point of requests comming to that website.!

!Address commentStamp: '<historical>' prior: 0!
"ECML v1.1 definition of address (www.ecml.org)"

Instance Variables:
	city	<Object>	description of city
	company	<Object>	description of company
	country	<Object>	description of country
	emails	<Object>	description of emails
	firstName	<Object>	description of firstName
	lastName	<Object>	description of lastName
	middleName	<Object>	description of middleName
	phones	<Object>	description of phones
	postalCode	<Object>	description of postalCode
	stateProvince	<Object>	description of stateProvince
	street	<Object>	description of street
	title	<Object>	description of title

!

!AdvancedSearch commentStamp: '<historical>' prior: 0!
AdvancedSearch is used for set up a search criteria and also for generic search against collection of any objects.
Search criteria:
	- by default search string must be start part of an element in collection to come in results
	- use * before search string to search in the middle of strings 
      - "search string" for exact match (except case)

any method call open a new criteria in a dictionary

Instance Variables:
	criteria	<Dictionary>	 key is aspect, value is search key

!

!AidaModelAdaptor commentStamp: '<historical>' prior: 0!
AIDAModelAdaptor adapts the web form elements to the domain model. Main goal of adaptor is to adapt model object accessors to just #value/#value: methods, used by form elements

Example: aPerson name/name: is adapted to value/value: by a subclass AspectAdaptor, #name as an aspect of aPerson!

!AidaModelNullAdaptor commentStamp: '<historical>' prior: 0!
AIDAModelNullAdaptor adapts actually nothing just holds the value. This is a default adaptor in form element if no one is set. Usefull for preparing forms in advance, without connecting to domain model.

Example adding a hidden field:

	e add: (WebInputField new setHidden; name: 'MyHiddenField'; value: '12345')!

!AidaMutex commentStamp: 'janko 3/19/2012 13:08' prior: 0!
AidaMutex provides proper support for critical sections.

Only one process at a time can execute code within its #critical: method. Other processes attempting to call #critical: will block until the first process leaves the critical section. The process that owns the mutex (the one currently in the critical section), however, may call #critical: repeatedly without fear of blocking.

The process currently inside the critical section can be terminated by calling #terminateOwner. This will result in the process being unwound and the critical section being freed.!

!BmpImageStream commentStamp: '<historical>' prior: 0!
BmpImageStream 

Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.
!

!BosImageStream commentStamp: '<historical>' prior: 0!
BosImageStream 

Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.

!

!Company commentStamp: '<historical>' prior: 0!
Company as a party with its roles and relashionships, employees, organizational units etc.
!

!DailyCollection commentStamp: '<historical>' prior: 0!
DailyCollection is a handy for domain model to store values in collections, one per a day. Used as kind of index for faster access to historical data, which is usally accessed newer mostly while older less and less.

Typical usage:
	aDailyCollection 
		add: aSomething onDate: Date today;
		allDated: Date today;
		allThisYear;
		allLastMonth;
		...!

!DailyValues commentStamp: '<historical>' prior: 0!
DailyValues is a handy for domain model to store values, one per a day. Used as kind of index for faster access to historical data, which is usally accessed newer mostly while older less and less. 

Typical usage:
	aDailyValue 
		at: Date today put: 1234;
		at: Date today add: 10;  "adds to previous value"
		allFromDate: Date doday -5 to: Date today;
		allThisWeek;
		allLastMonth;
		...
!

!DefaultAuthenticator commentStamp: '<historical>' prior: 0!
DefaultAuthenticator authentificates the user during login by username and password, which are stored locally in site's security manager, by contrast to for instance the LDAPAuthenticator, which asks the LDAP directory server to authenticate this user.
!

!DefaultWebStyle commentStamp: '<historical>' prior: 0!
DefaultWebStyle contains stying (CSS, layout) for website aidademo, setup by default after install.
!

!DelimitedFile commentStamp: 'janko 7/8/2011 23:21' prior: 0!
DelimitedFile for reading and writing files in CSV format.

Example:
	records := (DelimitedFile new delimiter: $, ; codepage: #cp1250; readFrom: 'somedata.csv') records.
	records do: [:record | "do something on this array of fields"]

Default delimiter is $; and default codepage #UTF8. You can change it to, say,  #cp1250 (Central European) or others, see AIDASite class codepage converting for all possibilities


!

!DocLink commentStamp: '<historical>' prior: 0!
DocLink is used in WebClipboard to cut/copy/paste references to resources on the web. (example: documents to paste as references on other documents, in Scribo)
!

!EMailMessenger commentStamp: '<historical>' prior: 0!
For sending and receiving e-mails

Port from VW, not yet finished!!!

!GifImageStream commentStamp: '<historical>' prior: 0!
GifImageStream 

Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.
!

!HistoryOfValue commentStamp: '<historical>' prior: 0!
HistoryOfValue track some value through the time. You can go back on any date and get a value valid on that time. 

Example usage: a price, which changes from time to time.!

!ImageStream commentStamp: '<historical>' prior: 0!
ImageStream 

Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.
!

!JoomlaMenu commentStamp: '<historical>' prior: 0!
JoomlaMenu used in JoomlaStyle layouts
!

!JoomlaModule commentStamp: '<historical>' prior: 0!
JoomlaModule used in JoomlaStyle layouts

Add elements to #body, not to module itself!! 
!

!JoomlaStyle commentStamp: '<historical>' prior: 0!
JoomlaStyle with styling (CSS, layout) from Joomla template named 'mitra'
!

!MIMEMap commentStamp: '<historical>' prior: 0!
MIMEMap maps content types to file extensions and back. Example: 'image.jpg' is of content type 'image/jpeg'
!

!MemberRole commentStamp: '<historical>' prior: 0!
MemberRole for a person becoming a member of some organizational unit.
!

!Numberer commentStamp: '<historical>' prior: 0!
Numberer is used to provide counters for things like invoice numbers

Instance Variables:
	counters	<Dictionary>	 counters for different purposes

!

!OrganizationUnit commentStamp: '<historical>' prior: 0!
OrganizationUnit for hierarchical modeling some organization like a company!

!Party commentStamp: '<historical>' prior: 0!
Party is abstract class for persons or companies, holding basic information, roels and relations to other parties (like this person is an employee to that company). It also registers all events related to that party.
!

!PartyCollection commentStamp: '<historical>' prior: 0!
PartyCollection is used for doing many things on mix of org.units, roles, rolegroups and persons. For instance, geting out all persons from above mix ...

Instance Variables:
	parent	<aParty>	a root party, containing that mix of parties (eg. a company)
	parties	<anOrderedCollection>	mix of parties (orgUniits, roles, roleGroups, persons)

!

!Person commentStamp: '<historical>' prior: 0!
Person as a party, with his roles and relations to other parties. 

Note that aPerson has its corresponding aWebUser and vice versa. From historical reasons, hopefully soon those two clases will be merged into Person!!!

!Role commentStamp: '<historical>' prior: 0!
Role is abstract class to show the role one party has in relationship with another, like this person is an employee to that company.

!

!RoleGroup commentStamp: '<historical>' prior: 0!
To group more roles or other groups together. to build a hierarchy of roles. If you use somewhere RoleGroup instead of Role, then you access all Roles together.

Instance Variables:
	name	<String> name of role group
	subroles	<Role | RoleGroup>	group of roles or other role groups

!

!SwazooAida commentStamp: '<historical>' prior: 0!
SwazooAida is here just for easier start and stop your Aida/Web application server

	- SwazooAida demoStart             "will create and start a demo site http://localhost:8888"
	- SwazooAida startOn: portNum   "will start a site on that port on all IP interfaces, any host"
								      "it will be created if doesn't exist yet"
	- SwazooAida start    "will start all existing sites"
	- SwazooAida stop     "will stop all running sites"!

!SwazooIntegrationTest commentStamp: '<historical>' prior: 0!
All tests are commented out because they are DANGEROUS to live Swazoo systems!!

Instance Variables:
	server	<SwazooServer>	description of server
	site	<Object | Proxy>	description of site

!

!URLResolver commentStamp: '<historical>' prior: 0!
URLResolver is a two way Url to object mapper, first way is for finding a reference to domain object the Url in web request is pointing on, reverse way is to get an Url for a domain object, when you add link to it on a web page.

URLResolver holds also counters of web requests per domain objects.
!

!VersionSpec commentStamp: '<historical>' prior: 0!
VersionSpec defines a versioned object by its number and position in version chain.

Instance Variables:
	number	<String>	 number of that version. Integer by default, but it can be any string
	current	<Boolean> true, if this version is current, that is, most important, released, etc.
	parent	<Object> parent, that is, previous version of that object, nil if noone
	next		<Object> next version of that object, nil if noone

!

!VersionedObject commentStamp: '<historical>' prior: 0!
VersionedObject for objects of many versions through the time, with a current version and a new one maybe in preparation. Prime example is Document in Scribo CMS. More on http://www.aidaweb.si/advanced-features.html
!

!ViewTabs commentStamp: '<historical>' prior: 0!
For quick selection of App views. Just fill with view names and descriptions, all other will be automatic. Tab for curently shown will be colored as shown, other tabls will have links to self observee and appropriate view!

!WebApplication commentStamp: '<historical>' prior: 0!
WebApplication is a superclass of all App subclasses for presentations (VC in MVC pattern) of domain objects on the web. By convention the App class is named DomainClass+App, for example PersonApp for Person domain class!

!WebAudio commentStamp: 'janko 8/25/2012 15:00' prior: 0!
WebAudio  for HTML5 audio tag!

!WebAutocomplete2Field commentStamp: 'janko 8/25/2012 14:59' prior: 0!
WebAutocompleteField for choosing value from a dropdown choices, which are filtered while writing characters in the field. See WebDemoApp>>ajaxAutocompleteExample.

!

!WebAutocompleteField commentStamp: '<historical>' prior: 0!
WebAutocompleteField for choosing value from a dropdown choices, which are filtered while writing characters in the field. See WebDemoApp>>ajaxAutocompleteExample.

!

!WebCache commentStamp: '<historical>' prior: 0!
WebCache is Memcached-like cache to speedup serving pages which don't change too frequently. See http://www.aidaweb.si/caching.html for usage and examples.

!

!WebCacheEntry commentStamp: '<historical>' prior: 0!
WebCacheEntry instances hold cached content in WebCache.

!

!WebCaptcha commentStamp: 'janko 3/22/2008 15:26' prior: 0!
A WebCaptcha provides a CAPTCHA image from input text, to be used for separating humans from bots, for instance when submiting blog comments (http://en.wikipedia.org/wiki/Captcha)

Our capthca is using ImageMagick (http://www.imagemagick.org) which must be installed first. It combines a background image (by default captcha-background.png, must be on current directory) with generated one from provided text in default font (see method fontName, currently Andy), which also must be installed and known to ImageMagick. 

To collect all installed fonts in your system for IMagics, run script
	imagick_type_gen > ~/.magics/type.xml

See http://www.imagemagick.org/Usage/scripts/imagick_type_gen

To see and change parameters of building captcha, look into method #prepareCaptchaImage!

!WebChat commentStamp: 'janko 7/8/2011 22:07' prior: 0!
WebChat is domain object for Chat real-time web example!

!WebClipboard commentStamp: '<historical>' prior: 0!
Used for cut/copy/paste page references (not page contents!!) for easier hyperlinking of pages. Every page should have copy action. Then you can paste url to related links section in some other page.

Instance Variables:
	title	<String> title of a page
	url	<String>	url link to a page

!

!WebCommand commentStamp: '<historical>' prior: 0!
WebCommand to send commands to and from the browser via JSON
!

!WebContext commentStamp: 'janko 8/25/2012 14:57' prior: 0!
WebContext holds an execution context for a web request. Contexts can be linked in a stack like structure for tree-like control flow (like a confirmation dialog as popup of some delete action)

Instance Variables
	id		<Integer>	unique id of the context inside one App instance
	parent	<WebContext or WebApplication>	parent in context chain
	child	<WebContext> chils in context chain, if any
	form		<WebForm>	a web form with input fields of this context
	ids		<Dictionary>	 the elements which have id defined, for fast access to them from AJAX requests"
	nextId   <Integer>     number for a next element's id
!

!WebCounter commentStamp: '<historical>' prior: 0!
WebCounter for counting web requests daily and per hour. Mostly used in URLResolver for counting visits of pages.!

!WebCountry commentStamp: 'janko 8/25/2012 17:14' prior: 0!
WebCountry on class side holds a table of country names and their ISO codes
!

!WebDateInputField commentStamp: '<historical>' prior: 0!
WebDateInputField is used for entry of dates with help od JavaScript calendar (http://www.dynarch.com/projects/calendar/), from Romanian author Mihai Bazon. 
See also WebStyle calendar* methods, specially calendarCSS and calendarLang*

Usage is similar as usual input field. Example: 
	element addDateInputFieldAspect: #methodName for: self observee
 
Instance Variables:
	button	<WebImage>	
!

!WebDelayedField commentStamp: '<historical>' prior: 0!
WebDelayedField is used to delayed Ajax posting to server. It waits for delay after last key input, before it posts its contents. Ideal for live-search fields.

Use it as a normal input field, sending it #onClickPost, #onClickPostAndUdate: etc.
!

!WebDemo commentStamp: '<historical>' prior: 0!
WebDemo is a domain model part of few demos, see WebDemoApp for more

!

!WebDemoApp commentStamp: '<historical>' prior: 0!
WebDemoApp collects few demonstrations of Aida/Web in action, like examples of Ajax use etc.!

!WebDemoWidget commentStamp: 'janko 11/21/2011 17:42' prior: 0!
WebDemoWidget2 to show a hierarchy of widgets. This widget is namelly composed of two WebDemoWidget!

!WebDemoWidget2 commentStamp: 'janko 10/28/2011 13:34' prior: 0!
WebDemoWidget2 to show a hierarchy of widgets. This widget is namelly composed of two WebDemoWidget!

!WebDialog commentStamp: 'janko 7/8/2011 23:26' prior: 0!
WebDialog for different dialgos with a user, like delete confirmation ans similar. See class creation methods to create specific dialogs:

- WebDialog class>>newConfirmation 
      for simple yes/no answers to a stated question. Used mainly for confirmations of actions like delete in action methods.

For styling see and override CSS rules from DefaultWebStyle css28Dialog!

!WebEvent commentStamp: 'janko 8/25/2012 17:11' prior: 0!
WebEvent holds details of event triggered on some element of web page. It is transfered as a JSON message from the browser.

!

!WebEventHandler commentStamp: 'janko 8/25/2012 17:12' prior: 0!
WebEventHandler registers and then responds to events (like onClick) on elements of web page

!

!WebFieldSet commentStamp: '<historical>' prior: 0!
FieldSet element groups one or more input fields together. It usually (depends on style) also enclose them with border. Legend is for writing a name of the filedset on the corner!

!WebGraph commentStamp: '<historical>' prior: 0!
WebGraph for drawing graphs, on VisualWorks only, here just as an example for future porting.

For Smalltak wide use rather AidaCharts (JavaScript charting package) instead.!

!WebGrid commentStamp: '<historical>' prior: 0!
WebGrid is a powerfull widget to show tabular data, with filters, sorting, paginations and many more. See WebDemoApp>>viewGrid for examples

!

!WebGridColumn commentStamp: '<historical>' prior: 0!
WebGrid is a powerfull widget to show tabular data, with filters, sorting, paginations and many more.

!

!WebIFrame commentStamp: '<historical>' prior: 0!
WebIFrame is frame, inserted within a block of text. See IFRAME tag in HTML 4.01 spec
!

!WebInPlaceEditable2Text commentStamp: 'janko 8/25/2012 14:27' prior: 0!
WebInPlaceEditableText for editing text directly on the page, simply with a click on the text. 

Based on jQuery UI Editable (currently in development, downloaded jul12) http://wiki.jqueryui.com/w/page/12137959/Editable


See WebDemoApp>>jQueryInPlaceEditorExample for an example.
!

!WebInPlaceEditableText commentStamp: '<historical>' prior: 0!
WebInPlaceEditableText for editing text directly on the page, simply with a click on the text. See WebDemoApp>>ajaxInPlaceEditorExample for an example.!

!WebIndex commentStamp: '<historical>' prior: 0!
WebIndex is a search engine, which index words in a domain object, weightinh their importance (words in header more important etc.), then search for domain objects containing searched keywords (see also WebIndexApp).!

!WebJSON commentStamp: '<historical>' prior: 0!
WebJSON to serialize and parse in JSON format. 

	WebJSON parse: aString
	WebJSON stringify: anObject

anObject can be Collection or Dictionary, or String, Number, True, False, Undefined. Or combination of them.

Based on JSON package from SqueakSource done by Tony Garnock-Jones.!

!WebJSONPresenter commentStamp: 'janko 3/19/2012 21:02' prior: 0!
WebJSONPresenter presents a domain object in JSON format.

Domain object must implement a method #asJson. Object's URL must end with '.json' and it will automatically be directed to that presenter.

Later will be extended like WebApplication. Say for Person a PersonJson, or something like that. !

!WebLabel commentStamp: 'janko 8/25/2012 14:21' prior: 0!
WebLabel or  <label> tag defines a label for an <input> element.

The <label> element does not render as anything special for the user. However, it provides a usability improvement for mouse users, because if the user clicks on the text within the <label> element, it toggles the control.

The for attribute of the <label> tag should be equal to the id attribute of the related element to bind them together.
!

!WebLanguage commentStamp: 'janko 8/25/2012 17:14' prior: 0!
WebLanguage on class side holds a table of language names and their ISO codes

!

!WebLiveImage commentStamp: '<historical>' prior: 0!
WebLiveImage is used for live, dynamic GIF image construction.

Instance Variables:
	gif			<ByteArray>	content of image in GIF format
	refreshed	<Timestamp>	timestamp of last gif creation, used for caching algoritms

!

!WebLivePDFCreator commentStamp: '<historical>' prior: 0!
WebLivePDFCreator created PDF from HTML source together with Table of contents!! It uses external HTMLDOC converter (http://www.htmldoc.org/)
!

!WebMenu commentStamp: '<historical>' prior: 0!
WebMenu is a dropdown menu, which can select single or multiple options. Options are read from a collection, selected options are put in selected. You can set aspect of each option if options are not plain text. 

Example:

	WebMenu aspect: #name collection: self persons selected: self selectedPersons

will show dropdown menu of all persons, shown by name. Selected person will be stored in selectedPersons collection. Above menu is  single selection, it can be multiple selection too if you do:

	aWebMenu setMultiple.!

!WebMethodImage commentStamp: '<historical>' prior: 0!
This image is actually in-lined in a method, which is called on defined object and must return a ByteArray of image contents. 

Instance Variables:
	contentType	<String>	 content type of an image eg. 'image/gif', which is default.
	method	<Symbol>	symbol of a method to be called on object
	object	<Object>	object on which a method will be called

!

!WebMethodResource commentStamp: '<historical>' prior: 0!
WebMethodResource serves resources like images which are stored in plain methods (mosty from WebStyle subclasses).
!

!WebMobileApplication commentStamp: 'janko 8/25/2012 12:26' prior: 0!
WebMobileApplication to have a web app for the same domain object but tailored for mobile phones and tablets. 

Use a classical WebApplication and responsive design with a mobile CSS if your app is just a bit different (like bigger buttons etc.) on a mobile device. 

Use WebMobileApplication if mobile app is very different and tightly designed just for a mobile device, like a mobile phone.

!

!WebNonHTMLResource commentStamp: '<historical>' prior: 0!
NonHTMLResource for returning information in other formats like PDF, plain text etc.

Usage: in your view method for returning PDF as an example:

  MyApp>>viewAsPDF

	^WebNonHTMLResource forPDF: self pdf

Response will be with content type 'application/pdf', while url extension will still be .html. If you want appropriate url extension too, you need to temporary register that element in urlResolver and redirect to it.
!

!WebPage commentStamp: '<historical>' prior: 0!
WebWidget is an abstract class for statefull Aida components - standalone parts of web page, many times also long living, that is, they live longer than just one page view. 
!

!WebRawText commentStamp: '<historical>' prior: 0!
WebRawText for plain ascii text, without any encodings!!!

!WebRealtimeConnection commentStamp: 'janko 7/8/2011 23:14' prior: 0!
WebRealtimeConnection holds information about browser connection to send commands in realtime. It can be WebSocket or long-polling Comet (Ajax call which delays response until something is to send back)

Instance Variables
	type	<Symbol>	#comet or #websocket
	handler <WebRealtimeHandler>
	connection <HTTPCoonnection or WebSocketConnection>
	app	<WebAplication>	 in which App this realtime connection is open
	view	<Symbol>	on which App view
	semaphore	<Semaphore>	for long-polling Comet to wait on!

!WebRealtimeHandler commentStamp: 'janko 8/25/2012 17:12' prior: 0!
WebRealtimeHandler handles all realtime (WebSocket and Comet) channels to browser on that session"

Instance Variables
	session	<WebSession>  on which session 
	connections	<OrderedCollection>	all currently open realtime connections

!

!WebRichEditor commentStamp: '<historical>' prior: 0!
WebRichEditor is a JavaScript HTML WYSIWYG editor. Use it instead of text areas and you can rich edit your text!!

Usage:
	anElement addRichEditorAspect: #body for: myDocument!

!WebRichEditorWakeup commentStamp: '<historical>' prior: 0!
WebRichEditorWakeup is a component which speedup editing by loading all JS and other libraries for rich text editor in background. 

Add it to the end of your pages but only if user has editing rights.!

!WebRouter commentStamp: '<historical>' prior: 0!
WebRouter routes a web request to the appropriate resource (handler), which can be a domain object which is able to represent itself on the web (via URLResolver), or a static file (via FileProxy) or anything else. Router's main method is #resourceFor: aRequest, which returns a resource able to handle that request or nil in case no resource was found.

It contains an ordered collection of routes, which are checked in the sequence until response not nil.
Each route is an association of url pattern and a reference to a handler. Default route is for instance:

	'/*' -> anURLResolver

Url pattern is simply a Smalltalk #match: method criteria, matched over there relative Url of web request.

!

!WebScheduledEvent commentStamp: '<historical>' prior: 0!
WebScheduledEvent instances as entries in the WebSheduler hold blocks to run periodically or once at a scheduled time.

!

!WebScheduler commentStamp: 'janko 3/19/2012 21:25' prior: 0!
WebScheduler is a service for running scheduled events. Events can be single or periodic (daily, hourly, ...).
When event is triggered, its block is executed in a separate low priority process. Scheduler time resolution is 1 second. 

Example of periodic event:
	self site scheduler everyHourAt: 30 "minutes" runBlock: [Trascript show: 'half a hour!!].

Instance Variables:
	site		<anAIDASite>	
	queue	<OrderedCollection>	queue of events, waiting for execution
	loop	<Process>		loop process, every second looks into queue to run an event
	mutex	<AidaMutex>   to protect queue operations

!

!WebSecurityManager commentStamp: '<historical>' prior: 0!
WebSecurityManager for user and group management, authentication and access control in web Apps. See WebSecurityManagerApp for setup security on the site.!

!WebSession commentStamp: '<historical>' prior: 0!
WebSession hold user's session with all appropriate data on this website. It also hold an application state (instances of App classes) which belong to that session. Session can be anonymous (of special user Guest) or logged-in. !

!WebSessionManager commentStamp: '<historical>' prior: 0!
WebSessionManager manages all sessions on this website. It creates a new session if needed or finds existing one from a web request. There are also methods for releasing nonactive (more that an hour without activity) or guest sessions, and to release session application state (instances of App classes)
!

!WebSiteOwnerRole commentStamp: '<historical>' prior: 0!
WebSiteOwnerRole for a person owning certain website!

!WebStaticServer commentStamp: '<historical>' prior: 0!
WebStaticServer serves static content from files. It holds a dictionary of urls and FileProxies, for each file one.!

!WebStatistics commentStamp: '<historical>' prior: 0!
WebStatistics to collect few statistical data (like referers). This is in addition to counters in URLResolver.  See also WebStatisticsApp for reporting the stats with numbers and graphs.

!

!WebStubElement commentStamp: 'jm 8/21/2009 19:45' prior: 0!
WebStubElement is an element which will be replaced with a real one after Ajax update

Example:
	u := WebStubElement newFor: #ajaxShowElement.
	(e addNilLinkText: 'update') onClickUpdate: u.
	e add: u.
	
This will show the element at the click to link by updating the empty stub element.!

!WebStyle commentStamp: '<historical>' prior: 0!
WebStyle is abstract class for subclasses containing styling for websites (CSS, page layouts etc.)!

!WebTabs commentStamp: '<historical>' prior: 0!
WebTabs are visual selection tool. selected tab is in front, others are back and have url links.
By default an instance have CSS class 'webtabs' and selected tab 'webtabselected"

Usage:
	self addTextBold: 'Selected without link. 
	self addLinkTo: someObject text: 'not-selected with link' view: #view.
	self selected: 1.


Instance Variables:
	selected	<Integer>	which tab is selected. By default is first.

!

!WebTransactionMonitor commentStamp: '<historical>' prior: 0!
WebTransactionMonitor is used for coordinating transactions on databases like Gemstone.
!

!WebTranslDict commentStamp: '<historical>' prior: 0!
WebTranslDict is a dictionary holding the last level in WebTranslator cache. Special dictionary is needed to catch the changes when doing translations by translation tools and storing them back to appropriate class translation methods.!

!WebTranslator commentStamp: 'jm 6/27/2009 20:07' prior: 0!
WebTranslator offers a translation support to web apps. Apps on class side hold translations of the text. WebTranslator is then called by executing app to find a proper translation for each text, if it is used as in this example:

	e addText: #fr->'Bonjour'!

!WebUser commentStamp: '<historical>' prior: 0!
WebUser is the user on our website. This class holds basic user data, address, login history, etc. It can also have user specific data in #otherValues instvar. There are few predefined users like Guest (anymone not logged in), Admin (have access to everything, kind of 'root' user) and Extranet (not used much yet).!

!WebUserGroup commentStamp: '<historical>' prior: 0!
WebUserGroup is a part of user and group management. Groups are then used for security management like access control. There are predefined groups All Users, Administrators, Registered Users, Users waiting activation. To manage groups and their membership see WebSecurityManagerApp!

!WebUserRole commentStamp: '<historical>' prior: 0!
WebUserRole for a person being an user registered on certain website
!

!WebValidationError commentStamp: '<historical>' prior: 0!
WebValidationError shows the error message in case of verification failure of input values in form elements

Instance Variables:
	origin	<WebFormElement>	should reply to #errorText 

!

!WebVideo commentStamp: 'janko 8/25/2012 12:10' prior: 0!
WebVideo for HTML5 video tag!

!WebWidget commentStamp: '<historical>' prior: 0!
WebWidget is an abstract class for statefull Aida components - standalone parts of web page, many times also long living, that is, they live longer than just one page view. 
!

!WebWindow commentStamp: '<historical>' prior: 0!
WebWindow is a window (a web page or window inside a page).
!

!AIDAModelAdaptorTest methodsFor: 'testing'!
testSanitizer
	| adaptor |
	adaptor := AidaModelAdaptor new.
	adaptor buffer: '< script id="id15">'.
	self assert: (adaptor sanitize; buffer) = '<  id="id15">'.
	adaptor buffer: '<img src=""/a.jpg<script type=text/javascript src="http://1.2.3.4/xss.js">" /></script>'.
	self assert: (adaptor sanitize; buffer) = '<img src=""/a.jpg< type=text/java src="http://1.2.3.4/xss.js">" /></>'.
	adaptor buffer: 'script for javascript<script>'.
	self assert: (adaptor sanitize; buffer) = 'script for javascript<>'.
	adaptor buffer: 'a < b. /* in script */ '.
	self assert: (adaptor sanitize; buffer) = 'a < b. /* in  */ '. " this is not ok!! "! !

!AIDASite methodsFor: 'private-serving'!
activityAnnouncers
	"whom to announce activity on that site. A dictionary with an app as key, another
	dict with element id as key and a block to execute"
	^self otherAt: #activityAnnouncers ifAbsent: [self initActivityAnnouncers]! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
addAllowHeaderTo: aHTTPResponse
	| methods |
	methods := 'OPTIONS,GET,HEAD,POST,DELETE,TRACE,'.
	methods := methods, 'PROPFIND,PROPPATCH,MKCOL,PUT,COPY,MOVE,LOCK,UNLOCK'.
	aHTTPResponse addHeaderName: 'Allow' value: methods! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/8/07 09:38'!
addDontCacheHeaderTo: aHTTPResponse forPage: aWebPage
	| object value |
	object := aWebPage isWebApplication ifTrue: [aWebPage observee] ifFalse: [aWebPage].
	value := object aidaDontCache.
	value ifFalse: [value := aWebPage aidaDontCache]. "WebApp subclass can set it too!! "
	value ifTrue: [aHTTPResponse cacheControl: 'no-store, no-cache, must-revalidate'].! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/8/07 09:38'!
addExpiresHeaderTo: aHTTPResponse forPage: aWebPage
	| object value |
	object := aWebPage isWebApplication ifTrue: [aWebPage observee] ifFalse: [aWebPage].
	value := object expiresTimestamp.
	value isNil ifTrue: [value := aWebPage expiresTimestamp]. "WebApp subclass can set it too!! "
	value notNil ifTrue: [aHTTPResponse expires: value asSpTimestamp].! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/8/07 09:38'!
addModifiedHeaderTo: aHTTPResponse forPage: aWebPage
	| object value |
	object := aWebPage isWebApplication ifTrue: [aWebPage observee] ifFalse: [aWebPage].
	value := object modifiedTimestamp.
	value isNil ifTrue: [value := aWebPage modifiedTimestamp]. "WebApp subclass can set it too!! "
	value notNil ifTrue: [aHTTPResponse lastModified: value asSpTimestamp].! !

!AIDASite methodsFor: 'private-serving'!
addResponseHeadersTo: aHTTPResponse forPage: aWebPage on: aWebSession
	"use observee in app to find timestamps, because observee points 
	to right version of an object!! "
	| object |
	object := aWebPage isWebApplication ifTrue: [aWebPage observee] ifFalse: [aWebPage].
	aHTTPResponse contentType: object aidaContentType.
	self addModifiedHeaderTo: aHTTPResponse forPage: aWebPage.
	self addExpiresHeaderTo: aHTTPResponse forPage: aWebPage.
	self addDontCacheHeaderTo: aHTTPResponse forPage: aWebPage.
"	self addUACompatibleHeaderTo: aHTTPResponse." "for stupid IE8 to avoid manual checking Compatibility view"
	aWebSession cookie ifFalse: 
		[aHTTPResponse cookie: (self cookieHeaderFor: aWebSession)].! !

!AIDASite methodsFor: 'system services' stamp: 'np 3/16/2009 12:30'!
addSystemService: aServiceObject named: aSymbol 
	"add a new system service (e.g URLResolver) to the dictionary of services"
	^self systemServices
		at: aSymbol asSymbol put: aServiceObject! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addToRunningHistoryCrashed: aBoolean
	"Call it at server startup (in setStartedTimestamp). It reads old timestamps (started and
	last alive) and add it to the history" 
	| array |
	array := Array new: 3.
	array
		at: 1 put: self startedTimestamp asSeconds;
		at: 2 put: self lastTimeAliveTimestamp asSeconds;
		at: 3 put: aBoolean.  "true if server crashed"
	self runningHistoryCollection add: array.! !

!AIDASite methodsFor: 'private-serving'!
addUACompatibleHeaderTo: aHTTPResponse
	"For stupid Microsoft's IE8 to avoid users manually check Page->Compatibility view"
	aHTTPResponse addHeaderName: 'X-UA-Compatible' value: 'IE=EmulateIE7'! !

!AIDASite methodsFor: 'user services'!
addUserService: aServiceObject named: aSymbol 
	"add a new user service (e.g WebIndex) to the dictionary of services"
	self userServices
		at: aSymbol asSymbol put: aServiceObject! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
addressTextFor: anIPAddress

	^((anIPAddress hostAddress at: 1) printString, '.',
	(anIPAddress hostAddress at: 2) printString, '.',
	(anIPAddress hostAddress at: 3) printString, '.',
	(anIPAddress hostAddress at: 4) printString)! !

!AIDASite methodsFor: 'system services'!
admin
	^self systemServices 
		at: #Admin
		ifAbsent: 
			[self addSystemService: (WebAdmin new) named: #Admin.
			self register: self admin onUrl: '/admin'.
			^self admin].! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 6/13/2007 15:54'!
afterLogin
	"url of a page to jump after login or #lastPage to back to last page before logout"

	^self settings at: #afterLogin ifAbsentPut: [#lastPage]. "back to last page before logout"! !

!AIDASite methodsFor: 'settings'!
afterLogin: aStringOrSymbol
	"1. url of page to jump"
	"2. #lastPage - back to a page before logout"
	"3. #myPage - to user's personal page, if exists"
	((aStringOrSymbol isKindOf: String) not and: 
		[(#(#lastPage #myPage) includes: aStringOrSymbol) not])
			ifTrue: [self error: 'wrong login argument'].
	self settings  at: #afterLogin put: aStringOrSymbol! !

!AIDASite methodsFor: 'statistics-counters'!
allPages
	"all page requests from the server creation until now"
	^self pagesCounter total! !

!AIDASite methodsFor: 'statistics-counters'!
allPagesThisMonth
	"all page requests in current month"
	^self pagesCounter countsOnMonth: SpDate today monthIndex year: SpDate today year! !

!AIDASite methodsFor: 'statistics-counters'!
allPagesThisWeek
	"all page requests in current week"
	^self pagesCounter currentWeekCounts
		inject: 0 into: [:sum :each | sum + each]! !

!AIDASite methodsFor: 'statistics-counters'!
allPagesToday
	^self pagesCounter countsOnDate: SpDate today! !

!AIDASite methodsFor: 'statistics-counters'!
allPagesYesterday
	^self pagesCounter countsOnDate: (SpDate today subtractDays: 1)! !

!AIDASite methodsFor: 'private-serving'!
announceActivity
	"announce only if more than a second from last announcement"
	(self lastRequestTimestamp notNil and:
		[self lastRequestTimestamp asSeconds = SpTimestamp now asSeconds]) ifTrue: [^nil]. 
	self activityAnnouncers associations do: [:assoc |
		assoc key "app" isActive 
			ifTrue: [assoc value values do: [:block | block value] ]
			ifFalse: [self activityAnnouncers removeKey: assoc key] ] "auto cleanup of released application state"! !

!AIDASite methodsFor: 'serving' stamp: 'mivsek 8/22/2007 11:08'!
answer: anObject to: aRequest on: aWebSession
	aRequest isGet | aRequest isPost | aRequest isHead
		ifTrue: [^self answer: anObject toGetOrPost: aRequest on: aWebSession].
	aRequest isOptions ifTrue: [^self answer: anObject toOptions: aRequest on: aWebSession].
	aRequest isPropFind ifTrue: [^self answer: anObject toPropFind: aRequest on: aWebSession].
	aRequest isLock ifTrue: [^self answer: anObject toLock: aRequest on: aWebSession].
	aRequest isUnlock ifTrue: [^self answer: anObject toUnlock: aRequest on: aWebSession].
	aRequest isPut ifTrue: [^self answer: anObject toPut: aRequest on: aWebSession].
	^HTTPException notImplemented! !

!AIDASite methodsFor: 'serving' stamp: 'janko 4/25/2012 11:15'!
answer: anObject toGetOrPost: aRequest on: aWebSession
	| presenter stream response properContent |
	(self cache isCached: anObject to: aRequest on: aWebSession)
		ifTrue: [^self cache respond: anObject to: aRequest on: aWebSession].
	[presenter := anObject aidaPresenterFor: aRequest on: aWebSession]
		ifCurtailed: [self finalizeExecutingRequest: aRequest].
	presenter isNil ifTrue:   "not found"
		[aWebSession removeIfNewGuest. ^HTTPException notFound].
	aWebSession isHttpAuthenticationNeeded "because of logout" ifTrue:  [^self unauthorizedResponse].
	aWebSession shouldRedirect ifTrue: [^self redirectOn: aWebSession].
	self log: 'h'.
	presenter aidaIsRespondingStreamed
		ifTrue: 
			[ [presenter streamHtmlTo: nil "not needed" for: aRequest on: aWebSession]
				ensure: [self finalizeExecutingRequest: aRequest].
			self log: ' done'.
			^aRequest streamedResponse]
		ifFalse: 
			[response := HTTPResponse ok.
			aRequest task response: response.
			self addResponseHeadersTo: response forPage: presenter on: aWebSession.
			stream := WriteStream on: (String new: 10000).
			[presenter streamHtmlTo: stream for: aRequest on: aWebSession]
				ensure: [self finalizeExecutingRequest: aRequest].
			properContent := (AIDASite properArray: stream contents). "in case of TwoByteString"
			response entity: properContent. 
			(self cache shouldCache: anObject to: aRequest on: aWebSession)
				ifTrue: [self cache store: properContent for: anObject to: aRequest on: aWebSession].
			self log: ' done'.
			^response]! !

!AIDASite methodsFor: 'serving' stamp: ' 21/4/07 22:07'!
answer: anObject toLock: aRequest on: aWebSession
	"WebDAV lock request for that object"
	|  rsp |
	"Temporary!!!! just return a fake lock!!"
	rsp := Swazoo.HTTPLockResponse new.
	rsp start.
	rsp addTagName: 'locktype' value: #write.
	rsp addTagName: 'lockscope' value: #exclusive.
	rsp addTagName: 'depth' value: '0'.
	rsp addLockOwner: 'Administrator'.
	rsp addTagName: 'timeout' value: 'Second-604800'.  "one week, temporary!!"
	rsp addLockToken: 'opaquelocktoken:89001c0a-23f2-0310-b37d-c58bc335a1ff'.
	^rsp! !

!AIDASite methodsFor: 'serving' stamp: ' 21/4/07 22:07'!
answer: anObject toOptions: aRequest on: aWebSession
	| response |
	response := Swazoo.HTTPResponse ok.
	self isWebDAVEnabled ifTrue: 
	 	[response addHeaderName: 'DAV' value: '1,2'.
		"without following header Windows refuse to add new Web folder!! "
		response addHeaderName: 'MS-Author-Via' value: 'DAV'].
	self addAllowHeaderTo: response.
	^response! !

!AIDASite methodsFor: 'serving' stamp: ' 21/4/07 22:07'!
answer: anObject toPropFind: aRequest on: aWebSession
	"WebDAV properties request from object"
	|  multiResponse |
	"Temporary!!!! Now it just return empty collection, which is enough for MS web folders to add new!! "
	multiResponse := Swazoo.HTTPPropFindResponse new.
	multiResponse multiStart.
	multiResponse startResponseFor: aRequest uri value.
	multiResponse addPropertyName: 'getlastmodified' value: 'Mon, 21 Feb 2005 14:11:01 GMT'.
	aRequest uri value last = $/ ifTrue: "directory"
		[multiResponse addPropertyName: 'resourcetype' value: #collection].
	multiResponse endResponseWithStatusCode: 200.
	multiResponse multiEnd.
	^multiResponse! !

!AIDASite methodsFor: 'serving' stamp: ' 21/4/07 22:07'!
answer: anObject toPut: aRequest on: aWebSession
	"WebDAV: try to PUT content into that object"
	(anObject isKindOf: FileProxy) ifFalse: [^HTTPException forbidden].
	anObject put: aRequest putData.
	^HTTPResponse ok! !

!AIDASite methodsFor: 'serving' stamp: 'JM 4/21/2007 22:20'!
answer: anObject toUnlock: aRequest on: aWebSession
	"WebDAV unlock request for that object"
	^HTTPResponse noContent. "204"! !

!AIDASite methodsFor: 'serving' stamp: 'janko 8/25/2012 15:18'!
answerTo: aRequest 
	"Squeak specific!! "
	| session object errorResponse |
	[self logRequest: aRequest.
	aRequest isPing ifTrue: [^HTTPResponse ok].  "/ping.html for monitoring the site"
	session := self sessionManager findOrCreateSessionFor: aRequest.
	aRequest session: session.
	session isHttpAuthenticationNeeded ifTrue: [session authenticateFrom: aRequest].
	session isHttpAuthenticationNeeded "still" ifTrue: [^self unauthorizedResponse].
	self shouldRedirect ifTrue: [^self redirectToOtherHost: aRequest on: session].
	self log: 'p'.
	object := self router resourceFor: aRequest.  "routes to a resource able to handle this request"
	self countRequest: aRequest onObject: object.
	object isNil 
		ifTrue: [session removeIfNewGuest. ^HTTPResponse notFound].
	^self answer: object to: aRequest on: session] 
		on: Error, Exception
		do: [:exception |                      
			self halt.
			exception class == HTTPException ifTrue: [^exception response].
			exception class == SpSocketError 
				ifTrue: [self reportSocketError: exception request: aRequest] "temporary"
				ifFalse:
					["self reportException: exception. " "temporary off, no gain to report to Transcript!!"
					exception defaultAction]. 
			errorResponse := self httpResponseOnException: exception.
			HTTPException raiseResponse: errorResponse.
			^errorResponse].! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
authenticationScheme
	"#Basic or #Digest, see rfc2617. Digest is recomended because password
	goes encrypted to server"
	self securityManager hasHttpBasicAuthenticationScheme ifTrue: [^#Basic].
	self securityManager hasHttpDigestAuthenticationScheme ifTrue: [^#Digest].
	^#None! !

!AIDASite methodsFor: 'system services'!
authenticator
	"a plugable authentication of users during login"
	^self systemServices 
		at: #Authenticator
		ifAbsent: [self setDefaultAuthenticator].! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:48'!
autoLogout
	"logout after 15min of inactivity. default is NO!! "
	^self settings at: #AutoLogout ifAbsent: [false]! !

!AIDASite methodsFor: 'settings'!
autoLogout: aBoolean
	"logout after 15min of inactivity"
	(aBoolean isKindOf: Boolean) ifFalse: [self error: 'wrong argument'].
	^self settings at: #AutoLogout put: aBoolean! !

!AIDASite methodsFor: 'statistics' stamp: 'JM 4/26/2007 19:58'!
availability
	"return server availability from first run in %"
	"AIDASite default availability"
	| uptime downtime |
	uptime := self totalUptime.
	downtime := self totalDowntime.
	^((uptime / ((uptime + downtime) max: 1)) * 100) asScaledDecimal: 2! !

!AIDASite methodsFor: 'private-backup/restore' stamp: 'np 1/15/2008 20:48'!
backupToFile
	"file out all object tree to file aidasite-<sitename>.obj"
	"(AIDASite named: 'biart') backupToFile"
	"(AIDASite named: 'biart') deepSearchOfClass: 'ObsoleteIntranet'"
	"(AIDASite named: 'biart') deepSearchOfObsoleteClasses"
	| filename fileDir |
	filename := 'aidasite-', self name, '.obj'.
	fileDir := FileDirectory forFileName: filename.
	(fileDir fileExists: filename) ifTrue: 
		[fileDir copyFileWithoutOverwriteConfirmationNamed: filename toFileNamed: ('aidasite-', self name, '-old.obj')].
	(FileStream fileNamed: filename)
		fileOutClass: nil andObject: self! !

!AIDASite methodsFor: 'system services' stamp: 'np 3/16/2009 12:32'!
cache
	"a global cache of presentations of domain objects, if they are cached"
	^self systemServices 
		at: #Cache
		ifAbsent: [self addSystemService: (WebCache newOn: self) named: #Cache].! !

!AIDASite methodsFor: 'settings'!
cometEnabled
	"Is long-polling Comet enabled? By default no"
	^self settings at: #CometEnabled ifAbsent: [false]! !

!AIDASite methodsFor: 'settings'!
cometEnabled: aBoolean
	"Is long-polling Comet enabled? By default no"
	^self settings at: #CometEnabled put: aBoolean! !

!AIDASite methodsFor: 'settings'!
contextProcesses
	"if true, web contexts execute POSTs and Ajax requests in a separate process, to enable tree-like control flow"
	^self settings at: #contextProcesses ifAbsentPut: [false].! !

!AIDASite methodsFor: 'settings'!
contextProcesses: aBoolean
	"if true, web contexts execute POSTs and Ajax requests in a separate process, to enable tree-like control flow"
	(aBoolean isKindOf: Boolean) ifFalse: [self error: 'wrong argument'].
	self settings  at: #contextProcesses put: aBoolean.! !

!AIDASite methodsFor: 'private-serving'!
cookieHeaderFor: aSession 
	"set a permanent cookie on client (up to year 2020, enough?) "
	"for secure sessions different id as for usual !! "
	| id |
	id := (aSession lastRequest notNil and: [aSession lastRequest isEncrypted])
		ifTrue: [aSession secureId] ifFalse: [aSession id].
	^(WriteStream on: String new)
		nextPutAll: self cookieName;
		nextPutAll: '=';
		nextPutAll: id printString;
		nextPutAll: '; path=/; expires=Friday, 01-Jan-2020 01:00:00 GMT; HttpOnly'; 
			"HttpOnly to prevent session hijacking by malicious JS scripts like in XSS attacs"
		contents! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
cookieName
	"this is the name for our cookie. It shold be unique, so it is a bit strange"
	^'aida9357'! !

!AIDASite methodsFor: 'private-counters' stamp: 'janko 8/19/2011 22:18'!
countRequest: aRequest  onObject: anObject
	self announceActivity. "must be before setting last request timestamp!!"
	self setLastRequestTimestamp.
	aRequest session shouldCountRequests ifFalse: [^nil].    "to skip admin requests etc."
	anObject class == WebSession ifTrue: [^nil]. "don't count ajax and websocket requests"
	anObject notNil 
		ifTrue: 
			[self urlResolver incCounterFor: anObject.
			self incRequestCounterFor: anObject]
		ifFalse: 
			[self incNotFoundCounter.
			self log: ' not found: ', aRequest uriString, ' '.
			^nil ].
	self statistics collectStatsFrom: aRequest.
	^anObject! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
counters

	counters isNil ifTrue: [self initCounters].
	^counters

"WebServer default counters"! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
countingPolicy
	^self settings at: #countingPolicy ifAbsentPut: [#all].! !

!AIDASite methodsFor: 'settings'!
countingPolicy: aSymbol
	"from who to count requests with WebCounters: #all, #excludeAdmins, #onlyGuests, #none"
	(#(#all, #excludeAdmins, #onlyGuests, #none) includes: aSymbol) 
		ifFalse: [self error: 'unknown policy'].
	self settings  at: #countingPolicy put: aSymbol! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
cr
	^String with: Character cr! !

!AIDASite methodsFor: 'statistics'!
createdDate
	"date of  server creation"
	^self createdTimestamp notNil 
		ifTrue: [self createdTimestamp asDate] 
		ifFalse: [nil]! !

!AIDASite methodsFor: 'statistics'!
createdDateText
	"date of  server creation"
	^self createdDate notNil 
		ifTrue: [self createdDate shorterPrintSloString] 
		ifFalse: ['']! !

!AIDASite methodsFor: 'statistics' stamp: 'JM 4/26/2007 19:44'!
createdTimestamp
	"time and date of  server creation"
	^SpTimestamp fromSeconds:
		(self timestamps at: #Created ifAbsentPut: [SpTimestamp now asSeconds])! !

!AIDASite methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
critical: aBlock

	"For protecting critical sections in parallel execution of web requests. Use it always
	when you do things, which cannot be disturbed by another request. Exmaple:
		aServer critical: [<a block with critical section>]. "

	^WebTransactionMonitor critical: aBlock! !

!AIDASite methodsFor: 'settings-directories'!
defaultHelpDirectory
	^self defaultHomeDirectory, (SpEnvironment onWindows ifTrue: ['\'] ifFalse: ['/']), 'help'! !

!AIDASite methodsFor: 'settings-directories'!
defaultHomeDirectory
	"where the image started, but depending on Unix or Win style"
	^(SpEnvironment onWindows ifTrue: ['.\'] ifFalse: ['./'])! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:50'!
defaultLanguage
	"ISO 639 2-letter language code symbol for default language of that site"
	^self settings at: #defaultLanguage ifAbsentPut: [#en].! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:50'!
defaultLanguage: aLanguageCodeSymbol
	"ISO 639 2-letter language code symbol for default language of that site"
	^self settings at: #defaultLanguage put: aLanguageCodeSymbol! !

!AIDASite methodsFor: 'user services'!
demo
	^self userServices at: #WebDemo
		ifAbsent: 
			[self addUserService: WebDemo new named: #WebDemo.
			self register: self demo onUrl: '/demos'.
			^self demo]! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
diagnostics

	"if true, diagnostic messages are written on transcript for every web request"
	^self settings  at: #diagnostics ifAbsentPut: [true].! !

!AIDASite methodsFor: 'settings'!
diagnostics: aBoolean
	"if true, diagnostic messages are written on transcript for every web request"
	(aBoolean isKindOf: Boolean) ifFalse: [self error: 'wrong argument'].
	self settings  at: #diagnostics put: aBoolean.! !

!AIDASite methodsFor: 'start/stop'!
disable
	"this site is disabled and stopped, if not yet before. This site won't be started with SwazooServer start"
	self stop.
	self sessionManager
		removeGuestSessions;
		releaseApplicationState.
	^super disable! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
disableWebDAVSupport
	"Web Distributed Authoring and Versioning (WebDAV, www.webdav.org) is disabled on this site"
	"AIDASite default disableWebDAVSupport"
	self settings at: #WebDAVEnabled put: false! !

!AIDASite methodsFor: 'start/stop'!
enable
	"this site is enabled and can be started. Only enabled sites are started with SwazooServer start"
	^super enable! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
enableWebDAVSupport
	"Web Distributed Authoring and Versioning (WebDAV, www.webdav.org) is enabled on this site"
	"AIDASite default enableWebDAVSupport"
	self settings at: #WebDAVEnabled put: true! !

!AIDASite methodsFor: 'system services' stamp: 'janko 4/20/2012 17:13'!
federatedAuthenticator
	"a federated plugable authentication (OpenID) of users during login. It can be used in 
	parallel with #authenticator"
	^self systemServices 
		at: #FederatedAuthenticator
		ifAbsent: [self setDefaultFederatedAuthenticator]. "OpenID"! !

!AIDASite methodsFor: 'system services'!
federatedAuthorizator
	"a federated plugable authorization support (OAuth)r"
	^self systemServices 
		at: #FederatedAuthorizator
		ifAbsent: [self setDefaultFederatedAuthorizator]. "OAuth, including in URLResolver on /authorizator"! !

!AIDASite methodsFor: 'private-serving'!
finalizeExecutingRequest: aRequest
	"do all necessary cleanup in execution context"
	aRequest context isNil ifTrue: [^nil].
	aRequest context finalizeExecutionOf: aRequest! !

!AIDASite methodsFor: 'system services'!
help
	^self systemServices 
		at: #Help
		ifAbsent: 
			[self addSystemService: (WebHelp new) named: #Help.
			self register: self help onUrl: '/help'.
			^self help].! !

!AIDASite methodsFor: 'settings-directories'!
helpDirectory
	" a directory, where help html dokuments are stored. See WebApplication help pages category for 
 	details"
	^self settings  at: #helpDirectory ifAbsentPut: [self defaultHelpDirectory]! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
helpDirectory: aString
	" a directory, where help html dokuments are stored. See WebApplication help pages category for 
 	details"
	self settings  at: #helpDirectory put: aString.! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
helpResolve: aResolution 
	(self canAnswer and: [aResolution siteMatch: self]) ifFalse: [^nil].
	^self answerTo: aResolution request! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
helpURL

	^self settings  at: #helpURL ifAbsent: [^'']! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
helpURL: aString
	self settings at: #helpURL put: aString.! !

!AIDASite methodsFor: 'settings-directories'!
homeDirectory

	^self settings  at: #homeDirectory ifAbsentPut: [self defaultHomeDirectory]! !

!AIDASite methodsFor: 'settings-directories'!
homeDirectory: aString
	" a directory, which is the root for static content like static html dokuments"
	self settings  at: #homeDirectory put: aString.! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
hourlyStatsProcess

	"hourly report to transcript"
	"WebServer default hourlyStatsProcess"
	| hits pages new returning afterHits afterPages afterNew afterReturning |
	[
		hits := self totalCounter total.
		pages := self pagesCounter total.
		new :=	self newVisitorsCounter total.
		returning := self returningVisitorsCounter total.
		(Delay forSeconds: self secondsToHour) wait.
		[self isServing] whileTrue: 
			[afterHits := self totalCounter total.
			afterPages := self pagesCounter total.
			afterNew := self newVisitorsCounter total.
			afterReturning := self returningVisitorsCounter total.
			Transcript cr; show: '***'; cr; show:
				'***  ',  self name, ' ', 
				Time now hours printString, ':', Time now minutes printString, ' ',
				'    last hour hits: ', (afterHits - hits) printDotString, 
				'    pages: ', (afterPages - pages) printDotString, 
				'    visitors new: ', (afterNew - new) printDotString, 
				'    returning: ', (afterReturning - returning) printDotString;
				cr; show: '***'.
			self registerTopHourHits: (afterHits - hits) pages: (afterPages - pages).
			hits := afterHits. pages := afterPages.
			new := afterNew. returning := afterReturning.
			(Delay forSeconds: self secondsToHour) wait].
	] fork.! !

!AIDASite methodsFor: 'private-serving'!
httpResponseOnException: anException
	| response |
	response := HTTPResponse internalServerError.
	response entity: '
<HTML>
<HEAD><TITLE>', response statusText, '</TITLE></HEAD>
  <BODY>
   <H2>', response statusLine, '</H2>
   <P>The server experienced an error while processing this request. <BR>
   If this problem persists, please contact the webmaster.</P>
  <P>Error description:</P>
  <P>', anException messageText, '</P>
  <P>Stack:</P>
  <P>', 
	((DebuggerService shortStackFor: anException initialContext ofSize: 30
		"on: Error do: [:ex | ex messageText]")
			copyReplaceAll: (String with: Character cr) with: '<BR>')
, '</P>
  </BODY>
</HTML>'.
	^response! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
incNotFoundCounter

	"call this after each request is processed"


	self critical:
		[self notFoundCounter incCounter].! !

!AIDASite methodsFor: 'private-counters'!
incRequestCounterFor: anObject
	"call this after each request is processed"
	self critical:
		[self totalCounter incCounter.
		(anObject aidaContentType = 'text/html') 
			ifTrue: [self pagesCounter incCounter] ].! !

!AIDASite methodsFor: 'user services'!
index
	^self userServices 
		at: #WebIndex
		ifAbsent: 
			[self addUserService: WebIndex new named: #WebIndex.
			self register: self index onUrl: '/search'.
			^self index].! !

!AIDASite methodsFor: 'initialize-release'!
initActivityAnnouncers
	"whom to announce activity on that site. A dictionary with an app as key, another
	dict with element id as key and a block to execute"
	^self otherAt: #activityAnnouncers put: Dictionary new! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
initCounters
	"counters of web requests: total and by year/day of year"
	self critical: 
		[counters := IdentityDictionary new.
		self pagesCounter.
		self totalCounter.
		self newVisitorsCounter.
		self returningVisitorsCounter.
		self notFoundCounter].

"WebServer default initCounters"! !

!AIDASite methodsFor: 'initialize-release'!
initDefaultSettings

	self host: 'newsite' ip: '127.0.0.1'  port: 8888.  "this is usable for tests only"
"	self homeDirectory: self defaultHomeDirectory. " "rather lazy init, because of platform issues"
"	self helpDirectory: self defaultHelpDirectory. " "rather lazy init, because of platform issues"
	self helpURL: '/help'.
	self styleClass: 'DefaultWebStyle'.
	self diagnostics: false.
	self loggingPolicy: #none.
	self countingPolicy: #all.
	self smtpServer: self ip.
	self urgentNotificationEMail: 'info@eranova.si'.! !

!AIDASite methodsFor: 'initialize-release'!
initDemoOnRootUrl
	"(AIDASite named: 'aidademo') initDemoOnRootUrl."
	self register: self demo onUrl: '/'.! !

!AIDASite methodsFor: 'initialize-release'!
initFavicon
	"/favicon.ico, a small icon shown in browser near url address"
	"(AIDASite named: 'biart') initFavicon."
	| icon |
	icon := WebMethodImage
		initCache; 
		fromMethod: #favicon on: self style contentType: 'image/x-icon' site: self.
	self register: icon onUrl: '/favicon.ico'.! !

!AIDASite methodsFor: 'initialize-release'!
initHourlySnapshot
	"For default image based persistency"
	(self scheduler isScheduledBlock: [AIDASite preImageSnapshot; imageSnapshot]) "schedule only once!!"
		ifTrue: [^nil]. 
	self scheduler
		everyHourAt: 0 
		runBlock: [AIDASite preImageSnapshot; imageSnapshot]! !

!AIDASite methodsFor: 'initialize-release'!
initNightlyCleanup
	"releasing session application state and other cleanup every night at 4:00"
	(self scheduler isScheduledBlock: [self nightlyCleanup]) ifTrue: [^nil]. "schedule only once!!"
	self scheduler
		everyDayAt: 4 
		runBlock:  [self nightlyCleanup]! !

!AIDASite methodsFor: 'initialize-release'!
initOther
	other := Dictionary new! !

!AIDASite methodsFor: 'initialize-release'!
initScheduledTasks
	self initHourlySnapshot.
	self initNightlyCleanup.! !

!AIDASite methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTimestamps
	timestamps := IdentityDictionary new.
	self setLastTimeAliveTimestamp.
	self setCreatedTimestamp.

"WebServer default initTimestamps"! !

!AIDASite methodsFor: 'initialize-release'!
initialize
	super initialize.
	WebTransactionMonitor addServer: self.
	self initDefaultSettings.
	self initDemoOnRootUrl. 
	self initFavicon.
	self initScheduledTasks.
	WebTransactionMonitor commit.! !

!AIDASite methodsFor: 'statistics'!
isActive
	"there was some activity (requests served) on this site in last hour"
	self lastRequestTimestamp isNil ifTrue: [^false].
	^self lastRequestTimestamp asSeconds > (SpTimestamp now asSeconds - 3600)! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
isWebDAVEnabled
	"Is Web Distributed Authoring and Versioning (WebDAV, www.webdav.org) ienabled on this site"
		^(self settings includesKey: #WebDAVEnabled)
			 and: [self settings includesKey: #WebDAVEnabled]! !

!AIDASite methodsFor: 'settings' stamp: 'janko 11/24/2008 21:59'!
keywords
	"global keywords, added to all webpages generated on this site"
	^self settings  at: #keywords ifAbsent: ''
! !

!AIDASite methodsFor: 'settings' stamp: 'janko 11/24/2008 21:25'!
keywords: aString
	"global keywords, added to all webpages generated on this site"
	self settings  at: #keywords put: aString.
! !

!AIDASite methodsFor: 'statistics' stamp: 'jm 8/3/2010 10:06'!
lastCommitTimestamp
	"time and date of last commit to the database. If noone yet, return nil"
	^SpTimestamp fromSeconds: (self timestamps at: #LastCommit ifAbsent: [^nil])! !

!AIDASite methodsFor: 'statistics' stamp: 'jm 8/3/2010 10:06'!
lastRequestTimestamp
	"time and date of last web request. If noone yet, return nil"
	^SpTimestamp fromSeconds: (self timestamps at: #LastRequest ifAbsent: [^nil])! !

!AIDASite methodsFor: 'statistics'!
lastRequestTimestampText
	"time and date of last web request"
	^self lastRequestTimestamp notNil 
		ifTrue: [self lastRequestTimestamp asDate shorterPrintSloString, ' ',
			self lastRequestTimestamp asTime printSloString] 
		ifFalse: ['']! !

!AIDASite methodsFor: 'statistics' stamp: 'JM 4/25/2007 21:09'!
lastTimeAliveTimestamp
	"lastTimeAliveThread writes to timestamps every minute and commit. 
	Used in case of crash to determine, when a server was last time alive 
	and worked properly"
	^SpTimestamp fromSeconds: 
		(self timestamps at: #LastTimeAlive ifAbsentPut: [SpTimestamp now asSeconds])! !

!AIDASite methodsFor: 'private-serving'!
log: aString
	self diagnostics ifTrue: [Transcript show: aString].! !

!AIDASite methodsFor: 'private-serving'!
logRequest: aRequest
	| text |
	self diagnostics ifFalse: [^nil].
	text := self name, ' ',
 		Date today dayOfMonth printString, '.',
		Date today monthIndex printString, ' ',
		Time now hours printString, ':', 
		Time now minutes printString,
		' from ', (aRequest peer notNil ifTrue: [aRequest peer] ifFalse: ['']), ' ',
		aRequest methodName, ' ',
		aRequest urlString.
	self log: self cr, text, self cr, text, '              s'.! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
logStringFor: aRequest
	^self name, ' ',
 		Date today dayOfMonth printString, '.',
		Date today monthIndex printString, ' ',
		Time now hours printString, ':', 
		Time now minutes printString,
		' from ', (aRequest peer notNil ifTrue: [aRequest peer] ifFalse: ['']), ' url: ',
		aRequest urlString! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
logging

	"if true, all requests are logged into a database"
	^self settings  at: #logging ifAbsentPut: [false].! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
loggingPolicy
	^self settings at: #loggingPolicy ifAbsentPut: [#none].! !

!AIDASite methodsFor: 'settings'!
loggingPolicy: aSymbol
	"from who to log requests with WebCounters: #all, #excludeAdmins, #onlyGuests, #none"
	(#(#all, #excludeAdmins, #onlyGuests, #none) includes: aSymbol) 
		ifFalse: [self error: 'unknown policy'].
	self settings  at: #loggingPolicy put: aSymbol! !

!AIDASite methodsFor: 'system services'!
messenger
	"for sending and receiving emails"
	^self systemServices 
		at: #Messenger
		ifAbsentPut: [EMailMessenger newOn: self].! !

!AIDASite methodsFor: 'private' stamp: 'jm 2/7/2011 13:22'!
migrateSchedulerInSystemServices
	| scheduler |
	(self systemServices includesKey: #WebScheduler) ifTrue:
		[scheduler := self systemServices at: #WebScheduler.
		self systemServices at: #Scheduler put: scheduler.
		self systemServices removeKey: #WebScheduler].
! !

!AIDASite methodsFor: 'system services' stamp: ' 21/4/07 22:07'!
mimeMap
	^self systemServices 
		at: #MimeMap
		ifAbsent: 
			[self addSystemService: MIMEMap new named: #MimeMap.
			^self mimeMap].! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
minuteStatsProcess

	"every minute report to transcript"
	"WebServer default minuteStatsProcess"
	| hits pages new returning afterHits afterPages afterNew afterReturning |
	[
		hits := self totalCounter total.
		pages := self pagesCounter total.
		new :=	self newVisitorsCounter total.
		returning := self returningVisitorsCounter total.
		(Delay forSeconds: self secondsToMinute) wait.
		[self isServing] whileTrue: 
			[afterHits := self totalCounter total.
			afterPages := self pagesCounter total.
			afterNew := self newVisitorsCounter total.
			afterReturning := self returningVisitorsCounter total.
			Transcript cr; show: 
				self name, ' ', 
				Time now hours printString, ':', Time now minutes printString, ' ',
				'    last minute hits: ', (afterHits - hits) printDotString, 
				'    pages: ', (afterPages - pages) printDotString, 
				'    visitors new: ', (afterNew - new) printDotString, 
				'    returning: ', (afterReturning - returning) printDotString.
			self registerTopMinuteHits: (afterHits - hits) pages: (afterPages - pages).
			hits := afterHits. pages := afterPages.
			new := afterNew. returning := afterReturning.
			(Delay forSeconds: self secondsToMinute) wait].
	] fork.! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
newVisitorsCounter
	"counter of new sessions"
	(self counters includesKey: #NewVisitors) ifFalse: 
 		["self error: 'newVisitorsCounter ??'."
		self counters at: #NewVisitors put: WebCounter new].
	^self counters at: #NewVisitors

"WebServer default newVisitorsCounter"! !

!AIDASite methodsFor: 'private'!
nightlyCleanup
	"releasing session application state and other cleanup"
	"AIDASite allInstances do: [:each | each nightlyCleanup] "
	self isEnabled ifFalse: [^nil]. "no need to cleanup disabled sites"
	Transcript cr; show: '*** Aida site ', self name, ' nightly cleanup'.
	HTTPConnection allInstances do: [:each | each close].  "to GC all streams and buffers"
	self sessionManager removeGuestSessions.
	self sessionManager releaseApplicationState.
	self statistics removeReferersJustOneHit.! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
notFoundCounter
	"counter of not found errors"
	(self counters includesKey: #NotFound) ifFalse: 
 		[self counters at: #NotFound put: WebCounter new].
	^self counters at: #NotFound

"WebServer default notFoundCounter"! !

!AIDASite methodsFor: 'statistics'!
onActivityDo: aBlock on: aWebElement app: aWebApplication
	"register a block to be executed on activity on this site. With 1s period if very frequent"
	(self activityAnnouncers at: aWebApplication ifAbsentPut: Dictionary new)
		at: aWebElement id  put: aBlock

" AIDASite allInstances do: [:site | site initActivityAnnouncers] "! !

!AIDASite methodsFor: 'private-other'!
other
	^other! !

!AIDASite methodsFor: 'private-other'!
otherAt: aSymbol
	"other values"
	^self otherAt: aSymbol ifAbsent: [nil]! !

!AIDASite methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	"other values"
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!AIDASite methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!AIDASite methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
pagesCounter
	"counter of only text/html pages"
	(self counters includesKey: #Pages) ifFalse: 
 		["self error: 'pagesCounter ??'."
		self counters 	at: #Pages put: WebCounter new].
	^self counters at: #Pages

"WebServer default pagesCounter"! !

!AIDASite methodsFor: 'private'!
printString

	^'anAIDASite named: ', self name! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/8/07 09:38'!
properString: aString 
	"if two byte string, convert it to one byte, cut twobyte characters, make them $? "
	| stream |
	aString class == ByteString ifTrue: [^aString].
	stream := WriteStream on: String new.
	aString 
		do: [:char | stream nextPut: (char asInteger < 256 ifTrue: [char] ifFalse: [$?])].
	^stream contents! !

!AIDASite methodsFor: 'private-serving' stamp: 'jm 8/2/2010 16:18'!
redirectOn: aSession
	"Squeak specific!! "
	| location response |
	location := aSession redirectLink composeURLOn: aSession.
	location := AIDASite convert: location toCodepage: aSession codePage.
	location := location notNil 
		ifTrue: [location copyReplaceAll: '&amp;' with: '&'] "well, why exactly?"
		ifFalse: [''].
	response := HTTPResponse redirectLink "Squeak specific!! "
		location: location.
	aSession cookie ifFalse: [response cookie: (self cookieHeaderFor: aSession)].
	aSession redirectLink: nil.
	^response.! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
redirectToHost
	"if set, all requests are redirected to that hostname!!"
	| host |
	host := self settings  at: #redirectToHost ifAbsent: [^nil].
	(host isNil or: [host isEmpty]) ifTrue: [^nil].
	^host! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
redirectToHost: aHostnameString
	"if set, all requests are redirected to that hostname!!"
	self settings  at: #redirectToHost put: aHostnameString! !

!AIDASite methodsFor: 'private-serving'!
redirectToOtherHost: aRequest on: aSession
	| response |
	response := HTTPResponse redirectLink 
		location: self redirectToHost.
	aSession cookie ifFalse:  "if immediate redirect on a new session"
		[response cookie: (self cookieHeaderFor: aSession)].
	^response.! !

!AIDASite methodsFor: 'user services'!
register: anObjectOrApp onUrl: anUrlString
	"for easier registration of root domain objects or Apps"
	^self urlResolver defaultUrl: anUrlString for: anObjectOrApp! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
registerTopHourHits: aHitNumber pages: aPageNumber
	(self topHour at: 2) < aHitNumber ifTrue: 
		[self topHour
			at: 1 put: Timestamp now;
			at: 2 put: aHitNumber;
			at: 3 put: aPageNumber].! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
registerTopMinuteHits: aHitNumber pages: aPageNumber
	(self topMinute at: 2) < aHitNumber ifTrue: 
		[self topMinute
			at: 1 put: Timestamp now;
			at: 2 put: aHitNumber;
			at: 3 put: aPageNumber].! !

!AIDASite methodsFor: 'system services'!
registration
	"a registration app for new users to register"
	^self systemServices 
		at: #Registration
		ifAbsent: 
			[self addSystemService: WebRegistrationApp "as class!!" named: #Registration.
			self register: self registration onUrl: '/registration'.
			^self registration].! !

!AIDASite methodsFor: 'settings'!
registrationAllowed
	"is registration allowed on this site? By default no"
	^self settings at: #RegistrationAllowed ifAbsent: [false]! !

!AIDASite methodsFor: 'settings'!
registrationAllowed: aBoolean
	"is registration allowed on this site? By default no"
	^self settings at: #RegistrationAllowed put: aBoolean! !

!AIDASite methodsFor: 'start/stop'!
releaseApplicationState
	"release application state (appsForObjects) of all sessions"
	^self sessionManager releaseApplicationState! !

!AIDASite methodsFor: 'serving' stamp: 'mivsek 1/10/2008 18:46'!
reportException: anException
	 | report |
	Transcript cr; show: '*** error in web app code: ', anException errorString.
"	report := DebuggerService shortStackFor: anException initialContext ofSize: 10.
	(report  tokensBasedOn: Character cr) do: [:each |
		Transcript cr; show: '     ', each].
"! !

!AIDASite methodsFor: 'serving' stamp: 'mivsek 1/10/2008 18:47'!
reportSocketError: anException request: aRequest
	"some hard to find error while streaming, i'm trying to debug it with that report"
	Transcript cr; show: '**SpSocketError on ', self name, ': ', 
		anException parameter messageText; cr.
	Transcript show:  aRequest printString; cr.! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
requestsInYear: aYearNumber
	"return a number of requests on specified year"

	| count |
	count := 0.
	((self counters at: #Daily) at: aYearNumber ifAbsent: [^0]) do: [:dayCount |
		count := count + dayCount].
	^count! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
requestsOnDate: aDate
	"return a number of requests on specified date"

	^self totalCounter countsOnDate: aDate! !

!AIDASite methodsFor: 'start/stop' stamp: ' 21/4/07 22:07'!
restart
	self stop.
	self start.! !

!AIDASite methodsFor: 'private-backup/restore' stamp: 'np 1/15/2008 20:49'!
restoreSiteNamed: aString
	"boss in from file aidasite-<sitename>.obj"
	"AIDASite new restoreSiteNamed: 'test' "
	| filename site |
	filename := 'aidasite-', aString, '.obj'.
	site := (FileStream fileNamed: filename) fileInObjectAndCode.
	^site! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
returningVisitorsCounter
	"counter of returning sessions"
	(self counters includesKey: #ReturningVisitors) ifFalse: 
 		["self error: 'returningVisitorsCounter ??'."
		self counters
			at: #ReturningVisitors put: WebCounter new].
	^self counters at: #ReturningVisitors

"WebServer default returningVisitorsCounter"! !

!AIDASite methodsFor: 'system services'!
router
	"for routing the web requests to the appropriate request handler depending on url pattern"
	^self systemServices 
		at: #Router
		ifAbsent: [self addSystemService: (WebRouter newOn: self) named: #Router].! !

!AIDASite methodsFor: 'statistics' stamp: 'JM 4/26/2007 19:57'!
runningHistory
	"return a collection of server runs as array of:
		started timestamp,
		last alive = stopped (more or less) timestamp,
		uptime in seconds,
		downtime from previous run in seconds,
		crashed or not.
	Used to determine history 
	of server runnings and to calculate server avaiability. Last entry in collection is current run
	with last alive no more than minute before current time"
	"AIDASite default runningHistory"
	| collection newArray  arry |
	collection := OrderedCollection new.
	self runningHistoryCollection do: [:array |
		newArray := Array new: 5.
		newArray 
			at: 1 put: (SpTimestamp fromSeconds: (array at: 1));
			at: 2 put: (SpTimestamp fromSeconds: (array at: 2));
			at: 3 put: (((array at: 2) - (array at: 1)) max: 0);
			at: 4 put: 0;  "we will calculate later"
			at: 5 put: ((array size < 3) ifTrue: [true] ifFalse: [array at:3]).
		collection add: newArray copy].
	newArray := Array new: 5.
	newArray
		at: 1 put: self startedTimestamp;
		at: 2 put: self lastTimeAliveTimestamp;
		at: 3 put: (self lastTimeAliveTimestamp asSeconds - 
			self startedTimestamp asSeconds);
		at: 4 put: 0;  "we will calculate later"
		at: 5 put: false. "current run not crashed"
	collection add: newArray copy.
	2 to: collection size do: [:inx |
		arry := collection at: inx.
		arry at: 4 put:   "this started - previous last alived"
			((arry at: 1) asSeconds - ((collection at: inx-1) at: 2) asSeconds)
		].
	^collection! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
runningHistoryCollection
	^self timestamps at: #RunningHistory ifAbsentPut: [OrderedCollection new].! !

!AIDASite methodsFor: 'system services' stamp: 'jm 2/7/2011 13:23'!
scheduler
	"AIDASite allInstances do: [:each | each migrateSchedulerInSystemServices] "
	self migrateSchedulerInSystemServices. "if not already"
	^self systemServices
		at: #Scheduler
		ifAbsent:
			[self
				addSystemService: (WebScheduler newOn: self)
				named: #Scheduler]! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
secondsToHour

	| now | 
	now := Time now asSeconds.
	^(3600 - (now - (now // 3600 * 3600))) max: 0

"WebServer default secondsToHour"! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
secondsToMinute

	| now | 
	now := Time now asSeconds.
	^(60 - (now - (now // 60 * 60))) max: 0

"WebServer default secondsToMinute"! !

!AIDASite methodsFor: 'system services'!
securityManager
	^self systemServices 
		at: #SecurityManager
		ifAbsent: 
			[self 
				addSystemService: (WebSecurityManager newOn: self)
				named: #SecurityManager.
			self register: self securityManager onUrl: '/security'.
			self securityManager initialize.
			^self securityManager].! !

!AIDASite methodsFor: 'system services' stamp: ' 21/4/07 22:07'!
sessionManager
	^self systemServices 
		at: #SessionManager
		ifAbsent: 
			[self 
				addSystemService: (WebSessionManager newOn: self)
				named: #SessionManager.
			^self sessionManager].! !

!AIDASite methodsFor: 'private' stamp: 'JM 4/25/2007 20:47'!
setCreatedTimestamp
	"set the server creation timestamp to current date and time."
	self timestamps 
		at: #Created put: SpTimestamp now asSeconds.! !

!AIDASite methodsFor: 'settings'!
setDefaultAuthenticator
	"DefaultAuthenticator authentificates the user during login by username and password, which 
	are stored locally in site's security manager"
	^self addSystemService: (DefaultAuthenticator newOn: self) named: #Authenticator! !

!AIDASite methodsFor: 'settings' stamp: 'janko 4/20/2012 17:14'!
setDefaultFederatedAuthenticator
	"OpenID is a default federated authentificator"
	^self 
		addSystemService: (OpenIDAuthenticator newOn: self) 
		named: #FederatedAuthenticator! !

!AIDASite methodsFor: 'settings'!
setDefaultFederatedAuthorizator
	"OAuth is a default federated authorizator, accessible on /authorizator as well"
	| auth |
	auth := self 
		addSystemService: (OAuthAuthorizator newOn: self) 
		named: #FederatedAuthorizator.
	self register: auth onUrl: '/authorizator'.
	^auth! !

!AIDASite methodsFor: 'private' stamp: 'jm 8/3/2010 10:10'!
setLastCommitTimestamp
	"set the last commit timestamp to current date and time"
	self critical: [
		self timestamps 
			at: #LastCommit 
			put: SpTimestamp now asSeconds].! !

!AIDASite methodsFor: 'private' stamp: 'jm 8/3/2010 10:10'!
setLastRequestTimestamp
	"set the last web request timestamp to current date and time"
	self critical: [
		self timestamps at: #LastRequest put: SpTimestamp now asSeconds].! !

!AIDASite methodsFor: 'private' stamp: 'JM 4/25/2007 20:48'!
setLastTimeAliveTimestamp
	"A lastTimeAliveThread sets this timestamp every minute"
	self critical: [
		self timestamps at: #LastTimeAlive put: SpTimestamp now asSeconds].! !

!AIDASite methodsFor: 'private' stamp: 'JM 4/25/2007 21:09'!
setStartedTimestampCrashed: aBoolean
	"set the last server startup timestamp to current date and time.  
	Before that records old created and last alive timestamp to a running history.
	Argument shows if server was running, therefore crashed, or was stoped normaly"
	self addToRunningHistoryCrashed: aBoolean.
	self timestamps 
		at: #Started put: SpTimestamp now asSeconds.! !

!AIDASite methodsFor: 'private'!
settings
	settings isNil ifTrue: 
		[settings := Dictionary new. 
		self initDefaultSettings].
	^settings

"WebServer default settings"! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
settingsReport
	"a brief report of current settings to transcript, used at site startup"
	Transcript cr; show: 'server diagnostics: '.
	self diagnostics
		ifTrue: [Transcript show: 'ON']
		ifFalse: [Transcript show: 'OFF'].
	Transcript cr.! !

!AIDASite methodsFor: 'private-serving' stamp: ' 21/4/07 22:07'!
shouldRedirect
	^self redirectToHost notNil! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:55'!
smtpServer
	"an address of email server for outgoing mails (notifications, mailing lists etc.)"
	^self settings  at: #smtpServer ifAbsentPut: [self host].
! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
smtpServer: anAddressString
	"an address of email server for outgoing mails (notifications, mailing lists etc.)"
	self settings  at: #smtpServer put: anAddressString.! !

!AIDASite methodsFor: 'start/stop'!
start
	self isEnabled ifFalse: [^nil].
	self setStartedTimestampCrashed: self isServing.
	self setLastTimeAliveTimestamp.
	super start.
	self startServices.! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
startServices
	self systemServices values do: [:service | (service class canUnderstand: #start) ifTrue: [service start] ].
	self userServices values do: [:service | (service class canUnderstand: #start) ifTrue: [service start] ].! !

!AIDASite methodsFor: 'statistics'!
startedDate
	"date of last server startup"
	^self startedTimestamp notNil 
		ifTrue: [self startedTimestamp asDate] 
		ifFalse: [nil]! !

!AIDASite methodsFor: 'statistics' stamp: 'JM 4/25/2007 21:08'!
startedTimestamp
	"time and date of last server startup"
	^SpTimestamp fromSeconds:
		(self timestamps at: #Started ifAbsentPut: [SpTimestamp now asSeconds])! !

!AIDASite methodsFor: 'system services'!
staticServer
	"serving static content from files"
	^self systemServices 
		at: #StaticServer
		ifAbsent: 
			[self addSystemService: (WebStaticServer newOn: self) named: #StaticServer.
			self staticServer initialize. "to add it to router and cleanup urlResolver of files"
			self staticServer]! !

!AIDASite methodsFor: 'system services'!
statistics
	^self systemServices 
		at: #Statistics
		ifAbsent: 
			[self 
				addSystemService: (WebStatistics newOn: self)
				named: #Statistics.
			self register: self statistics onUrl: '/stats'.
			^self statistics].! !

!AIDASite methodsFor: 'start/stop' stamp: ' 21/4/07 22:07'!
stop
	super stop.
	self stopServices.
	self setLastTimeAliveTimestamp.! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
stopServices
	self systemServices values do: [:service | (service class canUnderstand: #stop) ifTrue: [service stop] ].
	self userServices values do: [:service | (service class canUnderstand: #stop) ifTrue: [service stop] ].! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
stopWatchdog
	self watchdog notNil ifTrue: 
		[self watchdog terminate.
		self watchdog: nil].! !

!AIDASite methodsFor: 'accessing' stamp: 'JM 4/25/2007 21:07'!
style
	style isNil ifTrue: 
		[self style: ((Smalltalk at: self styleClass asSymbol) value newOnSite: self)].
	^style! !

!AIDASite methodsFor: 'private'!
style: aWebStyle
	(aWebStyle isNil or: [aWebStyle isKindOf: WebStyle]) 
		ifFalse: [self error: 'Set the style with method #styleClass: instead!!'].
	style := aWebStyle.! !

!AIDASite methodsFor: 'settings' stamp: 'np 4/2/2008 23:36'!
styleClass
	(self settings includesKey: #styleClass) ifFalse: 
		[self styleClass: 'DefaultWebStyle' ].
	^(self settings  at: #styleClass) asString! !

!AIDASite methodsFor: 'settings'!
styleClass: aClassOrString
	"name of a class to provide a style support for this site. Default is WebStyle"
	| nme |
	nme := (aClassOrString isKindOf: String)
		ifTrue: [aClassOrString] ifFalse: [aClassOrString name asString].
	self settings  at: #styleClass put: nme.
	self style: nil.  "to initialize new style immediatelly, if possible"
	[self style] 
		on: Error do: [:ex | "nothing"]! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:56'!
supportedLanguages
	"Which languages are supported on this site. Content may be in all those languages. 
	Default language is always among supported."
	^(self settings at: #supportedLanguages ifAbsent: [Set new])
		add: self defaultLanguage; yourself! !

!AIDASite methodsFor: 'settings' stamp: 'mivsek 1/10/2008 18:57'!
supportedLanguages: aSetOfLangCodes
	"Which languages are supported on this site. Content may be in all those languages. 
	Default language is always among supported."
	^self settings at: #supportedLanguages put: aSetOfLangCodes asSet! !

!AIDASite methodsFor: 'system services'!
systemServiceNamed: aSymbol
	"return a system service object with a specified name"
	^self systemServices at: aSymbol asSymbol ifAbsent: [^nil]! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
systemServices
	"return a dictionary of system services (e.g. URLResolver, ImageManager etc.)"
	systemServices isNil 
		ifTrue: [systemServices := Dictionary new].
	^systemServices! !

!AIDASite methodsFor: 'settings' stamp: 'np 10/18/2008 13:17'!
tempDirectory
	" a directory for temporary files, usually ./temp. This directory is also created if not exist yet "
	^self settings  at: #tempDirectory ifAbsent: 
		[^self tempDirectory: self homeDirectory, 'temp']! !

!AIDASite methodsFor: 'settings' stamp: 'np 10/18/2008 13:17'!
tempDirectory: aString
	" a directory for temporary files, usually ./temp. This directory is also created if not exist yet "
	| dir |
	self settings at: #tempDirectory put: aString.
	dir := SpFilename named: self tempDirectory.
	dir exists ifFalse: [dir makeDirectory].
	^self tempDirectory! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
timestamps
	timestamps isNil ifTrue: [self initTimestamps].
	^timestamps! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
topHour
	"a hour of most hits, an array with timestamp, hits and pages"
	(self counters includesKey: #TopHour) ifFalse: 
 		[self counters at: #TopHour put: (Array with: Timestamp now with: 0 with: 0)].
	^self counters at: #TopHour

"WebServer default topHour"! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
topMinute
	"a minute of most hits, an array with timestamp, hits and pages"
	(self counters includesKey: #TopMinute) ifFalse: 
 		[self counters at: #TopMinute put:  (Array with: Timestamp now with: 0 with: 0)].
	^self counters at: #TopMinute

"WebServer default topMinute"! !

!AIDASite methodsFor: 'private-counters' stamp: ' 21/4/07 22:07'!
totalCounter
	"counter of all web requests"
	(self counters includesKey: #Total) ifFalse: 
 		["self error: 'totalCounter ??'."
		self counters at: #Total put: WebCounter new].
	^self counters at: #Total

"WebServer default totalCounter"! !

!AIDASite methodsFor: 'statistics' stamp: ' 21/4/07 22:07'!
totalDowntime
	"return downtime between all server runs in seconds"
	"AIDASite default totalDowntime"
	| history downtime |
	history := self runningHistory.
	downtime := 0.
	history do: [:array | downtime := downtime + (array at: 4)].
	^downtime! !

!AIDASite methodsFor: 'statistics-counters' stamp: ' 21/4/07 22:07'!
totalRequests
	"return a number of requests from server creation"

	^self totalCounter total.! !

!AIDASite methodsFor: 'statistics' stamp: ' 21/4/07 22:07'!
totalUptime
	"return uptime of all server runs in seconds"
	"AIDASite default totalUptime"
	| history uptime |
	history := self runningHistory.
	uptime := 0.
	history do: [:array | uptime := uptime + (array at: 3)].
	^uptime! !

!AIDASite methodsFor: 'system services' stamp: 'np 3/25/2009 15:36'!
translator
	"translation support for Apps"
	^self systemServices 
		at: #Translator
		ifAbsent: [self addSystemService: (WebTranslator newOn: self) named: #Translator].! !

!AIDASite methodsFor: 'statistics' stamp: ' 21/4/07 22:07'!
uptime
	"return uptime of current server run in seconds (with 60s precision)"
	"AIDASite default uptime"
	^self lastTimeAliveTimestamp asSeconds - self startedTimestamp asSeconds! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
urgentNotificationEMail

	"an email address or addresses (separated by comma) of all recipients of urgent server notifications "

	^self settings  at: #urgentNotificationEMail ifAbsentPut: ['janko.mivsek@eranova.si'].! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
urgentNotificationEMail: anEMailAddressString
	"an email address or addresses (separated by comma) of all recipients of urgent server notifications "
	self settings  at: #urgentNotificationEMail put: anEMailAddressString.! !

!AIDASite methodsFor: 'system services' stamp: ' 21/4/07 22:07'!
urlResolver
	^self systemServices 
		at: #URLResolver
		ifAbsent: 
			[self 
				addSystemService: (URLResolver newOn: self) 
				named: #URLResolver.
			^self urlResolver].! !

!AIDASite methodsFor: 'settings' stamp: 'np 5/6/2008 17:18'!
urlsWithSessionId
	"is session id added to urls when browser cookie support is disabled?"
	^self settings at: #urlsWithSessionId ifAbsentPut: false! !

!AIDASite methodsFor: 'settings'!
urlsWithSessionId: aBoolean
	"is session id added to urls when browser cookie support is disabled?"
	(aBoolean isKindOf: Boolean) ifFalse: [self error: 'wrong argument'].
	^self settings at: #urlsWithSessionId put: aBoolean! !

!AIDASite methodsFor: 'user services'!
userServiceNamed: aSymbol
	"return a user service object with a specified name"
	^self userServices at: aSymbol asSymbol ifAbsent: [^nil]! !

!AIDASite methodsFor: 'private' stamp: ' 21/4/07 22:07'!
userServices
	"return a dictionary of user services (e.g. WebIndex, WebNews etc.)"
	userServices isNil ifTrue: [userServices := Dictionary new. ].
	^userServices! !

!AIDASite methodsFor: 'private' stamp: 'janko 8/2/2008 15:02'!
watchdogAction
	self setLastTimeAliveTimestamp! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
webServerEMail

	"an email address of this web server "

	^self settings  at: #webServerEMail ifAbsentPut: ['aida-web@eranova.si'].! !

!AIDASite methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
webServerEMail: anEMailString
	"an email address of this web server "
	self settings  at: #webServerEMail put: anEMailString.! !

!AIDASite methodsFor: 'settings'!
webUserClass
	"set if other class than WebUser is used for creating/registering users"
	^self settings at: #WebUserClass ifAbsent: [WebUser]! !

!AIDASite methodsFor: 'settings'!
webUserClass: aClass
	"set if other class than WebUser is used for creating/registering users"
	^self settings at: #WebUserClass put: aClass! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:02'!
charC
	"return internal  unicode code for slovene character: uppercase c"
	^16r010C asCharacter! !

!AIDASite class methodsFor: 'slovenian characters' stamp: ' 21/4/07 22:07'!
charCszSet
	^Set new
		add: self charc; add: self charC;
		add: self chars; add: self charS;
		add: self charz; add: self charZ;
		yourself! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:06'!
charS
	"return internal  unicode code for slovene character: uppercase s"
	^16r0160 asCharacter! !

!AIDASite class methodsFor: 'slovenian characters' stamp: ' 21/4/07 22:07'!
charZ
	"return internal unicode code for slovene character: uppercase z"
	^16r017D asCharacter! !

!AIDASite class methodsFor: 'slovenian characters' stamp: ' 21/4/07 22:07'!
charc
	"return internal  unicode code for slovene character: lowercase c"
	^16r010D asCharacter! !

!AIDASite class methodsFor: 'slovenian characters' stamp: ' 21/4/07 22:07'!
chars
	"return internal  unicode code for slovene character: lowercase s"
	^16r0161 asCharacter! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:07'!
charz
	"return internal unicode code for slovene character: lowercase z"
	^16r017E asCharacter! !

!AIDASite class methodsFor: 'codepage converting' stamp: 'mu 3/7/2008 20:21'!
convert: aString fromCodepage: aSymbol
	"convert aString to internal unicode"
	| encoding |
	(#(#'win-1250' #'win1250' #'Windows-1250' cp1250) includes: aSymbol) 
		ifTrue: [encoding := #'cp-1250'].
	(#(#'iso-8859-2' #'iso8859-2' #'ISO-8859-2' iso2) includes: aSymbol) 
		ifTrue: [encoding := #'iso-8859-2'].
	(#(#utf8 #'utf-8' #'utf_8' #UTF8 #'UTF-8' #'UTF_8') includes: aSymbol) 
		ifTrue: [encoding := #utf8].
	encoding isNil ifTrue: [^aString].

	^[aString convertFromEncoding: encoding] on: Error do: [:ex | aString ].

	
"AIDASite convert: (String with: 16rC4 asCharacter with: 16r8D asCharacter) fromCodepage: #utf8 "! !

!AIDASite class methodsFor: 'codepage converting' stamp: 'mu 3/8/2008 16:34'!
convert: aString toCodepage: aSymbol
	"convert internal unicode aString to codepage. "
	| encoding converter in out |
	(#(#'win-1250' #'win1250' #'Windows-1250' cp1250) includes: aSymbol) 
		ifTrue: [encoding := #'cp-1250'].
	(#(#'iso-8859-2' #'iso8859-2' #'ISO-8859-2' iso2) includes: aSymbol) 
		ifTrue: [encoding := #'iso-8859-2'].
	(#(#utf8 #'utf-8' #'utf_8' #UTF8 #'UTF-8' #'UTF_8') includes: aSymbol) 
		ifTrue: [encoding := #'utf8'].
	encoding isNil ifTrue: [^aString].

	converter := (TextConverter newForEncoding: encoding) ifNil: [UTF8TextConverter new].
	in := aString readStream.
	out := WriteStream on: ''.
	[in atEnd] whileFalse: [converter nextPut: in next toStream: out].
	^out contents

"AIDASite convert: (String with: 16r010D asCharacter) toCodepage: #utf8 "! !

!AIDASite class methodsFor: 'codepage converting' stamp: ' 21/4/07 22:07'!
convertFromWeb: aString on: aSession
	"convert aString, which is in code page, defined in aSession to an internal unicode "
	^self convert: aString fromCodepage: aSession codePage! !

!AIDASite class methodsFor: 'http encoding'!
convertFromWebString: aString
	"converts special chars in http stream: 
		'+' as ' '
		%xx as appropriate ASCII char
	"
	| newString |
	newString := HTTPString decodedHTTPFrom: aString.
	newString := AIDASite convert:newString fromCodepage: #'utf-8'.
	^newString

"AIDASite convertFromWebString: (AIDASite convertToWebString: '+-% test one') "! !

!AIDASite class methodsFor: 'http encoding' stamp: 'np 9/26/2008 12:50'!
convertIRItoURL: aString
	| stream aByteString |
	stream _ WriteStream on: ''.
	aByteString _ self convert: aString toCodepage: #utf8.
	aByteString do: [ :char |
	('abcdefghijklmnopqrstuvwxyz0123456789./-+:~?#@=' includes: char asLowercase)
		ifTrue: [ stream nextPut: char. ]
		ifFalse: [ stream nextPut: $%; nextPutAll: (char codePoint radix: 16). ]. ].
	^ stream contents.! !

!AIDASite class methodsFor: 'codepage converting' stamp: ' 21/4/07 22:07'!
convertToWeb: aString on: aSession
	"rconver internal unicode aString to a proper code page, defined in aSession"
	^self convert: aString toCodepage: aSession codePage! !

!AIDASite class methodsFor: 'http encoding'!
convertToWebString: aString
	"converts some special chars in http stream: 
		' ' as '+'
		%xx as appropriate ASCII char
	"
	^HTTPString encodedHTTPFrom: aString 

"AIDASite convertToWebString: '+-% test one' "! !

!AIDASite class methodsFor: 'http encoding'!
decodeCharEntitiesIn: aString
	"  '&lt;tag&gt; = '<tag>'  "
	"Character entitty references, see http://www.w3.org/TR/html401/charset.html#h-5.3.2"
	| charDict in out |
	charDict := Dictionary new
		at: 'lt' put: $<; at: 'gt' put: $>;
		at: 'amp' put: $&; at: 'quot' put: $"; yourself.
	in := aString readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[| ch entity | 
		ch := in next.
		ch = $& 
			ifTrue: 
				[entity := in upTo: $; .
				out nextPut: (charDict at: entity)]
			ifFalse: [out nextPut: ch]  ].
	^out contents! !

!AIDASite class methodsFor: 'accessing' stamp: 'mu 2/3/2008 16:44'!
default
	"just return default instance set by default:"
	^Default! !

!AIDASite class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default: aString
	"make a site with that name a default one"
	| site |
	site := SwazooServer singleton siteNamed: aString.
	site isNil ifTrue: [^self error: 'site with that name does not exist!!'].
	Default := site.
	^site! !

!AIDASite class methodsFor: 'http encoding'!
encodeCharEntitiesIn: aString
	"  '<tag>' = '&lt;tag&gt;' "
	"Character entitty references,  see http://www.w3.org/TR/html401/charset.html#h-5.3.2"
	| charEntities charDict in out |
	charEntities := #($< $> $& $").
	(aString contains: [:ch | charEntities includes: ch ]) ifFalse: [^aString]. "quick test"
	charDict := Dictionary new
		at: $< put: '&lt;'; at: $> put: '&gt;';
		at: $& put: '&amp;'; at: $" put: '&quot;'; yourself.
	in := aString readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[| ch | ch := in next.
		(charEntities includes: ch)
			ifTrue: [out nextPutAll: (charDict at: ch)]
			ifFalse: [out nextPut: ch]  ].
	^out contents! !

!AIDASite class methodsFor: 'http encoding'!
encodeQuoteEntitiesIn: aString
	" Just double quotes '' to &quot;  "
	"Character entitty references,  see http://www.w3.org/TR/html401/charset.html#h-5.3.2"
	| in out |
	(aString contains: [:ch | ch = $" ]) ifFalse: [^aString]. "quick test"
	in := aString readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[| ch | ch := in next.
		ch = $"
			ifTrue: [out nextPutAll: '&quot;']
			ifFalse: [out nextPut: ch]  ].
	^out contents! !

!AIDASite class methodsFor: 'http encoding' stamp: ' 21/4/07 22:07'!
fromHexValue: aCharacter
	aCharacter isDigit 
		ifTrue: [^aCharacter asInteger - $0 asInteger]
		ifFalse: [
			(aCharacter asLowercase between: $a and: $f)
				ifTrue: [^aCharacter asLowercase asInteger - $a asInteger+10]
				ifFalse: [^nil]].! !

!AIDASite class methodsFor: 'http encoding' stamp: ' 21/4/07 22:07'!
hexCharFrom: aNumber
	^aNumber < 10 
		ifTrue: [($0 asInteger + aNumber) asCharacter]
		ifFalse: [($A asInteger + aNumber - 10) asCharacter]! !

!AIDASite class methodsFor: 'image snapshot' stamp: 'janko 4/21/2012 16:02'!
imageSnapshot
	"Save an image and show elapsed time on transcript"
	"Snapshoting is coordinated so that only one snapshot occurs out of many calls"
	"AIDASite imageSnapshot"
	"Squeak specific"
	| elapsed |
	(self isHourlySnapshot and: [self shallSnapshot]) ifFalse: [^nil]. "to allow only one snapshot per hour"
	self setLastSnapshot.
	self reportImageState. "for debugging"
	WebSessionManager allInstances do: [:each | each removeNonactiveGuestSessions].	"this really belongs here?"
	Processor activeProcess priority: Processor userInterruptPriority. "to avoid image block bug"
	elapsed := Time millisecondsToRun: [SmalltalkImage current saveSession]. "Squeak specific"
	Transcript show: ' in ', (elapsed // 1000) printString, 's '.  "reports elapsed time to Transcript"! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:07'!
initSloveneCharacters
	"AIDASite initSloveneCharacters"
	SloveneCharacters := Set new: 6.
	^SloveneCharacters 
		add: self charC;
		add: self charc;
		add: self charS;
		add: self chars;
		add: self charZ;
		add: self charz;
		yourself! !

!AIDASite class methodsFor: 'initialize' stamp: 'jm 2/4/2011 19:56'!
initialize
	"AIDASite initialize"
	"prepare a demo site, if not already, and start it"
	self initializeDemoSite ! !

!AIDASite class methodsFor: 'initialize'!
initializeDemoSite
	"prepare and start a demo site, if not already"
	"put that in Aida/Web bundle postLoad action!!"
	SwazooServer singleton aidaSites isEmpty ifTrue:
		[SwazooServer singleton 
			aidaDemoSite;
			start.
		Transcript 
			cr; cr; 
			show: '*** Aida/Web demo site started, open http://localhost:8888'; 
			cr; cr].! !

!AIDASite class methodsFor: 'private'!
isHourlySnapshot
	"Shall snapshot image every hour? Yes by default"
	HourlySnapshot isNil ifTrue: [self setHourlySnapshot].
	^HourlySnapshot! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:07'!
isSloveneCharacter: aCharacter
	"return true if character is slovene"
	SloveneCharacters isNil ifTrue: [self initSloveneCharacters].
	^SloveneCharacters includes: aCharacter

"AIDASite isSloveneCharacter: AIDASite charC"! !

!AIDASite class methodsFor: 'private'!
lastPreSnapshot
	"a timestamp of last pre snapshoot activity"
	LastPreSnapshot isNil ifTrue: [LastPreSnapshot := 
		(SpTimestamp fromSeconds: SpTimestamp now asSeconds - (24*3600))]. "something older than 5min!!"
	^LastPreSnapshot! !

!AIDASite class methodsFor: 'private'!
lastSnapshot
	"a timestamp of last image snapshot"
	LastSnapshot isNil ifTrue: [LastSnapshot := 
		(SpTimestamp fromSeconds: SpTimestamp now asSeconds - (24*3600))]. "something older than 5min!!"
	^LastSnapshot! !

!AIDASite class methodsFor: 'testing' stamp: 'jm 8/26/2009 16:21'!
onPharo
	"Squeak specific" "Pharo specific"
	Dialect isNil ifTrue: [self setDialect].
	^Dialect = #Pharo! !

!AIDASite class methodsFor: 'testing' stamp: 'jm 8/26/2009 16:22'!
onSqueak
	"Squeak specific" "Pharo specific"
	Dialect isNil ifTrue: [self setDialect].
	^Dialect = #Squeak! !

!AIDASite class methodsFor: 'image snapshot' stamp: 'janko 10/21/2011 16:57'!
preImageSnapshot
	"backup previous image on disk"
	"Squeak specific"
	"AIDASite preImageSnapshot"
	| imgFilename imgBckFilename |
	self shallPreSnapshot ifFalse: [^false]. "to avoid multible backups by calls from multiple sites "
	self setLastPreSnapshot. self setLastSnapshot. "to avoid other sites to snapshot"
	Transcript cr; show: 'img backup..'.
	imgFilename := Smalltalk imageName copyReplaceAll: '.image' with: ''.
	imgBckFilename := imgFilename, '-bck'.
	SpEnvironment onWindows not
		ifTrue: [OSProcess waitForCommand: 'cp ', (imgFilename, '.image'), ' ', imgBckFilename, '.image'.
			OSProcess waitForCommand: 'cp ', (imgFilename, '.changes'), ' ', imgBckFilename, '.changes']
		ifFalse: [OSProcess waitForCommand: 'copy /Y ', (imgFilename, '.image'), ' ', imgBckFilename, '.image'.
			OSProcess waitForCommand: 'copy /Y ', (imgFilename, '.changes'), ' ', imgBckFilename, '.changes'].
	Transcript show: 'done, '.
	self resetLastSnapshot. "so that #imageSnapshot will now continue"
! !

!AIDASite class methodsFor: 'codepage converting'!
properArray: aStringOrByteArray
	"if two byte (or wide) string, convert it to one byte, cut twobyte characters, make them $? "
	| stream |
	aStringOrByteArray class == ByteString ifTrue: [^aStringOrByteArray].
	aStringOrByteArray class == ByteArray ifTrue: [^aStringOrByteArray].
	aStringOrByteArray class == Array ifTrue: [^aStringOrByteArray asByteArray].
	stream := WriteStream on: (String new: aStringOrByteArray size *2).
	aStringOrByteArray "TwoByteArray or WideArray"
		do: [:char | stream nextPut: (char asInteger < 256 ifTrue: [char] ifFalse: [$?])].
	^stream contents! !

!AIDASite class methodsFor: 'utilities' stamp: 'janko 7/18/2008 17:57'!
random
	"a random generator, always seeded and therefore ready to geenrate numbers which are really 
       random"
	RandomGen isNil ifTrue: [RandomGen := Random new].
	^RandomGen! !

!AIDASite class methodsFor: 'image snapshot' stamp: 'janko 8/25/2012 19:05'!
reportImageState
	"AIDASite reportImageState"
"	Transcript cr; show: '** image state: '.
	Transcript cr; show: '   ', HTTPConnection allInstances size printString, ' HTTPCommections'.
	Transcript cr; show: '   ', Socket allInstances size printString, ' Sockets'.
	Transcript cr; show: '   ', Process allInstances size printString, ' Processes'.
	Transcript cr; show: '   ', Semaphore allInstances size printString, ' Semaphores'.
	Transcript cr; show: '   ', Socket registry size printString, ' Socket registry'.
	Transcript cr; show: '   ', StandardFileStream registry size printString, ' StandardFileStream registry'.
	Transcript cr; show: '   ', (ExternalSemaphoreTable unprotectedExternalObjects reject: #isNil) size 
		printString, ' ExternalSemaphoreTable'.
"
! !

!AIDASite class methodsFor: 'image snapshot'!
resetHourlySnapshot
	"Don't snapshot image every hour"
	"AIDASite resetHourlySnapshot"
	HourlySnapshot := false! !

!AIDASite class methodsFor: 'private'!
resetLastSnapshot
	"in preImageSnapshot to indicate that it is finished and imageSnapshot can continue"
	LastSnapshot := nil! !

!AIDASite class methodsFor: 'private' stamp: 'jm 2/1/2011 21:32'!
setDialect
	"for now only Squeak or Pharo"
	"Squeak specific" "Pharo specific"
	Dialect := (('Pharo*' match: SystemVersion current version)
		ifTrue: [#Pharo]
		ifFalse: [#Squeak])
	! !

!AIDASite class methodsFor: 'image snapshot'!
setHourlySnapshot
	"Snapshot image every hour"
	"AIDASite resetHourlySnapshot"
	HourlySnapshot := true! !

!AIDASite class methodsFor: 'private'!
setLastPreSnapshot
	"a timestamp of last pre snapshot activity"
	LastPreSnapshot := SpTimestamp now! !

!AIDASite class methodsFor: 'private'!
setLastSnapshot
	"a timestamp of last image snapshot"
	LastSnapshot := SpTimestamp now! !

!AIDASite class methodsFor: 'private'!
shallPreSnapshot
	"yes, if allowed and if there were no presnapshot last 5 minutes"
	self isHourlySnapshot ifFalse: [^false].
	^(SpTimestamp now asSeconds - self lastPreSnapshot asSeconds) > (5*60)! !

!AIDASite class methodsFor: 'private'!
shallSnapshot
	"yes, if allowed and if there were no snapshot last 5 minutes"
	self isHourlySnapshot ifFalse: [^false].
	^(SpTimestamp now asSeconds - self lastSnapshot asSeconds) > (5*60)! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:07'!
sloveneLowercase: aString
	^aString collect: [:chr | 
		(AIDASite isSloveneCharacter: chr)
			ifTrue: 	[(chr = AIDASite charC) ifTrue: [AIDASite charc]
				ifFalse: [(chr = AIDASite charS) ifTrue: [AIDASite chars]
					ifFalse: [(chr = AIDASite charZ) ifTrue: [AIDASite charz]
						ifFalse: [chr] ]]]
			ifFalse: [chr asLowercase]
		].! !

!AIDASite class methodsFor: 'slovenian characters' stamp: 'JM 4/26/2007 20:08'!
sloveneUppercase: aString
	^aString collect: [:chr | 
		(AIDASite isSloveneCharacter: chr)
			ifTrue: 	[(chr = AIDASite charc) ifTrue: [AIDASite charC]
				ifFalse: [(chr = AIDASite chars) ifTrue: [AIDASite charS]
					ifFalse: [(chr = AIDASite charz) ifTrue: [AIDASite charZ]
						ifFalse: [chr] ]]]
			ifFalse: [chr asUppercase]
		].! !

!AIDASite class methodsFor: 'accessing'!
version
	^'6.5'! !

!AIDASiteTest methodsFor: 'testing'!
testEncodeCharEntitites
	self assert: ((AIDASite encodeCharEntitiesIn: '<tag>') = '&lt;tag&gt;').
	self assert: ((AIDASite decodeCharEntitiesIn: '&lt;tag&gt;') = '<tag>').
	self assert: ((AIDASite encodeCharEntitiesIn: '<>&"') = '&lt;&gt;&amp;&quot;').
	self assert: ((AIDASite decodeCharEntitiesIn: '&lt;&gt;&amp;&quot;') = '<>&"').! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
city
	city isNil ifTrue: [^''].
	^city! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
city: aString
	city := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
company
	company isNil ifTrue: [^''].
	^company! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
company: aString
	company := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
country
	country isNil ifTrue: [^''].
	^country! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
country: aString
	country := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
email
	self emails size > 0 ifTrue: [^self emails at: 1].
	^' '! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
email: aString 
	self emails size > 0 ifTrue: [^self emails at: 1 put: aString].
	^self emails add: aString! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
emails
	emails isNil ifTrue: [self initEMails].
	^emails! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
fax
	fax isNil ifTrue: [^''].
	^fax! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
fax: aString
	fax := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
firstName
	firstName isNil ifTrue: [^''].
	^firstName! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
firstName: aString
	firstName := aString.! !

!Address methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initEMails
	emails := OrderedCollection new.! !

!Address methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initPhones
	phones := OrderedCollection new.
	phones add: ''.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
lastName
	lastName isNil ifTrue: [^''].
	^lastName! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
lastName: aString
	lastName := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
middleName
	middleName isNil ifTrue: [^''].
	^middleName! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
middleName: aString
	middleName := aString.! !

!Address methodsFor: 'private' stamp: ' 10/1/08 16:40'!
migrateToUnicode
	"from iso8859-2"
	"Address allInstances do: [:each | each migrateToUnicode]"
	title notNil ifTrue: [title := title ensureUnicodeSloveneChars].
	firstName notNil ifTrue: [firstName := firstName ensureUnicodeSloveneChars].
	middleName notNil ifTrue: [middleName := middleName ensureUnicodeSloveneChars].
	lastName notNil ifTrue: [lastName := lastName ensureUnicodeSloveneChars].
	company notNil ifTrue: [company := company ensureUnicodeSloveneChars].
	street notNil ifTrue: [street := street ensureUnicodeSloveneChars].
	city notNil ifTrue: [city := city ensureUnicodeSloveneChars].
	country notNil ifTrue: [country := country ensureUnicodeSloveneChars].! !

!Address methodsFor: 'accessing' stamp: 'janko 4/20/2012 17:10'!
mobile
	^self phones size > 1 
		ifTrue: [self phones at: 2]
		ifFalse: ['']! !

!Address methodsFor: 'accessing' stamp: 'janko 4/20/2012 17:11'!
mobile: aString
	self phones size > 1 ifTrue: [^self phones at: 2 put: aString].
	self phones size = 0 ifTrue: [self phones add: ''].
	^self phones add: aString! !

!Address methodsFor: 'accessing' stamp: 'janko 4/20/2012 17:11'!
phone
	^self phones size > 0 
		ifTrue: [self phones first]
		ifFalse: ['']! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
phone: aString
	self phones size > 0 ifTrue: [^self phones at: 1 put: aString].
	^self phones add: aString! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
phones
	phones isNil ifTrue: [self initPhones].
	^phones! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
post
	^self city! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
post: anObject
	self city: anObject! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
postalCode
	postalCode isNil ifTrue: [^''].
	^postalCode! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
postalCode: aString
	postalCode := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
stateProvince
	stateProvince isNil ifTrue: [^''].
	^stateProvince! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
stateProvince: aString
	stateProvince := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
street
	street isNil ifTrue: [^''].
	^street! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
street: aString
	street := aString.! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
title
	title isNil ifTrue: [^''].
	^title! !

!Address methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
title: aString
	title := aString.! !

!Address methodsFor: 'accessing'!
web
	"address of the website"
	web isNil ifTrue: [^''].
	^web! !

!Address methodsFor: 'accessing'!
web: aString
	"address of the website"
	web := aString! !

!Address class methodsFor: 'odb specific' stamp: ' 10/1/08 16:40'!
replicationSpec
	"Gemstone"

	^super replicationSpec, 
		#(	(firstName replicate)
			(lastName replicate)
			(company replicate)
			(street replicate)
			(city replicate)
			(postalCode replicate)
			(country replicate)
			(phones max 4)
			(emails max 4)
		 )! !

!AdvancedSearch methodsFor: 'private'!
alignCriteria: aCriteriaDict aspect: aSymbol with: anObject
	"adjust type of search field with those in object's aspect"
	| objValue |
	objValue := anObject perform: aSymbol.
	(objValue isKindOf: Number) ifTrue: 
		[aCriteriaDict at: aSymbol put: (aCriteriaDict at: aSymbol) asNumber]! !

!AdvancedSearch methodsFor: 'column mappings'!
alignFor: anAspectSymbol
	"column align for that field. nil if not defined"
	^(self colMapAt: anAspectSymbol ifAbsent: [^nil])
		at: 5! !

!AdvancedSearch methodsFor: 'accessing'!
allAspects
	"all aspects from colMap"
	^self colMap collect: [:map | map first]! !

!AdvancedSearch methodsFor: 'search form'!
allFieldsTo: anElement
	"build a search form for all aspects (accessors) of searched objects"
	^self fields: self allAspects to: anElement! !

!AdvancedSearch methodsFor: 'accessing'!
aspects
	"all search aspects, with criteria set or not"
	^self criteria keys! !

!AdvancedSearch methodsFor: 'accessing'!
clear
	"clear all search fields"
	self criteria keysAndValuesDo: [:key :value | self criteria at: key put: ''].! !

!AdvancedSearch methodsFor: 'column mappings'!
colAligns
	"for auto columns in search results"
	^self colAlignsWithout: #()! !

!AdvancedSearch methodsFor: 'column mappings'!
colAlignsWithout: anArrayOfAspects
	"for auto columns in search results"
	| collection |
	collection := OrderedCollection new.
	(self colAspectsWithout: anArrayOfAspects) do: [:aspect || map |
		map := self colMapAt: aspect ifAbsent: [nil].
		collection add: (map notNil ifTrue: [map at: 5 "align" ifAbsent: [nil]]) ].
	^collection! !

!AdvancedSearch methodsFor: 'column mappings'!
colAspects
	"for auto columns in search results"
	| aspects sorted |
	aspects := self searchedAspects asSet.
	sorted := OrderedCollection new.
	self colMap do: [:map | (aspects includes: map first) ifTrue: [sorted add: map first]]. "sort by order in colMap"
	^sorted! !

!AdvancedSearch methodsFor: 'column mappings'!
colAspectsWithout: anArrayOfAspects
	"for auto columns in search results"
	^self colAspects select: [:each | (anArrayOfAspects includes: each) not]! !

!AdvancedSearch methodsFor: 'column mappings'!
colFilters
	"for auto columns in search results"
	^self colFiltersWithout: #()! !

!AdvancedSearch methodsFor: 'column mappings'!
colFiltersWithout: anArrayOfAspects
	"for auto columns in search results"
	| collection |
	collection := OrderedCollection new.
	(self colAspectsWithout: anArrayOfAspects) do: [:aspect || map |
		map := self colMapAt: aspect ifAbsent: [nil].
		collection add: (map notNil ifTrue: [map at: 4 "filter" ifAbsent: [nil]]) ].
	^collection! !

!AdvancedSearch methodsFor: 'column mappings'!
colMap
	"map of columns in results table, used also for search form"
	"#( (aspect,  title, size, filter align) (...) )"
	^colMap! !

!AdvancedSearch methodsFor: 'private'!
colMap: anArrayOfSymbols
	colMap := anArrayOfSymbols! !

!AdvancedSearch methodsFor: 'private'!
colMapAt: anAspect ifAbsent: aBlock
	^self colMap detect: [:each | each first = anAspect] ifNone: aBlock! !

!AdvancedSearch methodsFor: 'column mappings'!
colNames
	"for auto columns in search results"
	^self colNamesWithout: #()! !

!AdvancedSearch methodsFor: 'column mappings'!
colNamesWithout: anArrayOfAspects
	"for auto columns in search results"
	| collection |
	collection := OrderedCollection new.
	(self colAspectsWithout: anArrayOfAspects) do: [:aspect || map |
		map := self colMapAt: aspect ifAbsent: [nil].
		collection add: (map notNil ifTrue: [map at: 2 "title" ifAbsent: [nil]]) ].
	^collection! !

!AdvancedSearch methodsFor: 'private'!
criteria
	criteria isNil ifTrue: [self initCriteria].
	^criteria! !

!AdvancedSearch methodsFor: 'private'!
doesNotUnderstand: aMessage
	| aspect |
	aspect := (aMessage selector asString copyUpTo: $: ) asSymbol.
	(self criteria includesKey: aspect) ifFalse: [self criteria at: aspect put: ''].
	aMessage arguments notEmpty ifTrue: "mutator"
		[self criteria at: aspect put: aMessage arguments first].
	^self criteria at: aspect! !

!AdvancedSearch methodsFor: 'search form'!
fields: anArrayOfAspects to: anElement
	"build a search form for defined aspects (accessors) of searched objects"
	anArrayOfAspects do: [:aspect || name size |
		name := self nameFor: aspect.
		name last ~= $: ifTrue: [name := name, ':'].
		anElement cell addText: name.
		size := (self sizeFor: aspect) notNil ifTrue: [self sizeFor: aspect] ifFalse: [8].
		anElement newCell addInputFieldAspect: aspect for: self size: size.
		aspect ~= anArrayOfAspects last 
			ifTrue: [anElement newRow] ].! !

!AdvancedSearch methodsFor: 'column mappings'!
filterFor: anAspectSymbol
	"column filter yes/no/size for that field"
	^(self colMapAt: anAspectSymbol ifAbsent: [^nil])
		at: 4! !

!AdvancedSearch methodsFor: 'initialize-release'!
initCriteria
	criteria := Dictionary new.! !

!AdvancedSearch methodsFor: 'initialize-release'!
initResults
	results := OrderedCollection new.! !

!AdvancedSearch methodsFor: 'private'!
isExactMatchRequested: aString
	" if string is in quotation "
	aString isEmpty ifTrue: [^false].
	^aString trimBlanks first = $" and: [aString trimBlanks last = $" ]! !

!AdvancedSearch methodsFor: 'column mappings'!
nameFor: anAspectSymbol
	"column name/title for that field"
	^(self colMapAt: anAspectSymbol ifAbsent: [^nil])
		at: 2! !

!AdvancedSearch methodsFor: 'private'!
object: anObject match: aCriteria
	| objValue |
	aCriteria associationsDo: [:assoc | 
		(anObject class canUnderstand: assoc key) ifTrue:
			[objValue := anObject perform: assoc key.
			(objValue isKindOf: String) 
				ifTrue: 
					[(assoc value match: objValue) ifFalse: [^false] ] 
				ifFalse:  "numbers, dates etc."
					["self alignCriteria: aCriteria aspect: assoc key with: anObject."
					(assoc value match: objValue printString) ifFalse: [^false] ] ] ].
	^true! !

!AdvancedSearch methodsFor: 'private'!
preparedCriteria
	"just search fields, which are not empty"
	| dict |
	dict := Dictionary new.
	self criteria keysAndValuesDo: 
		[:key :value | 
			value trimBlanks notEmpty ifTrue:
				[(self isExactMatchRequested: value)
					ifTrue: [dict at: key put: (self withoutQuotation: value trimBlanks)]
					ifFalse: [dict at: key put: (value, '*')] ] ].
	^dict! !

!AdvancedSearch methodsFor: 'search'!
results
	results isNil ifTrue: [self initResults].
	^results! !

!AdvancedSearch methodsFor: 'search'!
searchFrom: aCollection
	| preparedCriteria |
	preparedCriteria := self preparedCriteria.
	results := aCollection select: [:each | self object: each match: preparedCriteria].
	^self results! !

!AdvancedSearch methodsFor: 'accessing'!
searchedAspects
	"aspect symbols, which have a search criteria set"
	^self preparedCriteria keys! !

!AdvancedSearch methodsFor: 'column mappings'!
sizeFor: anAspectSymbol
	"size for that field"
	^(self colMapAt: anAspectSymbol ifAbsent: [^nil])
		at: 3! !

!AdvancedSearch methodsFor: 'private'!
withoutQuotation: aString
	^aString copyFrom: 2 to: aString size -1! !

!AidaModelAdaptor methodsFor: 'accessing'!
aspect

	^aspect! !

!AidaModelAdaptor methodsFor: 'private'!
aspect: aSymbol

	aspect := aSymbol! !

!AidaModelAdaptor methodsFor: 'private'!
buffer
	"a buffered value before saved to the domain object"
	"an already converted value before it is saved to the domain object"
	^buffer! !

!AidaModelAdaptor methodsFor: 'private'!
buffer: aValue
	"an already converted value before it is saved to the domain object"
	buffer := aValue! !

!AidaModelAdaptor methodsFor: 'accessing'!
changed
	"is value changed?"
	changed ifNil: [self resetChanged].
	^changed! !

!AidaModelAdaptor methodsFor: 'accessing'!
convertedAndEncodedValue
	self format = #iso ifTrue: 	"Date should be ISO formated: yyyy-mm-dd"
		[^self value year printString, '-', 
			(self value monthIndex < 10 ifTrue: ['0'] ifFalse: ['']), self value monthIndex printString, '-',
			(self value dayOfMonth < 10 ifTrue: ['0'] ifFalse: ['']), self value dayOfMonth printString].
	^self value! !

!AidaModelAdaptor methodsFor: 'accessing'!
format
	"format of the value. Dep≈°ends of value type. If nil, autoformating is used"
	"For Date can be #iso #sloDate #shortSloDate"
	^format! !

!AidaModelAdaptor methodsFor: 'accessing'!
format: aSymbol
	"format of the value. Dep≈°ends of value type. If nil, autoformating is used"
	"For Date can be #iso #sloDate #shortSloDate"
	format := aSymbol! !

!AidaModelAdaptor methodsFor: 'accessing'!
index

	^index! !

!AidaModelAdaptor methodsFor: 'private'!
index: aNumber
	index := aNumber! !

!AidaModelAdaptor methodsFor: 'initialize-release'!
initDefaultValidationBlock
	self validationBlock: [:value | true ] "just validate it"! !

!AidaModelAdaptor methodsFor: 'testing'!
isAspectAdaptor
	^self aspect notNil! !

!AidaModelAdaptor methodsFor: 'testing'!
isEmpty
	"nothing entered in this field"
	^self buffer isNil or: [self buffer trimBlanks isEmpty]! !

!AidaModelAdaptor methodsFor: 'testing'!
isIndexAdaptor
	^self index notNil! !

!AidaModelAdaptor methodsFor: 'validation'!
isValid
	"bufered value is valid according to the rule in validationBlock"
	self changed ifFalse: [^true]. "value not changed, nothing to validate!!"
	self validationBlock isNil ifTrue: [^true]. "leave this instvar nil until really needed, to avoid garbage"
	^self validationBlock value: self buffer! !

!AidaModelAdaptor methodsFor: 'private'!
resetChanged
	changed := false! !

!AidaModelAdaptor methodsFor: 'private'!
sanitize
	"sanitize input from <script> and similar input to prevent entering XSS and similar malicious code"
	| in out |
	in := ReadStream on: self buffer.
	out := WriteStream on: String new.
	[in atEnd] whileFalse:
		[in peek = $< 
			ifTrue: [out nextPutAll: (self sanitizeTagFrom: in)]
			ifFalse: [out nextPut: in next] ].
	self buffer: out contents! !

!AidaModelAdaptor methodsFor: 'private'!
sanitizeTagFrom: aStream
	"sanitize tag by just skipping 'script' if found "
	| out inx|
	out := WriteStream on: String new.
	[aStream atEnd or: [aStream peek = $> ]] whileFalse:
		[out nextPut: aStream next.
		aStream peek = $< ifTrue: [out nextPutAll: (self sanitizeTagFrom: aStream)]]. "deal with tags within tags"
	aStream peek = $> ifTrue: [out nextPut: aStream next].
	^('*script*' match: out contents)
		ifTrue: 
			[inx := out contents asLowercase indexOfSubCollection: 'script' startingAt: 1.
			(out contents copyFrom: 1 to: inx-1), (out contents copyFrom: inx+6 to: out contents size)]
		ifFalse: [out contents].! !

!AidaModelAdaptor methodsFor: 'saving'!
save
	"save the value to the domain model. Save only if validated, othewise raise an exception"
	self changed ifFalse: [^nil].
	self isValid ifFalse: [self error: 'value validation failed!!'].
	self saveValue: self buffer.
	self resetChanged.
	self buffer: nil! !

!AidaModelAdaptor methodsFor: 'private'!
saveValue: aValue
	self isAspectAdaptor ifTrue: [self subject perform: (self aspect asString, ':') asSymbol with: aValue].
	self isIndexAdaptor ifTrue: [self subject at: self index put: aValue]! !

!AidaModelAdaptor methodsFor: 'private'!
setChanged
	changed := true! !

!AidaModelAdaptor methodsFor: 'accessing'!
subject
	"subject of adapting, a domain object"
	^subject! !

!AidaModelAdaptor methodsFor: 'private'!
subject: anObject
	"subject of adapting, a domain object"
	subject := anObject! !

!AidaModelAdaptor methodsFor: 'validation'!
validationBlock
	"block must return true to validate a value, which is argument of that block"
	"example block: [:value | value class = Date ] "
"	validationBlock isNil ifTrue: [self initDefaultValidationBlock]. " "leave nil to avoid unecessary garbage"
	^validationBlock! !

!AidaModelAdaptor methodsFor: 'validation'!
validationBlock: aBlock
	"block must return true to validate a value, which is argument of that block"
	"example block: [:value | value class = Date ] "
	validationBlock := aBlock! !

!AidaModelAdaptor methodsFor: 'accessing'!
value
	self isAspectAdaptor ifTrue: [^self subject perform: self aspect].
	self isIndexAdaptor ifTrue: [^self subject at: self index]! !

!AidaModelAdaptor methodsFor: 'accessing'!
value: aValue
	"value is first put in buffer. To the domain model is written with #save, but only if 
	pass the validation with #isValid"
	self buffer: aValue.
	self setChanged! !

!AidaModelAdaptor class methodsFor: 'instance creation'!
forAspect: aSymbol
	^super new aspect: aSymbol! !

!AidaModelAdaptor class methodsFor: 'instance creation'!
forIndex: aNumber
	^super new index: aNumber! !

!AidaModelNullAdaptor methodsFor: 'validation'!
isValid
	^true! !

!AidaModelNullAdaptor methodsFor: 'saving'!
save
	"nothing to save here"! !

!AidaModelNullAdaptor methodsFor: 'accessing'!
value
	^value notNil ifTrue: [value] ifFalse: ['']! !

!AidaModelNullAdaptor methodsFor: 'accessing'!
value: aString
	value := aString! !

!AidaMutex methodsFor: 'critical sections'!
critical: aBlock
	| process |
	process := Processor activeProcess.
	^ (owner == process)
		ifTrue: [ aBlock value ]
		ifFalse: [
			semaphore critical: [
				owner := process.
				aBlock ensure: [ owner := nil ] ] ]! !

!AidaMutex methodsFor: 'initialize-release'!
initialize
	super initialize.
	semaphore := Semaphore forMutualExclusion! !

!AidaMutex methodsFor: 'accessing'!
owner
	^ owner! !

!AidaMutex methodsFor: 'critical sections'!
terminateOwner
	owner notNil ifTrue: [owner terminate]! !

!AidaMutex class methodsFor: 'instance creation'!
new
	^super basicNew
		initialize! !

!AidaProfiling methodsFor: 'profiling-gs'!
areadmeGemstone
	"a short description of how to profile, interpret results, why to profile etc."! !

!AidaProfiling methodsFor: 'profiling-gs'!
areadmeResultsGS
	"results, history of, short explanations"

"Gemstone64 2.2.5 Profiling of Aida/Web 5.6, 11.2.08, Janko Mivsek
[1000 timesRepeat: [site answerTo: req]]

elapsed CPU time:    23662 ms,  monitoring interval: 10 ms
24ms/req, 40 req/s"! !

!AidaProfiling methodsFor: 'profiling-vw'!
areadmeResultsVW
	"results, history of, short explanations"

"VW 7.6 Profiling of Aida/Web 5.6, 11.2.08, Janko Mivsek
[1000 timesRepeat: [site answerTo: req]]

707 samples, 20.03 average ms/sample, 1780 scavenges, 28 incGCs,
11.75s active, 2.35s other processes,
14.16s real time, 0.06s profiling overhead
12ms/req, 83 req/s"! !

!AidaProfiling methodsFor: 'profiling-squeak'!
areadmeSqueak
	"a short description of how to profile, interpret results, why to profile etc."! !

!AidaProfiling methodsFor: 'profiling-vw'!
areadmeVW
	"a short description of how to profile, interpret results, why to profile etc."! !

!AidaProfiling methodsFor: 'support'!
ensure100KBFile
	"dummy .jpg file"
	| fname stream |
	fname := SpFilename named: 'test100K.jpg'.
	fname exists ifFalse:
		[[stream := fname writeStream binary.
		100000 timesRepeat: [stream nextPut: 16rCE] "just something"]
			ensure: [stream close] ].! !

!AidaProfiling methodsFor: 'support'!
pingRequest
	| requestStream req |
	requestStream := SwazooStream on: String new.
	requestStream
		nextPutLine: 'GET /ping.html HTTP/1.1';
		crlf.
	req := HTTPRequest readFrom: (SwazooStream on: requestStream writeBuffer contents).
	req task: SwazooTask new.  req task request: req.
	req task connection: (HTTPConnection new stream: (SwazooStream on: String new)).
	^req! !

!AidaProfiling methodsFor: 'profiling-gs'!
profileAnswerToGS
	"AIDASite>>answerTo: profile"
	"AidaProfiling new profileAnswerToVW"

	| site  req |
	site := AIDASite new initialize.
	req := self sampleRequest.
	site answerTo: req. site answerTo: req.
	Smalltalk.ProfMonitor monitorBlock: 
		[1000 timesRepeat: [site answerTo: req]]! !

!AidaProfiling methodsFor: 'profiling-vw'!
profileAnswerToVW
	"AIDASite>>answerTo: profile"
	"AidaProfiling new profileAnswerToVW"
	| site req resp |
	site := AIDASite new initialize. site admin. "to init its URL"
	req := self sampleRequest.  "/admin?view=login  with cookie set"
	resp := site answerTo: req. 
	TimeProfiler new 
		samplingInterval: 10; 
		profile: [1000 timesRepeat: [site answerTo: req]].
	^resp "to check if it is actually as expected"! !

!AidaProfiling methodsFor: 'profiling-vw'!
profilePingToVW
	"AIDASite>>answerTo: profile"
	"AidaProfiling new profilePingToVW"
	| site req resp |
	site := AIDASite new initialize.
	req := self pingRequest.  "/ping.html"
	resp := site answerTo: req. 
	TimeProfiler new 
		samplingInterval: 10; 
		profile: [10000000 timesRepeat: [site answerTo: req]].
	^resp "to check if it is actually as expected"! !

!AidaProfiling methodsFor: 'profiling-vw'!
profileStatic100KBVW
	"static 100KB file serving"
	"AidaProfiling new profileStatic100KBVW"
	| site req resp |
	self ensure100KBFile.
	site := AIDASite new initialize.
	req := self static100KBRequest.  "/test100K.jpg?id=123456"
	resp := site answerTo: req. req task response: nil. "streaming!!"
	TimeProfiler new 
		samplingInterval: 10; 
		profile: [1 timesRepeat: [site answerTo: req.  req task response: nil] ].
	^resp "to check if it is actually as expected"! !

!AidaProfiling methodsFor: 'support'!
sampleRequest
	| requestStream req |
	requestStream := SwazooStream on: String new.
	requestStream
		nextPutLine: 'GET /admin?view=login HTTP/1.1';
		nextPutLine: 'Cookie: aida9357=123456';
		crlf.
	req := HTTPRequest readFrom: (SwazooStream on: requestStream writeBuffer contents).
	req task: SwazooTask new.  req task request: req.
	req task connection: (HTTPConnection new stream: (SwazooStream on: String new)).
	^req! !

!AidaProfiling methodsFor: 'support'!
static100KBRequest
	| requestStream req |
	requestStream := SwazooStream on: String new.
	requestStream
		nextPutLine: 'GET /test100K.jpg HTTP/1.1';
		crlf;
		nextPutLine: 'Cookie: aida9357=123456';
		crlf.
	req := HTTPRequest readFrom: (SwazooStream on: requestStream writeBuffer contents).
	req task: SwazooTask new.  req task request: req.
	req task connection: (HTTPConnection new stream: (SwazooStream on: String new)).
	^req! !

!Association methodsFor: '*Aida' stamp: 'np 3/25/2009 15:36'!
aidaIsAssociation
	"used for Aida/Web translation support, multilingual strings are namelly assocs: #fr->'Bonjour'"
	^true! !

!BlockClosure methodsFor: '*Aida' stamp: 'np 10/17/2008 17:46'!
aidaDeepCopyNotIn: aDict
	^nil! !

!BmpImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
colorValueFrom: rgbInteger 
	| scalingValue |
	scalingValue := ColorValue scalingValue.
	^ColorValue
		scaledRed: (self
				convertValue: ((rgbInteger bitShift: -16)
						bitAnd: 255)
				from: 255
				to: scalingValue)
		scaledGreen: (self
				convertValue: ((rgbInteger bitShift: -8)
						bitAnd: 255)
				from: 255
				to: scalingValue)
		scaledBlue: (self
				convertValue: (rgbInteger bitAnd: 255)
				from: 255
				to: scalingValue)! !

!BmpImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextImage
	self readBitmapFileHeader.
	self readBitmapInfoHeader.
	self readImagePalette.
	self readImageData.
	^imageObject! !

!BmpImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLSBLong
	^self next + (self next bitShift: 8) + (self next bitShift: 16) + (self next bitShift: 24)! !

!BmpImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLSBLongPut: a32BitW 
	self nextPut: (a32BitW bitAnd: 255).
	self nextPut: ((a32BitW bitShift: -8)
			bitAnd: 255).
	self nextPut: ((a32BitW bitShift: -16)
			bitAnd: 255).
	self nextPut: ((a32BitW bitShift: -24)
			bitAnd: 255)! !

!BmpImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLSBWord
	^self next + (self next bitShift: 8)! !

!BmpImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLSBWordPut: a16BitW 
	self nextPut: (a16BitW bitAnd: 255).
	self nextPut: ((a16BitW bitShift: -8)
			bitAnd: 255)! !

!BmpImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextPutImage: anImage 
	(anImage isKindOf: Image)
		ifFalse: [^self errorCanNotWrite].
	(anImage bitsPerPixel = 8 or: [anImage bitsPerPixel = 24])
		ifTrue: [imageObject := anImage]
		ifFalse: [anImage bitsPerPixel > 8
				ifTrue: [imageObject := anImage convertToPalette: (FixedPalette
									redShift: 16
									redMask: 255
									greenShift: 8
									greenMask: 255
									blueShift: 0
									blueMask: 255)]
				ifFalse: [Cursor wait showWhile: [imageObject := anImage convertToPalette: self class colorPalette256 renderedBy: ErrorDiffusion new]]].
	self writeBitmapFileHeader.
	self writeBitmapInfoHeader.
	self writeImagePalette.
	self writeImageData.
	bfSize := self position.
	^anImage! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readBitmapFileHeader
	| position |
	position := self position.
	(self hasMagicNumber: 'BM' asByteArray)
		ifFalse: [^self errorCanNotRead].
	self position: position.
	bfType := self nextWord.
	bfSize := self nextLSBLong.
	bfReserved1 := self nextLSBWord.
	bfReserved2 := self nextLSBWord.
	bfOffBits := self nextLSBLong! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readBitmapInfoHeader
	biSize := self nextLSBLong.
	biWidth := self nextLSBLong.
	biHeight := self nextLSBLong.
	biPlanes := self nextLSBWord.
	biBitCount := self nextLSBWord.
	biCompression := self nextLSBLong.
	biSizeImage := self nextLSBLong.
	biXPelsPerMeter := self nextLSBLong.
	biYPelsPerMeter := self nextLSBLong.
	biClrUsed := self nextLSBLong.
	biClrImportant := self nextLSBLong! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth1Data
	| image total progress count index |
	self position: bfOffBits.
	image := Image
				extent: biWidth @ biHeight
				depth: biBitCount
				palette: imagePalette.
	total := biWidth * biHeight.
	progress := 0.
	self progress: progress / total.
	biHeight - 1
		to: 0
		by: -1
		do: 
			[:y | 
			count := 128.
			0 to: biWidth - 1
				do: 
					[:x | 
					count = 128 ifTrue: [index := self next].
					image
						atX: x
						y: y
						put: (index bitAnd: count).
					count := count / 2.
					count < 1 ifTrue: [count := 128].
					progress := progress + 1.
					self progress: progress / total]].
	^image! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth1Palette
	^MappedPalette blackWhite! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth24Data
	| image total progress count rgb color index |
	self position: bfOffBits.
	image := Image
				extent: biWidth @ biHeight
				depth: biBitCount
				palette: imagePalette.
	total := biWidth * biHeight.
	progress := 0.
	self progress: progress / total.
	biHeight - 1
		to: 0
		by: -1
		do: 
			[:y | 
			count := 0.
			0 to: biWidth - 1
				do: 
					[:x | 
					rgb := self next + (self next bitShift: 8) + (self next bitShift: 16).
					color := self colorValueFrom: rgb.
					index := image palette indexOfPaintNearest: color.
					image
						atX: x
						y: y
						put: index.
					count := count + 3.
					progress := progress + 1.
					self progress: progress / total].
			[count \\ 4 = 0]
				whileFalse: 
					[self next.
					count := count + 1]].
	^image! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth24Palette
	^FixedPalette
		redShift: 16
		redMask: 255
		greenShift: 8
		greenMask: 255
		blueShift: 0
		blueMask: 255! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth8Data
	| image total progress count index |
	self position: bfOffBits.
	image := Image
				extent: biWidth @ biHeight
				depth: biBitCount
				palette: imagePalette.
	total := biWidth * biHeight.
	progress := 0.
	self progress: progress / total.
	biHeight - 1
		to: 0
		by: -1
		do: 
			[:y | 
			count := 0.
			0 to: biWidth - 1
				do: 
					[:x | 
					index := self next.
					image
						atX: x
						y: y
						put: index.
					count := count + 1.
					progress := progress + 1.
					self progress: progress / total].
			[count \\ 4 = 0]
				whileFalse: 
					[self next.
					count := count + 1]].
	^image! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readDepth8Palette
	| size colors rgb color |
	size := 1 bitShift: biBitCount.
	biClrUsed = 0 ifFalse: [size := biClrUsed].
	colors := Array new: size.
	1 to: size
		do: 
			[:index | 
			rgb := self next + (self next bitShift: 8) + (self next bitShift: 16).
			self next.
			color := self colorValueFrom: rgb.
			colors at: index put: color].
	^MappedPalette withColors: colors! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readImageData
	biCompression = 0 ifFalse: [^self errorCanNotRead].
	imageObject := nil.
	biBitCount = 24 ifTrue: [imageObject := self readDepth24Data].
	biBitCount = 8 ifTrue: [imageObject := self readDepth8Data].
	biBitCount = 1 ifTrue: [imageObject := self readDepth1Data].
	imageObject isNil ifTrue: [^self errorCanNotRead].
	^imageObject! !

!BmpImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readImagePalette
	imagePalette := nil.
	biBitCount = 24 ifTrue: [imagePalette := self readDepth24Palette].
	biBitCount = 8 ifTrue: [imagePalette := self readDepth8Palette].
	biBitCount = 1 ifTrue: [imagePalette := self readDepth1Palette].
	imagePalette isNil ifTrue: [^self errorCanNotRead]! !

!BmpImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rgbIntegerArrayFor: aPalette 
	| colors |
	colors := Array new: aPalette maxIndex + 1.
	1 to: colors size do: [:i | colors at: i put: (self rgbIntegerFrom: (aPalette at: i - 1 ifAbsent: [ColorValue white]))].
	^colors! !

!BmpImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rgbIntegerFrom: aColorValue 
	| scalingValue |
	scalingValue := ColorValue scalingValue.
	^((self
		convertValue: aColorValue scaledRed
		from: scalingValue
		to: 255)
		bitShift: 16)
		+ ((self
				convertValue: aColorValue scaledGreen
				from: scalingValue
				to: 255)
				bitShift: 8) + (self
			convertValue: aColorValue scaledBlue
			from: scalingValue
			to: 255)! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeBitmapFileHeader
	bfType := ($B asInteger bitShift: 8)
				+ $M asInteger.
	bfSize := 0.
	bfReserved1 := 0.
	bfReserved2 := 0.
	bfOffBits := nil.
	imageObject bitsPerPixel = 8 ifTrue: [bfOffBits := 54 + (imageObject palette size * 4)].
	imageObject bitsPerPixel = 24 ifTrue: [bfOffBits := 54].
	bfOffBits isNil ifTrue: [^self errorCanNotWrite].
	self nextWordPut: bfType.
	self nextLSBLongPut: bfSize.
	self nextLSBWordPut: bfReserved1.
	self nextLSBWordPut: bfReserved2.
	self nextLSBLongPut: bfOffBits! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeBitmapInfoHeader
	biSize := 40.
	biWidth := imageObject width.
	biHeight := imageObject height.
	biPlanes := 1.
	biBitCount := imageObject bitsPerPixel.
	biCompression := 0.
	biSizeImage := 0.
	biXPelsPerMeter := 0.
	biYPelsPerMeter := 0.
	biClrUsed := 0.
	imageObject bitsPerPixel = 8 ifTrue: [biClrUsed := (imageObject palette size)].
	biClrImportant := 0.
	self nextLSBLongPut: biSize.
	self nextLSBLongPut: biWidth.
	self nextLSBLongPut: biHeight.
	self nextLSBWordPut: biPlanes.
	self nextLSBWordPut: biBitCount.
	self nextLSBLongPut: biCompression.
	self nextLSBLongPut: biSizeImage.
	self nextLSBLongPut: biXPelsPerMeter.
	self nextLSBLongPut: biYPelsPerMeter.
	self nextLSBLongPut: biClrUsed.
	self nextLSBLongPut: biClrImportant! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeDepth24Data
	| total progress count index color rgb |
	self position = bfOffBits ifFalse: [^self errorCanNotWrite].
	total := biWidth * biHeight.
	progress := 0.
	self progress: progress / total.
	biHeight - 1
		to: 0
		by: -1
		do: 
			[:y | 
			count := 0.
			0 to: biWidth - 1
				do: 
					[:x | 
					index := imageObject atX: x y: y.
					color := imageObject palette at: index.
					rgb := self rgbIntegerFrom: color.
					self nextPut: (rgb bitAnd: 255).
					self nextPut: ((rgb bitShift: -8)
							bitAnd: 255).
					self nextPut: ((rgb bitShift: -16)
							bitAnd: 255).
					count := count + 3.
					progress := progress + 1.
					self progress: progress / total].
			[count \\ 4 = 0]
				whileFalse: 
					[self nextPut: 0.
					count := count + 1]].
	^imageObject! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeDepth24Palette
	^imageObject palette! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeDepth8Data
	| count index |
	self position = bfOffBits ifFalse: [^self errorCanNotWrite].
"
	total := biWidth * biHeight.
	progress := 0.
	self progress: progress / total. 
"
	biHeight - 1
		to: 0
		by: -1
		do: 
			[:y | 
			count := 0.
			0 to: biWidth - 1
				do: 
					[:x | 
					index := imageObject atX: x y: y.
					self nextPut: index.
					count := count + 1.
"					progress := progress + 1.
					self progress: progress / total
"
					].
			[count \\ 4 = 0]
				whileFalse: 
					[self nextPut: 0.
					count := count + 1]].
	^imageObject! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeDepth8Palette
	| size palette array |
	size := 1 bitShift: biBitCount.
	palette := imageObject palette.
	palette size = size ifFalse: [self errorCanNotWrite].
	array := self rgbIntegerArrayFor: palette.
	array
		do: 
			[:rgb | 
			self nextPut: (rgb bitAnd: 255).
			self nextPut: ((rgb bitShift: -8)
					bitAnd: 255).
			self nextPut: ((rgb bitShift: -16)
					bitAnd: 255).
			self nextPut: 0].
	^imageObject palette! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeImageData
	biCompression = 0 ifFalse: [^self errorCanNotWrite].
	biBitCount = 24 ifTrue: [^self writeDepth24Data].
	biBitCount = 8 ifTrue: [^self writeDepth8Data].
	^self errorCanNotWrite! !

!BmpImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeImagePalette
	imagePalette := nil.
	biBitCount = 24 ifTrue: [imagePalette := self writeDepth24Palette].
	biBitCount = 8 ifTrue: [imagePalette := self writeDepth8Palette].
	imagePalette isNil ifTrue: [^self errorCanNotWrite]! !

!BmpImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
copyright
	^'Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.'! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example1
	"BmpImageStream example1."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename writeStream.
	[Cursor write showWhile: [stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example2
	"BmpImageStream example2."

	| filename stream image |
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename readStream.
	[Cursor read showWhile: [image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example3
	"BmpImageStream example3."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example4
	"BmpImageStream example4."

	| filename stream image |
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example5
	"BmpImageStream example5."

	| image filename stream progress |
	image := Image fromUser.
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'writing bmp...'.
			progress do: [stream nextPutImage: image]]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BmpImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example6
	"BmpImageStream example6."

	| filename stream progress image |
	filename := 'zzz.bmp' asFilename.
	stream := BmpImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'reading bmp...'.
			progress do: [image := stream nextImage]]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BmpImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
system
	^'Goodies'! !

!BmpImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
version
	^'003'! !

!BosImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextImage
	| size process bos image |
	self readHeader isNil ifTrue: [^nil].
	size := imageStream size max: 1.0e-6.
	process := [[imageStream position < size]
				whileTrue: 
					[self progress: imageStream position / size.
					(Delay forMilliseconds: 3) wait]] newProcess.
	process priority: Processor activeProcess priority + 5.
	process resume.
	
	[bos := BinaryObjectStorage onOldNoScan: imageStream.
	self progress: 0.
	image := bos next.
	self progress: 1]
		valueNowOrOnUnwindDo: 
			[process terminate.
			process := nil].
	^image! !

!BosImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextPutImage: anImage 
	| size process bos bytes |
	(anImage isKindOf: Image) not ifTrue: [^self errorCanNotWrite].
	self writeHeader.
	bytes := WriteStream on: (bytes := ByteArray new: 1024).
	self size timesRepeat: [bytes nextPut: 0].
	bos := BinaryObjectStorage onNew: bytes.
	bos nextPut: anImage asImage.
	size := bytes contents size max: 1.0e-6.
	process := [[imageStream position < size]
				whileTrue: 
					[self progress: imageStream position / size.
					(Delay forMilliseconds: 3) wait]] newProcess.
	process priority: Processor activeProcess priority + 5.
	process resume.
	
	[bos := BinaryObjectStorage onNew: imageStream.
	self progress: 0.
	bos nextPut: anImage asImage.
	self progress: 1]
		valueNowOrOnUnwindDo: 
			[process terminate.
			process := nil].
	^anImage! !

!BosImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readHeader
	(self hasMagicNumber: 'BosImage' asByteArray)
		ifFalse: [^self errorCanNotRead]! !

!BosImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeHeader
	self nextPutAll: 'BosImage' asByteArray.! !

!BosImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
copyright
	^'Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.'! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example1
	"BosImageStream example1."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename writeStream.
	[Cursor write showWhile: [stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example2
	"BosImageStream example2."

	| filename stream image |
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename readStream.
	[Cursor read showWhile: [image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example3
	"BosImageStream example3."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example4
	"BosImageStream example4."

	| filename stream image |
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example5
	"BosImageStream example5."

	| image filename stream progress |
	image := Image fromUser.
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'writing bos...'.
			progress do: [stream nextPutImage: image]]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!BosImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example6
	"BosImageStream example6."

	| filename stream image progress |
	filename := 'zzz.bos' asFilename.
	stream := BosImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'reading bos...'.
			progress do: [image := stream nextImage]]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!BosImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
system
	^'Goodies'! !

!BosImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
version
	^'003'! !

!Class methodsFor: '*Aida' stamp: 'np 10/17/2008 17:46'!
aidaDeepCopyNotIn: aDict
	^nil! !

!Collection methodsFor: '*Aida' stamp: 'janko 4/25/2012 10:58'!
aidaIsRespondingStreamed
	^false! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:04'!
allDailyCollectionDated: aDate
	"all on that date in any of daily collections"
	^self inject: OrderedCollection new into: [:col :each | col addAll: (each allDated: aDate). col]

"DailyCollection allInstances allDailyCollectionDated: 
		DailyCollection allInstances allDailyCollectionDates asOrderedCollection last."! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:05'!
allDailyCollectionDates
	"all dates which occur of any of daily collections"
	^self allDailyCollectionDays collect: [:each | Date fromDays: each].

"DailyCollection allInstances allDailyCollectionDates"! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:04'!
allDailyCollectionDays
	"all day numbers which occur of any of daily collections"
	^self inject: Set new into: [:set :each | set addAll: each allDays. set].

"DailyCollection allInstances allDailyCollectionDays"! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:05'!
allDailyCollectionEntries
	"sorted by date"
	| days |
	days := self allDailyCollectionDays.
	days := days asSortedCollection. 
	^days inject: OrderedCollection new into: [:col :day | 
		self do: [:daily | (daily days includesKey: day) ifTrue: [col addAll: (daily days at: day)] ].
		col].

"DailyCollection allInstances allDailyCollectionEntries"! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:05'!
allDailyCollectionFromDate: aStartDate to: anEndDate
	"sorted by date"
	| startDay endDay daysInRange |
	startDay := aStartDate asDays. endDay := anEndDate asDays.
	daysInRange := self allDailyCollectionDays select: [:each | each >= startDay and: [each <= endDay] ].
	daysInRange := daysInRange asSortedCollection. 
	^daysInRange inject: OrderedCollection new into: [:col :day | 
		self do: [:daily | (daily days includesKey: day) ifTrue: [col addAll: (daily days at: day)] ].
		col].

"DailyCollection allInstances allDailyCollectionFromDate: (Date readSloFrom: '1.1.2004' readStream) 
  	to: (Date readSloFrom: '31.12.2006' readStream)"! !

!Collection methodsFor: '*Aida-Daily collections'!
allDailyCollectionYear: aNumber
	| selected |
	selected := self select: [:each | each includesYear: aNumber].
	^selected
		allDailyCollectionFromDate: (Date newDay: 1 monthNumber: 1 year: aNumber)
		to: (Date newDay: 31 monthNumber: 12 year: aNumber)

"DailyCollection allInstances allDailyCollectionYear: 2004 "! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:05'!
allDailyCollectionYears
	"all years on which occur of anything of daily collections. Sorted!!"
	^SortedCollection 
		withAll: (self allDailyCollectionDates inject: Set new into: [:set :each | set add: each year. set])
		sortBlock: [:a :b | a < b].

"DailyCollection allInstances allDailyCollectionYears"! !

!Collection methodsFor: '*Aida-Daily collections' stamp: 'JM 4/22/2007 19:06'!
allDailyCollectionYearsForKindOf: aClass
	"all years on which occur of anything of that class. Sorted!!"
	"optimize that!!"
	^(self inject: Set new into: [:set :each | set addAll: (each allYearsForKindOf: aClass). set])
		asSortedCollection

"DailyCollection allInstances allDailyCollectionYearsForKindOf: AIDA.Invoice"! !

!Collection methodsFor: '*Aida' stamp: 'JM 4/22/2007 19:06'!
isWebElement
	^true "more or less"! !

!Collection methodsFor: '*Aida' stamp: 'JM 4/22/2007 19:06'!
isWebPage
	^false! !

!Company methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
addEmployee: aPerson
	aPerson becomeEmployeeOf: self! !

!Company methodsFor: 'accessing-events' stamp: ' 10/1/08 16:40'!
allEvents
	^self events all! !

!Company methodsFor: 'import-export' stamp: ' 10/1/08 16:40'!
autoEMailAddressesForPersons
	"Repository default company autoEMailAddressesForPersons"
	self allEmployees do: [:person |
		person email isValidEMailAddress ifFalse:  	
			[person email: (person name asSloveneWithoutCircumflexes asLowercase , '.',
			person surname asSloveneWithoutCircumflexes asLowercase, 
			'@salus.si')] ]! !

!Company methodsFor: 'private' stamp: ' 10/1/08 16:40'!
cleanupEmployeeToOrgUnitsConnections
	"(AIDASite named: 'biart') repository company cleanupEmployeeToOrgUnitsConnections"
	| set employees |
	set := self allEmployees asSet.
	employees := self allOrgUnits "collect them through orgunits hierarchy"
		inject: Set new into: [:sett :each | sett addAll: each allMembers; yourself].
	(employees reject: [:each | set includes: each]) "those dangling"
		do: [:each | each becomeFormerEmployeeOf: self. each removeJobRole.
			self allOrgUnits do: [:unit | unit removeMember: each] ].
	employees := self allOrgUnits inject: Set new into: [:sett :each | 
		sett addAll: each allPersonsWithJobRoles; yourself].
	(employees reject: [:each | set includes: each])
		do: [: each | each removeJobRole].! !

!Company methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
company
	^self! !

!Company methodsFor: 'import-export' stamp: ' 10/1/08 16:40'!
connectEmployeesToOrgUnits
	"salus"	
	"preimenuj zacasno org.enote brez sumnikov!! "
	"Repository default company connectEmployeesToOrgUnits"
	| orgUnit |
	self allEmployees do: [:each |
		orgUnit := self salusOrgUnitFor: each.
		orgUnit notNil ifTrue: [each allOrgUnits isEmpty ifTrue: [each becomeMemberOf: orgUnit] ]]! !

!Company methodsFor: 'import-export' stamp: ' 10/1/08 16:40'!
connectPersonsToWebUsers
	"Repository default company connectPersonsToWebUsers"
	self allEmployees do: [:each | 	AIDASite default securityManager addPerson: each]! !

!Company methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
employeeNamed: aString
	^self allEmployees detect: [:each | aString = each name] ifNone: [nil]! !

!Company methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
employeeNamedSurnamed: aString
	^self allEmployees detect: [:each | aString = each nameSurname] ifNone: [nil]! !

!Company methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
employeeSurnamedNamed: aString
	^self allEmployees detect: [:each | aString = each surnameName] ifNone: [nil]! !

!Company methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
existEmployeeWithId: aString
	^self allEmployees contains: [:each | each id = aString].! !

!Company methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
existEmployeeWithName: aNameString surname: aSurnameString
	^self allEmployees contains: [:each | 
		(each name = aNameString) and: [each surname = aSurnameString]].! !

!Company methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isCompany
	^true! !

!Company methodsFor: 'private'!
preferredUrl
	| nme |
	nme := (self name copyUpTo: $ ) trimBlanks asSloveneWithoutCircumflexes asHttpFriendly.
	^'/', nme! !

!Company methodsFor: 'private'!
printString
	^'company: ', self name! !

!Company methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
removeEmployee: aPerson
	aPerson noMoreEmployeeOf: self.
	self allOrgUnits do: [:each | each removeMember: aPerson].
	aPerson removeJobRole! !

!Company class methodsFor: 'odb specific' stamp: ' 10/1/08 16:40'!
replicationSpecaa
	"Gemstone"
	^#( 	(id 	replicate)
			(name replicate)
			(description replicate)
			(addresses max 4)
			(roles max 2)
			(relatedPartyRoles max 2)
			(events forwarder)
			(relatedObjects max 1) )! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
add: newObject

	self add: newObject onDate: newObject date! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
add: newObject onDate: aDate
	(self includes: newObject onDate: aDate) ifTrue: [^nil].
	self existCheckDate: aDate.
	(self days at: aDate asDays) add: newObject.
	^newObject! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
addAll: aCollection 

	aCollection do: [:each | self add: each].
	^aCollection! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
addAll: aCollection onDate: aDate

	self existCheckDate: aDate.
	^aCollection do: [:each | 	self add: each onDate: aDate].! !

!DailyCollection methodsFor: 'adding-removing' stamp: 'JM 4/26/2007 21:29'!
addFirst: newObject inYear: aYear
	"put in first place at 1st jan of this year"
	| date |
	date := SpDate newDay: 1 month: 1 year: aYear.
	(self includes: newObject onDate: date) ifTrue: [^nil].
	self existCheckDate: date.
	(self days at: date asDays) addFirst: newObject.
	^newObject! !

!DailyCollection methodsFor: 'adding-removing' stamp: 'JM 4/26/2007 21:29'!
addLast: newObject inYear: aYear
	"put in first place at 1st jan of this year"
	| date |
	date := SpDate newDay: 31 month: 12 year: aYear.
	(self includes: newObject onDate: date) ifTrue: [^nil].
	self existCheckDate: date.
	(self days at: date asDays) addLast: newObject.
	^newObject! !

!DailyCollection methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
all
	| dayCol |
	dayCol := SortedCollection
		withAll: self days keys
		sortBlock: [:a :b | a > b].
	^dayCol inject: OrderedCollection new into: [:col :each | col addAll: (self days at: each); yourself ].! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allDated: aDate

	^(self days at: aDate asDays ifAbsent: [^#()] ) copy! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allDates
	"all dates on which something exist"
	^self allDays collect: [:each | Date fromDays: each]! !

!DailyCollection methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
allDays
	"all day numbers on which something exist"
	^self days keys! !

!DailyCollection methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
allDaysForKindOf: aClass
	"all day numbers on which something of that class exist"
	^self days keys select: [:day | 
		(self days at: day) contains: [:each | each isKindOf: aClass] ].! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allFromDate: aStartDate to: anEndDate
	| startDay endDay daysInRange |
	startDay := aStartDate asDays. endDay := anEndDate asDays.
	daysInRange := self allDays select: [:each | each >= startDay and: [each <= endDay] ].
	daysInRange := daysInRange asSortedCollection. 
	^daysInRange inject: OrderedCollection new into: [:col :each | col addAll: (self days at: each). col]

"DailyCollection allInstances last allFromDate: (Date readSloFrom: '1.1.2004' readStream) 
  	to: (Date readSloFrom: '31.12.2006' readStream)"! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allLastMonth
	^self allMonthly: Date today - Date today day! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allLastWeek
	^self allWeekly: Date today - 7! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allLastYear
	^self allYear: Date today year - 1! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allMonthly: aDate
	^self 
		allFromDate: aDate firstDayOfMonth
		to: aDate firstDayInMonth + aDate daysInMonth - 1! !

!DailyCollection methodsFor: 'accessing' stamp: 'np 3/29/2008 05:18'!
allSinceDate: aDate
	^self allFromDate: aDate to: SpDate today! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allThisMonth
	^self allMonthly: Date today! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allThisWeek
	^self allWeekly: Date today! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allThisYear
	^self allYear: Date today year! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allToday
	^self allDated: Date today! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allWeekly: aDate
	^self 
		allFromDate: aDate - aDate weekdayIndex + 1
		to: aDate - aDate weekdayIndex + 1 + 7! !

!DailyCollection methodsFor: 'accessing' stamp: 'JM 4/26/2007 21:30'!
allYear: aNumber
	^self 
		allFromDate: (SpDate newDay: 1 month: 1 year: aNumber)
		to: (SpDate newDay: 31 month: 12 year: aNumber)! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allYears
	"all years on which something exist"
	^SortedCollection 
		withAll: (self allDates inject: Set new into: [:set :each | set add: each year. set])
		sortBlock: [:a :b | a < b]

"DailyCollection allInstances last allYears"! !

!DailyCollection methodsFor: 'private-accessing' stamp: 'janko 8/3/2011 20:34'!
allYearsForKindOf: aClass
	"all years on which something of that class exist"
	| allDays year years skipToDay |
	allDays := self days keys asSortedCollection. allDays isEmpty ifTrue: [^#()].
	years := Set new. skipToDay := 0.
	allDays do: [:day |
		day >= skipToDay ifTrue:
			[((self days at: day) contains: [:entry | entry isKindOf: aClass]) ifTrue:
				[year := (Date fromDays: day) year.
				years add: year. 
				skipToDay := (Date newDay: 1 monthNumber: 1 year: year+1) asDays] ] ].
	^years asSortedCollection asOrderedCollection

"DailyCollection allInstances last allYearsForKindOf: Invoice "! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allYesterday
	^self allDated: Date today - 1! !

!DailyCollection methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
contains: aBlock 
	"Evaluate aBlock with each of the receiver's elements as the argument. 
	Answer true if aBlock ever evaluates to true, otherwise answer false."

	self detect: aBlock ifNone: [^false].
	^true! !

!DailyCollection methodsFor: 'private' stamp: ' 21/4/07 22:07'!
days
	days isNil ifTrue: [self initDays].
	^days! !

!DailyCollection methodsFor: 'private' stamp: ' 21/4/07 22:07'!
existCheckDate: aDate

	(self days includesKey: aDate asDays) ifFalse:
		[self days at: aDate asDays put: OrderedCollection new].! !

!DailyCollection methodsFor: 'accessing'!
firstDayInYear: aYear
	"on 1 januar of that year"
	^self allDated: (Date newDay: 1 monthNumber: 1 year: aYear).! !

!DailyCollection methodsFor: 'accessing'!
firstInYear: aYear
	"on 1st january of that year"
	| col |
	col := self firstDayInYear: aYear.
	col isEmpty ifTrue: [^nil].
	^col first! !

!DailyCollection methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
includes: anObject
	"Answer whether anObject is one of the receiver's elements."

	self days values do: [:each | (each includes: anObject) ifTrue: [^true]].
	^false! !

!DailyCollection methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
includes: anObject onDate: aDate
	| values |
	values := self days at: aDate asDays ifAbsent: [^false].
	^values includes: anObject! !

!DailyCollection methodsFor: 'testing'!
includesYear: aNumber
	"anything on that year?"
	| start end |
	self isEmpty ifTrue: [^false].
	start := (Date newDay: 1 monthNumber: 1 year: aNumber) asDays.
	end := (Date newDay: 31 monthNumber: 12 year: aNumber) asDays.
	^self allDays contains: [:day | day between: start and: end]! !

!DailyCollection methodsFor: 'private' stamp: ' 21/4/07 22:07'!
initDays
	days := Dictionary new.! !

!DailyCollection methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	"Answer whether the receiver contains any elements."

	^self size = 0! !

!DailyCollection methodsFor: 'accessing'!
last
	"find last values, starting from today and back in past. Most recent first!!"
	self isEmpty ifTrue: [^nil].
	^(self last: 1) first! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
last: aNumber
	"find last number of values, starting from today and back in past. Most recent first!!"
	| collection dayColl |
	collection := OrderedCollection new.
	dayColl := SortedCollection withAll: self days keys sortBlock: [:a :b | a > b].
	dayColl do: [:day || coll |
		coll := (self days at: day) copy reverse.
		collection addAll: (coll copyFrom: 1 to: ((aNumber - collection size) min: coll size) ).
		collection size = aNumber ifTrue: [^collection] ].
	^collection

"LogisticSystem default owner events size last: 1000"! !

!DailyCollection methodsFor: 'accessing' stamp: 'JM 4/26/2007 21:31'!
lastDayInYear: aYear
	"on 31 december of that year"
	^self allDated: (SpDate newDay: 31 month: 12 year: aYear).! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
move: anObject fromDate: aDate toDate: aNewDate
	| collection |
	collection := self days at: aDate asDays.
	collection remove: anObject.
	self add: anObject onDate: aNewDate! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
remove: oldObject 
	^self remove: oldObject ifAbsent: [self notFoundError]! !

!DailyCollection methodsFor: 'adding-removing'!
remove: oldObject ifAbsent: anExceptionBlock
	| result |
	result := self remove: oldObject onDate: oldObject date.
	result isNil ifTrue: [^anExceptionBlock value].! !

!DailyCollection methodsFor: 'adding-removing'!
remove: oldObject onDate: aDate
	"remove if exist on that date, otherwise return nil"
	| collection |
	collection := self days at: oldObject date asDays ifAbsent: [^nil].
	collection remove: oldObject ifAbsent: [^nil].
	^oldObject! !

!DailyCollection methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
removeAll: aCollection 
	"Remove each element of aCollection from the receiver.  If successful for each,
	answer aCollection."
	aCollection do: [:each | self remove: each].
	^aCollection! !

!DailyCollection methodsFor: 'adding-removing'!
removeAnywhere: oldObject 
	"First find the right day then remove it. Use tham method if an object's date was changed later"
	self days values do: [:collection | 
		(collection includes: oldObject) ifTrue: 
			[collection remove: oldObject. 
			^true] ].
	^false! !

!DailyCollection methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size
	days isNil ifTrue: [^0].
	^self days values inject: 0 into: [:sum :each | sum + each size].! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allDates
	"all dates on which something exist"
	^self days keys collect: [:each | Date fromDays: each]! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allFromDate: aStartDate to: anEndDate

	| collection |
	collection := OrderedCollection new: 100.
	aStartDate to: anEndDate do: [:date |
		collection add: (self at: date) ].
	^collection! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allLastMonth
	^self allMonthly: Date today - Date today day! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allLastWeek
	^self allWeekly: Date today - 7! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allMonthly: aDate
	^self 
		allFromDate: aDate firstDayOfMonth
		to: aDate firstDayInMonth + aDate daysInMonth - 1! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allThisMonth
	^self allMonthly: Date today! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allThisWeek
	^self allWeekly: Date today! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allWeekly: aDate
	^self 
		allFromDate: aDate - aDate weekdayIndex + 1
		to: aDate - aDate weekdayIndex + 1 + 7! !

!DailyValues methodsFor: 'adding-removing'!
at: aDate
	^self at: aDate ifAbsent: [self defaultValue]! !

!DailyValues methodsFor: 'adding-removing'!
at: aDate add: aValue 
	self existCheckDate: aDate.
	^self days at: aDate asDays put: (self at: aDate) + aValue! !

!DailyValues methodsFor: 'adding-removing'!
at: aDate ifAbsent: aBlock
	^self days at: aDate asDays ifAbsent: [aBlock value]! !

!DailyValues methodsFor: 'adding-removing'!
at: aDate put: aValue
	self existCheckDate: aDate.
	^self days at: aDate asDays put: aValue! !

!DailyValues methodsFor: 'adding-removing'!
at: aDate subtract: aValue
	self existCheckDate: aDate.
	^self days at: aDate asDays put: (self at: aDate) - aValue! !

!DailyValues methodsFor: 'adding-removing'!
atOrLastFrom: aDate
	"return value on that date or last date when some value exist"
	^self at: aDate ifAbsent: [self lastFrom: aDate]! !

!DailyValues methodsFor: 'private' stamp: ' 21/4/07 22:07'!
days
	days isNil ifTrue: [self initDays].
	^days! !

!DailyValues methodsFor: 'private' stamp: ' 21/4/07 22:07'!
defaultValue
	^0! !

!DailyValues methodsFor: 'private' stamp: ' 21/4/07 22:07'!
existCheckDate: aDate

	(self days includesKey: aDate asDays) ifFalse:
		[self days at: aDate asDays put: self defaultValue].! !

!DailyValues methodsFor: 'private' stamp: ' 21/4/07 22:07'!
initDays
	days := IdentityDictionary new.! !

!DailyValues methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	"Answer whether the receiver contains any elements."

	^self size = 0! !

!DailyValues methodsFor: 'accessing' stamp: 'jm 8/1/2010 11:13'!
last
	"return value on last (most future) date entered"
	^self at: self lastDate! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
last: aNumber
	"find last number of values, starting from today and back in past. Most recent first!!"
	| collection |
	collection := OrderedCollection new.
	1 to: aNumber do: [:inx | collection add: (self at: Date today - inx + 1)].
	^collection! !

!DailyValues methodsFor: 'accessing'!
lastDate
	"return date on last (most future) value entered"
	| coll |
	coll := self days keys asSortedCollection.  "not very optimized way for big colections!! "
	coll isEmpty ifTrue: [^nil].
	^Date fromDays: coll last! !

!DailyValues methodsFor: 'private' stamp: ' 21/8/07 09:38'!
lastDateFrom: aDate
	"search back in time for some date on which a value exist and return that date"
	| start |
	start := aDate asDays.
	self days keys asSortedCollection reverse do:  "not very optimized way for big colections!! "
		[:day | day <= start ifTrue: [^Date fromDays: day] ].
	^nil! !

!DailyValues methodsFor: 'private' stamp: ' 21/8/07 09:38'!
lastFrom: aDate
	"search back in time for some date on which a value exist and return it"
	| start |
	start := aDate asDays.
	self days keys asSortedCollection reverse do:  "not very optimized way for big colections!! "
		[:day | day <= start ifTrue: [^self days at: day] ].
	^nil! !

!DailyValues methodsFor: 'adding-removing'!
resetAt: aDate
	"put default value at this date"
	^self at: aDate put: self defaultValue! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size
	^self days values size! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
sumFromDate: aStartDate to: anEndDate

	^(self allFromDate: aStartDate to: anEndDate)
		inject: 0
		into: [:sum :each | sum + each]! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
sumLast: aNumber
	"sum values of aNumber of days, starting from today and back"

	^(self last: aNumber)
		inject: 0
		into: [:sum :each | sum + each]! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
sumMonthly: aDate

	^(self allMonthly: aDate)
		inject: 0
		into: [:sum :each | sum + each]! !

!DailyValues methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
sumWeekly: aDate

	^(self allWeekly: aDate)
		inject: 0
		into: [:sum :each | sum + each]! !

!Date methodsFor: '*Aida' stamp: 'janko 8/3/2011 19:40'!
asDays
	"days between  1jan1901 and receiver,  same as on VisualWorks"
	"Pharo specific!!"
	^self julianDayNumber - 2415386
! !

!Date methodsFor: '*Aida' stamp: 'jm 12/8/2010 22:37'!
monthAndDayString
	"with leading zeros, example: 05-16 for 16may"
	^(self monthIndex < 10 ifTrue: ['0'] ifFalse: ['']), self monthIndex printString, '-',
	 	(self dayOfMonth < 10 ifTrue: ['0'] ifFalse: ['']), self dayOfMonth printString

"Date today monthAndDayString"! !

!Date methodsFor: '*Aida' stamp: 'jm 12/8/2010 22:35'!
printISOString
	^self year printString, 
		(self monthIndex < 10 ifTrue: ['0'] ifFalse: ['']), self monthIndex printString,
		(self dayOfMonth < 10 ifTrue: ['0'] ifFalse: ['']), self dayOfMonth printString

"Date today printISOString   "! !

!Date methodsFor: '*Aida' stamp: 'jm 12/8/2010 22:37'!
shortPrintSloString
	^self dayOfMonth printString, '.', self monthIndex printString, '.', self year printString.

"Date today shortPrintSloString "! !

!Date methodsFor: '*Aida' stamp: 'jm 12/8/2010 22:36'!
shorterPrintSloString
	"year in two digits only"
	| yeart |
	yeart := (self year \\ 100) printString. yeart size = 1 ifTrue: [yeart := '0', yeart].
	^self dayOfMonth printString, '.', self monthIndex printString, '.', yeart.

"Date today shorterPrintSloString"! !

!DefaultAuthenticator methodsFor: 'authenticating'!
authenticateUserNamed: anUsernameString withPassword: aPasswordString
	^(self site securityManager userNamed: anUsernameString withPassword: aPasswordString)
		notNil.! !

!DefaultAuthenticator methodsFor: 'authenticating'!
endAuthentication
	"indicate that authetication is ended"! !

!DefaultAuthenticator methodsFor: 'authenticating'!
existUserNamed: anUsernameString
	^(self site securityManager userNamed: anUsernameString)
		notNil.! !

!DefaultAuthenticator methodsFor: 'accessing'!
site
	^site! !

!DefaultAuthenticator methodsFor: 'private'!
site: anAIDASite
	site := anAIDASite! !

!DefaultAuthenticator methodsFor: 'authenticating'!
startAuthentication
	"indicate that authetication will soon start"! !

!DefaultAuthenticator methodsFor: 'accessing'!
userNamed: anUsernameString
	^self site securityManager userNamed: anUsernameString! !

!DefaultAuthenticator class methodsFor: 'instance creation'!
newOn: anAIDASite
	^super new
		site: anAIDASite! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
adobeLeafGif
	"'imgs/adobe-leaf.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 50 0 50 0 247 0 0 202 44 13 255 230 0 175 117 98 255 175 74 173 171 166 114 35 9 213 205 201 215 54 41 171 68 11 69 84 18 207 184 182 254 218 1 247 181 170 137 45 11 203 25 9 255 200 89 109 135 58 168 152 82 231 89 70 231 53 38 252 244 231 47 13 9 150 140 140 242 161 148 255 181 1 220 59 51 194 148 78 69 22 12 255 243 243 254 171 1 108 114 46 251 218 215 43 54 14 230 227 227 252 153 0 251 156 152 59 74 14 250 167 135 255 72 6 244 229 150 250 169 163 255 197 0 254 139 0 220 64 54 18 4 3 205 111 3 137 141 78 178 184 159 223 26 11 249 150 137 253 101 6 142 5 6 167 155 155 149 72 65 217 221 208 234 68 67 255 88 19 253 246 188 253 236 234 142 162 89 234 220 218 248 199 197 113 11 2 255 117 39 252 198 136 226 60 46 226 65 59 79 96 20 235 67 59 252 136 87 255 135 57 244 119 120 255 108 37 254 191 133 228 34 26 255 229 166 134 102 101 247 162 113 181 48 7 149 156 124 216 43 35 254 250 249 251 76 16 217 100 41 166 3 7 230 43 36 255 204 166 185 6 5 248 176 126 247 120 107 245 210 128 254 137 134 91 35 15 255 107 80 234 165 1 230 74 60 255 241 0 104 114 81 229 65 52 200 200 114 255 217 136 235 102 88 90 109 34 229 73 68 255 255 241 255 129 39 195 85 3 246 104 58 243 58 40 246 136 118 252 195 188 229 217 204 182 80 39 251 215 178 255 248 215 246 80 51 145 116 51 255 102 31 251 199 152 255 255 0 243 105 98 235 230 221 255 151 39 252 156 117 194 88 18 242 137 23 253 38 1 255 83 11 250 230 221 204 84 67 252 112 5 236 68 52 181 19 7 212 89 20 238 234 149 238 89 83 234 62 59 245 233 230 232 121 43 231 52 49 161 22 4 255 220 27 255 57 0 245 187 149 213 68 47 113 88 87 238 238 235 230 180 3 253 224 225 255 153 60 236 75 59 252 253 251 213 172 91 245 157 167 226 48 45 233 226 137 229 59 17 232 58 52 240 113 92 235 73 73 240 71 70 85 82 73 226 69 63 255 101 66 225 128 57 27 36 2 244 150 20 220 69 5 236 102 74 242 87 64 251 209 207 247 121 78 231 76 51 157 72 27 233 79 71 236 84 63 255 251 251 249 248 247 255 255 255 234 64 64 255 255 251 221 96 93 223 185 167 249 231 205 242 166 109 234 149 94 255 255 254 221 123 114 237 94 75 255 194 60 255 253 253 214 210 132 230 68 48 232 129 1 255 255 207 248 189 196 188 100 0 232 171 161 222 187 180 127 52 21 236 86 2 60 50 51 237 94 20 192 147 130 246 247 247 231 120 57 219 37 18 254 247 247 234 191 128 241 142 136 255 145 146 255 230 94 255 248 125 191 188 184 68 74 42 255 172 52 225 104 0 237 116 12 250 122 95 255 127 21 255 224 181 214 199 192 249 193 175 238 80 80 225 175 104 177 64 53 225 177 112 243 186 105 230 199 182 248 208 167 244 228 134 156 181 115 234 116 100 239 127 115 240 63 61 239 64 51 210 69 29 255 93 28 239 128 75 238 48 30 230 153 78 202 151 136 253 150 64 251 160 81 232 55 55 203 166 153 229 63 56 231 208 200 223 84 0 254 254 254 252 239 239 255 254 254 99 96 90 206 78 43 198 76 49 132 132 125 33 249 4 0 0 0 0 0 44 0 0 0 0 50 0 50 0 0 8 255 0 101 9 28 72 144 224 135 130 8 19 42 92 200 144 32 186 50 28 26 74 156 216 208 147 24 49 187 18 81 220 184 241 25 176 47 98 28 80 9 167 145 35 65 85 176 76 10 188 16 228 75 16 40 34 103 24 51 169 131 193 23 86 42 101 121 252 226 74 76 144 9 0 24 205 80 48 241 67 52 151 65 196 72 200 137 2 152 43 87 103 190 88 178 20 132 145 15 73 12 245 149 233 212 201 158 168 51 103 36 68 81 89 230 213 183 79 55 210 126 2 5 10 10 164 133 31 22 117 181 39 228 107 212 131 38 81 73 56 132 22 209 172 27 108 213 41 81 149 240 67 149 185 116 235 70 189 160 18 21 175 67 103 111 204 154 60 11 81 149 67 8 159 113 37 98 239 34 93 187 101 84 122 122 28 89 50 87 122 139 148 232 40 136 103 2 17 34 98 236 101 88 161 88 212 82 147 109 94 185 74 75 25 17 106 77 48 24 15 164 84 133 136 165 65 178 103 215 21 101 59 179 62 125 148 122 48 184 192 224 195 88 89 12 94 89 234 180 104 17 189 239 191 149 16 255 33 88 102 2 200 32 25 210 43 103 126 155 32 172 76 240 51 141 24 113 161 190 183 103 170 214 173 155 80 5 10 20 77 0 2 88 133 18 215 69 81 69 16 43 168 167 224 10 162 172 144 78 66 195 28 33 97 22 20 182 209 134 39 68 172 193 134 18 206 56 224 161 3 255 1 152 26 94 110 40 129 222 1 40 46 184 194 1 12 36 164 195 28 169 12 210 225 135 14 112 146 134 20 87 16 162 35 33 87 92 1 5 43 171 236 81 2 32 2 225 161 4 138 72 30 144 222 10 76 30 176 26 66 186 224 224 135 3 61 246 72 5 33 70 24 81 7 33 51 48 66 5 21 0 144 34 79 150 15 76 147 131 64 118 88 2 69 146 74 50 185 98 32 11 213 225 7 12 85 126 73 197 40 163 32 193 201 12 124 78 49 64 37 117 252 33 5 18 215 44 33 11 45 194 228 80 4 36 254 165 184 164 19 247 44 132 132 35 130 82 209 194 29 147 180 96 74 35 24 72 193 39 41 149 164 129 68 29 237 180 131 3 18 73 200 130 198 18 75 144 49 14 41 253 196 255 10 9 36 254 180 226 1 67 69 248 97 194 31 48 76 114 71 0 119 4 123 71 7 84 176 147 198 15 63 212 129 67 59 127 8 90 132 44 113 0 97 133 21 64 96 162 193 181 116 208 225 65 2 88 45 228 134 174 126 168 0 198 2 1 4 176 192 2 96 96 42 131 20 117 140 186 172 9 82 152 240 236 60 243 120 195 192 35 208 88 235 130 7 102 144 240 66 67 251 56 98 130 184 96 20 108 238 2 41 164 123 135 32 127 200 240 7 188 142 212 145 6 16 178 40 114 138 54 49 148 240 136 56 17 64 208 239 19 19 49 32 131 193 96 4 128 65 7 1 164 80 238 175 56 152 32 240 15 3 60 208 11 55 178 156 2 0 20 120 100 140 69 4 31 83 228 203 54 232 142 43 130 10 29 96 128 65 201 11 220 161 130 9 105 60 64 205 3 3 204 67 129 44 0 120 72 68 27 37 148 160 65 2 255 110 36 7 6 228 98 32 66 10 24 168 192 137 23 11 120 49 110 35 15 84 162 135 30 3 96 145 18 12 14 56 163 4 30 123 52 161 129 13 42 45 255 209 129 8 34 4 0 70 10 34 32 19 140 23 99 167 112 71 47 70 8 34 67 26 123 200 2 139 18 48 216 157 10 46 229 12 20 75 53 255 240 19 202 63 6 52 148 195 208 41 32 124 114 7 168 171 160 248 2 219 200 128 143 50 37 232 196 139 51 149 187 51 181 44 54 132 65 2 8 165 244 222 187 53 221 42 68 65 31 130 0 174 130 8 106 183 224 68 194 41 100 163 6 2 78 160 32 139 14 233 40 82 72 46 2 161 241 203 16 32 144 224 61 8 224 243 94 10 223 12 249 125 188 8 193 4 227 131 15 24 16 222 192 251 140 20 35 139 42 71 228 114 139 64 57 152 51 70 191 9 244 191 123 248 189 235 26 67 228 240 0 21 96 195 42 196 40 155 26 142 81 128 247 197 67 22 40 136 134 47 100 65 129 77 108 194 16 251 235 159 255 254 7 190 82 176 128 0 20 1 132 45 200 208 11 83 16 131 11 92 40 64 1 124 80 15 89 140 96 31 208 130 134 33 102 56 6 15 12 225 134 67 72 0 7 65 240 193 156 8 36 22 33 48 192 50 255 26 32 0 29 60 3 22 40 192 130 29 78 96 136 19 128 99 95 56 204 225 255 88 0 50 31 22 36 22 112 144 134 27 164 49 2 44 36 65 11 90 24 199 60 52 176 47 51 152 225 134 58 44 69 24 84 18 133 68 240 224 13 6 48 64 55 186 177 12 1 48 128 18 148 144 198 22 246 176 135 85 172 33 21 107 128 71 4 92 64 72 143 37 0 4 46 216 72 30 108 161 1 62 60 175 1 5 216 64 5 42 208 64 125 124 32 34 81 64 65 23 230 192 134 78 178 97 13 26 216 129 40 119 0 1 8 8 144 33 177 176 64 5 184 208 0 4 168 225 149 8 56 6 23 54 176 129 6 144 195 133 41 17 8 7 80 48 136 9 188 227 29 108 104 70 4 68 121 14 27 92 98 34 247 168 0 11 88 192 5 56 240 161 16 133 224 67 44 103 89 0 56 8 100 11 9 209 71 15 80 16 3 111 188 33 15 177 216 136 49 26 192 5 101 110 160 21 173 64 128 58 143 33 201 10 108 160 36 120 176 162 66 120 224 131 6 28 67 153 21 56 134 62 245 201 153 133 101 178 32 18 3 169 133 60 19 162 66 89 46 115 3 42 84 97 57 253 201 140 129 192 105 160 4 81 192 42 103 201 130 137 162 112 161 203 4 225 64 194 241 12 136 10 36 31 180 68 33 45 71 74 75 101 46 147 31 5 169 1 15 60 42 11 38 176 96 164 147 140 105 76 151 25 10 132 8 128 6 30 13 129 73 101 42 83 127 226 20 33 10 0 40 75 37 161 74 127 26 149 5 22 8 103 66 36 81 1 150 18 36 4 213 160 1 13 170 97 128 16 72 132 5 74 117 106 78 146 65 62 173 170 132 31 26 245 170 73 254 241 15 177 170 132 6 22 144 103 64 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs' stamp: 'np 10/3/2008 20:05'!
aidabannerJpg
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 4 119 69 120 105 102 0 0 77 77 0 42 0 0 0 8 0 7 1 18 0 3 0 0 0 1 0 1 0 0 1 26 0 5 0 0 0 1 0 0 0 98 1 27 0 5 0 0 0 1 0 0 0 106 1 40 0 3 0 0 0 1 0 2 0 0 1 49 0 2 0 0 0 11 0 0 0 114 1 50 0 2 0 0 0 20 0 0 0 126 135 105 0 4 0 0 0 1 0 0 0 146 0 0 0 188 0 0 0 72 0 0 0 1 0 0 0 72 0 0 0 1 71 73 77 80 32 50 46 52 46 55 0 0 50 48 48 56 58 49 48 58 48 51 32 49 57 58 51 53 58 49 49 0 0 3 160 1 0 3 0 0 0 1 255 255 0 0 160 2 0 4 0 0 0 1 0 0 3 7 160 3 0 4 0 0 0 1 0 0 0 95 0 0 0 0 0 6 1 3 0 3 0 0 0 1 0 6 0 0 1 26 0 5 0 0 0 1 0 0 1 10 1 27 0 5 0 0 0 1 0 0 1 18 1 40 0 3 0 0 0 1 0 2 0 0 2 1 0 4 0 0 0 1 0 0 1 26 2 2 0 4 0 0 0 1 0 0 3 85 0 0 0 0 0 0 0 72 0 0 0 1 0 0 0 72 0 0 0 1 255 216 255 224 0 16 74 70 73 70 0 1 1 0 0 1 0 1 0 0 255 219 0 67 0 8 6 6 7 6 5 8 7 7 7 9 9 8 10 12 20 13 12 11 11 12 25 18 19 15 20 29 26 31 30 29 26 28 28 32 36 46 39 32 34 44 35 28 28 40 55 41 44 48 49 52 52 52 31 39 57 61 56 50 60 46 51 52 50 255 219 0 67 1 9 9 9 12 11 12 24 13 13 24 50 33 28 33 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 255 192 0 17 8 0 11 0 95 3 1 34 0 2 17 1 3 17 1 255 196 0 31 0 0 1 5 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 16 0 2 1 3 3 2 4 3 5 5 4 4 0 0 1 125 1 2 3 0 4 17 5 18 33 49 65 6 19 81 97 7 34 113 20 50 129 145 161 8 35 66 177 193 21 82 209 240 36 51 98 114 130 9 10 22 23 24 25 26 37 38 39 40 41 42 52 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 225 226 227 228 229 230 231 232 233 234 241 242 243 244 245 246 247 248 249 250 255 196 0 31 1 0 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 17 0 2 1 2 4 4 3 4 7 5 4 4 0 1 2 119 0 1 2 3 17 4 5 33 49 6 18 65 81 7 97 113 19 34 50 129 8 20 66 145 161 177 193 9 35 51 82 240 21 98 114 209 10 22 36 52 225 37 241 23 24 25 26 38 39 40 41 42 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 130 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 226 227 228 229 230 231 232 233 234 242 243 244 245 246 247 248 249 250 255 218 0 12 3 1 0 2 17 3 17 0 63 0 220 91 61 214 166 224 156 241 147 243 224 245 250 81 253 153 49 228 21 246 4 243 81 71 43 249 91 78 8 28 12 168 53 48 212 110 246 241 46 62 138 7 244 175 105 243 244 60 245 110 162 13 46 227 159 185 199 189 83 32 130 65 234 42 255 0 246 149 216 4 249 199 36 243 242 143 240 170 243 220 203 50 109 118 4 103 63 116 10 113 115 190 160 249 122 16 12 103 158 148 184 29 56 166 209 90 18 90 89 98 17 133 104 35 61 57 207 61 62 180 239 62 0 23 22 177 124 173 156 228 158 51 208 243 254 113 81 66 229 34 114 184 4 17 131 143 173 41 149 212 33 7 4 142 120 168 176 238 45 196 137 35 33 72 35 136 1 200 83 215 243 168 100 195 57 42 21 65 61 1 233 83 69 43 190 226 205 158 0 228 123 212 202 170 214 164 149 82 113 215 20 94 193 185 71 111 184 252 233 15 6 174 67 43 184 249 136 57 227 160 170 210 255 0 172 106 164 192 255 217 255 225 10 33 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 39 239 187 191 39 32 105 100 61 39 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 39 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 39 97 100 111 98 101 58 110 115 58 109 101 116 97 47 39 62 10 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 39 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 39 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 100 99 61 39 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 39 62 10 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 106 112 101 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 120 109 112 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 39 62 10 32 32 60 120 109 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 80 104 111 116 111 115 104 111 112 32 67 83 50 32 87 105 110 100 111 119 115 60 47 120 109 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 60 120 109 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 56 45 49 48 45 48 51 84 49 56 58 51 48 58 50 53 43 48 50 58 48 48 60 47 120 109 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 60 120 109 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 56 45 49 48 45 48 51 84 49 56 58 51 48 58 50 53 43 48 50 58 48 48 60 47 120 109 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 32 60 120 109 112 58 77 101 116 97 100 97 116 97 68 97 116 101 62 50 48 48 56 45 49 48 45 48 51 84 49 56 58 51 48 58 50 53 43 48 50 58 48 48 60 47 120 109 112 58 77 101 116 97 100 97 116 97 68 97 116 101 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 120 109 112 77 77 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 109 109 47 39 62 10 32 32 60 120 109 112 77 77 58 68 111 99 117 109 101 110 116 73 68 32 114 100 102 58 114 101 115 111 117 114 99 101 61 39 117 117 105 100 58 69 54 68 48 57 53 52 66 54 56 57 49 68 68 49 49 66 50 51 51 56 55 66 54 48 57 54 52 57 68 55 68 39 32 47 62 10 32 32 60 120 109 112 77 77 58 73 110 115 116 97 110 99 101 73 68 62 117 117 105 100 58 69 55 68 48 57 53 52 66 54 56 57 49 68 68 49 49 66 50 51 51 56 55 66 54 48 57 54 52 57 68 55 68 60 47 120 109 112 77 77 58 73 110 115 116 97 110 99 101 73 68 62 10 32 32 60 120 109 112 77 77 58 68 101 114 105 118 101 100 70 114 111 109 32 114 100 102 58 112 97 114 115 101 84 121 112 101 61 39 82 101 115 111 117 114 99 101 39 10 32 32 32 120 109 108 110 115 58 115 116 82 101 102 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 115 84 121 112 101 47 82 101 115 111 117 114 99 101 82 101 102 35 39 62 10 32 32 32 60 115 116 82 101 102 58 105 110 115 116 97 110 99 101 73 68 62 117 117 105 100 58 69 52 68 48 57 53 52 66 54 56 57 49 68 68 49 49 66 50 51 51 56 55 66 54 48 57 54 52 57 68 55 68 60 47 115 116 82 101 102 58 105 110 115 116 97 110 99 101 73 68 62 10 32 32 32 60 115 116 82 101 102 58 100 111 99 117 109 101 110 116 73 68 62 117 117 105 100 58 69 51 68 48 57 53 52 66 54 56 57 49 68 68 49 49 66 50 51 51 56 55 66 54 48 57 54 52 57 68 55 68 60 47 115 116 82 101 102 58 100 111 99 117 109 101 110 116 73 68 62 10 32 32 60 47 120 109 112 77 77 58 68 101 114 105 118 101 100 70 114 111 109 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 116 105 102 102 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 116 105 102 102 47 49 46 48 47 39 62 10 32 32 60 116 105 102 102 58 79 114 105 101 110 116 97 116 105 111 110 62 49 60 47 116 105 102 102 58 79 114 105 101 110 116 97 116 105 111 110 62 10 32 32 60 116 105 102 102 58 88 82 101 115 111 108 117 116 105 111 110 62 55 50 48 48 48 48 47 49 48 48 48 48 60 47 116 105 102 102 58 88 82 101 115 111 108 117 116 105 111 110 62 10 32 32 60 116 105 102 102 58 89 82 101 115 111 108 117 116 105 111 110 62 55 50 48 48 48 48 47 49 48 48 48 48 60 47 116 105 102 102 58 89 82 101 115 111 108 117 116 105 111 110 62 10 32 32 60 116 105 102 102 58 82 101 115 111 108 117 116 105 111 110 85 110 105 116 62 50 60 47 116 105 102 102 58 82 101 115 111 108 117 116 105 111 110 85 110 105 116 62 10 32 32 60 116 105 102 102 58 78 97 116 105 118 101 68 105 103 101 115 116 62 50 53 54 44 50 53 55 44 50 53 56 44 50 53 57 44 50 54 50 44 50 55 52 44 50 55 55 44 50 56 52 44 53 51 48 44 53 51 49 44 50 56 50 44 50 56 51 44 50 57 54 44 51 48 49 44 51 49 56 44 51 49 57 44 53 50 57 44 53 51 50 44 51 48 54 44 50 55 48 44 50 55 49 44 50 55 50 44 51 48 53 44 51 49 53 44 51 51 52 51 50 59 69 50 68 67 69 65 49 70 52 48 48 70 53 51 70 66 54 65 49 55 51 55 66 51 51 54 69 56 50 48 67 48 60 47 116 105 102 102 58 78 97 116 105 118 101 68 105 103 101 115 116 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 101 120 105 102 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 101 120 105 102 47 49 46 48 47 39 62 10 32 32 60 101 120 105 102 58 80 105 120 101 108 88 68 105 109 101 110 115 105 111 110 62 57 56 48 60 47 101 120 105 102 58 80 105 120 101 108 88 68 105 109 101 110 115 105 111 110 62 10 32 32 60 101 120 105 102 58 80 105 120 101 108 89 68 105 109 101 110 115 105 111 110 62 49 50 48 60 47 101 120 105 102 58 80 105 120 101 108 89 68 105 109 101 110 115 105 111 110 62 10 32 32 60 101 120 105 102 58 67 111 108 111 114 83 112 97 99 101 62 45 49 60 47 101 120 105 102 58 67 111 108 111 114 83 112 97 99 101 62 10 32 32 60 101 120 105 102 58 78 97 116 105 118 101 68 105 103 101 115 116 62 51 54 56 54 52 44 52 48 57 54 48 44 52 48 57 54 49 44 51 55 49 50 49 44 51 55 49 50 50 44 52 48 57 54 50 44 52 48 57 54 51 44 51 55 53 49 48 44 52 48 57 54 52 44 51 54 56 54 55 44 51 54 56 54 56 44 51 51 52 51 52 44 51 51 52 51 55 44 51 52 56 53 48 44 51 52 56 53 50 44 51 52 56 53 53 44 51 52 56 53 54 44 51 55 51 55 55 44 51 55 51 55 56 44 51 55 51 55 57 44 51 55 51 56 48 44 51 55 51 56 49 44 51 55 51 56 50 44 51 55 51 56 51 44 51 55 51 56 52 44 51 55 51 56 53 44 51 55 51 56 54 44 51 55 51 57 54 44 52 49 52 56 51 44 52 49 52 56 52 44 52 49 52 56 54 44 52 49 52 56 55 44 52 49 52 56 56 44 52 49 52 57 50 44 52 49 52 57 51 44 52 49 52 57 53 44 52 49 55 50 56 44 52 49 55 50 57 44 52 49 55 51 48 44 52 49 57 56 53 44 52 49 57 56 54 44 52 49 57 56 55 44 52 49 57 56 56 44 52 49 57 56 57 44 52 49 57 57 48 44 52 49 57 57 49 44 52 49 57 57 50 44 52 49 57 57 51 44 52 49 57 57 52 44 52 49 57 57 53 44 52 49 57 57 54 44 52 50 48 49 54 44 48 44 50 44 52 44 53 44 54 44 55 44 56 44 57 44 49 48 44 49 49 44 49 50 44 49 51 44 49 52 44 49 53 44 49 54 44 49 55 44 49 56 44 50 48 44 50 50 44 50 51 44 50 52 44 50 53 44 50 54 44 50 55 44 50 56 44 51 48 59 56 67 51 66 65 56 53 68 56 55 53 69 53 53 66 65 52 52 65 55 57 56 52 68 67 50 51 70 49 68 49 51 60 47 101 120 105 102 58 78 97 116 105 118 101 68 105 103 101 115 116 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 112 104 111 116 111 115 104 111 112 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 112 104 111 116 111 115 104 111 112 47 49 46 48 47 39 62 10 32 32 60 112 104 111 116 111 115 104 111 112 58 67 111 108 111 114 77 111 100 101 62 51 60 47 112 104 111 116 111 115 104 111 112 58 67 111 108 111 114 77 111 100 101 62 10 32 32 60 112 104 111 116 111 115 104 111 112 58 73 67 67 80 114 111 102 105 108 101 62 65 100 111 98 101 32 82 71 66 32 40 49 57 57 56 41 60 47 112 104 111 116 111 115 104 111 112 58 73 67 67 80 114 111 102 105 108 101 62 10 32 32 60 112 104 111 116 111 115 104 111 112 58 72 105 115 116 111 114 121 62 60 47 112 104 111 116 111 115 104 111 112 58 72 105 115 116 111 114 121 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 39 114 39 63 62 10 255 219 0 67 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 219 0 67 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 192 0 17 8 0 95 3 7 3 1 34 0 2 17 1 3 17 1 255 196 0 29 0 1 0 1 4 3 1 0 0 0 0 0 0 0 0 0 0 0 7 4 5 6 8 1 2 3 9 255 196 0 73 16 0 2 2 1 3 3 2 5 2 2 6 6 6 9 5 0 1 2 3 4 5 0 6 17 7 18 33 19 49 8 20 34 65 81 21 97 50 113 22 35 66 129 145 161 23 36 82 98 177 240 24 37 51 130 193 225 9 54 85 87 116 147 150 209 212 67 83 100 179 241 255 196 0 29 1 0 2 3 1 1 1 1 1 0 0 0 0 0 0 0 0 0 4 2 3 5 1 6 7 8 9 255 196 0 64 17 0 2 1 3 3 2 4 3 5 5 6 5 5 1 0 0 1 2 3 4 17 33 0 18 49 5 65 19 34 81 97 6 20 113 50 129 145 161 240 21 35 66 177 193 36 51 82 83 209 225 22 67 84 98 241 7 99 114 146 178 162 255 218 0 12 3 1 0 2 17 3 17 0 63 0 219 14 161 245 15 118 245 83 119 102 183 182 248 205 89 205 231 51 54 166 182 210 218 150 121 18 138 203 59 24 113 216 232 89 189 10 88 186 80 17 94 133 10 234 33 169 8 242 89 152 157 96 250 105 175 232 117 61 60 52 208 197 4 17 124 188 16 90 40 32 140 13 137 24 0 2 109 96 16 1 97 96 61 0 198 127 47 253 199 159 173 253 77 238 121 228 223 60 233 166 154 105 150 96 185 99 110 218 52 211 77 53 31 17 63 196 63 63 244 209 166 154 105 163 196 79 241 15 207 70 154 105 166 167 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 38 220 233 166 154 107 132 129 201 3 234 109 168 239 95 95 214 63 215 77 52 211 64 33 178 8 35 219 70 229 245 253 126 191 88 58 105 166 154 238 141 203 234 63 95 249 254 126 135 77 52 211 92 36 1 114 108 61 245 208 192 240 127 95 175 214 14 154 18 0 36 248 0 114 79 224 13 53 203 47 246 127 139 145 252 32 2 72 227 248 120 36 15 62 220 19 252 248 213 78 119 163 109 97 181 64 44 51 155 144 20 123 100 247 227 191 26 149 141 139 118 4 41 62 237 123 15 190 199 240 215 29 220 31 167 201 13 216 72 242 3 21 102 237 39 248 123 184 82 123 73 7 143 183 36 2 37 156 163 121 110 67 48 4 55 113 80 66 179 118 240 24 42 123 202 196 1 26 125 110 85 7 118 183 3 101 252 45 102 119 103 195 102 239 235 20 49 91 57 202 89 24 178 91 87 23 26 159 75 47 180 240 173 106 190 230 111 69 21 157 231 200 51 88 201 99 108 168 249 134 135 1 26 118 199 29 212 50 98 63 12 187 79 103 110 253 231 155 197 239 45 135 189 186 131 74 29 157 150 187 83 17 177 217 236 222 130 255 0 175 94 133 92 165 186 198 74 178 188 19 73 117 42 227 174 52 169 13 28 174 70 132 183 162 106 130 195 214 192 61 126 150 74 78 161 85 3 25 135 76 145 105 234 33 138 72 192 241 183 42 41 187 186 173 149 9 59 129 43 117 35 112 58 102 46 155 89 52 176 197 40 120 41 234 209 102 136 176 195 178 48 8 69 141 201 45 112 5 183 11 28 102 218 214 230 236 96 9 42 160 160 110 226 234 171 218 72 10 225 152 133 237 110 120 7 158 8 60 130 71 147 219 181 162 95 251 57 15 177 229 99 119 86 12 11 43 6 69 96 224 142 79 42 72 0 121 227 128 117 244 39 164 93 16 248 122 189 208 36 235 31 86 102 221 152 154 242 238 172 174 10 198 83 27 148 200 91 21 34 253 122 60 110 30 25 170 211 171 50 88 178 225 166 89 229 90 241 7 148 9 59 20 49 69 197 122 209 240 177 180 176 221 61 143 172 253 14 222 139 190 58 124 130 183 234 176 218 88 166 202 226 33 158 220 116 213 141 234 85 42 11 20 171 218 145 42 100 22 213 26 246 233 172 194 196 180 101 174 25 93 24 190 43 232 242 87 189 12 130 178 9 22 161 233 62 101 224 81 4 149 74 64 52 194 96 197 119 49 32 41 184 221 123 128 73 190 180 15 66 170 10 245 73 242 237 50 211 137 192 24 148 211 48 5 38 23 177 37 129 7 202 47 184 155 139 13 104 255 0 15 27 186 178 149 96 120 101 101 32 142 121 94 15 32 121 229 27 247 241 174 131 159 60 249 228 243 255 0 13 109 103 84 186 79 140 153 122 63 133 233 119 74 186 149 135 221 27 147 102 27 185 154 59 133 107 185 206 220 168 98 146 205 220 68 63 67 221 48 173 134 181 110 237 4 171 139 90 118 169 44 112 77 97 229 106 209 78 91 162 61 92 195 109 235 251 175 39 211 157 217 71 110 226 77 133 201 101 37 197 76 96 164 180 236 252 165 155 19 164 101 236 45 72 167 18 7 182 33 106 202 145 180 173 48 140 171 29 202 110 173 211 230 134 25 222 161 41 139 150 72 169 231 168 129 92 0 254 16 125 162 66 79 140 235 101 80 9 44 53 154 253 62 120 81 201 103 146 56 55 61 130 62 11 46 233 13 138 231 98 130 73 23 32 123 115 21 105 169 27 101 244 135 169 253 69 130 91 123 27 98 238 77 207 74 188 162 27 89 12 94 61 228 199 65 55 63 92 31 63 43 67 82 123 81 47 212 245 43 77 53 158 60 44 76 192 168 187 239 30 132 117 91 167 219 113 183 94 245 218 54 246 214 20 228 234 225 96 159 41 111 25 20 215 114 215 43 205 110 60 125 42 177 94 150 197 139 9 86 173 203 19 133 143 182 24 170 78 206 192 132 14 203 117 78 154 147 138 102 175 163 90 146 230 49 1 169 132 76 92 11 149 240 247 239 221 110 214 207 109 11 73 84 209 73 48 166 159 194 136 43 60 141 19 170 133 101 12 164 22 81 184 21 32 221 119 90 226 246 212 69 253 196 255 0 32 79 252 1 242 121 240 61 207 158 1 224 241 201 4 30 8 243 200 31 176 36 168 0 159 96 121 101 240 79 62 127 158 182 51 225 219 225 219 61 215 252 246 90 133 75 231 111 224 112 52 26 238 87 112 62 54 76 160 22 79 166 106 226 40 87 12 149 159 39 110 57 13 164 54 231 175 28 117 32 176 201 41 156 36 50 76 29 30 248 93 175 158 219 29 120 135 169 91 39 114 213 222 187 47 108 195 150 217 88 233 91 33 143 185 44 150 232 238 213 161 101 177 216 246 34 244 55 44 227 41 172 21 92 217 83 50 200 170 74 40 99 143 212 254 36 233 125 61 235 18 74 180 146 106 70 163 19 211 172 209 169 68 170 145 35 81 102 96 24 13 222 43 109 36 40 39 119 166 152 139 164 87 84 71 79 52 104 251 42 204 130 159 31 111 194 23 147 111 113 181 84 183 152 11 246 189 205 180 75 77 72 219 207 164 125 74 233 229 108 117 237 237 178 115 187 94 134 93 153 49 214 242 84 69 106 147 60 106 30 74 253 232 205 13 75 81 194 203 49 161 96 193 100 71 220 35 128 180 110 137 95 181 250 27 214 13 233 134 59 139 107 116 231 116 230 176 133 22 72 50 117 113 253 149 46 33 239 82 244 36 179 36 6 244 126 164 109 18 73 85 101 73 228 7 229 204 170 11 13 127 218 157 59 192 90 145 212 40 210 6 118 137 39 106 136 132 102 84 182 228 222 92 2 202 72 4 94 224 251 233 115 71 84 31 194 249 106 130 248 0 8 100 55 242 23 22 96 182 55 64 88 27 231 235 141 69 96 114 120 228 15 230 64 251 19 247 35 236 14 187 5 60 14 85 252 169 101 250 24 114 0 238 224 30 211 220 123 124 240 60 253 189 253 189 238 82 187 142 183 119 27 122 173 154 25 42 115 73 78 214 62 242 77 66 229 91 72 229 26 11 85 167 132 216 175 44 114 43 44 162 72 59 226 236 113 218 73 0 239 38 95 162 125 41 126 128 244 179 174 251 107 13 151 159 21 6 127 23 7 88 49 71 57 106 245 167 160 150 255 0 72 220 2 169 147 229 254 66 213 92 138 164 80 164 70 5 16 91 167 60 146 122 82 52 186 207 174 234 208 80 10 117 149 26 122 122 233 82 56 166 128 36 177 188 140 166 104 128 109 193 109 33 138 202 65 32 156 3 102 213 148 148 51 85 204 240 170 42 180 113 153 24 75 229 176 86 91 224 216 131 158 254 226 217 26 209 54 82 57 250 89 120 30 123 199 104 82 74 128 24 144 2 18 89 85 85 202 150 44 2 131 231 93 65 40 84 55 135 42 28 6 247 101 63 218 0 249 101 242 1 35 144 164 128 72 36 115 244 195 173 223 12 29 22 233 102 193 205 238 188 20 121 28 230 95 127 110 13 165 137 232 166 50 44 157 249 159 30 51 180 113 201 44 217 14 230 150 77 202 141 97 178 217 58 145 73 8 30 164 184 138 242 188 41 60 242 85 140 126 34 254 31 118 214 193 202 116 215 166 61 50 219 91 147 115 117 71 35 183 34 204 111 85 199 88 200 102 204 160 250 88 248 46 174 61 65 175 139 134 246 74 60 132 139 40 84 129 106 69 76 188 177 203 63 160 51 232 62 48 233 149 242 65 28 107 83 9 170 150 160 23 120 214 40 161 52 33 90 162 105 77 236 171 20 135 194 44 196 93 193 11 184 100 183 81 208 42 224 99 41 104 213 225 88 75 36 118 99 106 155 24 9 81 118 59 205 173 180 16 63 138 199 26 210 15 14 120 36 114 71 28 120 224 240 121 240 91 199 63 183 60 253 253 188 107 162 240 73 11 193 237 247 30 220 125 252 142 71 28 143 35 242 15 32 144 121 212 165 184 250 63 212 141 131 127 21 22 254 217 123 159 108 83 201 228 42 80 138 123 213 100 130 157 145 110 213 104 102 68 185 2 90 170 150 5 105 29 209 26 69 157 71 144 132 2 117 244 119 114 124 49 124 36 96 119 134 210 233 134 94 246 251 194 239 61 247 74 189 173 184 213 242 119 103 142 86 149 222 4 129 102 177 135 181 142 54 167 150 9 12 112 73 26 149 94 1 14 163 184 243 168 252 81 211 104 228 128 177 106 164 168 89 228 73 168 35 74 228 141 96 183 142 205 225 187 0 19 46 217 184 185 238 45 174 210 244 74 202 198 148 200 32 166 120 74 44 178 212 6 89 55 59 248 81 134 77 187 206 226 165 80 170 230 220 237 32 159 145 229 128 42 9 0 191 33 123 143 111 113 11 222 64 231 142 79 97 238 0 121 35 216 29 115 169 55 172 125 58 126 147 245 51 119 116 249 178 73 148 93 187 122 172 117 178 43 28 80 27 116 114 20 40 100 177 198 205 126 24 193 125 42 223 72 44 199 31 111 108 208 204 170 205 31 99 201 25 127 225 175 65 75 34 78 144 84 68 119 69 58 36 177 62 214 80 241 200 129 209 128 96 8 220 164 16 14 115 197 245 149 44 111 12 141 20 128 171 171 180 108 167 144 233 246 135 212 107 176 110 59 127 221 110 225 252 248 227 254 125 245 120 138 170 229 149 158 185 236 191 10 247 189 95 0 89 132 143 18 67 221 199 54 79 179 40 39 142 62 223 107 48 28 253 192 254 103 141 86 87 138 226 73 21 138 228 175 162 75 199 44 69 94 72 100 35 248 210 52 37 153 143 183 107 168 3 239 251 181 50 150 10 0 185 191 168 254 191 161 170 201 2 215 238 108 61 245 68 124 123 130 60 241 228 16 65 252 16 124 131 251 31 58 170 130 2 241 79 96 143 162 16 128 176 242 3 72 197 85 124 121 228 145 227 199 31 229 169 6 166 22 29 237 93 162 165 10 81 222 117 150 75 15 142 44 43 199 184 234 66 11 79 37 104 231 40 145 95 139 181 249 129 123 68 178 47 167 11 73 221 201 239 6 206 201 69 180 82 121 43 53 71 201 230 237 71 36 246 143 164 181 106 226 194 155 50 74 237 226 63 78 102 49 21 39 184 184 42 23 145 164 12 240 171 109 105 21 90 246 177 54 36 250 1 223 238 191 228 117 114 193 43 125 152 221 175 197 148 159 229 125 69 224 118 243 207 246 152 241 247 243 224 112 127 7 246 215 110 60 241 247 246 214 80 251 95 49 117 71 200 98 238 61 88 252 155 175 11 195 94 126 230 110 103 142 105 204 113 186 50 246 158 123 193 224 18 71 226 223 123 10 184 223 22 109 213 18 2 65 138 57 76 242 2 57 4 17 10 186 14 8 224 158 238 208 126 252 121 211 177 79 17 85 80 224 176 176 35 55 185 251 180 24 37 23 186 17 180 216 241 131 232 115 250 207 161 213 164 169 30 72 255 0 49 174 186 244 99 9 7 211 44 199 236 124 118 254 255 0 126 127 203 94 122 99 85 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 169 75 164 61 100 223 253 15 221 208 239 30 158 231 110 225 178 98 173 170 87 32 137 217 177 217 90 118 107 203 8 173 150 164 211 71 90 244 85 165 149 46 84 89 149 218 189 200 98 177 9 66 142 29 168 180 147 193 3 143 60 123 243 246 252 255 0 207 190 154 243 253 71 225 206 139 212 234 77 85 119 70 233 181 179 149 68 51 212 211 172 146 149 75 109 82 228 27 133 190 61 62 237 50 157 91 168 81 42 195 77 45 72 139 237 237 140 168 69 102 32 16 46 192 255 0 8 39 29 239 219 77 52 213 126 54 132 217 43 113 214 132 114 205 228 142 57 228 31 167 129 248 60 176 35 200 246 62 117 178 106 16 100 130 0 228 146 0 3 185 62 195 159 167 225 165 213 89 216 42 130 204 77 128 28 147 232 53 67 244 253 201 31 247 73 255 0 49 174 165 184 62 3 31 223 143 127 241 243 173 198 217 127 15 16 77 134 143 112 110 220 206 19 107 96 184 40 217 29 205 148 165 138 199 201 98 68 143 136 210 213 201 235 171 200 138 81 251 18 102 97 220 15 167 245 119 52 133 23 69 122 12 34 78 254 181 244 185 95 176 119 1 188 48 199 130 7 39 142 235 68 144 124 158 79 147 249 251 107 206 84 252 81 211 3 152 211 230 102 42 206 47 4 15 34 146 164 41 177 3 131 114 65 224 219 223 90 144 116 106 217 198 224 32 136 14 76 213 17 71 98 109 97 102 107 146 111 233 175 158 221 223 238 183 248 105 221 254 235 127 134 190 134 30 139 244 19 216 117 179 165 188 253 135 244 191 12 63 114 60 217 240 120 243 228 123 16 124 235 143 244 43 208 127 253 245 244 183 255 0 172 112 159 143 254 35 243 254 94 127 109 45 255 0 19 81 14 105 235 193 244 52 146 223 255 0 207 215 240 252 38 221 18 173 72 2 74 103 226 230 57 209 212 102 214 186 146 46 15 108 114 56 190 190 122 119 127 186 223 225 174 255 0 79 30 231 158 61 187 91 223 241 207 183 247 251 107 232 71 250 22 232 63 254 250 186 91 255 0 214 88 94 126 223 255 0 35 143 229 254 127 109 89 174 252 62 108 60 215 171 6 198 234 6 194 221 119 213 101 102 198 96 55 158 223 200 101 154 53 12 198 68 195 199 125 114 45 31 104 238 245 99 172 233 219 245 43 55 58 154 252 75 65 117 188 85 139 114 47 186 150 80 7 28 146 182 239 159 161 212 127 99 85 218 247 136 253 36 91 158 15 242 200 245 214 135 233 172 247 123 236 139 187 66 252 212 173 68 241 52 51 50 20 147 203 255 0 23 111 28 240 56 227 145 207 227 143 62 252 235 0 13 207 60 125 191 207 94 162 158 170 26 164 89 97 112 241 191 216 112 112 214 228 14 247 7 7 223 89 83 3 79 42 195 40 43 35 95 104 35 155 11 155 31 167 251 219 93 180 211 77 49 174 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 171 190 55 5 146 202 198 243 85 142 51 20 115 165 110 247 112 130 75 18 41 104 225 78 79 1 166 35 211 66 121 10 204 172 223 72 32 218 202 246 122 235 40 40 240 60 177 200 124 21 71 137 251 36 140 131 192 118 71 250 11 122 136 164 130 87 145 224 92 40 101 237 99 162 122 234 181 166 129 229 91 126 157 144 72 142 122 160 167 122 241 231 185 191 131 144 71 1 143 144 124 138 4 154 78 246 150 66 168 102 118 99 216 72 142 57 103 111 86 53 3 145 200 44 167 158 124 242 57 36 253 243 183 77 216 169 244 25 191 110 123 118 63 162 117 36 42 24 23 54 94 231 139 11 123 220 115 172 133 246 182 72 69 78 100 244 36 138 245 170 212 161 120 166 141 138 88 180 173 52 107 101 101 106 235 93 126 94 25 220 176 150 111 33 79 28 43 6 246 177 182 74 195 70 74 151 43 89 50 86 185 103 35 34 220 161 37 74 41 78 106 144 59 155 49 217 224 163 189 216 61 53 120 195 142 240 31 131 227 85 83 111 124 212 176 34 119 83 254 166 122 185 5 111 74 73 167 91 152 232 166 134 46 89 220 168 142 106 207 98 30 192 20 0 210 16 15 127 58 163 125 213 108 67 21 95 211 241 17 212 138 59 17 203 89 49 234 177 218 130 220 149 166 145 36 4 241 230 90 53 37 30 7 18 86 141 135 5 7 53 48 169 107 1 97 158 111 219 30 254 249 227 55 244 3 76 47 202 53 192 144 96 3 146 59 219 28 115 235 124 12 223 190 174 86 54 158 50 189 153 32 147 58 161 69 40 239 69 233 65 13 182 146 19 138 92 164 143 221 86 219 175 166 81 102 142 38 85 102 228 39 168 128 6 99 66 219 63 35 34 77 103 31 36 87 232 35 218 90 182 145 36 136 222 138 154 163 90 183 12 76 28 164 21 204 139 27 172 174 25 157 95 176 144 172 22 157 247 77 134 187 29 207 146 197 153 147 30 112 209 195 21 112 106 37 69 172 240 160 142 30 64 249 143 151 118 138 70 4 19 27 16 73 30 254 85 119 21 250 244 198 59 211 173 63 167 243 34 188 146 9 43 189 84 178 237 223 18 164 110 171 44 73 45 131 34 33 4 33 119 228 17 38 186 139 84 7 23 207 191 183 161 253 12 253 56 223 46 164 1 185 241 114 84 173 187 99 34 247 198 121 30 249 55 244 109 181 114 58 49 229 100 150 169 198 203 21 121 33 180 182 84 37 131 51 176 113 80 136 228 22 90 168 86 23 226 82 143 71 179 212 148 200 178 42 173 106 109 38 253 118 238 7 231 133 187 21 63 87 68 147 29 82 197 169 44 79 136 19 151 174 148 192 19 11 54 12 37 34 172 173 44 158 171 172 64 187 16 77 190 198 225 185 115 26 248 187 48 227 18 148 105 84 86 128 85 68 249 55 169 204 95 53 143 94 56 133 173 114 233 116 169 254 191 212 118 126 121 28 118 155 114 216 123 86 47 203 140 197 189 139 41 145 75 101 104 160 123 77 145 142 104 175 76 100 247 245 93 101 147 153 57 4 150 44 60 249 212 246 213 30 199 223 7 250 255 0 183 31 93 67 116 31 225 127 197 125 189 189 191 87 58 184 197 179 108 75 149 167 138 105 231 170 243 81 163 110 244 247 113 182 234 140 108 153 40 147 228 235 203 94 80 178 205 102 105 219 132 173 27 43 152 249 37 193 82 78 45 13 27 86 43 89 183 12 18 152 41 71 28 247 90 69 138 38 171 4 211 36 81 51 199 36 233 35 63 50 32 120 227 71 40 91 146 64 0 27 221 45 221 151 197 220 163 126 139 197 85 169 86 173 12 80 214 121 33 142 202 209 111 78 9 236 36 110 161 231 89 16 122 110 255 0 193 219 244 240 53 105 249 246 113 144 245 224 173 44 185 19 222 103 153 90 73 105 246 204 46 59 86 118 36 169 110 198 137 187 185 4 72 60 114 1 212 149 42 73 1 134 61 239 234 63 161 253 16 117 23 104 182 157 138 251 177 107 237 61 197 253 59 119 250 250 157 91 248 32 0 223 197 194 247 113 237 221 192 238 227 246 231 158 61 252 113 228 251 234 84 233 143 75 50 29 77 234 14 198 216 152 155 62 180 155 176 197 102 252 241 47 164 248 124 76 114 94 108 181 185 153 214 84 137 177 180 168 180 236 101 82 36 123 21 163 84 238 110 26 46 110 59 143 61 192 131 218 65 0 246 149 250 123 125 253 151 142 209 251 1 169 91 164 29 104 222 29 16 220 55 183 38 202 24 41 114 185 60 98 98 103 159 51 143 253 76 87 198 205 58 93 149 41 204 94 54 175 52 198 4 249 166 87 94 225 26 41 96 57 26 87 168 199 212 5 29 65 233 219 69 105 137 214 155 121 242 9 93 66 134 117 205 213 1 44 112 72 35 3 92 167 48 137 225 146 117 148 196 146 33 145 16 168 103 142 225 156 11 155 111 192 11 114 0 243 100 112 126 210 54 228 233 214 205 234 38 208 193 99 186 217 211 125 187 181 54 70 212 189 211 139 157 38 179 144 196 197 114 237 155 242 227 42 212 146 89 219 58 18 11 245 239 99 112 53 85 44 227 164 152 215 57 10 210 75 234 222 121 117 8 124 62 244 144 116 115 227 59 168 152 106 49 52 123 87 55 211 28 222 127 105 57 102 146 56 176 249 46 160 108 73 30 138 72 21 21 219 13 125 102 160 241 163 188 145 66 144 171 203 35 15 80 252 129 191 149 201 230 114 151 242 249 107 179 219 203 229 174 222 201 228 46 49 101 179 62 67 37 102 197 203 22 26 66 121 51 122 179 122 209 73 243 69 149 99 37 120 33 89 54 210 175 199 47 90 233 88 194 229 56 217 151 114 59 119 109 93 218 212 114 215 48 159 49 126 205 43 86 113 23 45 205 98 227 101 94 89 172 219 185 182 104 180 177 146 138 211 176 159 180 51 146 126 121 63 193 61 94 146 146 106 122 26 197 171 94 171 66 41 122 146 74 34 133 146 65 44 115 172 192 33 111 48 144 72 172 228 134 49 145 130 69 181 236 31 226 26 58 134 138 73 34 49 181 37 90 84 81 169 9 116 85 96 12 82 228 141 133 13 236 165 174 215 185 176 212 183 140 197 221 203 255 0 232 241 155 31 138 199 222 200 220 126 163 7 175 78 149 91 23 175 180 113 111 26 238 102 74 53 162 153 228 85 170 37 119 37 120 80 19 183 177 121 7 40 233 158 217 220 61 24 248 48 235 133 206 167 195 115 0 187 226 181 234 251 99 110 229 209 171 100 197 140 182 16 237 250 118 86 189 167 99 90 206 70 96 111 53 63 74 59 165 41 73 110 196 101 209 164 26 161 211 15 139 30 174 244 135 104 193 178 54 76 248 4 196 85 179 114 244 71 33 133 175 118 233 183 145 178 243 91 149 100 121 153 132 15 99 205 69 46 90 33 43 5 42 23 129 31 245 55 174 93 76 234 253 149 159 127 238 91 153 200 106 25 39 175 81 86 60 94 30 180 172 164 73 98 60 85 8 106 82 138 127 79 185 22 105 187 164 10 237 26 58 250 156 51 223 240 223 91 153 170 169 37 142 138 159 167 207 214 219 172 23 105 68 149 36 171 196 209 197 18 219 195 136 51 71 150 15 112 13 192 190 168 110 177 211 201 249 133 150 68 172 78 158 212 81 13 132 211 169 112 55 150 3 237 4 185 240 252 164 139 90 248 215 215 60 129 39 175 95 7 209 55 61 231 163 251 192 52 128 112 73 254 140 237 245 144 47 216 68 85 98 85 28 22 225 121 102 99 193 214 33 209 94 165 239 78 160 245 175 226 119 105 110 188 221 140 182 218 196 98 243 21 113 24 57 196 99 27 141 134 182 82 206 9 43 85 129 21 74 215 147 28 59 101 138 71 146 57 231 81 52 170 237 207 63 63 165 248 178 234 171 238 157 135 188 164 77 172 50 221 50 219 215 246 190 219 63 166 241 78 12 110 66 173 76 124 226 252 63 168 31 153 177 232 99 163 85 127 3 250 206 226 56 231 88 246 201 248 136 234 38 195 221 187 223 120 237 245 219 255 0 175 117 20 88 143 61 45 220 100 183 96 67 103 39 46 73 214 181 116 190 33 173 221 98 73 144 52 173 192 141 85 84 119 119 114 152 248 59 168 252 180 234 240 208 60 131 167 210 37 60 140 251 164 134 162 30 168 42 101 144 72 246 32 120 4 0 80 51 238 197 173 146 205 71 93 160 154 104 12 114 205 176 86 188 210 39 132 160 201 27 210 120 41 25 185 218 109 57 222 234 72 86 64 51 124 107 123 118 233 223 125 89 248 101 232 246 27 225 139 120 80 219 57 45 144 152 220 127 80 112 144 95 93 185 146 139 47 46 54 172 38 123 23 16 51 75 235 228 86 109 194 213 143 100 217 152 39 14 100 0 122 109 27 252 120 238 124 148 116 122 69 177 55 6 91 33 148 222 184 29 173 13 253 229 60 45 146 171 183 242 57 73 106 99 42 215 201 87 173 44 117 113 217 11 6 205 44 165 148 179 29 87 158 186 93 2 197 132 121 13 119 192 186 127 240 255 0 177 119 247 79 246 149 237 135 241 41 128 193 110 42 253 215 183 150 214 220 183 173 109 197 198 102 67 171 195 103 21 70 43 162 241 146 149 110 234 102 244 233 45 76 156 113 163 197 144 199 33 244 77 235 227 79 168 187 23 55 137 233 63 79 54 206 238 131 168 185 206 158 97 103 165 185 119 189 107 17 223 130 245 137 40 226 241 254 129 200 86 18 214 177 61 139 88 187 25 75 75 13 169 107 195 53 178 147 19 116 161 213 61 62 150 4 248 158 130 40 11 213 198 157 71 169 74 230 90 15 151 169 165 146 101 144 171 79 92 200 198 162 5 44 85 44 65 0 161 80 195 38 117 114 186 116 185 230 170 158 72 100 168 134 56 252 179 172 209 202 200 155 55 69 15 16 42 174 208 202 46 206 88 92 29 186 200 191 244 117 110 124 231 244 219 125 108 212 200 204 48 147 236 155 187 142 60 63 106 138 175 154 175 156 219 184 213 201 180 128 44 191 51 94 173 213 171 24 121 36 136 67 35 176 132 148 145 155 60 248 95 234 79 80 179 91 79 226 143 121 110 188 214 79 39 186 112 59 98 145 198 223 203 194 173 118 129 194 98 250 131 61 8 208 122 16 66 87 25 117 37 66 22 30 214 176 129 137 40 194 49 243 131 167 29 75 221 93 41 221 84 247 158 205 200 10 25 170 85 237 87 86 150 40 236 87 181 74 193 132 219 167 110 188 129 22 106 211 24 96 105 63 175 128 161 141 28 22 96 189 179 182 111 227 51 172 89 245 222 107 106 29 153 84 239 205 191 87 107 231 5 44 27 24 142 58 170 102 84 203 75 212 203 206 98 181 100 103 239 201 52 234 254 155 60 17 246 68 189 173 206 143 91 248 106 170 178 187 171 77 77 75 71 44 93 78 46 150 173 53 84 209 37 69 27 82 85 198 243 168 95 13 183 44 177 165 195 92 27 48 184 3 89 244 61 114 24 105 40 98 106 201 247 210 124 214 219 32 32 120 240 152 197 136 191 13 102 55 236 110 51 141 109 118 3 113 92 234 183 193 222 222 191 213 156 236 153 232 174 117 203 102 226 115 217 76 147 70 100 147 10 221 68 192 82 188 178 207 94 56 218 147 252 150 79 35 89 238 40 245 107 212 149 148 49 88 215 141 128 235 62 244 198 244 95 120 98 183 94 236 223 123 166 60 37 28 101 42 29 51 232 127 79 177 147 210 139 53 111 29 11 199 114 246 225 176 17 34 179 74 75 87 98 163 75 31 94 120 43 65 31 167 40 108 140 143 45 121 126 61 197 214 157 227 15 73 44 116 78 20 193 255 0 66 44 101 159 55 108 61 83 250 188 183 151 37 87 40 165 174 45 214 63 44 108 211 137 90 37 141 219 177 202 128 205 192 51 62 208 248 228 235 214 204 192 82 219 176 228 176 155 134 174 50 24 169 226 242 59 171 23 99 37 152 161 4 48 152 224 89 46 87 183 77 109 204 177 57 130 6 200 165 167 48 4 141 196 156 113 165 43 190 15 234 146 201 52 145 69 20 148 107 212 250 147 124 129 149 82 54 167 172 106 121 33 240 216 66 234 140 162 50 29 130 130 21 172 141 157 53 71 241 13 37 60 3 198 168 168 53 41 13 50 120 234 88 160 150 21 117 150 77 174 22 225 149 192 1 143 55 190 208 5 227 31 136 174 161 110 158 165 117 75 51 184 247 126 204 139 97 230 226 175 75 17 62 222 52 108 212 200 214 171 81 77 202 9 156 123 213 170 92 183 150 124 118 66 163 91 184 213 169 9 34 146 8 171 215 134 24 163 45 178 223 3 27 167 23 184 19 168 159 15 59 182 85 155 109 245 35 5 144 191 66 7 113 234 195 152 142 140 120 252 168 165 39 153 34 187 107 24 113 215 224 238 245 83 231 112 180 231 88 200 91 48 217 210 77 243 191 55 55 82 119 62 75 119 238 252 138 101 115 217 47 69 45 91 74 244 105 34 215 171 24 134 165 84 163 66 10 209 85 134 164 42 34 132 52 65 164 80 196 179 148 45 170 93 157 187 114 251 11 117 96 119 166 222 176 107 231 182 222 90 150 79 31 51 35 24 154 74 146 25 44 81 154 53 42 108 215 185 82 73 224 158 51 192 104 231 146 50 120 227 183 214 213 244 3 91 240 232 233 34 40 232 230 20 144 8 76 82 18 41 234 160 42 241 62 246 98 251 17 174 187 130 134 42 207 229 189 134 176 32 234 2 30 167 251 68 94 173 36 109 178 172 184 221 11 50 179 0 22 235 188 133 0 100 45 175 237 175 187 24 136 250 59 188 115 117 118 172 50 87 89 126 17 183 30 42 68 150 71 137 169 184 199 236 117 134 11 140 209 204 175 36 88 236 159 113 146 203 118 207 14 87 111 172 178 74 200 242 193 60 81 208 253 195 115 171 27 75 226 27 169 251 103 63 140 218 59 235 114 111 255 0 210 96 222 25 26 208 228 165 217 157 54 196 87 193 140 65 130 177 101 64 208 224 27 112 61 56 36 13 12 217 133 91 86 82 193 132 87 147 228 198 35 170 91 211 4 253 67 177 75 47 48 183 213 12 45 252 46 235 178 22 111 245 186 217 172 244 23 242 242 35 9 63 170 150 199 167 98 130 22 4 197 14 82 194 131 218 91 155 199 74 122 209 212 46 140 230 101 205 108 44 216 199 75 109 34 139 35 142 179 86 43 216 172 172 49 57 49 69 114 164 195 181 100 141 221 140 119 32 120 45 67 19 207 12 115 164 115 200 173 228 63 224 90 184 104 171 34 138 188 73 86 198 148 209 172 140 21 66 70 235 81 86 142 229 89 2 84 206 94 224 134 186 109 45 123 21 215 162 143 226 136 229 149 60 72 13 50 150 152 72 233 177 131 11 108 166 5 79 45 20 124 157 226 217 219 129 173 222 234 207 196 76 89 14 158 71 211 46 159 97 119 111 82 182 116 57 188 62 35 117 117 131 169 20 45 100 227 151 41 111 39 4 181 95 13 94 106 241 197 143 184 109 84 145 104 91 181 5 104 233 198 123 41 215 149 89 101 93 185 234 103 81 223 104 117 171 165 56 40 58 34 55 221 140 213 58 170 187 254 12 108 183 50 219 89 108 100 103 169 43 71 109 176 55 226 90 213 163 153 178 182 161 147 35 142 121 33 150 96 146 119 129 38 190 91 117 39 226 247 172 189 83 192 174 216 206 218 219 24 205 184 111 83 181 115 25 129 219 223 35 95 35 114 157 232 238 214 91 54 239 223 200 201 217 243 113 122 178 197 82 74 171 32 238 36 23 32 140 211 254 159 255 0 16 191 44 177 65 123 104 215 226 62 200 173 65 181 96 107 48 184 18 199 27 70 150 44 88 134 98 33 149 208 25 192 14 141 225 123 123 116 188 223 7 117 41 33 164 72 58 101 4 50 196 221 67 230 99 61 73 152 202 245 145 198 130 87 154 21 139 115 7 12 222 16 137 35 88 200 95 49 13 174 142 191 70 173 81 190 178 73 30 83 67 182 81 71 17 120 126 85 195 190 214 46 119 22 7 27 152 230 254 196 99 127 22 253 60 143 106 124 64 110 154 146 110 12 134 66 60 246 53 119 124 87 243 182 13 204 154 77 118 157 155 31 165 217 176 81 12 181 224 24 185 171 80 121 16 191 203 77 70 49 35 56 121 37 212 101 102 238 85 101 40 204 130 66 167 201 225 210 22 66 8 240 56 12 193 193 243 201 78 56 224 243 149 110 253 225 185 119 230 227 201 110 157 223 149 183 158 220 25 87 137 175 94 154 54 87 112 99 138 21 134 40 161 99 21 106 85 18 24 82 36 250 81 64 0 40 229 142 172 162 192 142 189 200 189 10 223 235 4 113 37 152 195 90 170 240 118 122 191 42 227 202 250 170 161 72 30 10 254 220 29 125 59 165 82 212 208 116 250 42 106 185 77 68 180 180 208 194 206 160 4 221 28 72 132 173 236 219 111 129 112 15 114 49 175 29 87 55 204 213 75 50 171 42 188 243 74 55 237 190 217 0 176 59 73 23 245 228 94 246 58 162 35 159 185 31 200 241 174 241 187 196 67 70 239 27 143 103 70 42 195 159 228 120 39 243 200 39 243 231 93 121 7 219 240 9 31 117 238 1 128 63 191 107 41 254 68 106 174 141 86 183 55 97 150 40 34 30 37 158 65 202 66 131 251 68 125 220 249 255 0 200 123 58 210 171 20 37 95 202 215 27 109 207 25 185 24 201 255 0 110 117 67 2 118 219 177 185 245 183 182 70 166 94 147 46 246 220 155 146 142 35 9 83 23 125 226 154 41 164 187 150 133 90 150 29 85 253 56 109 90 189 20 181 45 64 68 172 146 136 146 208 50 144 171 192 45 200 250 139 213 29 249 177 240 123 47 5 140 217 248 45 147 186 119 100 152 188 141 207 78 222 53 77 28 221 140 85 201 169 231 63 71 102 148 163 78 44 85 121 76 114 52 147 88 243 204 172 222 117 242 70 29 247 99 13 88 98 246 209 106 24 170 233 234 151 238 236 181 149 200 44 45 16 179 102 88 200 102 88 227 119 116 172 220 170 58 137 7 37 7 25 70 224 220 119 103 233 119 77 238 37 185 134 79 5 155 220 81 69 106 185 115 102 162 77 104 228 11 70 67 43 20 249 137 228 150 69 231 130 211 57 60 242 70 188 127 89 232 175 213 58 135 78 158 89 2 67 21 64 88 225 85 112 75 178 187 147 52 136 224 148 101 91 109 0 216 139 250 129 233 58 103 87 106 74 106 149 134 4 121 130 221 140 224 50 8 219 106 217 72 185 13 201 224 2 45 145 107 26 13 231 213 140 158 236 177 56 181 135 167 85 68 174 175 74 25 114 112 214 137 129 237 48 252 178 222 134 178 44 64 4 8 149 144 41 94 57 60 29 69 178 220 89 57 226 133 10 237 228 127 83 20 161 148 31 236 114 243 200 72 30 192 146 79 143 44 79 157 102 217 57 170 239 58 175 146 134 56 41 238 138 145 153 50 213 161 110 97 204 192 20 52 217 8 87 128 176 219 69 96 210 198 63 1 253 220 141 71 127 220 71 236 125 199 236 127 127 206 189 53 12 112 65 28 106 177 20 80 161 85 3 22 218 6 0 220 215 36 114 73 36 223 223 58 192 149 230 105 29 152 173 201 37 173 126 77 184 63 175 231 119 129 236 161 71 225 121 227 252 201 211 77 53 169 168 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 156 3 199 62 7 35 252 143 63 190 167 110 132 224 227 206 110 234 48 58 35 247 217 65 196 138 25 64 239 140 43 21 62 15 97 33 136 254 210 247 1 220 72 26 130 117 179 159 12 74 27 124 99 193 246 249 133 31 227 52 11 201 254 92 243 255 0 159 4 121 238 186 205 7 77 175 104 238 89 40 231 117 55 177 186 198 88 100 90 220 100 250 95 78 116 232 196 181 212 145 146 202 30 120 212 149 181 236 91 54 184 35 60 28 112 78 172 255 0 20 57 155 249 62 175 238 76 44 179 200 248 173 146 241 237 156 37 30 201 68 88 250 180 105 70 151 30 181 120 38 244 146 221 249 218 205 139 119 146 22 153 218 101 142 103 244 210 5 58 250 202 99 149 227 116 100 104 164 104 157 24 48 104 218 17 245 199 32 101 238 71 28 112 190 160 5 219 144 129 207 141 79 253 120 202 216 196 124 70 117 3 53 69 84 95 195 239 233 242 148 86 199 115 215 107 152 249 160 179 85 30 39 226 180 235 53 138 177 195 60 82 21 38 188 204 24 255 0 217 246 201 189 82 222 59 103 115 228 232 95 234 62 42 124 254 193 234 28 23 119 79 79 58 153 182 40 208 175 212 93 139 20 182 164 175 158 217 89 99 90 10 148 250 133 83 101 103 254 99 19 119 107 238 87 93 204 181 147 21 62 222 221 248 90 249 58 109 97 10 90 179 211 168 250 47 133 66 102 130 106 21 150 89 160 120 150 103 113 10 72 201 20 110 164 205 47 153 165 41 188 18 145 57 69 102 1 116 196 244 201 53 69 108 165 202 200 181 110 193 124 204 178 120 96 32 64 162 225 65 6 228 129 98 64 200 26 142 106 116 187 106 95 232 212 219 154 165 172 227 245 18 45 191 184 58 144 144 71 110 139 109 137 118 30 218 223 24 237 129 150 198 10 31 35 38 65 55 38 62 89 174 111 28 158 69 179 43 142 139 1 143 150 188 88 216 74 69 219 175 106 36 114 225 67 127 86 57 144 158 66 198 161 187 59 164 99 194 198 188 144 123 156 168 42 203 32 37 25 88 253 50 233 167 195 231 80 164 171 211 141 176 139 82 198 27 63 75 226 123 101 226 55 218 137 99 218 25 77 153 213 126 140 224 23 167 27 169 172 4 134 237 74 151 119 254 117 68 21 44 45 92 197 13 198 246 48 211 214 167 148 199 76 235 143 226 182 166 228 233 204 61 69 167 136 218 214 54 254 218 233 238 47 121 224 95 98 110 180 194 237 253 255 0 215 141 193 79 106 229 242 91 163 57 184 43 238 5 83 123 105 236 157 169 105 119 186 237 141 156 50 135 17 143 109 188 184 161 126 205 235 89 43 152 212 95 22 195 13 71 80 129 102 142 185 218 68 171 133 165 168 138 31 14 39 169 122 73 98 33 146 71 95 12 64 39 72 138 169 85 156 111 40 151 219 162 122 76 243 197 79 81 242 178 81 33 82 140 136 108 36 216 170 254 48 22 176 185 109 132 182 54 165 243 141 124 236 98 195 142 79 184 7 144 65 4 17 200 224 169 32 248 60 31 60 134 229 88 6 82 5 69 91 150 105 89 171 122 149 187 20 175 83 152 89 173 106 179 8 167 169 110 39 230 11 149 103 67 234 36 177 162 175 122 48 85 98 10 242 84 243 172 203 110 116 199 168 123 178 176 185 182 118 78 234 207 227 97 141 131 101 232 225 172 88 197 170 196 66 122 150 114 208 195 30 30 31 80 48 150 73 125 120 43 35 201 217 41 134 113 44 107 143 238 93 181 159 217 249 204 158 216 220 248 187 120 44 246 34 72 160 201 226 178 41 232 219 173 61 136 160 157 35 120 144 191 107 122 51 171 50 72 99 149 24 24 228 141 28 50 175 182 249 186 57 37 122 101 169 166 146 100 140 73 36 107 36 102 202 192 92 109 10 72 236 9 190 73 176 239 172 67 12 208 148 121 26 64 165 129 67 189 178 55 46 211 206 111 247 115 197 236 6 233 117 198 147 103 250 109 211 173 243 121 80 100 247 54 202 196 228 242 50 71 252 115 223 120 32 169 106 196 135 220 188 242 208 146 105 79 246 165 159 188 18 23 187 90 44 181 100 98 93 23 144 66 130 89 145 124 130 193 87 150 97 203 30 8 85 31 81 224 240 61 198 190 128 117 81 88 124 62 244 81 129 94 79 79 49 201 195 123 120 179 103 146 121 241 253 175 28 241 199 191 35 80 223 67 58 77 54 245 200 57 179 219 13 56 34 121 174 91 151 183 229 171 85 175 221 98 205 233 158 79 162 40 235 64 146 57 145 248 10 21 135 119 213 175 37 208 186 148 84 29 50 162 105 205 146 58 202 184 224 142 254 91 188 238 21 86 247 55 44 161 70 64 177 62 163 90 253 66 141 102 173 240 64 44 254 28 78 142 109 184 25 98 46 217 176 27 67 1 218 251 111 155 155 235 90 26 141 196 0 181 121 23 187 219 184 118 147 248 240 72 62 126 222 60 143 35 198 189 107 226 47 217 61 208 198 242 0 222 66 142 224 8 62 65 225 188 240 121 4 14 127 207 91 161 131 217 155 79 170 123 95 117 102 182 122 43 79 181 115 211 227 237 65 25 62 188 184 201 251 206 23 52 35 99 222 43 228 125 54 133 254 146 176 90 80 140 223 90 129 81 38 218 169 210 174 158 75 191 114 59 118 190 124 199 159 199 225 22 149 187 70 132 103 231 214 196 141 47 175 21 91 19 150 72 235 16 99 35 130 100 80 56 3 131 168 62 38 87 253 202 83 176 171 53 48 211 172 50 93 89 154 84 12 44 183 6 198 198 217 255 0 106 87 163 61 153 158 84 49 199 28 146 201 34 17 179 98 5 192 189 242 9 0 139 19 158 218 211 145 182 51 135 159 245 9 7 12 232 67 66 200 123 144 168 96 123 136 224 2 195 134 60 43 249 40 88 3 199 75 27 95 59 10 135 154 132 241 160 4 151 17 240 188 120 242 91 191 131 251 113 207 223 242 53 244 187 118 231 54 142 197 232 23 78 58 212 58 127 67 49 123 124 77 78 43 155 121 178 178 80 163 67 230 170 92 178 179 87 185 22 62 197 139 45 205 104 227 149 38 132 23 50 25 21 227 84 237 48 135 253 38 122 121 125 32 139 112 116 82 198 42 181 149 100 249 172 62 235 134 205 135 12 73 231 31 6 83 9 82 25 203 66 190 180 113 164 202 178 143 45 98 0 133 202 212 223 18 245 58 180 241 233 186 65 154 157 38 146 150 86 89 225 89 5 68 14 22 85 88 164 149 89 128 184 176 28 223 7 23 215 102 233 84 244 229 18 122 192 178 60 49 202 81 81 156 160 144 110 87 98 162 193 74 240 57 4 28 156 107 73 164 130 88 79 107 163 243 201 28 149 110 73 251 248 242 124 19 199 239 246 215 164 21 44 217 255 0 176 134 73 57 60 0 163 201 63 128 15 4 255 0 112 214 236 110 126 153 108 189 251 182 70 249 233 133 207 212 240 194 100 175 122 7 140 86 202 97 238 176 140 26 57 138 8 242 124 164 172 25 94 25 226 121 106 94 86 245 170 75 36 12 178 61 6 59 166 56 221 143 211 93 193 212 13 203 88 181 124 98 195 91 29 94 98 98 108 174 102 244 143 13 44 101 98 79 38 87 150 55 150 86 80 76 80 70 101 97 218 218 125 126 38 165 240 252 241 72 147 138 133 164 106 119 176 153 106 26 215 70 140 92 139 94 197 129 43 139 131 109 85 251 34 83 34 133 150 54 129 144 74 42 6 35 40 64 97 201 195 21 56 4 224 224 250 107 76 222 188 209 176 87 140 171 17 207 111 42 72 28 3 245 5 36 169 225 129 237 110 24 121 4 2 8 30 39 145 238 15 248 19 255 0 1 173 214 223 29 28 169 152 218 219 111 123 237 34 46 97 119 70 50 190 70 140 241 44 113 152 154 88 33 142 90 147 0 0 134 90 150 85 235 206 146 144 226 98 3 112 121 83 3 216 232 246 231 130 35 41 169 96 160 237 35 189 225 5 195 58 163 50 1 44 158 19 212 64 65 32 158 239 111 32 150 41 186 253 29 68 108 254 52 72 68 143 17 15 117 240 218 63 182 36 4 221 64 182 24 145 115 245 22 166 167 166 212 65 176 170 52 137 32 37 29 65 34 194 220 216 91 255 0 232 118 181 239 168 135 77 73 227 165 187 137 144 202 49 214 10 170 179 51 60 108 190 193 138 47 113 33 75 201 218 64 11 200 242 167 217 135 55 58 157 19 221 87 85 154 42 83 128 164 2 24 55 3 232 86 224 184 140 198 24 119 118 128 92 114 65 3 201 3 77 126 213 163 43 113 85 5 193 65 109 194 228 19 153 62 215 216 244 199 223 145 165 190 82 167 252 137 63 250 254 177 239 198 161 221 123 67 86 75 44 18 36 50 72 196 42 162 249 118 238 36 14 23 184 49 28 243 201 3 133 30 88 129 231 83 206 59 225 215 121 100 28 167 233 247 21 129 63 72 137 217 185 86 40 124 198 10 21 228 48 231 191 142 84 114 7 145 169 159 165 191 12 59 138 109 203 74 165 236 125 166 141 237 162 191 169 31 96 72 187 73 152 119 202 85 199 112 9 220 192 52 101 84 168 61 197 134 148 170 248 143 166 83 164 146 10 202 119 17 169 5 86 68 46 100 176 183 148 200 182 83 123 131 220 119 190 175 135 165 245 9 137 63 40 235 21 236 38 46 182 39 0 131 31 218 27 79 123 144 70 113 223 76 219 5 147 138 19 59 215 149 98 69 229 143 208 197 64 224 121 85 145 159 142 72 0 133 33 189 199 35 206 172 210 43 68 72 144 21 42 120 62 9 227 207 30 72 4 123 248 247 247 227 95 67 186 105 131 143 172 187 191 168 125 55 171 182 240 184 185 182 93 28 172 149 46 214 185 105 159 37 99 21 152 24 159 235 77 160 181 162 141 121 14 33 133 156 243 244 168 3 129 168 47 168 95 15 187 179 109 95 187 223 66 113 10 72 234 128 33 145 73 140 242 220 178 6 17 142 1 32 201 218 73 225 84 119 16 13 20 223 18 82 181 67 82 214 201 13 52 235 20 82 236 222 134 233 50 171 35 110 18 48 4 171 3 183 36 92 140 219 77 201 209 103 49 69 45 50 77 58 50 202 37 127 15 98 163 199 112 72 36 229 1 6 252 147 107 3 115 173 100 7 159 35 206 154 184 222 198 90 161 41 142 120 153 8 60 48 111 117 243 193 251 123 114 71 252 243 171 121 251 120 227 199 248 254 250 244 49 200 36 10 202 202 232 235 185 89 120 237 238 125 125 191 211 42 72 154 35 178 64 67 250 118 237 123 247 230 227 238 206 184 211 77 53 110 170 211 77 52 209 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 211 77 52 255 0 61 26 53 151 237 236 70 51 33 82 196 182 97 179 114 81 102 10 50 65 143 149 218 88 32 146 22 50 219 80 45 240 188 48 250 36 42 80 63 107 146 0 36 121 45 11 173 129 188 68 51 154 148 111 150 130 118 244 195 69 90 56 239 173 137 75 145 58 60 209 52 240 9 202 253 76 88 58 51 160 118 91 4 53 30 223 204 200 130 32 149 234 78 243 25 101 224 70 35 112 177 197 234 187 9 152 198 79 114 163 75 222 10 130 204 202 10 183 130 195 63 98 200 144 72 177 132 10 150 22 38 145 93 72 1 191 172 116 150 38 67 43 4 145 66 158 238 225 220 220 14 10 13 11 178 144 37 69 6 217 28 142 14 14 226 63 46 62 163 93 5 65 5 215 114 247 81 113 127 195 56 231 82 140 251 103 109 196 104 70 149 179 47 11 100 49 245 219 32 214 5 124 118 78 27 53 230 45 217 114 69 106 197 190 138 194 19 90 188 178 215 105 28 204 84 112 168 77 177 128 177 37 57 97 131 39 10 10 113 223 106 75 144 142 227 220 179 103 5 140 204 215 199 199 50 65 74 202 45 89 110 229 162 89 23 182 196 230 155 35 162 89 158 24 228 140 218 149 244 10 162 133 190 233 123 163 129 5 89 35 30 160 30 82 62 213 133 61 72 228 37 148 198 83 233 31 72 228 158 21 232 90 185 32 134 157 54 147 178 43 118 163 67 28 36 61 104 227 179 235 152 166 114 90 117 136 135 143 133 152 200 33 101 6 66 65 115 72 163 147 22 169 55 231 5 125 175 129 244 247 200 239 222 212 150 20 226 156 230 215 185 99 233 237 219 39 238 247 26 145 164 219 120 72 142 69 147 21 152 145 33 159 1 12 48 92 191 13 9 43 140 168 101 158 25 162 120 44 79 233 66 208 197 102 54 154 212 71 187 177 108 0 189 235 171 101 188 37 120 113 118 160 169 134 189 106 206 63 57 184 33 177 144 75 85 225 21 168 193 250 123 80 249 199 74 77 28 241 201 19 205 242 133 108 35 63 22 2 119 184 117 143 2 145 27 187 210 158 33 31 111 105 244 140 127 80 41 27 68 128 146 211 32 81 27 186 128 229 155 131 244 16 64 58 236 84 49 103 250 75 183 4 247 250 42 9 32 47 29 158 146 199 34 142 20 127 88 9 94 120 95 45 171 163 134 88 192 31 48 27 55 201 24 251 54 239 111 123 103 182 120 213 110 234 237 116 79 12 88 13 185 231 146 115 248 126 122 18 27 130 0 0 129 199 1 199 35 243 245 179 49 231 243 224 31 112 0 227 87 209 137 166 47 81 173 110 228 184 234 246 241 213 237 250 215 22 169 38 75 16 206 85 162 53 26 121 12 127 48 176 172 107 34 172 161 74 180 136 164 55 24 250 30 87 146 192 159 28 130 71 35 184 119 40 1 16 32 94 8 237 10 120 0 143 207 58 184 82 161 106 239 204 71 90 36 154 72 43 75 101 196 146 136 2 211 130 104 204 165 164 82 136 85 25 216 50 201 207 34 67 223 224 55 61 187 131 115 33 216 48 205 139 6 27 112 14 69 174 61 13 192 250 234 0 27 140 223 30 157 241 250 253 99 190 98 157 26 86 204 52 46 54 66 186 40 117 178 171 42 163 58 198 223 72 73 22 57 15 47 192 36 71 199 159 36 128 78 178 237 179 128 197 94 196 201 110 253 107 83 151 200 228 42 122 194 219 215 175 77 105 214 175 97 93 189 56 172 250 62 172 242 246 163 90 134 52 153 81 214 23 115 207 56 149 140 78 74 177 174 173 91 211 55 43 11 80 124 188 144 207 34 66 179 180 50 52 176 44 157 241 50 188 22 33 100 110 74 201 25 7 147 164 152 155 162 133 107 168 4 149 108 189 218 172 17 90 89 82 90 138 174 237 117 76 47 21 95 77 165 128 151 146 88 251 248 4 119 4 61 181 150 102 27 86 160 18 108 6 109 197 189 62 159 125 184 237 169 40 145 14 226 20 129 254 33 126 69 184 184 60 253 63 12 107 45 177 129 197 67 183 226 187 94 12 165 155 114 99 113 185 5 202 172 73 54 57 242 23 88 124 197 69 101 104 43 24 170 76 207 80 215 13 53 131 98 9 102 104 23 191 199 180 184 171 111 152 218 18 228 113 178 91 245 235 208 138 226 198 176 68 30 71 203 88 121 196 166 180 83 199 244 86 149 28 175 166 188 134 10 174 206 25 70 33 62 220 203 214 171 243 134 172 38 178 215 130 211 52 22 113 182 159 229 44 50 246 93 120 41 222 71 88 162 137 149 190 103 210 6 18 165 120 12 60 219 227 165 96 188 48 77 8 163 235 119 152 100 200 187 67 92 178 147 253 96 149 158 96 208 41 32 202 252 30 1 36 171 15 120 136 30 78 103 4 140 130 77 200 192 189 172 108 59 95 28 142 192 230 77 32 107 111 67 97 199 134 72 206 46 90 225 175 244 3 54 252 47 59 150 75 43 146 147 230 49 242 210 236 130 47 74 41 100 138 103 8 167 177 187 90 189 106 177 8 85 199 108 49 180 109 58 142 91 187 179 158 111 219 91 109 84 202 81 150 213 218 182 108 60 179 207 20 118 33 177 52 81 84 244 169 122 177 52 129 68 117 132 141 51 132 30 188 243 187 171 0 41 0 162 86 196 174 99 46 86 191 119 30 97 89 236 227 236 88 171 48 164 210 216 137 62 90 103 130 111 12 82 63 78 57 99 228 186 39 112 245 21 66 240 88 106 132 214 176 202 10 212 158 102 245 94 16 81 36 237 121 144 2 176 87 97 233 153 44 35 6 116 84 111 160 171 51 134 28 129 112 132 132 8 38 141 13 238 204 160 22 123 255 0 136 177 39 139 241 110 120 213 127 186 60 164 189 141 239 127 240 223 248 126 191 208 220 235 38 68 170 219 119 37 18 211 177 21 170 150 113 145 90 118 189 12 245 236 201 32 187 82 66 144 173 85 146 185 88 230 85 117 142 220 253 238 29 199 96 147 211 76 191 33 179 234 68 49 235 91 17 110 197 134 201 254 147 102 40 114 98 37 188 178 215 78 47 69 106 227 70 61 47 153 80 162 204 212 235 212 147 142 194 170 36 14 35 233 167 204 28 116 84 165 51 38 58 181 134 83 31 203 148 15 110 39 144 172 118 103 172 191 55 51 197 40 114 229 229 126 11 246 134 80 21 69 68 27 123 41 114 10 147 65 10 77 243 183 107 99 235 194 108 52 86 57 182 210 138 133 126 118 74 181 214 180 254 131 8 228 89 217 3 21 229 57 227 154 25 25 65 95 29 98 184 42 24 133 98 215 176 184 43 149 38 192 130 8 201 176 205 136 125 106 17 99 22 141 197 145 64 186 161 181 130 247 217 249 254 66 246 214 115 38 18 26 51 101 211 3 142 57 24 70 30 105 169 228 175 71 143 182 182 216 95 199 196 173 242 18 210 136 213 106 209 165 248 143 172 168 211 71 17 244 86 79 94 3 47 120 240 24 124 140 246 94 122 86 101 200 4 198 65 127 23 130 72 254 87 31 53 236 108 83 92 183 219 67 209 72 81 109 114 9 118 124 124 18 137 26 89 81 154 78 48 17 182 178 162 198 54 25 43 212 129 114 54 90 164 54 163 183 143 185 86 188 241 61 36 154 75 18 81 185 108 195 29 81 144 137 228 110 223 226 12 228 128 79 22 164 171 59 153 61 40 90 201 140 247 72 99 111 87 182 19 200 105 25 90 70 141 98 152 161 144 75 24 73 154 34 172 62 158 208 177 240 220 134 2 172 54 230 36 169 46 70 64 28 59 48 197 174 49 112 120 213 63 54 134 225 160 222 8 224 160 181 252 185 5 84 27 131 114 51 252 141 178 231 198 223 125 187 144 9 20 150 41 212 203 197 242 143 56 166 100 142 170 37 216 236 201 28 149 148 74 35 153 164 137 207 203 9 162 237 110 85 221 67 17 114 201 237 188 46 62 133 92 132 181 110 8 235 100 113 240 229 22 11 231 186 214 58 205 86 51 217 171 243 98 126 232 146 95 17 77 78 156 16 203 50 164 49 247 188 136 143 130 156 84 191 167 54 75 190 169 132 90 90 178 42 91 146 89 97 154 85 158 72 86 72 218 66 199 189 32 98 123 187 187 121 225 139 31 127 88 104 100 43 83 139 56 137 12 80 214 191 86 8 203 43 52 166 105 33 123 42 255 0 45 42 149 90 178 61 123 15 20 131 132 121 16 14 208 27 141 116 196 228 223 197 140 6 109 204 0 81 191 202 139 180 176 27 182 249 67 89 72 36 230 231 23 165 229 18 35 198 16 133 114 11 7 222 69 192 2 203 115 129 107 220 15 111 92 103 16 237 188 28 89 52 196 90 22 237 221 142 27 249 32 180 172 195 33 184 190 162 62 27 31 10 165 90 179 173 166 170 235 110 226 67 58 76 166 72 163 145 125 98 35 21 212 240 116 42 228 154 90 56 204 180 211 45 204 100 105 74 75 53 168 207 134 175 50 201 36 183 37 134 111 153 127 72 77 235 1 38 67 211 149 3 63 204 164 97 226 50 70 214 108 221 203 91 177 110 101 150 238 66 219 52 178 250 17 72 12 178 36 64 6 74 245 199 164 172 18 32 59 216 114 188 125 30 231 84 162 148 210 188 181 227 172 242 76 138 209 186 136 236 72 224 51 243 196 145 186 171 19 40 0 191 0 49 28 118 49 30 52 120 83 92 159 152 195 31 48 221 134 5 2 5 193 24 81 246 123 220 94 231 189 137 80 35 85 65 17 178 139 121 35 5 79 30 170 199 190 124 220 219 182 53 43 228 126 91 25 87 47 118 108 122 75 18 103 183 60 85 226 76 102 18 204 115 65 53 186 178 99 125 75 81 196 182 210 191 167 28 191 45 98 154 20 88 226 87 145 225 15 25 56 252 152 65 61 13 178 205 5 140 85 57 50 70 181 235 102 74 246 107 86 171 122 213 2 111 36 141 28 108 128 194 182 16 69 57 38 50 128 242 59 144 182 24 148 236 72 12 134 164 173 25 141 156 63 203 202 144 34 9 76 65 203 52 65 161 137 79 17 125 78 36 132 112 94 69 32 176 241 53 101 116 142 115 4 233 94 78 232 162 177 34 76 32 118 42 10 152 167 51 51 148 61 209 253 65 251 79 35 195 15 26 234 167 156 90 160 19 114 44 75 28 178 132 39 158 64 2 199 183 184 22 212 205 90 48 42 208 150 82 8 42 85 44 65 176 96 108 160 253 108 65 192 207 164 133 151 192 199 143 181 140 147 111 83 203 195 116 216 187 84 45 230 175 233 89 166 209 164 53 172 215 249 134 157 36 50 35 207 243 50 122 38 155 172 245 132 118 64 73 2 245 56 143 75 112 110 73 142 46 213 171 149 51 2 74 24 250 150 34 199 202 148 173 92 183 42 100 194 75 13 159 90 21 13 86 39 141 32 21 227 87 239 112 144 35 58 225 85 49 89 9 165 134 40 113 214 204 242 69 35 3 34 205 15 124 85 235 124 204 232 75 76 171 42 136 200 237 70 12 72 60 175 96 102 13 76 241 152 36 104 228 13 94 65 27 9 21 225 70 42 199 146 35 236 116 153 126 164 225 213 120 228 2 29 185 61 218 152 164 113 112 37 82 73 201 185 220 65 34 253 237 98 108 56 201 176 239 165 216 161 0 70 134 59 88 218 254 91 0 5 173 97 234 123 246 212 198 40 48 181 147 13 141 14 241 110 92 144 170 147 98 112 211 215 179 4 177 67 44 21 174 94 120 99 146 26 30 163 204 207 106 153 13 23 13 44 60 55 165 221 133 205 143 191 54 223 197 217 189 20 144 214 143 41 60 95 52 144 164 114 65 70 195 69 76 72 26 56 163 147 211 136 200 230 32 80 200 22 62 124 6 29 216 72 69 7 149 69 98 15 210 16 48 118 251 130 25 36 80 37 45 236 232 170 56 32 42 129 192 23 73 48 247 227 199 71 150 120 138 84 150 100 133 36 97 111 250 184 166 154 196 48 150 32 246 44 12 212 236 6 239 37 76 171 23 42 73 4 86 180 239 11 40 222 151 145 242 91 206 202 44 184 23 59 64 60 228 17 143 67 174 198 235 27 2 241 153 6 60 183 59 123 94 248 62 134 214 224 125 117 32 222 219 155 114 156 209 172 120 236 223 162 23 40 24 205 101 107 214 200 37 12 55 206 192 241 219 100 178 242 118 91 170 202 166 180 111 9 51 246 187 119 158 5 72 219 24 17 114 234 173 60 148 230 148 151 32 173 141 142 215 207 89 188 107 89 88 5 216 154 180 116 237 48 53 174 69 34 172 17 153 125 55 237 10 100 142 94 216 206 108 45 200 234 213 182 241 128 182 45 88 169 21 126 4 215 150 116 133 221 132 240 52 44 252 73 23 108 129 227 37 100 137 219 184 130 60 250 211 197 90 183 97 234 185 138 157 184 107 203 50 71 126 73 42 203 50 122 106 22 53 136 161 238 153 171 163 183 108 112 68 28 66 174 123 153 187 140 118 190 127 181 152 218 228 29 150 94 27 210 214 23 183 97 220 158 116 193 173 75 249 105 252 53 197 145 85 118 142 56 12 164 228 220 216 147 159 203 63 139 110 96 86 86 132 227 114 147 37 156 220 248 170 210 201 146 171 1 165 76 99 197 129 44 149 68 118 146 89 146 86 249 112 242 78 241 120 44 120 95 171 88 221 236 92 81 224 169 207 91 11 96 188 85 102 130 246 83 230 82 72 82 221 92 141 136 228 73 61 10 144 71 243 41 11 215 226 63 81 222 88 228 145 224 142 88 226 177 36 24 164 85 39 40 242 8 166 158 40 132 175 43 10 205 218 172 231 189 164 118 90 160 198 203 95 142 100 46 56 224 18 123 65 215 177 169 100 48 95 149 156 150 143 214 18 201 9 61 241 118 187 11 61 243 52 195 211 64 141 234 218 138 34 161 3 55 111 104 97 166 86 9 1 27 170 46 184 184 36 27 241 239 239 244 252 110 107 121 209 212 168 133 129 60 17 216 224 241 97 238 62 239 67 174 45 84 179 88 86 123 8 81 110 86 75 85 185 49 114 213 203 201 0 98 35 119 42 76 208 76 59 102 9 47 142 74 4 40 205 228 37 43 27 70 63 236 219 203 167 251 103 207 223 219 241 239 255 0 134 187 181 107 10 98 238 130 100 73 217 18 25 62 94 86 91 14 236 0 16 122 21 251 230 102 94 247 82 97 78 224 133 65 225 121 23 104 246 214 90 107 24 218 145 71 93 173 229 160 73 233 213 107 112 65 59 247 89 53 76 79 29 151 132 199 40 152 118 42 55 12 205 244 128 8 60 90 60 56 205 217 213 175 139 14 199 202 125 79 250 122 247 213 0 59 112 132 125 84 247 32 123 122 255 0 227 54 176 131 193 83 199 60 60 103 142 120 240 36 94 227 255 0 117 121 111 30 124 112 60 241 172 193 114 42 251 12 98 74 158 250 251 137 46 119 147 207 114 75 5 120 71 216 118 144 209 183 130 1 228 115 192 4 19 142 201 142 187 19 204 162 47 81 171 185 71 106 252 221 132 17 31 171 207 204 209 22 42 170 152 195 177 118 157 66 132 98 59 143 10 125 96 134 200 199 90 38 181 175 74 73 107 79 234 172 18 24 84 9 88 41 238 32 6 89 25 74 35 169 42 56 243 199 177 227 8 229 42 193 209 118 72 142 46 69 247 34 178 139 100 96 135 32 227 56 200 237 108 114 60 34 81 97 121 84 43 115 128 8 55 25 181 239 220 223 238 200 213 18 205 44 19 36 245 221 163 154 50 59 29 60 16 57 61 232 73 243 218 127 0 254 127 58 169 185 60 54 201 176 170 177 79 41 34 202 0 123 92 243 207 171 9 10 66 188 141 201 144 177 82 121 60 121 215 154 83 181 53 133 172 181 231 89 94 204 84 149 36 137 145 141 219 29 173 5 94 211 237 44 161 152 160 39 130 138 174 60 56 227 202 197 123 21 29 163 183 4 213 100 94 224 99 153 59 92 50 243 202 246 130 79 32 130 15 0 255 0 35 227 69 162 6 197 178 45 246 109 183 22 227 7 215 215 56 245 196 24 150 36 158 79 166 188 116 213 215 21 134 191 153 154 196 84 162 29 181 35 245 108 217 156 250 53 97 70 146 56 99 50 72 220 186 250 178 200 145 199 196 103 153 25 87 199 36 138 70 167 96 25 74 198 242 69 4 143 28 179 68 146 75 26 24 219 177 223 186 52 126 248 251 249 80 201 220 71 105 50 44 124 175 117 190 58 122 250 126 118 255 0 92 125 222 184 230 169 116 213 75 212 177 24 118 120 101 72 209 67 180 173 27 172 66 54 227 177 204 172 2 42 201 200 49 150 101 12 15 36 141 83 142 15 177 253 189 187 135 119 251 29 200 93 123 249 241 199 61 156 251 63 111 213 168 180 252 108 177 245 189 253 7 211 255 0 22 245 209 174 52 215 180 53 230 178 226 58 241 75 52 141 207 108 107 27 23 29 167 134 50 168 4 198 59 129 85 39 158 246 240 188 159 98 86 177 34 76 233 11 149 174 197 102 118 29 145 193 219 207 34 193 126 215 133 184 31 74 52 100 147 192 60 114 57 234 202 79 47 26 158 44 121 60 103 237 15 127 215 6 215 57 80 45 198 125 127 29 120 233 171 132 248 217 160 169 86 247 169 94 106 247 36 146 40 189 9 26 89 68 177 164 114 122 111 18 33 237 102 89 1 3 184 144 7 247 15 124 134 14 254 42 42 210 222 21 163 54 96 138 117 138 59 49 203 42 9 144 72 138 234 56 28 246 178 114 3 22 229 184 237 36 113 174 248 233 234 9 226 227 130 113 199 183 251 122 224 200 193 231 189 184 191 125 90 52 215 116 138 89 159 211 130 41 103 98 20 133 138 55 145 136 102 8 188 42 169 242 91 144 57 224 112 164 243 246 213 195 244 139 166 156 119 163 68 177 11 79 110 180 169 89 158 107 21 37 165 13 121 236 45 200 4 97 160 226 59 80 152 203 30 36 44 64 32 141 65 102 98 64 37 20 122 144 109 255 0 235 240 206 139 49 194 139 158 218 182 105 170 131 82 192 143 215 16 202 107 20 238 22 66 19 92 114 221 160 61 133 238 173 25 98 87 143 82 101 227 184 3 193 4 14 191 45 107 250 190 107 79 253 112 45 95 132 228 217 64 11 22 174 170 75 201 218 1 102 94 213 101 80 205 193 237 35 86 111 255 0 220 139 183 231 111 251 253 241 247 122 224 217 47 162 254 122 241 211 85 102 141 181 89 92 214 156 69 31 121 245 154 9 150 2 145 148 15 39 168 99 225 81 25 194 179 48 1 79 191 141 62 70 215 113 65 5 134 101 65 35 160 175 48 120 226 39 143 89 213 145 120 132 16 126 176 73 42 59 194 144 70 185 226 127 238 197 200 252 237 199 155 32 254 136 236 108 151 209 127 63 245 213 38 154 246 88 37 120 218 85 138 102 129 3 25 44 44 100 215 143 176 184 61 238 72 96 127 171 110 56 67 236 65 32 248 215 142 131 50 179 42 198 119 100 6 60 247 0 219 208 94 252 222 222 186 224 251 189 237 235 166 154 105 171 181 221 52 211 77 26 52 211 77 52 104 211 91 59 240 194 57 223 88 208 62 246 163 255 0 41 160 63 248 107 88 181 179 223 11 255 0 250 247 140 255 0 226 163 255 0 251 160 215 158 248 138 223 179 107 239 98 13 28 192 131 193 5 8 32 228 114 13 180 255 0 75 23 234 52 89 183 246 136 242 59 121 181 124 222 151 58 73 67 226 119 170 151 122 199 141 221 121 157 179 91 63 153 106 248 141 163 61 74 150 50 57 57 172 86 173 12 89 139 147 91 163 110 182 14 8 101 177 98 195 99 167 54 228 176 144 66 141 88 57 153 166 139 217 63 135 12 14 55 105 109 220 205 93 181 182 182 126 229 200 109 142 162 46 206 161 131 235 150 79 117 226 68 201 85 49 153 172 102 236 204 110 125 249 178 174 229 243 120 71 253 59 63 135 193 224 50 184 6 138 10 117 179 249 42 151 48 112 77 138 212 127 136 192 127 211 175 84 199 112 3 250 95 149 36 115 194 129 200 4 183 219 128 189 195 147 236 11 3 227 157 72 123 3 119 102 186 127 209 249 173 110 42 88 45 233 22 245 207 77 135 232 231 79 55 166 219 194 239 42 20 239 81 183 82 190 240 234 30 19 25 153 169 45 252 58 155 15 79 102 99 162 192 228 113 203 185 183 36 185 121 173 171 79 182 106 74 60 183 81 233 15 81 211 186 53 116 117 21 172 237 77 69 75 29 58 213 136 84 180 212 229 124 74 109 202 241 71 36 91 124 103 148 128 82 20 115 188 38 229 109 154 74 151 122 202 202 97 71 2 129 83 84 222 62 213 46 54 186 176 23 60 113 97 247 115 139 125 43 248 136 234 6 99 97 237 188 117 142 144 109 10 253 93 143 118 111 234 251 166 236 83 98 55 102 51 39 176 96 163 83 109 228 182 70 62 92 94 209 131 101 111 122 25 217 65 202 73 13 188 197 203 62 154 230 179 216 140 234 95 199 78 216 136 106 122 252 37 151 106 215 234 13 28 86 210 233 159 94 173 236 190 154 109 205 171 115 170 153 220 141 187 85 179 91 179 111 221 78 161 244 183 3 87 170 152 225 210 44 94 42 134 206 200 84 169 30 235 196 217 149 45 230 165 203 98 247 45 186 185 199 22 172 98 205 213 92 254 75 118 109 189 145 159 233 189 156 119 82 183 239 74 102 223 157 86 191 133 222 87 160 76 62 31 5 54 74 142 212 218 88 106 45 43 225 235 103 183 142 103 98 237 110 159 238 60 35 69 94 43 50 102 161 233 254 80 230 175 213 185 151 212 11 155 248 197 194 111 45 129 185 178 210 244 7 166 89 250 219 63 121 109 10 24 188 55 84 107 95 234 110 71 27 6 232 193 238 90 57 28 244 249 253 204 150 45 54 76 219 217 120 216 110 197 37 122 149 45 164 241 166 79 29 106 212 237 102 95 150 209 116 94 162 198 129 105 122 122 188 148 147 202 245 53 169 95 13 76 181 241 86 84 37 53 44 117 73 226 44 47 11 180 47 76 87 195 17 203 78 170 236 19 124 100 250 201 186 133 46 233 226 154 183 194 138 68 72 233 169 157 73 20 236 176 68 93 226 27 124 183 36 146 111 125 192 219 190 181 227 124 110 88 58 117 185 45 193 191 119 38 83 173 253 98 218 249 55 130 108 110 106 125 195 103 165 123 23 114 81 44 35 172 180 243 177 227 110 111 188 142 223 178 177 77 78 42 152 188 6 195 138 221 120 165 245 115 248 137 160 22 53 103 47 150 202 110 28 174 83 63 153 200 93 203 102 115 23 172 229 178 121 75 214 37 154 229 252 157 199 18 217 189 106 71 33 167 177 102 65 253 99 74 172 56 99 218 138 72 35 104 186 145 215 205 135 213 221 153 185 19 120 116 254 88 58 155 223 139 177 179 119 166 46 238 6 173 122 74 185 10 112 228 176 25 184 168 96 240 57 27 59 90 45 186 215 35 194 81 200 77 185 46 97 109 86 163 21 9 240 120 226 102 26 159 238 126 144 65 231 200 96 168 121 231 216 162 18 170 126 197 17 153 84 248 4 128 9 251 151 65 166 120 160 119 169 163 146 146 185 81 41 166 146 167 192 113 56 85 66 77 31 128 4 81 211 150 33 66 162 39 157 88 50 181 131 31 5 95 32 121 98 142 58 184 106 32 181 145 35 77 174 1 54 2 82 121 112 65 245 4 155 243 207 210 13 239 139 151 45 208 158 134 214 72 204 172 251 3 26 10 129 220 75 53 171 42 64 81 239 199 28 129 231 219 159 97 230 203 212 155 240 116 99 161 85 182 173 18 203 188 58 182 178 98 194 86 142 87 181 79 104 212 120 37 204 200 203 88 122 241 79 154 149 171 226 104 243 202 205 28 215 208 2 83 185 54 107 98 237 204 70 87 163 253 16 189 151 177 21 58 52 54 29 43 119 174 78 3 65 78 157 103 191 53 139 79 207 142 200 32 142 73 136 99 218 253 156 30 121 214 150 69 182 242 223 23 253 111 221 118 112 217 136 246 126 205 219 56 69 253 23 57 144 171 45 186 216 29 183 136 99 79 109 211 52 225 181 78 70 191 156 180 31 41 43 69 98 25 26 73 50 86 143 123 77 102 77 124 255 0 166 207 20 238 209 86 48 139 166 116 170 186 202 202 217 88 18 26 116 170 149 105 225 42 183 103 93 230 54 40 183 44 64 3 146 117 233 43 96 145 86 51 12 97 234 234 224 164 166 133 255 0 140 21 132 25 153 73 181 139 196 178 41 111 251 185 0 223 85 251 91 1 153 248 72 235 15 79 163 223 210 77 253 21 234 46 208 194 157 220 233 12 209 199 75 21 185 154 58 249 8 90 6 95 74 75 187 35 49 255 0 89 55 168 196 201 28 79 218 161 102 94 221 165 248 210 218 213 118 215 64 99 142 179 197 36 55 58 131 130 181 4 177 50 180 77 28 184 252 168 71 141 227 250 88 49 112 200 202 204 167 193 28 142 57 215 62 163 124 31 110 26 91 35 114 238 250 93 105 78 167 218 217 248 251 121 72 246 202 97 50 163 37 45 30 232 127 82 147 25 110 238 233 202 201 20 171 12 109 102 72 224 174 175 96 213 139 185 92 196 164 91 119 55 89 23 169 191 7 120 205 179 147 182 214 183 95 79 55 222 215 194 217 245 157 132 217 29 189 250 126 93 176 25 88 227 238 117 40 144 44 184 249 88 18 205 45 10 224 177 121 34 26 118 84 29 75 168 124 63 214 40 107 150 186 106 46 169 77 15 85 88 224 158 153 100 14 206 212 147 201 4 195 118 229 141 188 63 16 0 165 84 11 227 73 238 20 116 125 75 167 212 209 189 47 205 81 60 212 73 35 111 98 204 203 28 235 190 246 218 229 3 109 6 226 247 176 190 51 94 179 142 239 129 175 135 163 199 127 110 67 8 123 124 240 71 233 89 133 247 82 8 247 224 16 65 227 158 14 183 79 165 152 61 149 185 122 9 209 205 165 187 182 174 63 63 141 204 116 199 105 193 98 59 149 82 211 201 243 56 74 62 181 152 103 149 100 158 11 176 9 94 120 174 69 42 79 28 203 17 71 28 112 116 175 173 1 163 248 26 248 124 35 128 194 254 28 128 197 151 143 79 21 152 98 23 180 6 228 178 118 21 229 71 150 86 101 242 13 231 109 124 118 237 13 135 209 221 145 179 246 238 204 205 230 119 182 215 217 248 60 1 183 156 56 140 118 221 173 145 198 226 169 211 150 204 83 67 145 202 100 239 67 28 213 253 97 80 69 76 207 33 231 178 86 99 217 139 87 211 186 141 119 73 132 116 200 166 121 162 248 159 172 201 36 145 72 98 48 161 117 9 35 181 215 200 173 102 80 110 1 23 231 151 105 235 32 165 170 63 52 201 25 110 145 70 178 36 128 48 157 118 48 80 151 7 108 164 125 163 123 228 94 246 58 196 190 28 49 9 211 207 139 237 227 209 120 38 147 35 181 242 89 13 253 179 231 138 78 30 57 161 219 84 114 185 236 37 249 121 94 201 46 83 175 138 122 162 236 235 44 242 53 185 76 205 36 174 174 153 39 196 71 29 107 248 128 217 95 13 155 10 81 95 3 181 239 77 95 55 106 20 158 122 181 243 179 81 158 206 229 204 221 90 136 208 50 109 124 52 66 148 1 123 154 91 51 74 16 23 117 9 136 244 154 174 232 233 110 35 168 223 23 189 75 134 74 121 204 164 25 218 125 55 163 146 128 215 189 184 247 182 242 146 111 95 52 148 165 72 230 134 149 58 150 46 87 133 38 69 146 229 9 237 92 102 150 81 19 201 137 244 91 225 187 115 245 79 108 91 234 182 71 170 177 244 248 229 51 153 136 42 92 185 139 177 115 33 158 119 118 124 198 86 59 117 51 248 169 210 172 153 22 106 77 199 114 217 29 199 186 64 27 91 50 69 75 23 84 168 235 149 61 70 42 113 211 232 41 186 95 205 186 52 208 203 215 100 167 85 146 161 226 142 237 35 192 187 148 58 130 110 14 111 194 49 187 79 12 29 49 32 43 13 85 84 157 69 200 195 195 64 36 2 10 101 126 20 201 29 174 1 251 68 155 0 111 169 215 224 207 58 112 91 191 124 252 51 117 34 8 146 230 51 53 150 200 109 152 109 51 167 253 121 130 181 36 123 147 13 2 88 64 202 47 42 71 157 165 217 219 29 135 173 113 144 241 98 20 138 223 139 202 231 122 99 241 122 221 52 234 46 99 39 184 182 22 231 179 38 55 3 30 94 211 197 78 174 31 115 152 110 237 171 125 177 26 213 133 202 25 85 165 133 191 59 197 44 114 44 118 187 35 128 178 122 80 151 86 58 57 188 190 28 51 27 39 171 152 45 249 30 252 55 55 25 150 44 237 90 22 177 205 143 207 81 72 237 85 197 100 229 181 157 202 216 176 185 202 169 106 56 229 145 194 122 21 36 171 220 17 218 38 217 143 139 156 94 39 173 61 17 216 127 18 187 43 186 59 219 106 157 91 57 69 172 123 45 85 194 93 181 11 91 130 89 120 89 96 155 102 238 120 36 88 101 70 87 138 27 87 166 135 211 73 231 103 82 166 62 158 122 156 21 73 81 12 221 39 226 170 111 217 213 21 80 71 60 80 211 245 88 212 5 150 36 152 134 139 197 123 22 185 4 230 228 155 13 62 175 83 21 11 82 136 229 138 163 164 204 213 169 28 172 24 214 80 130 25 160 119 55 186 164 127 195 200 32 91 190 176 188 167 90 246 53 111 138 218 155 105 105 209 143 165 120 249 91 167 23 165 245 7 203 77 156 177 109 98 155 114 7 11 232 202 152 205 192 181 241 166 193 225 36 198 203 98 101 81 219 235 11 190 236 220 249 189 231 241 105 67 166 125 52 220 25 13 161 178 118 81 134 166 239 159 15 103 209 169 38 63 111 36 153 125 235 149 200 84 157 37 173 52 209 203 45 141 187 74 67 3 70 211 66 142 34 102 40 235 134 215 248 100 142 95 131 187 91 169 234 199 39 82 111 89 110 168 148 153 215 245 51 182 160 128 210 253 37 199 5 189 59 24 27 87 51 223 33 27 24 231 186 208 76 209 53 162 27 82 95 193 118 196 195 98 186 127 189 183 238 245 204 71 14 226 234 196 89 125 191 138 179 145 102 123 53 240 51 67 52 86 242 50 205 203 205 36 185 188 236 242 93 142 66 237 235 86 160 129 203 163 161 37 107 244 90 74 42 202 250 121 164 169 122 24 15 195 94 19 92 137 43 12 177 15 157 43 155 178 196 102 33 200 35 239 213 84 205 213 228 169 138 150 100 88 210 180 181 122 202 8 13 20 6 50 241 83 130 194 202 140 224 46 222 195 29 241 129 167 80 250 197 241 69 186 183 125 174 157 110 234 29 24 233 14 206 72 231 191 153 92 140 187 114 181 90 150 166 189 45 27 25 252 150 52 215 189 144 205 229 162 89 45 37 6 189 75 23 70 19 27 219 104 164 85 155 84 125 1 235 135 89 246 247 88 227 216 56 157 195 148 248 132 217 207 148 134 134 66 237 36 200 101 164 175 70 118 134 9 183 14 31 39 154 141 50 56 202 88 193 41 150 220 57 123 11 66 216 171 106 76 72 148 88 249 235 90 199 130 219 212 54 86 245 177 210 94 183 238 125 225 177 246 61 60 205 140 142 102 166 221 163 103 37 14 90 213 24 225 175 141 202 46 62 171 191 175 82 212 106 175 91 47 87 29 149 159 28 182 38 141 34 2 73 53 244 183 162 63 17 31 14 24 173 227 182 250 37 209 205 181 118 134 27 47 12 233 46 237 147 28 212 98 200 102 171 34 220 172 217 6 201 66 119 6 90 198 76 215 154 180 153 60 183 203 34 32 74 233 86 180 62 152 154 254 181 12 93 62 142 162 150 147 165 14 165 211 223 167 197 61 41 138 154 40 160 167 140 5 47 87 83 212 8 50 205 59 48 102 16 196 67 40 178 145 113 154 186 92 166 190 104 86 106 216 168 38 141 220 207 27 204 198 121 234 21 236 148 169 5 182 36 34 193 67 88 111 2 247 25 214 134 236 12 103 89 51 221 117 234 54 215 232 158 102 108 14 115 113 102 183 68 121 236 221 123 41 143 76 110 222 163 157 177 102 212 246 50 162 189 139 24 232 18 81 85 24 211 2 123 50 59 198 132 185 86 89 71 169 84 254 37 62 26 173 224 242 219 247 119 14 167 236 141 193 144 24 219 81 229 51 89 189 201 78 213 191 149 105 172 98 123 247 4 45 127 110 228 228 79 82 206 30 90 55 96 173 98 106 60 218 134 213 102 154 148 215 45 189 188 38 248 70 248 163 223 210 239 172 70 70 206 203 223 22 242 47 75 53 70 15 86 73 240 183 50 209 230 113 25 186 49 162 180 119 90 140 137 37 28 190 46 185 54 149 88 247 171 248 230 191 226 223 226 91 107 117 207 11 183 122 89 210 42 121 93 197 235 238 58 121 171 153 55 196 220 199 124 227 212 135 41 86 142 31 29 79 37 233 100 136 245 114 198 107 150 141 98 209 152 25 220 164 113 52 139 105 151 168 79 212 250 100 48 244 170 73 254 28 169 233 212 77 89 212 30 150 57 8 181 45 156 189 91 90 72 90 16 60 137 205 212 3 99 123 87 179 167 167 79 234 38 74 202 152 186 148 53 178 152 104 213 164 17 163 25 25 172 170 8 195 54 72 177 4 218 215 24 212 61 215 221 163 132 124 126 23 121 237 229 144 97 119 70 19 31 159 199 131 26 194 233 87 35 94 27 30 148 171 216 67 60 19 60 213 217 151 176 22 136 242 170 15 3 79 24 146 120 32 125 63 72 253 192 251 159 223 201 31 111 111 109 111 47 93 76 91 91 96 236 125 129 45 168 109 100 54 182 210 197 97 114 83 196 223 65 201 67 86 188 185 40 227 78 123 2 87 189 45 136 59 163 228 57 66 255 0 126 78 141 30 73 99 193 227 147 193 251 31 239 246 251 241 175 113 240 179 200 253 53 67 146 81 11 172 12 73 44 209 135 178 19 123 114 129 79 28 158 220 107 23 172 5 21 73 182 217 130 34 214 231 113 81 186 254 228 228 222 199 140 107 141 52 215 33 88 251 41 63 200 19 255 0 13 122 75 131 193 31 136 214 86 184 211 93 187 91 223 181 184 252 240 127 251 107 142 15 224 255 0 134 187 113 205 241 235 163 158 51 174 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 95 49 183 224 165 29 164 185 243 204 183 43 203 83 136 77 111 68 37 131 218 12 209 205 39 12 99 118 87 137 254 93 153 101 69 98 120 94 225 113 163 155 173 29 56 104 201 46 86 120 226 197 229 104 178 45 152 227 134 59 87 231 67 94 209 255 0 89 130 40 98 172 201 27 52 172 72 65 207 60 131 172 76 146 79 36 146 79 185 62 73 254 253 113 192 225 135 30 24 16 195 236 192 241 200 97 236 65 224 114 15 191 3 240 53 155 225 171 89 77 214 228 100 92 145 157 117 88 70 193 200 190 223 98 121 199 3 158 218 148 179 59 138 28 125 151 116 181 102 251 207 30 10 110 216 115 84 178 116 171 38 38 90 114 90 146 167 201 207 104 165 203 15 5 152 204 115 42 146 147 200 36 14 36 67 29 135 250 67 140 129 232 45 68 202 168 164 115 112 216 153 165 130 25 18 60 210 76 130 90 105 3 48 69 174 146 253 80 74 160 27 11 222 166 40 255 0 171 24 103 39 207 147 231 142 124 251 240 197 135 63 158 24 150 28 255 0 104 147 239 174 56 30 60 123 113 199 237 192 237 28 126 56 30 7 30 195 192 241 169 10 85 198 201 25 253 110 108 0 22 253 91 86 53 73 146 193 60 150 185 36 41 82 70 57 221 113 143 111 199 85 119 229 173 37 166 122 173 97 162 145 87 235 189 42 189 201 101 0 151 103 17 180 145 133 62 225 121 94 56 254 34 120 6 166 173 196 135 25 150 164 207 101 94 243 227 154 53 138 42 114 86 127 147 146 204 172 45 53 136 100 176 156 122 139 233 26 146 69 221 204 190 191 168 4 93 150 190 79 159 62 252 115 251 241 237 207 231 143 183 58 114 71 177 227 255 0 240 143 248 18 63 145 58 12 91 44 164 95 210 249 191 30 214 57 3 85 18 88 221 137 99 234 109 253 0 244 214 71 107 57 243 56 152 49 134 138 195 36 80 214 140 78 38 141 129 90 145 36 77 204 113 227 43 129 222 99 39 131 97 152 147 195 18 71 138 125 185 150 135 13 150 138 252 208 11 213 65 180 146 86 98 202 142 108 214 97 20 79 195 114 97 22 254 88 202 161 135 119 107 112 202 74 145 100 246 37 135 134 36 146 223 114 73 228 146 125 249 36 146 127 125 15 159 127 62 121 243 231 207 42 220 249 251 242 170 121 252 170 159 112 52 109 5 118 112 141 112 71 108 242 126 185 190 141 72 177 111 222 251 18 219 146 180 245 165 179 140 198 87 54 82 42 119 156 92 130 91 118 114 82 250 57 0 213 209 110 89 185 52 166 84 1 210 114 10 18 11 169 241 143 118 81 104 204 206 153 193 50 102 114 25 150 142 172 152 168 32 184 109 67 94 40 169 220 130 38 72 82 20 106 203 43 23 142 69 8 102 64 160 200 172 177 247 106 241 199 106 241 199 28 112 56 227 158 238 56 227 219 159 60 123 115 231 223 93 136 4 146 71 36 243 201 62 73 228 130 121 63 185 0 159 220 15 192 212 5 21 50 144 85 236 64 181 192 250 115 159 109 73 157 216 109 103 102 24 228 131 193 4 118 237 109 102 141 184 49 177 26 246 169 80 187 37 232 112 149 241 62 157 137 170 38 59 176 202 211 91 127 78 7 145 101 19 7 41 31 245 106 137 55 50 188 114 3 217 174 249 221 201 95 56 169 20 235 112 85 249 169 174 58 138 120 42 210 85 19 40 81 90 54 169 244 200 9 7 210 36 197 24 62 101 82 121 3 8 228 254 126 228 255 0 121 28 19 252 200 240 79 220 107 146 75 113 201 39 181 66 47 62 123 80 30 66 142 125 148 31 33 71 128 124 241 169 252 172 35 254 105 227 253 51 253 71 185 239 141 69 110 151 218 196 95 6 214 205 189 237 127 207 29 173 172 242 29 203 138 135 112 110 28 200 169 113 155 39 102 123 17 75 44 149 164 154 147 220 200 181 187 112 172 82 58 212 38 194 179 165 105 135 168 96 94 197 146 57 193 145 197 207 245 234 210 69 184 115 21 197 88 107 54 74 60 158 2 139 228 177 145 220 165 154 181 21 154 30 180 52 162 181 12 146 65 12 54 39 107 30 156 46 30 204 117 157 100 69 141 225 146 48 228 242 15 39 145 236 126 227 249 31 182 156 147 199 36 158 9 35 201 240 79 60 145 248 39 147 201 30 79 39 92 52 96 155 171 18 48 1 36 11 241 127 196 143 167 107 106 229 169 216 54 176 12 71 118 4 158 214 200 183 28 253 117 159 182 239 141 176 195 26 230 99 42 80 154 179 195 45 60 123 252 218 207 98 75 18 91 179 110 88 206 66 39 119 145 153 197 87 18 187 151 100 149 17 150 56 235 31 120 227 100 119 157 163 203 88 145 247 62 35 113 250 118 46 209 181 82 156 180 69 151 74 212 97 158 103 141 161 142 75 45 201 129 43 194 81 85 61 16 192 147 26 114 64 0 18 0 60 129 201 224 31 200 31 99 251 235 142 224 7 1 184 14 121 227 159 12 125 249 227 251 71 239 207 159 206 160 40 160 82 63 121 103 191 30 173 220 92 159 92 107 173 92 8 43 128 72 218 14 214 28 216 12 147 108 98 221 184 214 91 22 122 54 207 86 203 206 45 71 94 156 168 245 97 164 41 210 144 37 89 162 100 73 162 168 245 41 59 93 17 69 250 131 199 31 125 149 133 20 8 208 55 53 248 157 215 95 17 21 218 245 225 150 40 172 101 99 201 65 52 148 176 182 236 200 98 137 161 90 210 195 52 114 34 250 125 193 160 146 41 19 146 197 101 174 226 48 95 4 28 243 227 158 73 28 113 207 61 199 192 246 243 201 246 31 125 57 39 234 231 159 168 48 110 121 250 148 144 27 159 246 149 129 0 243 200 32 143 4 106 102 145 65 0 155 18 69 129 97 158 14 47 207 235 212 90 173 210 90 251 222 215 231 22 184 183 183 229 239 239 172 147 245 12 115 227 50 21 222 27 159 168 92 190 183 227 148 38 57 42 199 32 245 204 9 51 171 198 201 35 71 98 66 220 66 12 101 66 246 248 237 53 121 93 193 71 33 142 200 65 255 0 90 139 89 28 134 63 33 12 18 219 89 113 180 69 58 246 161 106 245 227 145 131 152 100 75 178 203 10 193 20 107 31 245 97 249 10 197 176 240 222 220 31 96 202 188 31 96 15 214 163 143 96 15 241 1 236 125 244 31 72 224 120 28 113 192 240 56 228 120 254 92 170 248 252 168 252 13 112 192 137 107 128 111 145 155 216 15 75 91 26 137 37 190 209 220 123 94 220 99 219 140 15 191 87 205 191 146 167 139 191 37 171 144 153 84 210 179 4 44 173 11 201 4 243 24 184 153 106 79 36 73 104 44 73 50 179 119 115 92 178 63 4 57 83 156 199 188 177 11 148 201 100 86 174 66 170 228 166 195 57 170 162 189 138 209 182 38 178 194 209 200 213 173 85 146 17 52 209 7 89 169 88 137 149 164 117 150 54 241 168 164 50 241 200 97 192 29 220 130 56 10 65 94 238 121 240 10 177 94 125 136 98 57 224 249 228 30 211 244 158 210 1 83 199 130 1 37 138 248 246 4 177 98 61 137 98 72 228 158 79 150 133 188 205 33 66 77 182 223 2 214 181 189 14 47 235 169 165 66 70 161 54 131 110 251 88 242 65 228 99 253 199 62 146 147 102 234 199 136 198 222 245 236 134 67 184 101 139 20 115 149 39 129 19 45 114 219 71 91 49 89 174 79 148 236 83 24 158 212 210 195 196 208 73 34 34 214 145 195 37 20 251 198 25 42 213 88 233 60 134 185 195 247 80 122 184 197 168 87 14 106 122 101 173 136 86 211 195 97 42 43 19 10 194 11 179 52 254 162 16 139 29 123 126 220 0 63 144 83 200 30 62 192 249 3 236 125 181 115 92 78 86 90 47 147 139 27 145 106 17 30 37 201 10 164 209 70 12 17 227 146 208 66 21 137 110 194 25 199 212 123 88 121 227 81 249 58 85 33 188 91 29 216 36 218 236 78 0 206 73 56 3 212 227 86 124 206 240 85 20 220 139 2 35 107 139 226 247 55 181 185 227 220 247 58 200 63 164 208 65 118 157 136 39 206 218 174 109 93 158 120 44 228 34 18 70 50 20 230 166 126 68 68 20 164 177 193 50 186 206 237 28 44 213 226 236 175 244 176 22 202 153 24 107 102 82 236 115 229 158 33 29 180 50 200 244 237 100 25 236 85 237 50 5 179 36 232 107 187 55 107 179 150 146 56 202 172 69 8 0 91 113 248 236 142 86 99 14 42 133 219 246 18 46 233 32 165 93 167 117 137 56 64 204 17 25 146 53 44 20 31 11 201 10 127 178 53 72 240 201 19 60 50 70 232 241 59 71 36 110 138 173 28 136 196 50 58 40 237 86 70 5 72 227 144 195 207 213 206 166 35 137 26 201 40 118 181 138 220 94 198 217 34 247 254 31 64 49 244 213 68 185 3 113 98 15 23 28 251 140 11 243 249 235 204 158 20 158 15 177 60 14 1 246 246 28 114 1 251 120 36 3 249 26 144 37 221 117 227 192 227 113 240 210 136 217 165 250 113 144 180 246 227 143 213 161 151 201 216 144 162 53 151 174 61 104 77 72 227 19 65 52 127 235 22 201 83 223 11 67 128 240 87 134 33 187 65 227 144 15 146 61 192 224 121 111 192 30 121 251 106 227 142 195 102 179 114 24 240 184 203 249 55 64 25 226 163 94 73 216 41 238 11 222 202 84 66 60 30 214 44 9 33 148 3 203 112 50 194 108 210 182 221 164 237 36 216 14 47 147 97 232 62 135 223 66 51 92 170 18 79 117 92 159 192 92 240 117 154 213 222 84 43 24 152 65 149 188 240 228 242 119 199 234 211 83 120 224 143 35 73 170 79 94 180 78 101 140 189 66 68 168 206 129 38 10 189 145 160 37 77 19 238 106 51 230 40 100 109 166 66 72 241 245 158 8 77 122 120 122 36 201 103 212 238 237 142 35 25 88 26 41 218 65 220 162 94 249 26 67 32 86 8 49 154 216 60 197 154 151 111 65 67 32 105 209 121 35 191 118 42 118 158 10 178 194 72 153 109 21 89 99 87 131 142 37 70 101 36 114 236 56 94 71 181 157 177 184 171 219 161 69 240 153 88 111 95 65 38 58 9 42 88 71 186 189 138 226 74 177 179 196 38 29 140 29 131 39 49 134 237 254 5 12 105 240 186 121 36 25 22 252 155 183 255 0 18 73 207 161 4 251 27 250 106 213 122 157 170 86 48 234 77 149 138 131 114 8 184 191 114 8 35 215 218 246 214 77 132 220 184 108 52 83 86 106 185 25 146 197 139 42 28 165 22 181 61 73 104 181 5 91 32 88 111 149 122 209 49 146 100 8 230 121 20 52 70 32 59 117 231 62 78 74 187 107 30 222 189 123 121 91 79 103 29 234 65 146 173 98 122 187 101 101 171 120 227 238 85 75 12 245 26 221 153 44 64 146 58 50 199 142 86 168 236 103 153 39 56 141 218 55 177 182 164 163 126 157 170 119 16 6 122 215 22 72 172 198 29 123 209 130 240 59 187 147 234 94 225 229 62 161 227 206 168 79 129 201 240 16 178 242 124 4 39 150 101 252 41 60 18 195 199 60 18 117 112 165 140 139 172 165 239 192 236 220 14 70 45 199 26 225 171 39 202 163 99 118 96 140 8 56 238 110 61 69 207 175 190 36 203 219 242 11 118 98 177 232 207 233 155 6 200 129 41 226 43 124 152 122 86 169 9 104 88 130 59 5 165 170 211 39 201 51 196 157 137 8 245 125 87 13 35 91 215 113 226 191 81 218 118 229 25 219 203 182 165 173 59 188 246 41 60 150 230 131 52 51 17 20 45 99 149 136 187 75 23 166 202 75 35 118 130 61 245 130 23 42 7 44 84 2 74 242 220 0 65 237 36 121 30 65 110 210 71 177 60 125 245 199 31 183 142 67 123 125 208 242 167 249 169 224 131 238 167 200 227 93 249 68 31 109 182 223 189 239 115 142 120 206 185 227 76 127 230 200 120 239 233 247 126 175 244 182 91 136 207 87 197 213 74 137 38 111 229 215 51 83 36 177 86 48 67 29 156 125 40 39 73 171 74 144 203 16 99 99 212 111 164 144 174 157 169 192 254 45 101 23 51 149 168 98 240 211 67 106 204 204 112 249 138 81 98 226 204 209 177 4 39 33 151 204 73 81 50 148 163 181 106 237 111 150 167 98 7 147 187 234 105 21 22 25 33 84 40 98 160 59 73 42 59 73 1 73 30 9 10 56 0 145 238 21 79 0 123 0 120 30 52 251 113 246 228 30 62 220 143 99 199 228 125 191 26 231 202 195 254 105 252 6 162 102 85 54 149 119 191 98 202 196 133 198 46 182 238 47 197 238 121 181 181 156 90 220 212 66 52 144 38 80 94 253 79 108 228 36 86 158 191 202 11 24 72 225 173 36 113 202 92 204 210 90 175 221 47 175 220 132 48 80 200 0 237 56 222 94 205 27 179 252 197 57 178 18 134 250 218 76 133 149 179 233 25 15 112 130 14 36 102 236 136 158 192 206 129 138 47 36 43 18 69 175 129 227 192 241 237 251 112 73 28 126 60 146 127 153 63 147 161 229 184 231 201 4 145 207 158 9 247 35 240 79 223 143 125 72 82 91 42 73 22 193 184 200 176 246 191 110 63 14 113 81 10 249 2 192 155 128 48 7 176 190 64 245 247 213 255 0 15 146 169 142 135 46 179 126 168 135 35 78 42 130 122 18 199 25 140 71 110 11 143 35 255 0 174 69 96 240 208 42 160 141 65 40 89 79 61 222 43 168 110 58 245 33 168 165 50 126 173 8 110 172 116 170 89 6 134 76 92 123 15 23 206 175 114 205 12 174 214 161 123 33 226 145 153 99 140 9 148 130 205 136 240 60 248 30 120 231 199 191 7 145 207 231 130 1 31 130 57 26 237 203 114 79 39 150 29 172 121 60 176 250 56 83 249 31 213 71 224 255 0 251 105 254 194 241 15 5 95 202 0 4 219 35 28 113 206 56 199 26 60 163 24 22 250 92 113 159 229 207 56 214 77 149 205 252 222 55 25 66 27 217 114 216 218 102 156 208 217 154 35 82 64 242 153 164 237 136 77 52 146 170 72 74 65 243 43 40 72 135 104 65 239 171 110 90 228 121 22 169 33 107 37 35 167 90 161 245 146 157 117 71 138 37 142 72 226 92 119 162 173 93 20 196 19 230 34 245 202 121 154 66 229 142 173 92 112 59 120 224 127 179 236 63 62 222 223 190 184 32 17 193 0 131 201 32 128 65 44 0 99 199 251 193 64 63 144 0 62 0 212 188 31 10 222 247 238 15 166 112 7 250 122 107 160 1 193 230 223 144 182 178 125 179 157 135 16 110 201 113 38 115 114 58 133 210 37 13 25 72 109 201 60 139 41 19 215 152 6 103 84 137 225 181 27 32 227 185 101 224 157 95 97 222 208 214 130 204 81 86 177 0 55 50 150 162 141 34 198 100 158 127 212 163 68 74 214 37 203 180 214 32 244 189 53 105 165 129 172 70 67 15 162 55 68 102 143 57 32 31 62 56 243 231 199 3 243 251 15 223 93 130 176 32 133 96 196 114 164 2 9 28 16 72 32 115 199 28 142 71 142 57 251 104 249 113 41 220 126 156 142 214 224 30 223 215 211 180 213 164 2 200 206 0 228 47 25 238 112 117 125 249 188 123 225 106 209 72 242 17 95 138 233 190 210 169 140 86 87 122 240 214 149 97 53 236 7 40 61 7 49 31 69 57 97 223 245 134 5 184 207 229 41 229 167 73 224 151 32 238 149 235 66 96 200 78 39 142 52 171 13 104 146 72 85 29 145 36 101 170 140 205 194 177 119 144 142 206 225 219 97 237 40 87 129 216 73 237 79 29 164 144 15 10 190 199 144 28 248 30 193 143 251 71 144 30 59 64 240 163 158 7 178 128 124 158 7 176 7 239 246 58 62 90 198 247 251 54 54 220 49 246 72 224 95 54 22 245 251 245 2 60 215 36 238 38 249 54 36 227 249 250 113 156 1 171 198 31 41 94 173 107 245 100 108 140 49 100 141 66 46 226 229 142 189 168 22 157 137 31 229 159 213 177 89 158 164 166 204 147 75 28 83 44 134 122 212 164 28 199 12 170 249 108 27 199 30 193 89 6 110 188 245 242 139 146 255 0 87 179 87 211 189 242 148 241 216 248 35 200 133 225 165 50 199 140 142 89 167 38 72 92 207 97 26 18 196 50 71 68 3 238 1 254 122 231 134 224 144 15 3 201 62 120 0 113 228 159 183 28 143 63 110 71 231 70 196 147 202 199 104 57 189 187 139 31 206 223 172 106 64 149 200 98 164 119 6 196 126 187 235 58 147 119 86 56 83 140 74 210 153 218 141 234 100 44 205 86 172 73 103 38 114 17 180 159 33 98 188 18 214 140 200 99 101 185 142 158 203 112 230 57 214 50 138 181 89 125 235 14 82 120 101 116 200 34 174 92 100 166 134 189 12 85 89 42 200 129 136 138 59 112 44 22 166 115 207 13 221 37 104 89 11 130 140 79 6 57 110 214 228 191 12 1 224 150 224 240 125 184 36 251 31 113 193 215 98 172 64 37 73 7 194 146 15 4 0 167 128 120 224 240 25 79 143 177 83 247 26 5 36 109 148 109 227 146 113 142 56 61 242 62 235 12 234 66 89 63 204 99 223 159 167 229 199 255 0 111 113 172 202 109 216 210 102 47 88 179 38 86 246 39 38 246 18 230 62 196 161 27 229 46 132 19 67 15 111 171 4 62 147 162 73 17 85 98 165 79 113 145 121 213 198 142 251 146 35 122 75 41 52 109 99 40 183 97 150 58 56 252 128 74 245 161 74 176 80 43 116 114 130 8 33 73 97 120 164 111 235 102 153 228 138 65 216 139 29 241 199 60 15 113 201 241 238 63 39 242 52 3 183 142 7 28 112 71 3 142 10 242 65 31 142 222 73 28 123 114 72 247 209 242 66 216 30 157 199 183 250 126 66 222 221 223 55 249 146 118 239 235 107 118 227 130 7 123 223 58 207 142 242 138 92 91 99 253 38 133 255 0 78 201 227 10 71 75 25 41 176 50 82 218 147 214 123 6 4 181 89 201 186 134 101 141 95 177 187 86 38 69 4 54 23 48 166 43 212 244 22 208 181 217 32 188 102 53 205 119 144 183 49 26 130 41 30 85 69 143 149 144 78 1 47 193 5 127 132 211 130 195 192 44 7 213 224 114 61 202 179 120 253 202 33 111 201 85 39 248 71 29 64 247 32 123 242 9 3 220 19 220 65 35 223 150 250 143 63 127 62 250 236 72 17 148 40 35 204 47 206 115 115 127 230 117 95 115 140 158 113 156 105 166 154 105 253 26 105 166 154 52 105 166 154 104 209 166 182 111 225 137 149 119 198 53 217 130 168 182 128 146 123 120 62 172 39 207 177 227 128 73 251 120 214 177 183 60 18 7 36 121 224 125 248 251 127 127 183 255 0 125 75 29 32 220 103 110 110 90 151 188 128 146 171 112 72 224 59 73 26 133 242 56 37 249 42 9 32 2 65 225 184 224 225 245 218 105 106 122 125 100 113 128 75 211 186 139 228 18 70 5 185 201 199 29 254 240 231 79 96 181 180 172 196 5 89 145 152 147 96 0 55 39 242 213 215 226 31 207 94 186 158 156 198 137 54 241 188 165 230 240 138 12 161 149 201 110 7 165 218 89 102 39 233 140 56 105 10 170 177 212 191 213 126 161 237 126 157 238 155 47 211 61 197 139 220 91 179 29 128 199 236 173 167 186 113 70 11 219 127 165 155 19 31 142 147 21 78 142 211 180 98 48 217 234 62 122 57 115 27 163 114 110 58 80 36 91 106 238 229 181 22 22 245 189 217 119 35 151 198 241 215 62 145 238 221 231 187 174 245 63 96 227 45 238 220 30 236 90 121 12 173 76 50 252 206 79 11 152 74 176 86 201 65 126 140 94 181 152 170 219 154 184 177 5 202 241 179 119 219 106 254 147 252 185 150 72 17 186 37 214 174 85 100 233 111 81 36 84 101 32 62 211 207 63 210 36 245 74 171 252 176 96 146 19 245 21 10 89 124 19 193 227 88 112 39 77 172 166 233 15 85 92 145 165 21 47 202 207 70 210 164 106 37 240 169 149 247 36 132 49 79 221 186 157 160 135 24 44 81 153 93 169 227 174 164 150 105 35 130 107 77 83 43 44 136 140 203 177 202 21 112 202 8 36 219 10 73 97 131 180 115 170 58 253 90 234 45 93 185 71 103 193 187 178 245 240 56 252 141 124 157 10 136 43 55 202 218 169 147 177 155 164 130 251 40 203 203 71 31 184 45 217 220 49 99 38 185 54 49 242 111 13 213 165 29 216 35 116 148 183 126 251 233 158 111 96 111 60 158 8 231 48 221 65 234 94 225 217 183 55 70 199 253 42 37 218 184 59 155 121 247 53 236 254 225 219 91 138 59 174 14 221 220 54 242 152 235 56 205 187 54 54 174 95 110 100 228 202 227 209 109 224 107 99 111 77 30 255 0 160 254 178 251 127 162 142 162 15 62 15 244 71 53 255 0 226 255 0 225 253 218 237 254 132 122 202 7 111 250 40 234 39 243 254 136 230 184 255 0 3 87 159 252 249 241 199 141 55 83 7 66 149 226 104 171 32 165 240 100 18 94 146 162 24 204 246 150 25 182 205 185 188 202 94 20 39 134 36 97 130 150 13 92 50 215 238 118 156 77 41 104 246 163 24 100 242 129 194 91 111 123 243 129 158 9 0 234 42 37 139 187 49 4 179 3 200 37 137 1 21 1 98 85 121 98 23 207 10 1 247 224 18 116 243 246 242 126 195 247 251 127 158 165 6 232 143 89 84 241 254 138 58 134 124 115 255 0 170 57 175 255 0 19 87 124 31 195 247 87 242 217 42 244 103 216 59 155 5 20 140 143 62 83 113 226 173 96 177 24 248 57 6 75 23 175 228 210 178 70 145 167 50 42 215 75 82 74 20 136 227 102 33 78 223 237 94 154 145 134 106 234 37 33 75 108 90 152 89 135 123 109 87 38 249 200 177 207 181 174 160 130 161 216 126 226 96 88 140 248 82 0 11 17 201 219 97 107 220 250 12 241 175 168 91 50 74 146 244 11 163 144 223 142 157 156 108 189 56 160 217 40 239 164 47 75 228 171 140 147 93 107 105 101 94 185 172 144 171 180 173 40 88 194 142 230 117 28 186 216 118 246 218 192 110 13 171 184 63 208 102 220 56 90 121 40 113 55 178 214 241 91 99 112 224 170 102 170 89 169 112 97 239 99 229 200 210 169 87 47 141 122 213 114 19 215 187 130 146 221 21 130 102 149 164 88 231 129 164 180 71 189 54 150 217 195 109 190 156 180 144 110 12 38 213 218 21 246 197 184 59 98 231 57 5 26 75 71 40 181 171 217 158 18 131 47 98 89 254 89 90 210 178 119 175 22 80 159 93 57 196 210 202 238 92 23 244 51 28 219 253 122 41 143 221 125 18 151 5 135 223 153 26 248 205 225 135 195 210 206 206 58 141 183 42 218 197 229 96 220 25 109 129 137 219 48 99 104 44 249 171 239 55 164 150 168 227 237 92 137 102 154 15 206 125 90 183 168 116 153 188 72 32 146 74 106 153 234 106 12 38 54 43 33 146 165 228 75 168 91 253 150 87 207 222 1 215 214 232 105 233 171 105 94 25 103 188 212 176 83 199 226 171 170 186 48 140 68 225 73 35 252 69 77 172 14 123 94 216 254 205 233 255 0 85 182 174 89 229 150 174 69 235 88 50 87 146 11 9 113 171 203 19 76 209 58 58 183 212 201 48 180 42 161 224 163 72 226 36 238 112 66 236 70 43 164 29 14 219 152 141 187 136 222 125 36 218 88 217 183 158 118 12 22 54 41 118 245 185 109 230 115 75 142 189 148 134 173 171 21 22 107 17 67 21 106 153 27 201 102 220 137 74 30 22 22 11 52 177 65 36 83 136 216 121 93 144 180 247 46 201 195 101 175 110 172 86 251 235 198 42 12 77 237 239 153 106 151 58 117 46 216 223 51 116 219 106 89 123 217 231 74 123 106 254 126 166 208 199 96 173 192 14 66 181 139 31 54 146 195 52 178 243 143 116 139 105 111 218 91 146 21 187 131 204 226 182 90 117 47 164 91 191 25 143 202 99 160 219 88 236 75 127 163 14 167 225 58 143 127 29 130 159 114 238 11 21 49 84 247 36 219 119 28 45 89 204 95 177 118 114 183 214 75 94 177 145 176 122 135 196 221 102 183 105 134 150 122 23 2 254 36 43 44 65 138 5 8 143 225 178 22 28 144 13 192 207 23 205 212 157 11 166 192 2 73 80 210 172 109 226 71 226 120 114 217 136 27 172 29 188 160 240 108 62 164 226 219 48 184 238 159 117 35 100 237 28 126 215 219 123 71 117 236 27 24 108 86 231 218 27 102 246 10 32 149 176 55 13 138 56 156 204 59 115 41 78 12 181 24 108 76 214 171 37 155 245 96 127 94 73 96 35 191 184 45 36 155 87 164 221 49 179 132 150 215 77 58 123 179 247 22 106 29 195 107 13 114 174 192 170 249 41 34 218 187 126 238 232 205 180 54 43 226 46 61 88 235 97 177 214 237 170 74 240 71 126 72 86 189 67 98 223 167 9 213 253 183 176 51 219 51 11 141 203 167 77 111 110 13 245 47 194 109 45 173 5 39 204 223 143 29 79 125 98 95 63 138 206 109 237 196 152 253 203 142 249 11 207 180 114 113 73 139 165 19 87 143 54 64 171 82 252 23 103 50 234 225 181 54 70 242 165 12 216 214 197 103 198 215 197 111 94 176 95 219 144 103 41 85 219 105 75 7 188 62 29 224 196 99 18 166 219 155 51 156 59 127 31 155 223 86 109 209 175 137 55 166 177 94 237 146 182 33 78 254 249 115 83 170 245 100 139 192 84 168 80 174 205 37 158 173 163 168 221 98 75 68 211 109 220 77 193 99 109 214 55 58 210 20 125 61 230 87 221 8 1 85 110 241 82 222 202 47 127 238 228 226 246 25 31 65 246 140 245 190 78 35 113 109 72 119 23 80 176 184 109 195 176 106 227 6 237 171 115 112 225 141 202 20 49 114 81 146 212 121 138 81 188 3 33 80 138 115 180 160 66 42 180 5 94 0 138 99 109 96 27 219 110 109 250 88 252 190 208 197 110 44 38 220 165 210 253 151 142 221 249 140 5 71 153 83 110 236 252 139 100 94 166 73 98 78 233 26 27 54 232 101 165 112 68 150 15 203 143 163 182 104 12 158 157 32 142 206 31 101 117 19 166 157 99 182 249 44 254 238 193 208 198 29 233 243 114 157 187 127 107 103 118 92 155 114 158 208 167 134 123 179 86 218 217 93 134 145 79 131 206 225 113 213 132 89 7 171 30 230 121 109 218 185 34 218 134 182 254 194 234 22 230 131 98 110 157 197 86 1 185 58 171 147 94 154 117 174 140 215 235 122 152 78 149 224 166 233 124 24 252 229 184 82 55 105 227 203 67 211 61 199 96 85 71 145 196 125 78 67 20 69 229 153 109 61 31 92 235 20 203 1 130 142 97 20 64 202 176 248 95 184 222 224 22 118 141 137 220 194 249 203 92 216 110 182 170 147 167 244 178 205 105 225 185 45 97 246 108 88 228 89 64 2 196 90 192 40 181 172 6 0 155 45 244 222 77 181 211 156 253 158 166 82 139 47 211 252 94 61 183 30 93 47 212 200 228 106 138 120 232 127 84 134 236 53 49 254 165 203 111 232 196 207 4 85 34 154 89 209 164 72 98 147 146 7 158 239 219 247 246 198 18 125 145 132 218 180 112 123 94 244 54 96 151 3 71 19 29 76 77 152 167 130 81 113 100 169 94 20 91 45 44 133 125 71 102 158 78 62 169 28 42 16 144 244 189 59 223 121 124 103 86 206 107 39 187 167 234 22 95 110 117 199 27 147 175 75 23 12 187 67 168 148 247 88 201 199 180 104 84 221 114 110 235 20 175 87 198 84 124 61 237 173 71 244 108 70 71 7 103 25 119 20 203 78 140 87 45 91 151 186 117 107 106 237 205 245 186 179 20 182 190 234 217 187 14 125 163 178 233 217 192 111 76 129 202 101 179 61 73 199 100 51 51 110 156 253 10 150 51 217 91 111 43 99 38 193 226 178 25 49 114 42 185 251 202 36 72 107 41 121 157 218 95 136 186 133 77 66 36 180 114 152 87 247 137 11 70 233 16 152 0 89 252 48 10 110 99 193 39 29 180 179 244 170 20 71 41 60 104 197 10 169 205 238 192 3 144 15 34 224 220 127 77 99 88 105 243 187 139 43 158 218 184 44 138 93 205 109 10 24 177 184 118 221 97 96 203 137 198 101 235 201 22 44 90 174 234 144 73 70 122 53 89 10 215 50 173 114 33 75 34 41 44 66 178 97 211 244 215 168 241 252 142 55 31 140 189 71 31 143 72 41 83 163 94 180 254 141 120 107 171 199 20 49 196 204 136 142 170 178 49 66 85 213 83 188 2 2 243 121 218 59 127 123 226 164 175 214 49 123 23 62 71 123 97 122 207 71 168 27 91 31 139 143 29 184 182 94 11 123 98 179 27 175 107 217 221 91 141 51 182 97 205 214 217 87 246 214 220 196 67 53 124 61 9 49 139 122 236 9 27 132 34 88 231 35 137 220 149 186 25 95 118 236 221 187 213 13 161 91 39 208 254 152 65 212 156 206 123 118 102 40 75 212 109 253 185 122 145 209 201 246 214 67 110 93 181 184 114 55 30 252 248 201 119 52 147 238 170 81 99 234 156 46 115 27 81 140 147 213 106 26 154 124 93 91 73 52 169 39 75 66 36 102 15 19 70 70 224 8 10 65 194 220 100 243 113 143 109 87 47 68 134 161 224 102 171 36 36 104 164 198 225 124 195 103 218 220 65 107 91 7 128 120 7 26 218 252 126 201 218 246 241 27 83 7 215 45 171 136 206 38 224 203 46 220 218 205 154 194 95 179 147 108 191 233 55 242 241 213 131 35 140 88 239 208 83 141 198 221 151 215 158 245 90 160 172 112 25 190 98 122 241 75 67 127 100 96 48 56 26 89 30 140 108 92 62 222 196 238 10 117 109 85 203 225 176 150 40 230 114 20 174 15 82 178 216 179 145 244 179 92 73 236 43 221 184 36 238 45 202 18 196 28 95 13 179 114 248 253 251 95 45 182 54 158 237 217 221 38 171 213 109 137 154 195 237 173 231 149 176 51 120 156 150 31 167 93 72 195 111 157 229 29 12 174 224 202 220 194 227 114 89 108 166 215 199 247 195 118 73 178 121 138 182 242 48 71 28 75 200 183 236 28 94 67 23 159 218 47 213 237 171 187 119 157 202 157 62 232 245 30 156 88 92 245 188 134 23 99 110 236 22 58 226 239 56 55 149 122 249 250 115 98 115 118 51 213 104 228 110 110 60 133 124 156 55 48 20 43 208 130 231 56 135 138 76 225 241 15 86 53 12 198 9 141 51 16 82 152 52 194 157 110 5 246 162 58 168 185 23 111 40 4 220 231 87 191 71 162 17 8 141 78 214 6 254 40 72 30 115 186 196 15 21 220 92 11 216 11 155 12 2 123 103 24 173 173 119 53 135 106 93 87 219 120 60 198 217 13 12 49 71 188 160 171 29 56 45 100 174 69 82 165 90 83 219 136 52 23 114 183 44 86 138 164 80 221 133 237 79 98 4 173 27 188 177 134 170 147 167 219 99 107 197 184 232 116 143 167 88 109 189 153 196 223 253 7 51 114 134 2 193 203 211 187 38 62 174 85 107 215 204 230 62 110 251 68 181 46 65 47 175 66 193 165 233 73 44 70 64 82 85 93 106 110 159 238 237 201 181 186 137 22 71 101 238 88 241 215 241 125 14 222 87 182 69 99 99 7 78 198 246 218 125 92 92 231 80 233 109 60 116 155 203 39 123 114 229 232 108 155 57 10 205 158 200 228 98 77 197 221 13 250 178 71 36 21 211 82 158 111 9 126 125 219 98 246 233 219 251 203 112 116 58 94 165 103 178 183 246 62 43 53 101 242 246 240 150 58 59 211 188 126 197 189 99 23 22 227 167 155 203 224 176 155 166 142 227 134 108 97 182 62 75 116 215 165 150 176 21 105 73 56 232 248 135 170 9 46 105 166 74 117 33 133 36 109 83 242 236 1 185 188 102 82 11 48 199 152 31 127 77 64 244 170 56 227 42 106 68 243 42 238 74 163 20 9 128 60 177 177 220 28 48 32 2 202 8 184 184 247 214 109 253 208 125 253 157 191 98 253 234 57 30 36 152 134 47 89 251 84 178 198 237 28 146 72 253 205 57 103 18 72 10 47 241 128 188 240 221 184 128 232 174 63 5 30 46 45 193 53 184 237 230 101 191 14 35 23 71 15 146 206 102 50 114 226 225 138 198 85 232 226 112 244 239 228 172 195 141 134 122 242 228 108 67 93 160 164 147 66 108 203 24 149 57 159 165 216 123 174 214 202 221 7 168 82 110 59 187 135 9 208 171 113 244 222 179 111 59 178 221 193 111 72 247 207 81 50 187 79 19 98 206 51 47 90 60 142 242 218 187 82 230 216 161 103 33 122 38 90 232 90 21 73 189 105 27 83 191 83 183 14 209 201 87 192 94 194 87 234 37 78 161 237 250 251 132 236 93 211 210 213 169 102 198 15 55 150 197 83 130 246 19 61 86 237 164 197 92 194 238 171 145 82 143 47 83 37 70 213 25 198 53 229 105 105 201 32 158 47 91 7 199 255 0 17 10 13 148 212 6 144 33 84 67 225 49 5 0 202 224 19 159 123 119 191 6 249 67 225 110 155 36 158 35 85 164 133 212 179 173 237 181 172 190 222 249 176 181 254 237 105 142 99 225 31 114 203 82 11 212 49 185 41 105 93 175 13 200 38 249 25 149 30 173 165 15 11 246 200 169 36 101 213 130 250 78 137 44 108 125 39 69 144 118 28 57 254 20 247 124 39 179 244 219 64 125 29 188 193 56 15 222 20 167 105 44 21 187 149 227 97 218 72 226 88 155 159 235 163 238 220 204 102 7 168 153 142 169 109 157 219 213 44 198 225 196 238 40 238 244 159 61 83 61 179 240 209 103 182 158 50 181 61 177 135 126 160 237 85 207 213 221 148 106 237 44 62 71 63 30 226 165 184 43 75 183 239 85 191 75 41 141 181 66 237 248 171 85 15 140 98 112 91 187 167 221 31 233 238 230 217 75 145 126 184 199 99 122 209 222 24 156 230 226 183 118 245 185 55 189 92 238 7 31 152 201 46 75 35 46 41 162 216 246 43 237 13 207 82 40 164 86 175 140 195 219 142 8 204 151 123 170 246 147 255 0 82 62 36 72 246 189 22 247 6 215 240 242 114 45 123 169 252 64 247 55 239 25 126 20 233 35 111 239 98 6 199 191 211 233 199 110 120 198 65 58 214 17 240 151 189 140 19 79 250 69 225 28 42 165 155 229 45 122 124 49 224 146 224 246 142 198 225 91 147 244 49 42 220 16 70 162 13 225 210 172 150 211 238 91 112 75 20 160 123 20 117 79 165 3 147 220 255 0 149 33 192 39 234 83 220 189 200 67 31 162 216 14 157 228 54 191 84 241 203 127 121 111 25 113 219 83 114 236 54 216 123 218 133 22 220 120 76 166 192 219 219 103 19 71 45 182 178 27 162 77 215 92 237 236 126 224 189 14 227 27 171 29 127 110 91 150 123 219 130 150 78 59 215 132 209 85 195 234 110 239 167 79 108 244 199 107 99 50 16 90 139 121 201 138 173 107 119 201 148 201 218 202 228 229 207 26 225 44 181 171 23 44 219 117 16 40 21 225 130 39 90 240 69 28 81 68 137 20 113 160 244 127 13 252 113 214 186 207 84 20 117 20 50 8 65 95 17 182 4 69 184 83 139 145 124 17 125 160 250 243 172 206 169 208 186 119 79 164 73 169 165 141 165 32 146 1 0 253 171 12 227 38 215 244 201 30 250 211 221 53 203 127 19 121 231 201 243 249 243 239 253 250 227 95 110 28 15 160 215 207 79 38 250 105 166 154 238 141 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 52 211 77 26 52 211 77 52 104 211 77 52 209 163 77 52 211 70 141 53 193 32 2 79 176 224 159 185 0 158 1 32 114 120 231 199 60 113 206 185 213 223 111 140 79 235 120 166 206 70 242 226 22 253 70 201 199 26 150 119 166 178 114 234 0 116 44 15 177 94 225 207 58 90 161 138 141 202 75 178 229 35 30 184 55 185 198 125 200 227 65 246 206 173 213 171 217 187 60 117 169 215 179 114 196 156 136 224 171 4 182 102 126 10 169 11 20 40 242 31 46 160 14 223 60 158 1 224 241 33 65 210 189 228 112 59 131 59 45 1 66 166 222 140 73 118 149 169 36 135 35 34 122 112 217 38 44 119 97 112 162 172 223 51 223 32 72 221 35 148 35 52 177 149 214 220 116 211 118 108 189 193 22 232 196 244 231 3 22 6 198 42 177 53 101 185 78 157 97 126 107 79 98 26 182 165 120 38 57 52 138 173 149 132 59 180 195 213 18 14 4 72 138 90 51 233 39 80 114 123 171 120 238 124 46 239 142 179 157 195 137 106 134 140 117 86 188 81 75 129 76 133 105 169 10 235 199 250 203 227 108 75 20 133 155 158 107 30 84 240 21 60 205 79 88 234 4 215 20 162 141 22 137 96 146 101 145 148 187 69 33 81 33 66 173 184 92 19 230 31 100 216 142 49 167 23 78 167 145 98 46 194 87 157 91 195 198 35 109 160 158 71 252 179 127 77 216 219 123 103 84 97 116 133 224 177 36 2 212 2 104 152 41 96 144 89 85 120 139 195 243 37 93 82 41 86 69 142 73 99 89 25 67 21 81 220 15 108 225 190 246 198 71 115 100 118 110 111 23 178 241 219 71 27 187 36 198 96 49 176 137 170 72 246 178 23 82 56 226 191 145 20 4 81 70 26 54 137 42 153 34 142 115 28 30 165 150 240 66 206 248 109 205 131 220 251 143 117 116 122 238 216 197 227 112 184 220 118 86 134 28 4 230 86 142 154 67 12 178 186 188 65 204 146 199 52 121 8 229 142 84 116 49 124 184 46 24 204 49 60 101 27 249 126 144 238 45 180 146 204 55 87 75 243 83 26 109 7 168 45 198 184 25 228 201 81 120 100 146 82 203 36 212 100 183 78 9 56 147 254 195 212 1 249 17 10 229 235 19 61 74 74 97 142 158 72 228 75 110 144 74 169 13 76 65 35 149 67 159 13 174 69 174 187 157 13 142 53 116 52 165 28 130 230 122 101 118 140 130 172 131 197 69 83 99 188 12 129 144 194 202 65 197 206 177 157 213 211 110 152 108 202 151 49 217 123 187 190 254 230 92 36 119 160 177 75 31 49 167 98 195 40 244 234 85 158 42 18 67 16 145 137 121 140 150 163 104 128 41 56 71 60 107 89 20 142 224 165 130 176 241 252 44 123 88 3 207 210 1 98 200 124 5 3 158 240 23 142 226 1 223 189 139 159 234 230 118 150 223 204 229 23 107 62 218 200 214 107 23 175 74 242 214 202 126 157 235 250 70 98 137 49 9 60 234 18 209 29 165 25 89 144 47 104 44 117 79 172 182 112 86 250 133 158 179 182 154 31 144 50 86 45 45 100 67 90 213 248 171 176 181 44 66 48 145 252 186 204 57 230 48 171 44 161 100 229 120 236 213 253 30 162 171 230 37 164 169 144 206 68 64 172 198 117 149 84 180 155 128 10 168 130 48 69 188 190 107 216 100 91 84 117 42 88 210 159 199 141 54 148 112 10 134 82 72 114 9 35 205 198 51 207 35 29 197 28 56 141 149 39 79 45 229 223 41 148 254 153 46 92 65 30 50 42 220 213 249 120 194 164 112 253 49 24 204 38 16 146 201 47 127 167 27 200 33 149 150 82 20 96 237 94 99 28 150 76 18 53 120 187 132 214 146 55 244 3 40 238 105 37 145 87 177 1 28 132 44 193 92 40 9 207 35 91 33 141 104 207 195 54 113 100 68 236 254 144 170 128 221 205 47 164 187 151 4 100 68 148 243 47 13 28 111 27 34 201 31 122 74 16 18 19 134 156 218 108 205 236 14 10 231 72 223 104 100 48 149 49 104 150 240 150 145 162 123 16 189 120 135 164 39 168 1 169 100 1 233 75 12 222 159 175 225 231 157 195 5 82 78 177 36 15 34 21 103 43 212 39 82 236 234 98 1 99 0 130 60 54 40 5 199 218 96 9 243 92 131 174 197 69 27 4 84 220 73 68 99 101 35 44 170 127 136 123 250 216 11 113 219 231 145 94 85 217 74 178 168 242 85 209 135 4 120 246 39 158 65 28 113 173 187 217 216 124 150 127 225 251 57 136 196 214 54 242 55 114 151 146 173 112 241 198 101 116 202 195 43 14 249 94 56 215 132 141 143 212 235 207 1 71 44 64 58 193 186 35 188 155 135 48 153 58 17 99 50 34 253 168 238 80 130 20 175 5 73 218 102 145 227 134 40 229 154 55 133 61 69 244 90 57 90 49 25 67 27 72 0 39 103 246 86 111 41 129 248 123 206 103 48 182 36 163 145 167 147 190 213 45 172 84 236 24 140 153 56 147 212 16 216 18 134 13 27 59 3 232 159 3 144 202 126 173 91 214 158 86 166 161 146 18 158 43 85 83 178 55 219 140 62 244 55 109 163 42 15 160 200 224 122 29 41 87 230 107 99 98 64 72 156 190 210 1 10 20 2 84 156 95 6 217 57 245 215 167 67 186 121 188 182 158 229 205 100 179 248 105 177 212 103 194 89 173 28 237 61 89 67 78 45 86 159 179 182 189 137 156 127 83 19 144 197 66 177 66 128 151 29 186 143 246 95 74 163 222 57 157 215 184 51 247 36 197 237 76 86 224 204 71 118 202 58 197 45 185 226 183 44 236 145 88 148 172 49 85 72 230 141 38 148 183 153 11 34 49 101 35 82 39 66 122 129 188 247 110 238 201 227 115 249 171 57 122 149 112 115 207 4 38 181 16 32 176 249 10 202 15 125 58 213 75 241 13 178 15 113 4 15 41 219 218 221 222 244 146 124 255 0 67 55 198 47 2 103 155 41 87 61 186 62 122 164 5 164 179 100 28 251 229 69 94 215 110 239 94 108 87 203 165 101 33 131 132 149 23 131 25 83 140 211 214 67 89 88 38 116 138 121 190 82 157 170 35 5 82 5 102 149 218 65 113 123 129 176 98 231 206 111 236 221 44 84 108 145 61 229 149 227 142 121 35 73 72 218 204 178 32 202 130 1 193 35 222 228 113 172 110 184 248 104 203 94 92 20 80 102 107 89 155 211 173 22 121 166 202 195 13 137 101 62 140 113 27 82 228 72 8 89 151 205 138 73 77 71 153 28 66 24 142 152 204 101 158 135 245 71 21 12 183 26 246 211 220 208 156 98 100 135 108 92 213 180 241 52 73 104 49 17 173 140 86 69 169 183 172 188 122 149 37 152 169 100 155 150 214 36 163 53 187 113 83 173 1 177 101 230 72 32 169 90 55 123 6 119 96 137 28 113 125 60 202 206 66 42 122 139 245 144 60 121 227 107 62 32 135 201 236 222 158 226 47 202 159 172 195 10 205 56 87 18 178 71 6 35 31 78 204 165 190 150 42 246 163 97 28 131 233 121 107 122 156 14 56 214 132 212 141 21 77 45 18 214 75 89 29 116 83 66 241 72 224 248 110 83 114 212 33 38 193 79 7 56 61 184 189 49 212 77 50 212 78 145 195 75 61 53 156 60 8 99 220 134 192 171 238 182 246 108 217 133 199 169 200 214 117 183 49 109 181 186 171 188 54 164 148 154 198 212 223 24 201 247 52 72 168 30 149 59 144 75 13 107 240 200 146 2 71 205 25 44 114 170 165 92 52 100 119 119 33 61 177 177 156 159 85 119 126 239 205 36 180 240 189 58 198 54 23 24 147 15 166 54 56 245 181 126 250 161 250 21 218 4 150 106 243 70 165 26 6 172 129 140 146 162 189 181 122 179 5 94 142 193 188 207 161 38 234 138 40 118 200 245 2 202 237 149 131 208 73 164 86 42 28 167 161 7 206 205 7 111 214 100 10 102 82 157 207 111 234 215 81 113 243 244 203 20 248 150 137 46 117 22 24 44 218 244 184 121 87 29 70 56 162 200 199 57 94 210 210 164 209 215 198 184 111 72 136 224 41 195 114 64 194 130 154 178 73 153 124 23 141 164 221 211 100 114 0 43 36 97 82 89 136 38 227 124 2 53 4 94 227 236 147 221 148 150 157 23 39 120 130 33 85 12 22 54 241 91 47 118 226 229 137 107 118 185 250 107 85 183 126 228 181 186 247 22 103 61 121 67 126 161 114 123 33 27 202 214 129 79 101 104 63 137 62 152 106 143 79 146 193 64 94 73 251 234 231 30 192 202 77 177 172 239 201 229 167 14 10 59 80 209 173 93 166 50 93 186 103 177 29 71 149 34 174 205 20 81 71 234 179 164 146 176 121 21 57 140 58 119 176 194 120 231 149 231 128 192 175 62 120 225 129 83 200 240 72 224 249 28 130 71 35 144 79 35 120 105 245 39 47 141 232 165 13 221 87 27 138 107 181 172 80 196 69 67 210 156 99 158 10 217 8 241 209 188 144 11 72 239 39 167 35 204 252 74 20 200 3 149 98 170 195 213 215 84 201 211 225 233 240 83 161 151 251 68 116 193 125 65 101 182 90 195 6 199 63 129 231 72 208 42 86 53 100 147 155 5 80 196 100 158 65 39 104 243 18 163 176 23 198 56 214 189 218 233 222 54 46 150 226 119 220 119 114 19 229 175 223 175 74 74 125 177 61 50 37 177 106 46 33 132 115 57 144 252 144 50 132 4 169 254 48 9 212 79 52 115 195 43 71 60 82 193 47 14 237 28 145 201 11 47 10 178 55 41 32 86 83 195 130 1 28 158 72 28 144 117 185 213 247 189 205 179 209 90 27 186 182 46 141 172 141 220 189 185 234 197 145 141 166 167 74 206 75 49 147 179 243 16 196 100 105 36 88 61 73 82 36 51 41 29 195 153 23 176 6 239 188 240 212 122 151 143 232 222 67 35 86 58 86 247 22 76 71 145 146 160 84 144 208 56 140 150 82 245 120 230 33 27 186 65 142 48 193 36 162 103 136 200 167 137 59 85 25 10 126 175 83 19 183 205 33 120 90 186 174 54 148 218 201 225 41 114 155 114 214 27 121 177 92 96 155 234 249 40 161 220 82 25 74 72 139 28 146 121 31 251 185 54 133 177 32 114 72 192 190 112 123 141 105 124 85 237 88 12 97 175 102 116 70 236 145 163 134 105 35 70 241 244 200 232 133 83 223 207 113 26 241 32 0 72 9 218 9 229 144 247 40 33 130 159 32 145 200 111 164 143 112 222 56 228 142 126 137 73 46 87 109 228 140 113 82 219 59 35 166 59 118 37 164 103 202 80 50 219 205 202 145 196 207 21 8 86 96 34 65 44 193 34 146 223 205 76 94 48 194 34 206 21 116 215 170 185 253 161 185 55 69 155 251 63 31 45 26 110 172 150 229 101 142 188 25 43 75 48 111 156 139 30 138 90 159 1 21 27 185 193 176 65 148 71 24 110 52 229 7 87 146 174 103 140 210 48 137 84 218 160 121 163 13 112 85 119 143 41 186 237 108 19 107 216 144 65 1 90 170 36 129 25 166 144 52 234 64 80 65 190 223 41 22 108 139 3 114 77 197 253 57 214 6 216 220 138 83 25 7 161 117 40 18 0 188 213 103 90 132 183 168 20 11 38 63 68 247 52 82 70 191 95 213 34 250 99 151 42 167 221 176 121 181 154 26 237 135 202 137 236 199 44 213 162 253 58 231 169 98 24 16 60 242 192 158 143 116 177 66 140 175 36 145 134 68 86 86 98 1 4 236 207 71 172 67 190 122 111 187 186 103 145 144 205 98 164 114 92 195 163 7 37 82 225 119 168 197 4 145 163 173 44 184 5 155 248 130 94 5 138 136 128 146 72 216 219 146 51 211 79 233 78 87 16 95 112 244 250 142 119 7 235 203 88 25 249 199 193 5 25 2 16 129 137 53 34 175 5 183 80 89 236 67 98 110 228 99 233 173 50 245 233 160 241 17 161 5 162 171 142 12 186 93 162 152 15 1 199 155 33 243 123 95 101 128 98 53 218 94 154 106 32 142 97 49 14 200 242 148 1 136 2 63 182 1 11 180 144 112 6 236 255 0 13 249 214 140 38 31 43 96 217 16 227 50 51 26 44 86 232 138 149 153 62 81 185 112 69 174 216 143 160 121 141 199 18 246 159 165 188 120 228 80 148 37 87 193 0 177 30 127 221 85 36 31 60 175 135 7 147 199 60 248 231 131 198 224 225 226 201 237 110 146 203 106 56 167 125 243 213 156 140 134 189 96 92 77 61 156 219 1 10 202 59 203 8 233 226 68 183 37 245 0 244 44 88 88 201 86 148 74 184 141 79 135 170 76 245 113 249 110 161 97 40 110 75 241 43 193 133 138 172 54 167 245 190 160 145 9 78 90 156 214 99 40 145 175 175 37 104 89 68 114 184 132 134 80 215 195 214 233 255 0 122 106 237 8 70 153 34 96 11 238 104 14 217 77 163 14 66 130 109 188 217 91 59 88 216 234 150 233 78 64 216 128 203 58 163 58 134 91 237 44 164 92 150 0 18 108 48 75 14 224 107 93 234 208 189 118 43 19 82 165 110 228 52 213 141 169 106 214 158 196 85 149 34 146 82 211 201 10 58 196 162 56 221 131 72 85 79 111 28 146 64 52 132 113 227 254 127 231 247 214 231 116 167 96 231 176 56 254 171 237 11 233 29 108 181 156 117 106 117 102 143 215 20 45 174 71 23 155 171 70 228 51 47 166 103 175 44 163 151 230 62 248 189 19 222 128 176 3 2 151 225 228 89 175 110 45 191 212 61 185 157 206 209 139 190 124 44 112 195 91 137 16 250 109 2 90 131 47 146 176 174 103 41 94 51 99 27 93 61 87 2 193 171 218 225 110 139 174 209 9 234 163 150 98 34 71 136 211 176 142 86 188 79 26 29 205 181 14 193 188 145 231 219 220 241 125 88 58 124 166 40 204 74 24 157 224 130 232 167 202 66 145 231 97 114 26 227 159 126 13 245 173 224 240 65 240 56 32 114 220 152 215 188 250 125 210 128 15 49 168 126 72 241 228 15 35 91 59 154 219 155 95 53 210 93 191 191 54 238 223 167 90 238 6 221 89 55 46 58 188 68 73 147 142 156 201 87 41 90 210 137 201 61 224 86 158 38 38 48 137 106 94 75 14 227 30 182 221 167 99 27 110 205 27 113 52 86 43 75 37 107 48 76 157 142 146 163 21 150 39 66 123 148 128 3 163 125 193 71 0 123 107 98 190 30 115 240 155 121 221 131 145 112 244 55 61 11 146 86 138 80 27 212 191 21 107 9 101 23 184 128 26 122 82 25 8 28 19 45 72 207 158 71 97 214 26 67 2 213 83 201 32 249 105 99 153 188 54 242 205 1 75 200 130 228 96 130 166 227 24 245 189 174 233 163 108 242 211 190 12 170 67 12 27 50 88 160 189 136 201 60 130 71 175 166 164 109 197 182 122 87 142 217 217 30 161 215 193 226 164 167 144 219 56 184 240 216 166 129 133 68 203 75 220 212 230 172 169 51 204 215 167 177 101 98 159 143 160 252 163 9 66 5 32 70 91 175 106 237 141 149 209 252 42 100 176 213 38 223 27 142 85 184 183 103 79 245 188 103 175 58 221 182 1 19 40 138 58 213 80 83 135 188 56 51 186 202 170 234 167 141 128 139 23 178 242 113 14 143 60 97 206 210 161 182 114 189 172 64 244 162 173 123 213 135 135 229 155 213 143 209 137 238 185 7 129 116 41 140 122 157 195 8 130 44 71 83 122 187 151 92 138 11 123 119 167 88 164 169 142 161 35 43 87 191 146 23 125 27 150 30 34 10 149 173 118 27 41 18 72 210 199 97 107 8 203 196 39 37 60 181 45 108 236 203 43 189 72 142 25 82 174 85 37 173 36 34 48 148 81 16 1 54 109 225 143 117 183 154 217 214 180 208 199 60 112 32 134 155 197 156 180 33 138 141 230 88 198 217 9 35 1 145 193 179 19 155 11 19 206 180 185 171 90 88 86 195 85 178 149 217 149 82 119 175 50 66 236 199 181 66 74 232 177 191 39 207 210 199 192 45 236 9 18 199 72 186 103 143 234 85 204 213 91 217 43 88 179 139 171 70 104 222 24 81 158 85 187 98 88 251 59 102 141 143 13 242 228 242 71 96 10 88 241 199 58 150 240 93 113 151 112 238 216 182 213 221 169 132 109 173 153 201 38 10 42 107 91 215 183 28 77 96 227 215 214 71 86 175 96 134 34 73 170 199 5 111 78 34 100 18 115 16 125 103 93 58 218 180 118 135 84 58 135 139 196 169 135 19 54 27 108 100 234 196 142 92 81 138 228 217 41 99 166 67 247 177 138 48 44 45 101 5 56 29 168 84 129 173 122 206 167 91 29 45 80 158 157 169 42 4 41 53 49 59 95 116 108 87 35 37 13 193 251 46 65 0 88 216 155 28 170 122 8 18 72 164 121 90 104 154 163 229 138 24 229 203 155 134 195 32 184 82 62 215 217 228 223 147 168 71 115 116 91 25 87 106 220 221 155 59 116 87 220 116 177 230 103 200 68 169 24 176 145 59 32 179 60 83 83 86 140 75 75 189 92 195 42 36 252 119 178 70 203 27 184 198 55 7 79 241 120 158 149 237 77 233 90 205 169 114 89 187 107 13 138 146 45 127 147 129 92 100 209 77 65 29 100 155 147 30 54 17 193 101 240 72 247 28 106 109 204 85 197 236 14 137 101 31 103 12 134 123 31 187 4 139 102 253 147 19 10 114 101 43 199 78 89 236 71 18 41 88 98 68 147 29 10 198 158 109 180 126 172 144 183 46 213 120 157 146 187 239 164 221 49 192 205 114 58 213 22 236 87 239 201 234 44 115 77 70 187 238 32 98 165 220 172 30 107 62 16 48 82 97 66 210 20 126 56 213 17 245 122 136 233 225 169 150 123 211 199 92 138 236 99 88 228 122 113 16 102 95 151 138 238 55 73 143 179 187 23 32 12 234 201 41 226 36 196 41 246 202 253 53 217 138 149 42 178 60 234 21 67 169 42 222 88 214 228 18 5 197 200 227 90 90 99 148 44 44 200 241 199 58 179 65 35 171 71 28 200 190 11 198 236 21 100 82 192 168 101 102 12 224 170 253 64 141 119 146 11 80 44 45 52 22 33 75 44 18 7 154 25 98 89 89 148 48 8 242 34 134 37 72 96 1 231 143 58 219 236 158 246 219 81 245 39 110 236 75 248 218 120 45 149 180 108 172 21 214 253 90 241 44 249 147 78 113 136 183 42 77 9 43 70 11 46 178 70 194 110 46 202 90 203 122 42 134 7 200 250 165 31 81 100 192 238 57 41 98 246 150 233 217 247 171 122 149 26 10 202 217 92 61 38 236 154 212 139 11 71 28 23 36 137 36 147 208 158 164 221 200 33 105 125 16 178 42 71 160 58 201 121 105 4 180 201 26 85 129 40 47 49 84 17 179 5 177 101 62 24 34 227 5 183 30 226 231 85 252 147 157 251 106 25 188 50 21 192 87 44 155 66 130 10 139 177 181 176 84 16 109 140 13 107 134 83 167 180 49 221 41 193 111 225 127 33 46 67 47 147 52 36 199 76 208 10 17 131 111 53 23 119 34 179 79 207 167 142 240 3 144 59 64 44 75 2 209 66 158 3 15 219 254 62 63 251 107 99 243 246 234 203 240 225 179 162 134 72 153 227 207 202 226 37 145 90 95 78 174 71 118 193 59 24 83 185 150 40 196 177 48 144 6 18 6 11 244 127 17 214 226 120 36 127 63 31 143 35 219 219 241 254 26 123 165 77 36 171 80 101 112 204 181 179 132 92 144 176 130 81 44 223 101 128 2 195 55 183 25 206 168 171 134 40 37 15 11 239 15 18 130 196 48 33 138 13 192 134 1 175 184 240 64 177 62 131 60 105 166 154 217 210 26 105 166 154 52 105 166 154 104 209 160 60 107 218 9 30 22 15 31 176 32 178 243 224 240 123 135 142 71 179 40 96 63 32 106 78 235 47 71 247 95 67 55 230 119 96 239 40 43 166 71 19 98 72 106 220 171 114 11 181 242 180 189 118 122 89 74 230 189 153 77 104 175 84 34 111 151 185 13 123 149 152 152 101 133 120 227 81 104 7 180 55 176 60 31 223 131 193 7 73 211 85 193 212 41 226 168 166 34 122 90 152 132 208 207 25 12 146 68 214 34 78 214 83 113 110 78 71 174 166 241 201 4 239 79 50 20 154 17 121 99 4 93 6 5 201 181 185 35 183 112 48 120 152 118 159 89 247 86 213 100 20 173 90 79 79 176 43 6 80 66 161 238 28 55 5 136 238 102 36 30 71 228 3 231 82 202 124 87 111 144 170 63 81 186 56 30 198 114 72 253 137 231 207 252 143 182 181 19 146 79 36 242 64 224 19 228 129 248 7 220 127 119 228 254 117 199 190 179 234 62 29 233 85 111 226 79 71 3 73 124 159 13 89 79 213 92 50 131 219 112 0 250 155 99 78 69 212 171 162 136 70 42 230 107 53 213 88 130 138 182 22 176 231 117 199 62 156 103 91 129 255 0 75 29 245 255 0 180 174 127 243 70 159 244 177 223 95 251 74 231 255 0 52 107 79 244 210 255 0 240 159 68 199 246 42 111 127 236 212 249 227 31 221 253 127 29 75 246 181 127 249 237 219 176 237 111 111 251 71 231 173 191 63 22 27 228 242 78 70 247 143 184 151 216 127 129 4 235 22 207 252 71 111 12 220 79 12 183 109 186 63 61 194 89 59 212 159 176 237 110 71 3 236 64 12 9 228 17 246 214 157 57 63 157 93 31 195 61 22 34 172 148 48 110 4 28 198 128 92 16 110 20 11 1 142 0 29 184 209 251 86 186 214 51 177 29 253 251 125 6 49 129 172 228 239 108 185 188 46 137 38 238 46 93 159 215 96 89 207 39 187 188 21 144 55 36 15 165 199 35 128 190 15 3 47 94 182 238 200 98 88 33 183 102 53 86 229 192 155 149 110 20 71 218 7 176 6 49 233 200 123 67 202 188 122 140 199 206 161 127 183 31 111 199 219 252 61 180 211 83 244 170 90 134 83 44 20 236 19 10 26 59 216 98 252 222 248 254 154 165 107 106 34 223 224 202 232 100 182 252 222 249 82 109 245 183 22 255 0 105 194 191 92 183 116 37 36 91 246 86 85 96 194 65 42 247 253 44 93 121 115 245 30 27 135 80 196 133 101 86 28 16 56 174 255 0 164 30 243 10 99 75 214 209 73 94 68 114 170 6 42 190 159 44 161 120 111 234 249 81 221 201 242 79 61 252 54 160 29 113 192 231 158 7 62 252 241 231 159 206 170 29 11 166 159 183 71 76 120 181 162 81 156 94 248 246 63 142 111 125 31 180 43 191 234 100 251 141 191 194 125 61 143 229 239 169 249 62 32 119 164 101 31 231 174 22 143 180 35 25 16 21 237 40 195 180 5 237 79 49 169 33 84 7 42 12 157 220 235 134 248 128 222 46 20 11 150 192 72 214 37 2 68 224 34 202 211 40 3 180 170 149 145 221 215 128 59 89 187 147 183 129 196 6 124 251 249 254 126 127 227 160 241 237 227 249 120 255 0 134 187 251 7 164 255 0 209 67 158 124 139 237 237 237 163 246 133 119 253 76 159 115 125 47 219 156 27 30 120 247 212 189 103 171 219 154 204 198 103 179 101 155 142 213 103 155 153 2 21 1 163 46 126 163 19 56 50 52 100 148 119 37 164 13 201 231 214 46 179 238 180 37 69 203 36 57 250 193 151 248 248 7 180 55 0 51 42 125 61 138 88 132 244 226 42 1 141 56 135 121 63 147 254 39 92 123 123 106 127 177 186 112 1 69 29 62 208 44 1 140 113 142 127 63 209 196 255 0 104 213 219 251 249 47 235 187 191 175 31 175 229 59 39 94 119 108 74 169 243 182 159 180 118 5 105 203 14 192 168 161 57 110 226 19 136 215 185 87 129 35 40 50 119 121 6 207 115 171 219 162 233 83 37 137 192 85 81 200 145 67 179 47 1 100 103 80 172 92 5 28 30 124 126 60 47 17 7 3 158 120 28 254 120 243 254 58 237 220 223 147 254 39 64 232 189 56 16 69 29 56 32 131 113 18 131 97 107 142 59 230 255 0 239 138 205 125 123 11 53 75 218 224 216 19 219 238 214 192 109 238 184 238 92 80 146 39 179 52 208 74 178 71 37 105 93 38 132 197 36 109 28 144 180 78 172 141 20 136 236 178 70 202 202 253 196 178 177 36 156 222 79 137 124 164 152 136 240 45 82 187 97 32 131 31 90 190 26 74 148 155 17 90 28 67 64 248 136 171 226 204 6 149 120 241 51 85 169 62 53 32 175 26 209 179 86 181 154 226 57 225 73 23 82 57 60 147 207 147 238 126 255 0 227 249 253 253 244 36 145 193 36 143 193 242 52 173 79 195 125 38 166 69 145 232 169 201 28 238 143 63 195 145 107 103 203 124 227 210 218 99 246 165 88 85 11 52 130 220 157 220 253 159 108 90 223 174 70 198 229 126 34 183 133 249 93 133 235 110 27 188 22 18 158 238 28 146 199 144 121 4 242 123 189 132 132 179 176 103 98 226 214 157 126 222 17 30 86 237 241 195 18 191 235 76 25 67 8 213 128 147 159 88 43 8 213 93 68 157 174 157 200 195 135 126 96 81 227 219 199 242 241 161 243 239 231 249 249 255 0 142 173 95 135 250 66 40 85 161 128 1 192 17 173 175 139 246 205 200 191 244 213 79 212 107 89 175 243 18 118 193 110 56 227 240 63 92 118 198 167 230 248 132 222 108 142 134 253 254 199 96 89 69 162 168 74 168 85 98 137 218 140 200 163 177 59 148 246 161 42 56 231 157 120 183 94 183 139 242 26 245 209 202 246 146 211 114 188 6 238 4 169 5 11 2 92 33 43 202 153 93 185 47 195 106 6 224 126 7 248 13 118 228 254 79 248 234 99 160 244 144 65 249 40 48 110 60 139 218 220 227 60 126 179 120 142 161 93 113 122 153 8 238 55 127 241 198 71 24 252 45 239 169 158 199 89 247 85 158 193 243 118 29 83 199 103 168 10 42 128 138 138 20 131 192 85 140 32 36 151 42 56 102 35 84 48 245 115 114 213 63 69 137 249 42 21 187 221 91 189 123 85 27 184 17 199 115 162 42 179 128 28 170 255 0 16 36 147 19 2 71 177 35 159 126 15 26 18 79 185 39 249 249 212 255 0 99 244 242 54 154 72 54 227 11 24 22 34 214 207 226 56 226 218 147 117 26 203 121 103 144 31 118 199 111 111 215 242 157 27 175 27 193 227 10 247 174 158 8 144 176 157 148 25 59 95 185 207 30 57 118 145 153 248 94 28 145 220 24 5 226 206 122 191 185 158 79 85 109 89 36 134 86 99 96 179 58 187 51 72 140 236 75 145 39 123 171 253 92 148 98 156 133 36 106 35 228 145 193 39 142 56 227 237 199 227 143 198 184 30 7 3 192 252 15 3 252 53 92 125 15 167 71 186 212 144 121 136 39 247 99 183 31 214 222 159 200 94 163 89 111 53 68 134 220 89 184 24 191 35 219 249 125 117 55 14 186 238 225 27 68 47 91 242 158 155 31 92 253 72 87 134 86 28 249 15 238 227 251 71 234 110 72 93 71 89 205 215 147 206 179 73 118 73 36 119 238 229 157 131 3 221 238 72 28 114 223 237 18 59 137 228 158 73 39 88 175 3 207 129 231 223 199 191 243 252 251 159 125 118 228 241 199 39 129 236 62 195 239 237 237 239 231 77 83 244 234 58 103 50 67 79 12 110 70 89 80 3 128 0 237 237 250 224 83 81 83 81 82 187 36 154 66 191 92 230 215 254 88 215 26 105 166 158 213 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 166 154 104 209 166 154 105 163 70 154 105 166 141 26 105 166 154 52 105 174 8 7 195 0 71 32 240 121 227 145 237 200 251 241 174 116 213 47 17 118 184 32 96 126 90 53 46 244 79 112 13 191 212 44 43 59 138 245 178 235 62 26 227 133 81 220 46 132 90 45 43 16 75 36 86 226 70 80 91 193 110 7 143 26 200 119 241 147 166 189 104 143 51 12 77 29 121 114 213 119 50 44 43 220 103 163 127 152 114 208 198 157 192 23 99 250 130 59 3 202 181 144 192 114 170 53 2 67 102 74 214 97 158 9 29 44 192 232 240 50 187 33 71 141 187 227 145 25 72 40 241 184 13 27 169 12 140 3 41 4 3 171 166 115 113 230 55 61 243 144 207 228 109 101 47 42 8 146 107 82 137 99 138 33 33 151 211 171 16 138 20 170 130 81 234 118 69 26 167 127 45 199 113 231 88 210 244 255 0 22 188 212 111 2 57 169 90 138 166 43 31 222 169 54 86 7 128 66 250 139 220 96 233 229 172 217 74 98 85 97 50 186 52 82 220 109 64 10 150 82 160 6 55 177 225 190 163 83 191 80 55 158 223 219 253 104 196 239 109 183 146 173 156 172 33 161 46 114 190 60 44 157 230 51 114 150 70 154 79 43 69 94 73 236 99 33 130 195 14 29 146 86 66 23 158 8 197 178 61 96 202 46 233 221 185 221 169 76 97 226 221 80 83 175 114 165 201 97 188 168 245 21 147 230 220 122 81 196 147 216 87 98 209 168 114 4 142 12 132 63 106 195 71 200 0 249 10 73 80 127 178 72 0 145 248 36 0 15 30 225 84 31 0 112 62 125 252 248 3 207 224 123 127 135 39 252 79 231 76 69 209 224 65 78 95 107 189 60 34 156 51 40 96 209 35 239 143 112 60 178 220 139 155 219 22 239 168 73 93 81 39 204 0 193 86 89 214 100 80 62 197 145 85 129 54 206 226 47 113 110 126 186 173 107 247 4 50 213 22 172 138 210 73 223 45 101 177 50 213 145 199 35 185 160 14 35 60 114 120 250 124 31 62 125 245 66 221 221 140 168 64 250 123 80 31 97 244 149 3 150 254 201 228 30 15 142 224 9 215 58 16 15 130 57 31 131 173 1 2 46 81 35 82 109 189 149 2 150 0 169 28 119 0 16 47 235 245 210 114 25 37 22 145 203 90 197 70 118 130 45 200 239 98 5 178 120 190 166 138 91 255 0 9 91 164 57 45 132 96 201 73 152 183 154 173 117 9 133 127 79 53 255 0 93 196 95 147 186 204 103 185 11 87 169 97 84 183 0 247 242 56 237 227 89 254 215 223 253 19 194 79 71 114 99 182 254 123 5 156 165 67 229 159 31 69 238 61 11 146 67 16 134 54 184 213 172 71 82 71 110 206 241 53 168 221 212 144 204 6 181 88 34 15 101 81 193 228 112 160 112 127 110 7 142 62 223 143 182 187 31 45 220 124 183 32 247 31 226 228 123 30 125 249 31 111 198 179 166 232 208 74 146 196 37 158 52 154 162 105 228 88 229 42 31 197 84 91 53 135 35 111 110 223 83 167 41 235 234 225 182 231 70 182 5 151 27 64 1 70 111 145 108 255 0 189 245 148 111 29 197 46 235 220 249 173 199 52 30 131 101 173 11 16 192 100 89 90 42 177 71 13 104 68 174 163 180 200 208 87 128 73 199 2 73 125 71 247 114 13 181 55 6 102 28 99 225 99 202 223 76 76 178 36 146 99 22 220 194 140 140 164 241 223 87 191 210 97 201 36 242 188 22 0 251 129 171 79 228 253 207 185 252 242 123 143 63 158 91 234 243 247 243 239 167 191 28 253 189 191 109 56 180 104 136 145 173 138 71 183 96 123 177 5 109 99 127 81 97 245 57 181 244 155 52 161 228 146 39 216 242 238 18 28 217 131 27 145 143 169 177 205 175 193 26 184 99 114 217 76 28 205 99 15 145 187 138 158 104 253 25 38 199 219 154 172 146 70 85 65 73 26 25 16 186 158 197 32 55 60 48 5 120 60 243 150 108 174 161 103 246 54 82 92 142 50 97 60 119 7 25 26 119 38 145 162 200 31 84 200 178 187 146 238 150 81 153 213 39 31 90 135 112 57 82 20 96 126 254 254 117 200 102 30 196 143 228 72 255 0 134 187 53 36 83 164 139 44 113 185 153 66 203 117 57 2 217 83 202 182 48 117 192 211 43 18 146 5 30 93 184 200 31 196 47 238 108 126 236 235 104 99 248 131 219 208 72 249 42 93 50 193 86 220 82 169 95 212 82 237 14 211 43 3 216 67 197 135 142 244 132 72 67 122 75 101 36 36 118 172 202 223 88 128 247 94 234 204 239 28 204 217 92 237 133 158 220 129 33 134 56 156 138 212 105 197 199 165 82 156 14 59 161 132 18 90 66 9 18 57 44 228 151 7 88 223 123 249 250 219 200 32 253 71 200 62 8 62 124 130 60 17 167 115 112 7 115 112 61 135 39 129 252 135 176 254 237 47 77 210 40 105 38 51 83 195 225 181 130 171 25 36 145 213 108 1 218 93 142 194 72 56 91 11 91 190 156 122 201 101 69 71 10 44 108 197 5 139 165 190 201 245 55 205 205 199 107 122 122 181 187 15 88 99 204 210 138 105 49 178 181 131 183 162 44 180 102 38 177 216 15 6 102 137 187 26 78 57 101 28 123 1 163 219 158 72 107 212 150 121 158 189 84 100 171 17 118 43 89 100 156 89 148 64 9 254 175 215 157 125 89 184 241 35 22 45 229 142 188 52 211 166 44 179 13 187 139 35 134 35 59 199 149 216 145 201 100 0 125 121 190 146 188 216 59 212 145 33 36 144 115 21 197 147 214 224 2 63 174 184 102 17 158 239 28 41 246 60 240 120 228 133 228 121 5 136 10 15 228 234 126 216 61 76 217 208 236 155 27 11 126 227 111 207 138 54 154 106 118 49 240 188 132 44 147 139 18 69 63 107 36 208 93 134 215 98 67 42 14 195 1 144 177 231 131 168 11 67 245 16 79 146 61 137 242 71 242 39 200 254 237 47 83 66 149 104 82 71 116 253 232 149 30 51 103 66 8 32 169 35 13 113 143 64 79 55 212 227 121 225 150 73 34 112 170 235 109 132 98 231 215 218 249 227 58 157 119 87 80 246 165 238 152 71 178 112 181 50 181 108 86 207 201 106 180 83 194 5 120 177 107 147 202 75 10 52 210 179 73 36 162 25 96 98 192 158 20 133 3 220 143 76 207 85 49 207 179 250 117 142 193 173 232 115 251 54 237 27 210 79 58 40 166 210 86 169 106 187 71 31 35 153 33 113 34 70 225 135 14 143 34 55 42 231 152 27 129 237 192 224 18 120 32 17 201 224 19 193 241 207 129 231 246 31 129 167 227 219 199 183 129 227 249 126 60 158 124 125 252 251 233 81 209 225 81 26 150 50 44 114 180 199 196 36 153 30 64 86 65 37 190 208 101 38 220 88 145 123 129 155 222 182 176 200 242 36 136 165 161 167 138 197 73 204 86 220 73 22 195 90 224 90 224 247 183 27 95 146 234 183 73 183 228 24 235 155 207 1 153 25 74 48 5 20 32 107 55 113 140 236 235 220 245 197 123 48 65 36 44 188 132 150 69 73 80 246 179 30 20 169 128 183 230 103 1 157 220 150 239 237 156 31 232 24 167 72 99 74 76 209 146 205 10 8 196 200 145 71 217 18 58 0 89 61 105 92 185 238 110 9 228 225 167 201 228 249 62 124 159 39 200 224 249 63 144 72 63 177 227 92 242 79 31 129 236 62 195 246 3 236 63 97 169 209 116 152 104 100 15 12 146 42 141 193 99 12 76 106 25 139 0 17 174 13 174 70 69 200 0 94 216 18 158 170 74 130 205 41 5 139 2 8 22 1 64 81 99 234 110 9 191 190 179 222 153 238 183 217 219 203 15 153 12 86 178 206 41 228 17 95 183 215 163 117 150 9 209 135 31 254 138 159 153 71 39 148 120 123 215 134 93 110 94 127 125 97 112 27 231 110 236 68 142 163 226 247 61 124 155 102 89 123 61 40 238 110 41 37 108 116 147 0 56 2 205 161 98 105 7 246 225 177 17 111 167 141 124 245 224 19 201 0 158 56 231 129 207 4 16 71 63 130 25 135 242 36 123 19 171 156 217 76 149 219 145 229 103 191 60 249 10 177 82 88 238 202 238 246 33 76 74 199 90 152 245 100 99 36 146 66 177 198 162 70 36 240 163 234 227 158 81 234 93 38 42 234 159 30 70 218 235 4 145 93 6 208 101 199 203 202 84 99 247 66 247 28 156 88 233 154 62 165 53 45 59 66 64 115 226 71 225 176 198 216 65 6 100 60 146 100 23 0 240 61 53 183 27 135 126 99 35 235 182 216 199 204 241 174 7 107 165 156 49 145 28 71 94 44 182 91 29 52 18 56 10 146 42 26 246 39 165 9 98 161 99 90 172 9 69 14 70 99 186 177 185 237 183 151 183 103 96 236 145 150 220 219 145 218 108 158 251 202 75 142 158 26 17 204 142 162 26 207 44 146 75 29 104 163 88 124 71 12 117 107 172 113 9 22 64 224 46 134 88 177 37 185 167 181 110 103 177 102 213 137 172 88 158 110 90 107 86 103 238 19 75 33 242 132 176 102 103 145 193 145 188 144 125 78 53 152 84 234 62 254 163 72 99 170 110 204 204 85 35 85 141 98 75 129 253 56 192 101 72 227 177 53 127 155 141 85 123 128 84 159 133 28 5 237 0 105 9 58 13 205 63 130 209 63 133 74 41 218 57 195 148 149 195 9 55 182 198 7 50 93 136 228 139 47 174 174 143 170 34 73 51 152 153 131 72 12 75 184 126 238 37 181 144 146 13 200 245 31 248 217 30 153 77 184 170 238 94 169 236 205 217 151 145 119 126 87 23 90 76 102 82 107 126 163 59 165 76 165 69 106 172 198 58 230 40 165 201 85 181 16 167 28 104 233 28 134 20 3 144 113 174 148 244 191 127 109 253 243 6 99 55 12 184 124 102 46 59 194 253 233 110 192 32 201 195 45 105 43 152 32 146 27 178 203 114 156 246 166 75 114 205 117 35 150 188 113 151 157 3 7 81 173 15 150 202 28 154 229 31 37 116 101 4 198 223 234 127 55 105 242 113 218 64 59 102 249 182 149 164 98 71 28 145 39 63 99 224 113 172 162 255 0 82 55 198 90 139 227 178 27 167 47 102 140 177 152 166 139 231 90 52 156 20 8 241 206 208 87 175 60 232 192 246 60 83 203 44 46 165 145 218 84 36 155 229 233 85 255 0 191 72 90 157 18 177 21 39 95 8 237 140 42 42 17 1 190 224 150 221 181 88 146 59 28 102 175 157 133 132 66 72 101 38 38 149 148 164 138 5 228 125 214 32 128 108 6 57 60 27 223 94 253 77 202 83 205 239 205 215 147 199 200 147 82 177 151 148 67 60 94 86 115 94 52 174 246 27 236 4 206 132 196 201 244 178 143 229 172 95 13 152 187 129 203 227 179 88 246 101 187 141 185 5 186 192 55 106 179 199 42 119 195 35 113 192 142 120 12 208 183 62 15 127 159 182 173 96 0 0 0 0 168 177 168 30 2 162 243 218 131 240 139 201 237 81 224 114 120 26 125 138 253 155 142 225 246 60 30 71 35 216 240 64 35 159 98 57 214 252 52 177 136 18 6 243 196 145 172 118 60 237 85 81 98 125 111 124 250 88 113 164 188 82 36 105 18 234 197 137 6 249 0 246 197 135 235 190 179 204 111 81 51 152 205 237 146 223 21 216 182 79 37 54 93 173 198 207 220 173 14 74 38 141 233 63 60 171 195 76 26 130 53 224 5 249 104 89 64 42 53 233 176 119 230 75 96 110 69 207 71 16 185 21 168 222 28 189 57 166 68 55 96 179 106 59 76 203 33 12 134 111 93 36 150 57 31 217 229 148 158 4 141 204 126 60 123 120 254 35 227 199 151 227 188 255 0 223 237 29 223 237 112 57 231 129 160 240 0 30 2 241 218 7 128 188 30 64 80 60 0 15 144 7 28 31 35 65 161 167 216 241 136 212 35 198 34 107 11 54 197 0 40 220 59 168 24 32 3 112 53 17 81 84 174 174 178 217 145 139 165 238 108 236 65 99 146 111 115 123 222 252 235 108 96 234 39 69 49 185 71 222 152 205 165 151 59 158 69 121 227 171 45 88 163 142 189 217 99 145 30 84 146 39 249 72 75 59 243 243 48 71 235 147 218 222 7 119 54 77 131 214 188 118 63 118 111 45 207 187 87 34 102 220 112 99 97 173 79 31 12 115 165 104 177 243 207 233 64 164 144 62 94 8 231 86 12 126 165 102 144 168 5 129 58 210 0 28 112 0 237 4 47 0 125 32 158 88 47 251 33 143 146 7 28 159 126 116 255 0 204 127 115 113 200 254 254 209 207 231 129 207 176 210 41 208 233 21 101 87 105 167 51 5 82 243 202 242 52 106 132 21 88 129 194 173 192 6 247 54 22 7 78 47 83 168 79 15 104 75 43 51 56 34 228 187 11 51 47 0 19 123 140 19 239 223 83 247 74 122 157 134 219 248 76 254 217 223 20 238 223 219 153 42 242 201 4 21 170 189 166 50 220 224 100 177 167 151 31 47 29 183 69 150 51 9 65 94 210 44 145 112 232 57 231 57 213 44 37 93 131 180 112 59 66 198 98 150 111 107 102 225 181 70 205 216 107 193 16 162 146 231 12 17 75 98 27 82 7 150 88 237 215 138 104 98 140 163 70 206 91 193 36 107 249 0 146 72 4 177 229 137 28 150 60 150 228 254 79 113 39 147 231 146 79 185 215 110 79 4 114 120 32 2 57 240 66 142 20 17 247 10 60 15 192 240 60 106 127 177 105 13 67 84 21 36 180 162 99 24 254 239 122 199 225 139 47 22 10 73 237 156 234 161 95 82 144 120 72 203 185 99 240 214 71 5 136 188 129 218 252 92 88 0 7 107 98 218 217 141 199 213 30 152 238 123 155 83 63 184 246 174 86 230 122 172 94 150 114 157 111 149 131 31 96 34 180 82 53 153 26 68 146 234 87 44 109 84 140 16 233 26 60 41 244 59 106 229 254 148 58 105 179 246 222 127 29 211 236 118 118 91 249 152 189 36 171 146 22 70 55 27 235 195 98 178 77 18 220 146 70 141 22 57 100 245 5 111 166 65 232 171 18 33 78 221 83 224 126 7 248 15 177 228 127 159 157 118 228 251 243 231 158 65 251 130 64 4 131 239 201 0 3 249 0 3 236 53 6 232 84 143 28 80 188 149 38 24 128 43 26 204 200 129 196 155 193 0 12 41 206 225 124 158 45 124 92 58 156 247 152 133 68 241 64 187 160 180 151 181 137 36 227 233 97 233 115 141 73 87 247 46 212 181 211 188 86 219 139 107 199 6 232 198 95 158 107 25 176 222 13 121 140 211 75 58 201 228 207 61 185 167 149 94 153 95 70 25 27 148 254 17 196 105 174 121 63 79 147 244 142 23 253 208 9 35 183 241 193 36 248 254 209 39 223 206 184 214 132 20 171 2 149 76 94 66 231 147 130 215 2 231 60 99 223 75 77 63 138 20 16 110 0 5 137 30 99 101 185 176 3 36 130 79 215 77 52 211 77 105 125 52 211 77 26 52 211 83 143 64 122 1 189 190 34 183 183 244 47 101 45 8 102 130 141 155 249 60 166 74 220 53 170 98 234 197 4 242 193 44 145 153 150 213 182 183 102 186 210 142 42 117 236 60 111 58 207 51 65 94 41 11 181 230 250 167 197 223 14 116 106 163 69 212 250 181 45 37 80 68 144 195 35 29 225 36 190 198 32 41 182 235 18 5 248 207 26 211 164 232 221 82 186 47 30 150 138 105 161 44 80 72 160 109 44 182 184 23 35 141 194 255 0 67 233 175 255 217 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowBigBlueGif
	"'imgs/sun-ar_lg_blue_r.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 15 0 13 0 128 1 0 89 79 191 255 255 255 33 249 4 1 0 0 1 0 44 0 0 0 0 15 0 13 0 0 2 26 140 143 169 0 234 220 92 130 114 50 4 179 62 186 223 224 109 21 248 85 212 120 162 209 56 22 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowBigRedGif
	"'imgs/sun-ar_lg_red_r.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 15 0 13 0 128 1 0 205 43 64 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 15 0 13 0 64 2 27 140 143 169 6 189 217 192 155 47 170 136 179 92 150 6 231 49 224 161 105 100 137 81 221 52 34 5 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowBigYellowGif
	"'imgs/sun-ar_lg_yell_r_pad.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 24 0 21 0 128 1 0 251 226 73 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 24 0 21 0 64 2 37 140 143 169 123 224 15 29 155 180 34 105 233 203 188 251 186 101 209 8 124 1 102 166 234 202 133 171 171 145 81 10 119 53 139 231 74 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowCircledGreyGif
	"'imgs/adobe-grey_arrow.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 10 0 10 0 145 0 0 102 102 102 255 255 255 153 153 153 204 204 204 33 249 4 0 0 0 0 0 44 0 0 0 0 10 0 10 0 0 2 29 76 38 0 50 22 169 162 56 241 69 84 237 138 192 65 238 41 159 1 49 213 215 124 146 131 45 77 80 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowCircledRedGif
	"'imgs/adobe-red_arrow.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 10 0 10 0 162 0 0 255 0 0 255 255 255 255 153 155 255 204 204 254 242 243 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 10 0 10 0 0 3 33 24 49 2 32 131 168 230 170 32 163 6 10 152 222 14 7 40 96 229 144 20 55 133 217 201 13 165 41 144 222 3 7 9 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: 'mivsek 8/21/2007 11:24'!
arrowCircledRedLeftGif
	"'imgs/adobe-red_arrow-l.gif' asFilename contentsAsMethod"
^#(71 73 70 56 55 97 10 0 10 0 194 1 0 255 0 0 255 255 255 255 153 155 255 204 204 254 242 243 255 255 255 255 255 255 255 255 255 44 0 0 0 0 10 0 10 0 0 3 31 24 49 2 32 67 133 230 170 88 54 84 230 174 238 157 84 101 202 72 121 214 144 109 4 101 42 4 247 68 65 2 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowDownBigRedGif
	"'imgs/sun-ar_lg_red_d_pad.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 24 0 21 0 128 1 0 204 51 51 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 24 0 21 0 64 2 39 140 143 169 203 224 12 163 92 14 76 90 235 221 188 67 221 105 226 19 146 222 137 94 32 186 158 173 106 5 160 41 101 182 119 167 113 202 115 5 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowNextBigGif
	"'imgs/nav_arrow_right.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 19 0 213 0 0 237 237 237 245 245 245 242 242 242 234 234 234 246 246 246 253 253 253 235 235 235 251 251 251 249 249 249 254 254 254 241 241 241 236 236 236 247 247 247 239 239 239 248 248 248 250 250 250 228 228 228 229 229 229 224 224 224 243 243 243 222 222 222 252 252 252 233 233 233 217 217 217 225 225 225 219 219 219 237 237 238 233 234 234 225 225 224 218 218 218 227 227 227 226 226 226 230 231 231 221 222 222 232 232 231 231 231 231 237 238 238 229 229 228 234 234 233 249 249 248 220 219 220 234 234 235 240 241 241 251 250 250 220 220 221 246 247 247 221 222 221 227 226 227 221 221 221 239 238 238 227 227 228 241 241 242 230 230 230 245 245 246 232 232 232 238 238 238 244 244 244 240 240 240 186 186 186 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 9 0 0 59 0 44 0 0 0 0 20 0 19 0 0 8 230 0 119 232 208 145 99 135 193 131 8 19 10 12 128 99 96 65 133 16 117 48 192 193 208 33 196 132 58 90 40 192 193 177 33 193 139 6 117 4 184 33 128 0 2 134 30 31 42 212 49 97 65 14 28 39 30 20 72 192 209 34 70 1 27 110 204 32 240 160 66 2 6 52 83 34 212 161 0 132 1 5 1 28 28 40 192 180 2 195 0 54 117 52 24 49 128 100 210 7 43 14 32 96 64 128 35 84 130 58 110 120 176 1 32 199 132 0 4 184 214 192 33 32 199 13 142 5 6 222 248 64 195 4 128 27 57 114 40 80 113 163 129 6 3 21 193 146 144 16 65 132 133 1 41 6 40 30 96 161 230 71 129 0 36 188 136 80 34 2 4 8 50 32 8 16 96 51 36 0 10 24 48 112 144 224 2 70 140 6 157 15 234 0 16 130 2 11 20 29 22 24 72 61 20 64 134 12 23 12 12 160 141 113 193 133 5 95 85 130 20 57 251 49 200 161 198 143 31 12 8 0 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowNextRedPng
	"'imgs/suse/suse-arrow-next.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 15 0 0 0 14 8 3 0 0 0 199 84 182 221 0 0 0 4 103 65 77 65 0 0 175 200 55 5 138 233 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 1 23 80 76 84 69 117 160 37 139 191 44 143 197 45 114 156 36 146 200 46 147 202 46 154 209 53 115 158 36 143 196 45 120 165 38 105 145 33 103 141 47 101 91 89 77 108 90 137 192 75 7 9 5 50 53 62 195 184 201 77 83 74 100 105 78 152 165 184 73 75 74 2 10 0 30 50 39 154 184 174 104 143 56 20 27 35 73 81 92 94 87 78 116 158 53 102 140 43 159 165 165 96 127 54 157 163 179 132 149 165 56 53 46 138 195 89 134 193 101 166 189 205 151 207 47 105 135 187 24 19 13 17 13 27 131 159 144 107 130 148 9 20 24 140 156 171 26 28 40 112 146 113 110 149 144 111 152 35 152 208 50 17 24 26 11 15 26 21 21 49 87 94 87 105 143 60 31 26 20 17 4 33 154 173 171 68 64 65 136 187 43 32 40 27 5 16 4 59 53 53 108 97 91 171 175 213 145 199 46 82 113 63 120 146 145 152 208 48 10 14 12 111 153 35 21 21 29 137 189 43 70 81 67 84 86 88 154 155 157 134 184 42 32 31 47 80 78 79 156 167 185 73 72 80 108 149 58 119 163 38 6 6 7 81 85 70 127 127 119 115 145 173 137 135 122 100 102 99 9 11 27 255 255 255 159 1 143 8 0 0 0 93 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 225 175 157 144 0 0 0 193 73 68 65 84 120 218 98 136 129 130 112 8 5 16 64 12 48 190 185 56 152 2 8 32 56 95 148 207 10 68 1 4 16 156 47 160 202 107 15 164 0 2 136 33 210 49 192 91 58 204 70 217 95 133 73 206 61 38 6 32 128 24 132 89 57 212 253 56 24 153 88 25 217 217 184 45 99 0 2 136 65 136 153 141 193 153 147 133 193 150 203 152 221 75 86 6 32 128 24 124 20 24 140 56 25 24 60 152 185 24 88 44 76 20 1 2 136 33 202 206 76 95 83 215 211 52 58 132 81 146 223 80 16 32 128 24 98 212 68 172 229 37 2 245 164 220 130 67 117 180 99 0 2 8 110 159 131 139 152 134 107 76 12 64 0 193 249 65 90 17 74 64 10 32 128 224 124 30 95 3 16 5 16 64 112 126 140 19 152 4 8 48 0 50 218 53 59 137 15 17 99 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowOrangeDownGif
	"'imgs/dars-arrow-down.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 8 0 5 0 161 2 0 251 171 61 50 138 66 255 255 255 255 255 255 33 249 4 1 0 0 2 0 44 0 0 0 0 8 0 5 0 0 2 12 140 127 160 27 18 11 154 112 74 78 103 11 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowOrangeLeftGif
	"'imgs/dars-arrow-left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 5 0 8 0 161 2 0 251 171 61 50 138 66 255 255 255 255 255 255 33 249 4 1 0 0 2 0 44 0 0 0 0 5 0 8 0 0 2 13 148 19 7 25 176 237 144 91 2 166 74 79 40 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowOrangeRightGif
	"'imgs/dars-arrow2.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 5 0 8 0 145 2 0 251 171 61 50 138 66 255 255 255 0 0 0 33 249 4 1 0 0 2 0 44 0 0 0 0 5 0 8 0 0 2 14 76 132 1 39 186 13 162 137 203 29 197 12 18 5 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowOrangeUpGif
	"'imgs/dars-arrow-up.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 8 0 5 0 161 2 0 251 171 61 50 138 66 255 255 255 255 255 255 33 249 4 1 0 0 2 0 44 0 0 0 0 8 0 5 0 0 2 12 148 19 166 1 144 215 90 98 81 162 123 11 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowPreviousBigGif
	"'imgs/nav_arrow_left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 19 0 213 0 0 237 237 237 245 245 245 242 242 242 234 234 234 246 246 246 253 253 253 235 235 235 251 251 251 249 249 249 254 254 254 241 241 241 236 236 236 247 247 247 239 239 239 248 248 248 250 250 250 228 228 228 229 229 229 224 224 224 243 243 243 222 222 222 252 252 252 233 233 233 217 217 217 225 225 225 219 219 219 237 237 238 233 234 234 225 225 224 218 218 218 227 227 227 226 226 226 230 231 231 221 222 222 232 232 231 231 231 231 237 238 238 229 229 228 234 234 233 249 249 248 220 219 220 234 234 235 240 241 241 251 250 250 220 220 221 246 247 247 221 222 221 227 226 227 221 221 221 239 238 238 227 227 228 241 241 242 230 230 230 245 245 246 232 232 232 238 238 238 244 244 244 240 240 240 186 186 186 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 9 0 0 59 0 44 0 0 0 0 20 0 19 0 0 8 222 0 119 8 28 72 176 224 142 28 58 116 24 92 40 16 161 14 28 56 20 50 28 232 48 0 68 6 18 25 86 132 8 177 69 198 130 21 45 34 192 33 224 70 128 143 13 19 114 12 240 224 4 142 28 11 38 124 12 25 32 64 130 10 15 8 204 184 177 65 128 68 135 12 32 86 40 64 244 128 131 0 10 12 128 80 160 99 227 69 4 7 86 60 56 90 114 192 136 6 9 45 114 20 128 163 6 1 6 4 2 76 200 1 192 134 135 27 77 85 6 48 160 161 193 13 21 10 114 228 184 1 192 4 141 15 104 83 62 196 97 97 128 223 1 41 6 88 16 17 65 2 137 153 9 5 8 128 32 3 2 132 8 37 34 188 144 0 0 229 193 132 13 98 192 112 33 129 3 6 12 20 42 107 76 104 96 65 7 20 44 40 132 16 61 209 225 0 3 23 50 100 96 61 241 178 142 0 11 46 44 176 60 90 135 129 147 181 13 58 220 17 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowPreviousRedPng
	"'imgs/suse/suse-arrow-prev.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 14 8 3 0 0 0 17 241 108 184 0 0 0 4 103 65 77 65 0 0 175 200 55 5 138 233 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 1 50 80 76 84 69 114 156 36 143 196 45 109 150 35 115 158 36 146 200 46 151 207 47 117 160 37 119 163 38 152 208 50 27 36 39 1 11 0 86 78 67 33 32 64 19 30 16 0 7 30 74 100 46 18 26 15 39 45 41 104 142 33 71 67 68 113 154 45 17 16 21 106 177 120 13 18 14 104 173 115 78 76 63 15 24 39 162 173 179 113 155 36 98 135 31 137 193 67 154 173 179 30 43 26 162 169 179 162 167 160 153 170 180 42 59 51 75 94 99 130 144 147 51 56 38 8 11 0 131 134 175 164 167 182 126 151 158 156 150 184 110 151 46 39 47 49 155 172 180 202 203 207 14 19 22 110 125 168 14 13 8 153 155 170 19 23 60 102 139 68 1 1 11 96 99 92 34 39 45 94 95 81 126 188 91 17 21 10 79 83 74 147 202 46 20 27 35 162 177 182 149 204 47 15 12 36 167 174 192 81 72 75 134 184 42 131 135 121 120 165 38 88 84 72 124 170 39 148 204 61 127 144 162 87 78 71 4 0 19 7 5 18 100 137 32 161 170 177 85 75 61 141 159 173 71 79 54 154 209 52 140 198 71 155 169 178 95 128 81 158 211 60 187 196 175 11 24 15 5 6 11 160 169 168 95 132 50 18 16 27 151 205 83 143 197 45 137 189 43 132 181 42 127 149 137 176 181 174 255 255 255 56 147 122 14 0 0 0 102 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 53 142 168 183 0 0 0 202 73 68 65 84 120 218 98 72 5 3 183 84 24 0 8 32 6 48 169 96 5 23 0 8 32 176 128 176 88 32 92 0 32 128 64 2 190 114 33 42 112 1 128 0 2 10 112 74 120 50 241 168 7 219 74 122 184 248 88 164 2 4 16 67 170 120 104 18 51 171 127 132 35 99 2 99 188 151 96 10 64 0 49 112 91 187 50 176 8 217 201 176 186 51 50 115 196 74 197 0 4 16 67 152 13 59 11 3 7 131 44 19 27 3 59 27 191 169 22 64 0 49 164 106 251 233 38 138 56 105 24 71 9 24 198 217 235 41 1 4 16 208 80 111 46 179 112 62 181 32 101 125 105 7 121 19 3 128 0 2 89 107 100 174 42 170 3 179 22 32 128 192 14 211 140 230 13 128 9 0 4 16 196 233 201 150 138 48 1 128 0 130 8 164 58 71 194 4 0 2 12 0 195 211 63 171 113 236 31 0 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowSmallBlackGif
	"'imgs/ibm-arrow-right-black.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 7 0 7 0 128 1 0 0 0 0 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 7 0 7 0 0 2 11 140 143 1 105 11 15 23 146 135 178 2 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowTriangleRedGif
	"'imgs/filo-redarr.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 14 0 13 0 128 0 0 255 255 255 255 0 0 33 249 4 1 0 0 0 0 44 0 0 0 0 14 0 13 0 0 2 23 132 143 169 123 193 25 226 51 177 190 138 23 222 112 59 197 49 214 244 77 230 121 20 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
arrowTriangleYellowGif
	"'imgs/dars-arrow2.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 5 0 8 0 145 2 0 251 171 61 50 138 66 255 255 255 0 0 0 33 249 4 1 0 0 2 0 44 0 0 0 0 5 0 8 0 0 2 14 76 132 1 39 186 13 162 137 203 29 197 12 18 5 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
bannerLeftGif
	"'imgs/fast/fast-banner_left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 3 0 3 0 128 0 0 127 160 177 255 255 255 33 249 4 1 0 0 0 0 44 0 0 0 0 3 0 3 0 0 2 4 12 96 24 81 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
bucketTopGif
	"'imgs/fast/fast-bucket_top.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 80 1 5 0 128 1 0 255 255 255 229 236 243 33 249 4 1 0 0 1 0 44 0 0 0 0 80 1 5 0 0 2 50 132 17 169 203 237 15 163 156 180 218 139 179 222 188 251 15 42 199 17 150 230 137 166 234 202 182 37 233 198 242 76 215 246 141 25 248 206 247 254 15 100 32 130 196 162 241 136 172 20 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletBookTranspWhiteGif
	"'imgs/fast/fast-book.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 153 204 102 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 29 68 142 25 166 141 0 95 148 17 206 99 77 78 123 83 109 113 161 135 141 225 183 156 138 230 180 143 139 21 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletBubbleTranspWhiteGif
	"'imgs/fast/fast-soundoff.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 152 248 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 26 68 142 25 166 157 0 35 67 178 190 26 47 158 107 243 110 53 153 115 64 36 117 166 165 10 20 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletCalendarTranspWhiteGif
	"'imgs/fast/fast-calendar.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 251 176 51 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 29 68 142 25 166 141 0 99 76 178 210 58 159 62 140 239 117 97 29 232 149 102 55 138 144 195 142 14 80 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletCheckTranspWhiteGif
	"'imgs/fast/fast-register.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 22 68 142 25 166 237 15 89 148 135 2 90 217 125 119 79 8 134 34 130 53 64 1 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletConnectTranspWhiteGif
	"'imgs/fast/fast-connect.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 23 68 142 25 166 237 15 29 91 114 130 121 174 222 234 34 223 88 209 72 70 152 84 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletFindTranspWhiteGif
	"'imgs/fast/fast-find.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 24 68 142 25 166 157 0 89 139 209 209 101 171 124 114 243 234 40 94 56 90 161 121 46 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletFolderTranspWhiteGif
	"'imgs/fast/fast-archives.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 153 204 102 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 24 68 142 25 166 237 127 128 132 178 218 100 51 206 117 115 22 125 224 34 66 38 117 2 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletGraphTranspWhiteGif
	"'imgs/fast/fast-bargraph.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 27 68 142 25 166 221 192 220 129 18 209 186 204 125 58 42 186 77 93 246 141 33 9 122 216 180 2 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletGuidesTranspWhiteGif
	"'imgs/fast/fast-guides.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 25 68 142 25 166 237 236 14 152 17 193 198 178 154 188 111 9 70 215 67 85 139 89 141 88 1 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletIssueTranspWhiteGif
	"'imgs/fast/fast-issue.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 84 166 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 26 68 142 25 166 141 0 99 76 178 82 246 240 170 51 43 120 113 26 120 133 156 105 57 142 182 22 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletLetterTranspWhiteGif
	"'imgs/fast/fast-newsletters.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 29 68 142 25 166 237 127 128 156 12 25 122 147 92 123 219 206 85 225 53 105 88 249 157 34 196 42 107 3 20 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletManTranspWhiteGif
	"'imgs/fast/fast-cof.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 22 68 142 25 166 221 0 29 130 76 82 137 21 141 184 246 124 120 22 56 102 64 1 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletNoteTranspWhiteGif
	"'imgs/fast/fast-riskfree.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 0 0 0 168 236 255 255 255 33 249 4 1 0 0 0 0 44 0 0 0 0 13 0 13 0 0 2 23 12 142 9 166 221 1 29 130 76 82 121 46 214 54 226 63 121 93 5 38 164 19 20 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletPencilTranspWhiteGif
	"'imgs/fast/fast-pencil.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 153 102 102 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 26 68 142 25 166 173 236 142 129 13 210 135 110 178 113 229 62 1 90 54 117 139 104 98 38 80 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletQuoteTranspWhiteGif
	"'imgs/fast/fast-first_imp.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 1 113 165 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 26 68 142 25 166 237 191 128 140 19 201 121 217 201 84 247 111 37 158 72 58 222 8 165 10 186 22 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletRelatedTranspWhiteGif
	"'imgs/fast/fast-related.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 84 166 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 26 68 142 25 166 157 0 153 139 70 190 232 14 197 106 195 230 89 154 7 146 157 153 129 169 86 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletSquareDownTranspWhiteGif
	"'imgs/fast/fast-down_arrow.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 84 166 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 23 68 142 25 166 237 159 128 132 107 66 201 30 214 120 183 158 125 214 69 145 20 80 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletSquareLeftWhiteGif
	"'imgs/fast/fast-left_bull.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 11 0 162 2 0 242 242 236 166 165 165 245 245 236 232 232 222 196 196 181 255 255 255 0 0 0 0 0 0 33 249 4 1 0 0 2 0 44 0 0 0 0 11 0 11 0 0 3 38 40 50 220 163 171 200 89 72 164 148 12 26 242 158 65 39 105 82 104 142 95 41 2 36 56 177 41 5 176 2 33 207 150 66 236 124 158 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletSquareRightTranspWhiteGif
	"'imgs/fast/fast-arrow.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 152 248 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 22 68 142 25 166 237 223 24 92 50 129 139 235 201 89 241 59 129 225 68 142 97 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletStarTranspWhiteGif
	"'imgs/fast/fast-fast50.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 23 68 142 25 166 237 175 24 4 212 209 139 35 174 109 191 202 69 34 68 78 37 80 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletToolsTranspWhiteGif
	"'imgs/fast/fast-tools_ico.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 24 68 142 25 166 157 0 87 108 176 58 52 111 190 146 119 255 105 140 55 130 74 233 0 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
bulletTriangleRightTranspWhiteGif
	"'imgs/fast/fast-interactive.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 128 1 0 255 255 255 0 0 0 33 249 4 1 0 0 1 0 44 0 0 0 0 13 0 13 0 0 2 24 68 142 25 166 173 236 16 128 113 210 102 111 202 250 228 184 76 96 56 46 229 216 109 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonBackWhiteGif
	"'imgs/awful-button-back.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 30 0 22 0 230 0 0 229 229 229 232 232 232 239 239 239 207 207 207 143 143 143 223 223 223 64 64 64 252 252 252 226 226 226 228 228 228 159 159 159 140 140 140 212 212 212 221 221 221 254 254 254 214 214 214 216 216 216 199 199 199 0 0 0 16 16 16 189 189 189 175 175 175 253 253 253 225 225 225 128 128 128 222 222 222 201 201 201 148 148 148 172 172 172 209 209 209 191 191 191 244 244 244 240 240 240 151 151 151 48 48 48 235 235 235 179 179 179 177 177 177 180 180 180 186 186 186 205 205 205 163 163 163 142 142 142 247 247 247 218 218 218 156 156 156 80 80 80 174 174 174 194 194 194 224 224 224 155 155 155 166 166 166 150 150 150 145 145 145 202 202 202 96 96 96 220 220 220 203 203 203 242 242 242 211 211 211 195 195 195 165 165 165 137 137 137 215 215 215 249 249 249 141 141 141 164 164 164 250 250 250 130 130 130 231 231 231 204 204 204 112 112 112 32 32 32 208 208 208 152 152 152 248 248 248 135 135 135 134 134 134 178 178 178 146 146 146 246 246 246 219 219 219 173 173 173 176 176 176 251 251 251 132 132 132 138 138 138 217 217 217 236 236 236 241 241 241 181 181 181 147 147 147 133 133 133 153 153 153 158 158 158 245 245 245 183 183 183 136 136 136 210 210 210 144 144 144 230 230 230 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 30 0 22 0 0 7 255 128 100 130 131 132 133 134 135 136 25 17 21 10 27 99 143 144 99 53 74 51 20 12 8 136 130 23 17 33 27 48 5 101 161 162 162 31 12 10 11 47 16 0 135 13 36 11 8 163 177 178 101 38 79 3 9 133 49 78 33 84 179 190 162 81 4 3 171 130 0 60 11 191 201 161 12 93 44 131 16 42 32 202 161 30 179 22 50 39 196 20 41 202 2 24 19 6 178 7 75 35 99 13 100 9 45 176 190 3 55 18 72 24 160 177 7 31 89 11 54 100 13 4 190 21 6 18 6 10 126 29 0 49 66 8 24 50 15 246 201 114 49 225 136 60 129 2 0 76 225 128 80 97 44 12 18 68 40 16 144 108 8 150 11 37 40 234 19 229 96 148 183 9 19 110 60 140 5 133 12 14 25 90 208 169 11 85 82 150 2 17 255 42 204 19 144 225 7 23 13 130 182 89 24 90 83 150 7 23 225 72 126 72 240 32 71 16 28 130 32 44 16 176 98 5 144 162 178 56 138 250 2 224 65 135 48 217 138 193 176 162 67 0 8 29 211 66 93 96 128 66 10 13 103 131 80 98 148 80 81 132 12 128 0 120 243 234 13 0 160 0 132 36 57 76 248 24 86 168 85 19 13 5 174 60 216 33 166 177 99 49 29 6 160 48 162 97 139 48 92 134 54 209 96 50 195 3 227 199 141 59 216 224 80 133 72 42 98 137 22 121 113 20 233 81 141 16 61 44 97 202 68 187 118 161 64 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonBeginWhiteGif
	"'imgs/awful-button-begin.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 22 0 22 0 230 0 0 239 239 239 143 143 143 207 207 207 159 159 159 223 223 223 128 128 128 221 221 221 254 254 254 212 212 212 228 228 228 214 214 214 191 191 191 226 226 226 32 32 32 140 140 140 216 216 216 225 225 225 252 252 252 253 253 253 199 199 199 189 189 189 64 64 64 222 222 222 201 201 201 16 16 16 232 232 232 172 172 172 96 96 96 209 209 209 151 151 151 240 240 240 175 175 175 244 244 244 156 156 156 141 141 141 242 242 242 247 247 247 235 235 235 174 174 174 163 163 163 155 155 155 194 194 194 220 220 220 180 180 180 142 142 142 166 166 166 224 224 224 202 202 202 150 150 150 218 218 218 205 205 205 177 177 177 179 179 179 186 186 186 203 203 203 145 145 145 219 219 219 138 138 138 144 144 144 173 173 173 135 135 135 134 134 134 0 0 0 248 248 248 246 246 246 195 195 195 217 217 217 80 80 80 165 165 165 236 236 236 133 133 133 215 215 215 181 181 181 250 250 250 176 176 176 146 146 146 158 158 158 152 152 152 153 153 153 249 249 249 245 245 245 251 251 251 164 164 164 231 231 231 183 183 183 132 132 132 130 130 130 208 208 208 204 204 204 147 147 147 241 241 241 137 137 137 178 178 178 136 136 136 148 148 148 229 229 229 255 255 255 230 230 230 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 22 0 22 0 0 7 255 128 97 130 131 132 133 134 135 22 19 31 3 55 77 45 20 8 12 135 131 16 19 29 94 41 4 96 32 8 3 14 38 15 95 135 6 52 14 12 96 168 169 168 43 75 2 9 133 46 92 29 81 170 181 96 56 1 2 162 130 95 65 14 182 192 8 78 49 131 15 44 30 192 182 18 40 53 187 20 39 181 11 182 11 17 63 37 58 6 97 9 33 167 168 11 21 24 170 3 13 67 17 32 90 14 47 97 6 1 168 4 27 13 3 0 222 21 21 31 96 17 30 37 82 84 97 10 237 2 48 12 80 21 160 129 128 84 17 0 124 81 162 193 95 59 48 227 54 104 2 3 160 64 131 2 243 146 20 129 48 163 33 187 84 7 10 96 168 144 10 192 6 31 5 128 132 81 129 2 137 54 110 168 14 80 44 80 139 128 8 0 22 142 24 185 32 232 153 132 159 50 109 29 0 145 64 129 13 17 42 4 61 112 0 128 4 137 39 65 85 65 249 162 128 67 151 102 188 82 228 24 1 192 195 8 91 16 16 200 216 1 131 216 32 23 51 88 76 9 243 37 131 219 47 4 52 30 92 177 177 98 139 174 66 164 122 92 32 32 164 170 0 25 88 46 100 201 245 202 80 37 24 60 90 44 224 240 66 67 21 43 160 118 77 74 244 129 201 141 14 68 32 73 154 196 185 115 32 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: 'mivsek 8/21/2007 11:30'!
buttonCloseGif
	" '/home/mivsek/vw7.2/image/imgs/yuiForum/tab-close.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 13 0 135 0 0 77 87 90 115 116 115 64 255 64 133 143 143 138 145 144 175 181 179 158 190 245 192 218 249 198 221 250 204 225 250 211 229 251 217 232 252 223 236 252 228 230 224 230 240 253 236 244 253 242 247 254 249 251 254 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 3 0 0 2 0 44 0 0 0 0 13 0 13 0 0 8 105 0 5 24 24 72 176 160 1 129 13 34 40 92 184 176 193 64 8 16 35 74 132 48 240 193 131 0 5 44 62 40 48 192 226 64 7 14 10 0 40 16 114 36 200 129 12 82 138 36 48 50 37 131 129 11 98 46 96 73 64 230 130 129 10 114 174 28 153 83 193 192 4 9 68 22 8 58 18 232 64 4 8 6 20 64 138 128 35 210 129 7 162 74 157 122 0 42 85 170 7 13 106 21 16 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: 'mivsek 8/21/2007 11:30'!
buttonCommentPng
	"'imgs/wikimatrix-comment.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 4 103 65 77 65 0 0 175 200 55 5 138 233 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 1 166 73 68 65 84 120 218 98 252 255 255 63 3 37 0 32 128 152 24 40 4 0 1 196 2 99 68 118 236 20 2 82 147 129 56 4 136 217 240 232 217 13 196 89 203 43 220 239 128 56 0 1 196 0 242 2 8 71 180 239 216 184 242 224 173 255 191 255 252 253 143 15 108 57 121 255 63 80 237 109 32 102 3 233 3 8 32 22 168 237 60 64 202 59 196 86 133 225 243 15 6 134 159 127 254 51 252 5 6 205 191 127 12 96 250 47 136 254 247 159 129 17 164 200 76 129 225 248 245 23 42 119 159 127 52 0 114 79 1 4 16 204 11 66 34 124 28 204 76 140 140 12 63 126 255 103 248 247 31 73 35 216 160 255 12 127 254 65 12 4 1 62 46 176 15 69 65 4 64 0 177 160 123 16 166 241 31 146 205 8 87 96 6 8 64 0 193 98 225 221 155 79 63 128 106 255 51 176 48 65 20 254 1 219 10 177 25 134 25 24 32 81 254 229 199 111 176 30 16 1 16 64 96 3 128 33 250 5 72 109 93 115 248 14 131 8 48 52 20 132 25 25 148 69 152 24 212 196 152 24 120 216 25 25 254 254 101 96 144 228 99 100 208 147 102 102 216 122 234 1 195 237 167 31 64 49 112 1 164 23 32 128 24 97 9 9 41 26 195 129 152 25 36 230 106 40 203 144 228 174 5 150 255 240 229 39 195 186 163 119 25 118 159 127 124 5 200 13 132 69 35 64 0 193 163 17 27 6 70 213 157 231 239 190 254 159 187 227 42 40 234 190 3 113 45 186 26 128 0 98 196 149 148 129 46 234 117 212 151 41 218 127 241 201 87 32 183 22 104 99 63 54 117 0 1 132 213 0 160 102 37 32 181 7 136 219 128 26 231 224 75 202 0 1 196 72 105 102 2 8 32 138 51 19 64 0 81 108 0 64 128 1 0 173 158 253 27 90 6 162 174 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonEditGif
	"'/home/mivsek/projekti/viart/edit.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 20 0 247 0 0 0 0 0 255 255 255 0 0 8 0 12 35 5 25 57 9 23 45 0 9 22 21 35 54 27 45 68 27 42 61 37 56 77 37 52 68 44 61 80 40 61 82 38 56 75 52 73 95 53 74 95 59 79 99 33 44 55 84 110 136 58 79 99 60 82 102 61 82 101 67 89 110 46 60 73 64 83 101 74 95 114 31 44 55 36 47 56 83 107 128 81 103 121 63 80 94 80 101 119 117 143 164 62 75 86 30 39 46 35 45 53 88 112 131 81 103 120 96 121 140 99 124 143 92 115 132 50 62 71 97 120 137 105 129 147 70 85 96 60 78 91 114 143 164 88 111 127 99 124 141 105 131 149 104 128 145 97 119 135 95 117 132 118 145 163 110 134 150 107 128 142 105 131 148 56 70 79 45 56 63 116 144 161 60 74 83 112 138 154 62 76 85 79 97 108 108 132 147 125 152 169 101 122 135 118 142 157 65 80 89 111 136 150 121 147 162 139 168 184 36 43 47 124 146 158 114 139 152 60 73 80 120 146 159 126 152 166 93 112 122 155 184 199 129 153 165 63 76 82 142 169 181 131 156 167 93 111 119 131 155 166 152 178 190 142 167 178 145 170 181 143 171 183 139 166 177 164 194 207 145 172 183 149 176 187 146 172 183 147 172 182 177 203 214 149 176 186 135 158 166 149 172 180 108 124 130 148 174 183 158 184 193 162 188 197 157 183 191 177 205 214 147 174 182 172 201 209 168 196 204 161 188 196 173 201 209 176 204 212 144 166 172 163 190 197 185 215 223 168 195 202 193 223 231 178 206 213 52 60 62 171 199 205 161 187 193 208 240 247 96 111 114 181 208 214 183 212 217 193 222 227 145 166 170 177 203 207 183 209 212 207 235 238 200 229 232 156 179 181 216 244 246 162 185 186 37 39 38 41 46 42 83 88 82 48 50 39 110 111 95 97 97 76 72 71 53 255 219 13 95 87 53 255 204 11 255 201 12 255 203 13 255 195 11 255 197 11 255 199 11 255 195 12 255 197 12 255 199 12 107 78 0 218 159 1 184 134 1 255 191 4 239 175 4 228 167 4 241 178 5 230 169 5 255 189 10 255 192 10 255 193 10 125 93 5 109 81 5 255 190 12 255 191 12 255 192 12 255 193 12 175 131 10 125 94 7 120 90 8 130 99 11 116 92 23 61 51 23 211 152 0 148 105 0 131 94 0 123 87 0 227 165 1 209 152 1 190 138 1 227 166 4 226 165 4 230 168 5 255 188 10 160 118 7 119 90 13 143 100 0 116 79 0 111 78 0 110 76 0 63 44 0 36 24 0 41 39 35 41 23 0 7 3 0 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 198 0 44 0 0 0 0 20 0 20 0 0 8 255 0 141 9 28 72 144 32 160 130 8 19 254 249 226 199 80 194 135 198 198 24 105 242 4 98 66 47 65 106 88 36 56 40 80 158 37 102 86 108 52 70 136 75 4 49 103 168 240 24 233 36 1 177 98 100 220 100 1 242 80 24 169 85 172 126 101 226 181 8 75 154 27 16 27 113 146 52 169 210 167 67 97 206 200 49 17 99 8 66 52 35 0 64 50 149 202 211 48 61 133 96 60 0 65 3 7 193 41 107 230 32 128 101 9 213 45 69 80 250 192 73 1 193 194 12 21 2 219 68 17 244 102 193 46 93 169 64 33 154 16 34 209 43 7 21 52 164 64 98 108 79 14 58 124 172 144 176 117 41 84 43 70 143 84 105 114 165 160 129 7 34 27 140 233 240 129 167 206 157 94 167 80 137 170 133 139 146 163 96 2 118 108 65 49 176 8 11 59 113 70 200 138 148 10 211 168 77 177 102 1 51 240 162 96 143 11 106 202 248 234 148 139 86 41 2 17 50 48 72 146 240 71 137 42 18 10 12 56 128 65 137 16 23 45 32 138 144 113 133 77 23 45 54 62 112 14 24 201 228 4 152 35 20 70 18 148 210 97 99 64 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonEndWhiteGif
	"'imgs/awful-button-end.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 22 0 22 0 230 0 0 143 143 143 254 254 254 207 207 207 239 239 239 253 253 253 223 223 223 159 159 159 226 226 226 128 128 128 221 221 221 191 191 191 228 228 228 216 216 216 212 212 212 214 214 214 32 32 32 140 140 140 64 64 64 189 189 189 199 199 199 251 251 251 96 96 96 16 16 16 201 201 201 175 175 175 151 151 151 209 209 209 232 232 232 172 172 172 247 247 247 225 225 225 177 177 177 145 145 145 156 156 156 166 166 166 179 179 179 224 224 224 203 203 203 163 163 163 235 235 235 222 222 222 186 186 186 180 180 180 250 250 250 155 155 155 150 150 150 142 142 142 248 248 248 249 249 249 242 242 242 240 240 240 220 220 220 141 141 141 202 202 202 174 174 174 194 194 194 205 205 205 218 218 218 231 231 231 134 134 134 217 217 217 130 130 130 173 173 173 195 195 195 148 148 148 153 153 153 204 204 204 181 181 181 183 183 183 219 219 219 138 138 138 215 215 215 236 236 236 152 152 152 246 246 246 252 252 252 132 132 132 147 147 147 133 133 133 241 241 241 144 144 144 244 244 244 176 176 176 136 136 136 80 80 80 178 178 178 146 146 146 164 164 164 0 0 0 245 245 245 165 165 165 137 137 137 158 158 158 135 135 135 208 208 208 229 229 229 255 255 255 230 230 230 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 22 0 22 0 0 7 255 128 97 130 131 132 133 134 135 40 19 24 6 32 73 34 18 13 7 135 131 30 19 25 64 55 5 96 81 13 6 16 54 12 95 135 9 35 16 7 96 168 169 168 42 86 2 11 133 36 85 25 20 170 181 96 69 0 2 162 130 95 63 16 182 192 13 65 57 131 12 46 50 192 182 4 44 41 187 18 38 96 4 10 182 211 168 1 47 39 80 9 97 11 33 167 4 84 15 6 170 22 17 213 29 79 16 53 97 9 0 168 4 96 24 17 230 168 3 6 15 21 5 1 72 87 68 97 14 238 192 44 73 37 224 65 64 84 6 44 8 56 33 133 195 63 119 20 86 128 25 128 224 1 130 1 168 10 84 16 7 70 199 7 135 237 80 41 65 128 165 2 70 84 17 44 32 8 0 6 198 12 22 67 184 121 3 243 130 134 38 85 23 193 4 32 112 224 136 147 11 130 158 17 32 64 129 165 173 0 43 22 56 40 65 99 134 32 6 16 6 116 232 0 195 168 170 44 95 28 104 152 210 140 215 13 35 49 6 200 136 97 203 67 3 28 62 90 16 27 68 226 131 11 29 97 58 190 108 152 251 165 0 3 47 37 84 108 209 85 136 212 142 11 5 120 104 21 128 67 200 133 38 185 94 25 170 212 162 139 8 5 26 106 112 96 210 3 212 174 73 137 48 112 1 145 65 11 36 73 147 66 139 14 4 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonNextWhiteGif
	"'imgs/awful-button-next.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 30 0 22 0 230 0 0 229 229 229 232 232 232 239 239 239 207 207 207 143 143 143 223 223 223 64 64 64 252 252 252 226 226 226 228 228 228 159 159 159 140 140 140 212 212 212 221 221 221 214 214 214 216 216 216 0 0 0 16 16 16 225 225 225 189 189 189 253 253 253 128 128 128 254 254 254 199 199 199 175 175 175 222 222 222 201 201 201 191 191 191 148 148 148 172 172 172 209 209 209 240 240 240 244 244 244 151 151 151 48 48 48 177 177 177 179 179 179 145 145 145 174 174 174 194 194 194 163 163 163 180 180 180 247 247 247 156 156 156 220 220 220 166 166 166 203 203 203 142 142 142 218 218 218 155 155 155 80 80 80 235 235 235 224 224 224 186 186 186 205 205 205 96 96 96 150 150 150 202 202 202 242 242 242 211 211 211 195 195 195 217 217 217 137 137 137 178 178 178 181 181 181 138 138 138 246 246 246 133 133 133 146 146 146 134 134 134 153 153 153 32 32 32 236 236 236 250 250 250 219 219 219 251 251 251 112 112 112 241 241 241 208 208 208 173 173 173 147 147 147 158 158 158 249 249 249 215 215 215 176 176 176 132 132 132 135 135 135 231 231 231 141 141 141 164 164 164 136 136 136 245 245 245 152 152 152 165 165 165 130 130 130 248 248 248 183 183 183 204 204 204 210 210 210 144 144 144 230 230 230 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 30 0 22 0 0 7 255 128 100 130 131 132 133 134 135 136 25 23 24 10 28 99 143 144 99 37 92 45 19 12 8 136 130 18 23 33 28 39 5 101 161 162 162 32 12 10 11 38 15 0 135 13 36 11 8 163 177 178 101 41 68 3 9 133 52 63 33 75 179 190 162 74 4 3 171 130 0 60 11 191 201 161 12 70 48 131 15 47 31 179 27 202 161 20 49 53 196 19 40 190 6 17 21 2 191 7 95 51 99 13 100 9 43 176 179 5 21 71 16 55 3 179 7 32 77 11 57 100 13 4 213 10 6 16 6 24 98 29 248 48 35 11 24 50 14 246 85 43 83 128 73 4 25 163 14 8 0 64 165 3 66 133 202 4 40 16 1 161 194 168 36 72 36 140 176 168 79 148 5 118 55 34 124 11 55 74 8 25 22 49 128 160 83 23 234 228 40 12 254 68 40 152 39 32 195 148 33 26 4 109 163 64 212 102 40 3 50 168 205 178 0 34 129 3 23 88 88 8 122 176 64 128 10 21 82 70 177 244 181 5 128 3 15 90 178 21 59 17 68 135 128 15 58 22 150 145 192 192 198 19 28 206 82 6 209 24 241 226 10 25 0 1 242 234 221 27 0 64 129 7 78 92 164 240 49 172 80 171 34 26 10 244 112 176 67 140 227 199 98 60 12 176 17 70 3 20 97 184 12 109 194 97 165 197 134 198 144 29 123 200 209 161 138 151 84 196 18 45 138 226 40 210 163 18 33 186 88 194 148 169 182 237 66 129 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
buttonSquareYellowGif
	"'imgs/dars-kvadrat.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 9 0 9 0 128 0 0 50 138 66 251 171 61 33 249 4 0 0 0 0 0 44 0 0 0 0 9 0 9 0 0 2 15 132 143 161 27 198 235 94 3 114 214 248 48 67 28 20 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-buttons' stamp: ' 21/4/07 10:33'!
buttonUpWhiteGif
	"'imgs/awful-button-up.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 22 0 22 0 198 96 0 239 239 239 143 143 143 207 207 207 159 159 159 223 223 223 128 128 128 221 221 221 254 254 254 212 212 212 228 228 228 214 214 214 191 191 191 226 226 226 32 32 32 140 140 140 216 216 216 225 225 225 252 252 252 253 253 253 199 199 199 189 189 189 64 64 64 222 222 222 201 201 201 16 16 16 232 232 232 172 172 172 96 96 96 209 209 209 151 151 151 240 240 240 175 175 175 244 244 244 156 156 156 141 141 141 242 242 242 247 247 247 235 235 235 174 174 174 163 163 163 155 155 155 194 194 194 220 220 220 180 180 180 142 142 142 166 166 166 224 224 224 202 202 202 150 150 150 218 218 218 205 205 205 177 177 177 179 179 179 186 186 186 203 203 203 145 145 145 219 219 219 138 138 138 144 144 144 173 173 173 135 135 135 134 134 134 0 0 0 248 248 248 246 246 246 195 195 195 217 217 217 80 80 80 165 165 165 236 236 236 133 133 133 215 215 215 181 181 181 250 250 250 176 176 176 146 146 146 158 158 158 152 152 152 153 153 153 249 249 249 245 245 245 251 251 251 164 164 164 231 231 231 183 183 183 132 132 132 130 130 130 208 208 208 204 204 204 147 147 147 241 241 241 137 137 137 178 178 178 136 136 136 148 148 148 229 229 229 255 255 255 230 230 230 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 44 0 0 0 0 22 0 22 0 0 7 254 128 97 130 131 130 9 6 10 10 6 9 132 140 132 95 15 20 33 1 147 1 33 20 15 95 141 131 46 41 14 39 12 96 161 96 12 39 44 65 46 154 6 51 57 0 18 162 2 162 30 14 92 6 140 16 52 44 35 36 174 96 3 24 4 162 96 29 52 16 132 19 61 83 0 187 7 7 13 3 27 193 81 14 19 131 22 48 23 97 30 79 7 96 5 208 13 11 193 12 29 22 130 19 60 4 95 35 220 0 191 189 21 193 96 94 212 97 31 45 66 25 162 5 240 96 237 225 162 41 62 8 98 178 64 65 190 120 8 67 17 24 32 232 6 7 14 7 69 1 8 144 16 204 13 65 29 94 8 248 18 175 0 56 132 32 154 8 34 162 65 6 48 137 13 4 240 11 134 160 133 32 10 85 176 60 8 182 161 0 152 10 3 226 13 160 32 8 129 149 11 87 32 64 57 64 192 7 0 48 31 26 196 115 128 64 16 3 19 89 108 32 248 2 66 132 205 80 67 254 129 89 97 130 193 160 7 1 86 200 80 144 0 0 144 36 17 210 70 8 133 99 201 3 71 71 2 182 236 224 160 160 92 17 0 30 64 252 144 128 32 192 70 70 9 4 192 232 98 227 136 10 8 95 74 104 41 129 194 137 128 69 141 190 196 168 33 194 8 138 25 74 164 56 208 81 35 70 38 77 130 190 168 184 128 68 131 6 42 47 12 124 6 205 154 117 32 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendar1Gif
	"'imgs/calendar1.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 19 0 20 0 179 0 0 0 0 0 255 255 255 2 100 199 2 97 194 4 120 237 57 153 251 121 188 253 204 229 254 225 240 255 70 162 251 252 2 2 250 250 250 255 255 255 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 12 0 44 0 0 0 0 19 0 20 0 0 4 93 144 201 73 107 77 56 235 141 89 26 96 40 142 32 54 20 104 170 174 3 38 144 112 136 25 72 109 223 248 49 35 4 193 251 189 223 79 151 160 17 22 60 228 49 153 36 210 112 80 155 83 24 84 40 168 132 233 114 169 80 122 167 209 168 22 72 198 106 189 204 237 2 28 206 237 130 240 114 239 156 70 31 217 109 105 194 195 233 103 44 128 128 17 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendar2Gif
	"'imgs/calendar2.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 20 0 230 0 0 0 0 0 255 255 255 73 72 73 58 57 59 62 62 63 58 58 59 84 84 85 78 78 79 72 72 73 98 98 99 91 91 92 16 49 249 92 135 223 137 178 244 116 184 250 145 198 250 57 58 59 115 184 249 115 185 249 116 184 249 116 185 249 121 187 249 128 191 249 136 195 249 137 195 249 145 199 250 154 203 250 154 204 250 164 208 249 174 213 250 174 213 249 183 218 250 192 222 250 201 226 250 201 227 250 208 230 250 215 233 249 208 231 250 215 234 250 222 237 250 221 236 249 226 239 250 208 220 223 66 67 67 105 106 106 98 99 98 32 117 2 47 167 5 207 207 205 197 197 195 182 182 180 182 182 181 178 178 177 197 196 195 63 62 62 85 84 84 114 113 113 146 145 145 164 164 164 145 145 145 129 129 129 127 127 127 121 121 121 106 106 106 91 91 91 67 67 67 58 58 58 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 67 0 44 0 0 0 0 20 0 20 0 0 7 189 128 67 130 131 132 133 134 48 136 137 138 139 137 67 49 41 144 145 146 147 145 53 50 40 46 47 154 155 156 156 46 39 51 58 36 157 164 157 38 58 57 37 42 171 172 173 174 42 35 59 60 34 61 181 182 183 184 61 33 60 62 32 61 52 1 191 193 192 194 197 32 62 56 31 61 1 193 204 203 205 208 61 31 56 44 30 185 182 11 217 11 182 29 63 45 28 197 196 192 11 12 13 11 196 28 9 10 26 207 237 204 11 13 230 206 27 64 55 15 215 181 218 219 181 25 6 7 23 225 134 9 44 134 225 128 0 11 238 162 57 115 102 1 193 138 10 248 240 85 8 98 35 66 4 10 23 39 104 140 224 64 227 4 139 31 37 16 24 82 160 100 1 33 5 6 160 52 201 18 66 1 67 48 99 202 156 57 36 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendar3Gif
	"'imgs/calendar3.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 20 0 179 0 0 0 0 0 255 255 255 4 111 231 57 148 251 178 178 177 255 0 0 253 125 125 252 215 215 127 127 127 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 9 0 44 0 0 0 0 20 0 20 0 0 4 97 48 137 73 171 165 50 232 205 251 158 193 32 142 100 57 4 160 169 142 168 224 189 29 136 204 116 109 35 109 128 16 58 191 247 64 156 76 131 211 17 143 70 217 109 86 104 22 104 185 159 148 87 48 28 10 190 40 178 88 56 92 143 202 165 243 57 139 250 206 193 236 208 200 46 186 163 203 184 57 77 23 186 222 237 45 60 126 203 193 254 2 18 23 131 21 9 17 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendar4Gif
	"'imgs/calendar4.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 20 0 230 0 0 0 0 0 255 255 255 116 184 250 145 198 250 9 134 252 9 135 252 14 137 252 20 141 252 27 143 252 27 144 252 34 147 252 34 148 252 39 149 252 39 150 252 40 149 252 40 150 252 42 151 252 50 154 252 50 155 252 59 159 252 67 163 252 68 163 252 76 167 252 76 168 252 84 171 252 86 172 252 86 173 252 87 172 252 87 173 252 92 175 252 99 178 252 99 179 252 106 182 252 112 185 252 117 187 252 115 184 249 115 185 249 116 184 249 116 185 249 121 189 252 121 187 249 128 191 249 136 195 249 137 195 249 145 199 250 154 203 250 154 204 250 164 208 249 174 213 250 174 213 249 183 218 250 192 222 250 201 226 250 201 227 250 208 230 250 215 233 249 208 231 250 215 234 250 222 237 250 221 236 249 226 239 250 208 220 223 252 132 14 251 172 95 251 226 201 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 65 0 44 0 0 0 0 20 0 20 0 0 7 202 128 65 130 131 132 133 134 39 136 137 138 139 137 65 34 60 144 145 146 147 145 34 33 59 25 28 28 25 153 27 25 26 28 27 158 27 154 58 33 32 55 15 14 13 170 15 13 175 15 12 177 178 12 57 32 31 56 61 186 187 188 189 61 54 30 29 53 6 196 197 198 199 6 52 29 24 51 6 49 1 206 208 207 209 212 51 24 23 50 6 1 208 219 218 220 223 6 50 22 20 49 200 197 62 232 62 197 48 21 19 47 212 211 207 62 63 64 62 211 47 19 18 45 222 252 219 62 64 245 186 185 136 0 97 128 57 98 233 212 17 99 1 97 129 10 120 210 34 82 91 161 0 65 138 126 224 186 117 75 145 224 0 138 131 7 81 28 48 48 98 132 9 147 37 82 142 16 144 178 68 73 151 36 12 4 41 64 179 38 77 2 54 115 26 218 201 179 167 207 32 129 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendar5Gif
	"'imgs/calendar5.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 19 0 20 0 179 0 0 0 0 0 255 255 255 1 130 248 1 104 199 2 76 145 5 128 241 107 183 253 164 209 251 206 207 207 252 1 1 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 10 0 44 0 0 0 0 19 0 20 0 0 4 100 80 169 51 43 189 85 202 114 184 239 160 167 21 195 81 158 102 122 22 219 224 190 112 92 32 10 25 223 239 92 227 188 94 24 192 160 112 232 11 24 143 200 100 17 41 8 52 159 1 66 96 153 172 26 139 9 167 22 218 148 82 173 74 90 33 144 229 110 163 83 49 216 138 61 155 189 234 117 184 70 118 107 145 95 121 122 83 232 251 255 127 52 26 8 132 133 134 134 26 17 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
calendarButtonGif
	^self calendar2Gif! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
commentsSmallGif
	"a small bubble"
	"'imgs/itp-comments.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 11 0 162 5 0 171 171 171 246 246 246 212 212 212 255 255 255 148 148 148 255 255 255 0 0 0 0 0 0 33 249 4 1 0 0 5 0 44 0 0 0 0 11 0 11 0 0 3 38 88 186 188 244 144 184 65 71 8 66 18 42 122 199 143 117 141 32 33 96 222 153 21 38 9 58 80 7 72 13 43 215 138 73 227 79 145 0 0 59 )! !

!DefaultWebStyle methodsFor: 'layout' stamp: ' 21/4/07 10:33'!
contactElement

	| element |
	element := WebElement new.
	element 
		addText: '<font face=helvetica size=-2>Send comments to: <br>'; 
		addText: '<b><a href="mailto:info@eranova.si">';
		addText: '<font face=helvetica size=-1>info@eranova.si</font></a></b></font>'.
	^element! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
copyIconGif
	"'imgs/jure-copy.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 12 0 196 0 0 0 0 0 255 255 255 255 0 0 255 16 16 255 32 32 255 48 48 255 64 64 255 80 80 255 96 96 255 112 112 255 128 128 255 143 143 255 159 159 255 175 175 255 191 191 255 207 207 255 223 223 255 239 239 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 18 0 44 0 0 0 0 11 0 12 0 64 5 61 96 32 142 164 152 8 2 226 44 40 34 66 104 17 5 144 161 60 163 130 238 133 136 160 142 210 232 113 32 8 108 179 18 100 161 80 52 72 58 1 65 97 20 48 2 44 171 48 96 0 138 20 135 43 109 176 139 37 183 163 16 0 59 )! !

!DefaultWebStyle methodsFor: 'layout'!
copyrightElement
	| element |
	element := WebElement new.
	element
		addLinkTo: 'http://www.eranova.si/' text: '<font face=helvetica size=-1>(C) Eranova d.o.o</font>'.
	^element! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
cornerDashboardLeftGif
	"'imgs/fast/fast-dashboard_left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 7 0 24 0 128 0 0 127 160 177 255 255 255 33 249 4 1 0 0 0 0 44 0 0 0 0 7 0 24 0 0 2 29 140 143 6 144 139 203 14 124 78 86 117 195 180 17 119 157 109 30 245 137 96 25 166 232 7 54 172 81 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
cornerDashboardRightGif
	"'imgs/fast/fast-dashboard_right.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 7 0 24 0 145 0 0 0 0 0 255 255 255 255 255 255 0 0 0 33 249 4 1 0 0 2 0 44 0 0 0 0 7 0 24 0 0 2 28 140 31 34 152 139 234 12 124 138 198 118 231 209 178 110 223 101 32 102 149 159 136 154 29 51 50 71 1 0 59 )! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'jm 11/18/2010 14:38'!
css1Body
^'
body {
	margin: 0;
	padding: 0;
	font-family: verdana, sans-serif;
	font-color: #666;
/*	font-size: 90%; */
	font-size: 11pt;
	line-height: 1.2em;
	background: #fff url("/img/leftstripegif.gif") repeat-y;
	}
#container {
	position: relative;
	width: 800px;
	margin: 0 0 0 8px;
	padding: 0;
	}
#containerPadded {    /* for printing header, has no efect here */
	position: relative;
	width: 800px;
	margin: 0 0 0 8px;
	padding: 0;
	}
#content {
	margin: 10px 15px 10px 10px;
	padding-top: 20px;
	font-size: 90%;
	text-align: left;
	margin-top/* */: 0; /* IE5.0 Win wont see this - fixes weird float bug for hp */
	}
html>body #content  {
	margin-top: 0;
	}
#content {
	margin-left: 135px;
	padding-left: 0;
	}

/* through all width of page, in navigation space too */
#contentWide {
	margin: 10px 15px 10px 10px;
	padding-top: 20px;
	font-size: 90%;
	text-align: left;
	margin-top/* */: 0; /* IE5.0 Win wont see this - fixes weird float bug for hp */
	}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css21Text
^'
h1, h2, h3, h4, h5, h6 {
	color: Black;
	background-color: transparent;
	font-family: Helvetica, Arial, sans-serif;
	font-size: 100%;
	font-weight: normal;
	margin: 0;
	padding-top: 0.5em;
      border-bottom: 1px solid #8cacbb;
}
h1 {
	margin-top: 10px;
	padding-top: 10px;
	font-size: 150%;
    }
h1 span {
	color: #999;
	}
h2 {
	font-size: 130%;
	font-weight: bold;
	border-bottom: none;
    }
h3 {
	margin: .7em 0 .7em 0;
	font-size: 120%;
	font-weight: bold;
	border-bottom: none;
     }
h4 {
	margin: .5em 0 .5em 0;
	font-size: 100%;
	border-bottom: none;
	font-weight: bold;
    }
h5 {
	font-size: 90%;
	border-bottom: none;
	font-weight: bold;
    }
pre	{
	border-left:3px solid #CCCCCC;
	margin-left:2em;
	padding:0.5em;
	}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css22Links
^'
a:link { color: #369; text-decoration: none}
a:visited {  color: #369; text-decoration: none}
a:active {  color:  #f90; text-decoration: none}
a:hover { text-decoration:underline; }
a.helpLink { }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'janko 10/28/2011 12:04'!
css231Validation
	"input validation error widget WebValidationError, used in FormElement validation "
^'
div.validationError {font-weight: bold; color: #f40000; }
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css23Inputs
^'
fieldset {
	border: 1px solid #ccc;
	margin: 1em 0em 1em 0em;
	padding: 0em 1em 1em 1em;
	line-height: 1.5em;
	color: #666;
}
fieldset td {
	color: #666;
}
legend {
	background: White;
	padding: 0.5em;
	font-size: 90%;
	color: #666;
}
form {
	border: none;
	margin: 0;
	height: 100%;
}
input, button {
	font-family: "Lucida Grande", Verdana, Lucida, Helvetica, Arial, sans-serif;
	font-size: 80%;
	visibility: visible;
	border: 1px solid #ccc;
	background: #f5f5f5;
	color: #666;
	vertical-align: middle;
	padding: 1px; spacing: 2px;
	padding-left: 0px; padding-right: 0px;
	spacing-left: 0px; spacing-right: 0px;
}
textarea {
	font-family: "Lucida Grande", Verdana, Lucida, Helvetica, Arial, sans-serif;
	font-size: 80%;
	visibility: visible;
	border: 1px solid #ccc;
	background: #f5f5f5;
	color: #666;
	vertical-align: middle;
	padding: 2px;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css24WebGrid
	^'
table.webGrid {
	border: 1px solid #E4E4E4;
	border-collapse: collapse;
	margin-bottom: 4px;
	font-size: 12px;
	color: #484849;
	background-color: #FFFFFF;
}
table.webGrid tr {}
table.webGrid td {border-top: 1px solid #F8F8F8;}
table.webGrid td input {font-size: 9pt;}

table.webGrid tbody tr:hover {background-color:#ffffdd;}

table.webGrid th {
	padding: 4px; 
	background: #EEEEEE;
}
table.webGrid th a {color: #2A5685;}
table.webGrid th a:hover {color: #C61A1A;}

table.webGrid tr.red td, tr.red a { color: red; }
table.webGrid tr.green td, tr.green a { color: forestgreen; }
table.webGrid tr.blue td, tr.blue a { color: blue; }
table.webGrid tr.yellow td, tr.yellow a { color: yellow; }
table.webGrid tr.gray td, tr.gray a { color: darkgray; }
table.webGrid tr.summary td, tr.summary a { color: darkgray; font-weight: bold }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css25AutocompleteField
^'
div.auto_complete {
      position:absolute;
      width:350px;
	background-color: #fff
}
div.auto_complete ul {
	border:1px solid #888;
	background-color: #fff;
	margin:0;
	padding:0;
	width:100%;
	list-style-type:none;
}
div.auto_complete ul li {
	margin:0;
	padding:3px;
}
div.auto_complete ul li.selected { 
	background-color: #ffb; 
}
div.auto_complete ul strong.highlight { 
	color: #800; 
	margin:0;
	padding:0;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css26Popup
^'
div.popup {
    position: absolute;
    float: left;
    z-index: 10;
    background-color: #d5e4f2;
    font-family: arial;
    border: 1px solid #6599cd;
    padding: 15px;
    margin: 0px 6px 6px -6px !!important;
    margin: 0;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css27Menus
	"AnyLink dropdown and popit menus"
	"http://www.dynamicdrive.com/dynamicindex1/dropmenuindex.htm"
^'
#dropmenudiv{
	position:absolute;
	background-color: white;
	border:1px solid black;
	border-bottom-width: 0;
	font:normal 12px Verdana;
	line-height:18px;
	z-index:100;
}
#dropmenudiv a{
	width: 100%;
	display: block;
	text-indent: 3px;
	border-bottom: 1px solid black;
	padding: 1px 0;
	text-decoration: none;
}

#dropmenudiv a:hover{ /*hover background color*/
	background-color: #CCFF9D;
}
#popitmenu {
	position: absolute;
	background-color: white;
	border:1px solid black;
	font: normal 12px Verdana;
	line-height: 18px;
	z-index: 100;
	visibility: hidden;
}
#popitmenu a {
	text-decoration: none;
	padding-left: 6px;
	color: black;
	display: block;
}
#popitmenu a:hover{ /*hover background color*/
	background-color: #CCFF9D;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css28Dialog
	"for WebDialog info or confirmation widget"
^'
.dialog {}
.dialog-button { }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'np 10/3/2008 20:03'!
css3Header
^'
#banner {
	height: 0px;
	width: 780px;
	margin: 0 0px 0px 0px; 
	padding: 0px 0; 
	background: #fff;
	text-align: center;
	white-space: nowrap;
	}
#banner div {
	padding: 0;
	border-bottom: none;
	}
#header {
	height: 95px;
	width: 780px;
	border: none;
	}
#logo {
	height: 95px;
	position: absolute;
	top: 2px;
	left: 5px;
	right: auto;
	color: #fff;
	white-space: nowrap;
	z-index: 1000;
	}
#dashboard {
	height: 24px;
	width: 780px;
	margin: 4px 0;
	line-height: 23px;
	font-size: 10px;
	background: #F0F0E7 url(/img/cornerdashboardleftGif.gif) no-repeat;
	color: #666;
	}
#switcher {
	position: absolute; 
	vertical-align: middle;
	top: 102px;
	right: 45px;
	margin: 0;
/*	z-index: 1001; */
	}
#switcher a b { position: relative; bottom: 4px; right: 10px}
#switcher a img {
	background: #999;
	}
#switcher a:hover img {
	background: #000;
	}

'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'np 10/3/2008 20:06'!
css40NavigationBar
	^'
#navigation {
	position: absolute;
	width: 120px;
	top: 135px;
	margin-right: 0;
	font-size: 80%;
	color: #333;
	left: 8px; /* fixes weird IE5.0/win absolute position within relative */
	left/* */: 0;
	background: #F0F0E7 url("/img/leftcornergif.gif") no-repeat top right;
	}
html>body #navigation  {
	left: 0;
	}
#navigation div {
	padding: 10px;
	font-size: 100%;
	border-bottom: 1px solid #fff;
	}
#navigation div div {
	padding: 0;
	}
#navigation .boxGrey {
	background: #fff;
	}
#navigation h3 {
	padding: 0;
	margin: 0;
	margin-bottom: 6px;
	font-family: verdana, sans-serif;
	font-size: 100%;
	font-weight: bold;
	letter-spacing: 0;
	color: #AAA799;
      padding-top: 0;
      border-bottom: 0;
	}
#navigation h3 img {
	vertical-align: middle;
	display: inline;
	background: #AAA799;
	}
#navigation p {
	margin: 3px 0 0 0;
	line-height: 1.2em;
	}
#navigation ul, .styledBox ul {
	margin: 0;
	padding: 0;
	list-style: none;
	}
#navigation li, .styledBox li {
	background: url("/img/bulletsquareleftwhitegif.gif") no-repeat 0 1px;
	padding: 0 0 6px 16px;
	line-height: 1em;
	}
button {
	visibility: visible;
	border: 1px solid #ccc;
	background: #f5f5f5;
	color: #666;
	vertical-align: middle;
	padding: 2px;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css41Login
^'
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css42ErrorReport
^'
#error {
	color: red;
	font-size: 120%;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css43LastChangedFooter
^'
#sitePageChanged {
	font-size: 80%;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen'!
css46Search
	^'
dl#searchRslts dt a, dl#searchRslts dd span {
	font-weight: bold;
	}
dl#searchRslts dt b {
	color: black;
	}
dl#searchRslts dd span {
	color: #666;
	}
dl#searchRslts dt strong, dl#searchRslts dd strong {
	background: #FFFFCC;
	}
dl#searchRslts dd {
	margin: 0 0 1em 0;
	border-bottom: 1px dashed #999;
	color: #000;
	}
#searchTop {
	margin: 0;
	font-size: 90%;
	}
table.searchTable {
	border-top: 3px solid #ccc;
	border-bottom: 2px solid #ccc;
	background: #f3f3f3;
	}
table.searchTable td, table.searchTable th {
	border-bottom: 1px solid #ccc;
	padding: 8px;
	}
table.searchTable th {
	width: 75px;
	text-align: left;
	}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css47Comments
	^'
table.commentsTable  { font-size: 100%; }
table.commentsTable tr {
	border-right: 1px solid rgb(215,215,215);
	border-left: 1px solid rgb(215,215,215);
	border-top: 1px solid rgb(215,215,215);
	border-bottom: 1px solid rgb(215,215,215);
    }
table.commentsTable td {
	padding: 0px;
	spacing: 2px;
	vertical-align: top;
	border-right: 1px solid rgb(215,215,215);
	border-left: 1px solid rgb(215,215,215);
	border-top: 1px solid rgb(215,215,215);
	border-bottom: 1px solid rgb(215,215,215);
	}
tr.commentHeaderRow { background: #F0F0E7; ; }
tr.commentBodyRow { height: 50px; }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css51Wiki
	^'
#wikiPage {
	margin: 10px 15px 10px 10px;
	padding-top: 20px;
	font-size: 90%;
	text-align: left;
	margin-top/* */: 0; /* IE5.0 Win wont see this - fixes weird float bug for hp */
	}
html>body #wikiPage  { margin-top: 0; 	}
#wikiPage { margin-left: 15px; padding-left: 0; }
#wikiPage td { font-size: 80% }
#wikiPage input, textarea { font-size: 100% }
#wikiPage table.webGrid { font-size: 120% }
table.wikiTable td { border: thin solid black; padding: 1px; margin: 0px }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
css9Hide
 ^'
.print { display: none; }
#printHeader { display: none; }
#documentTitlePrint { display: none; }
#printFooter { display: none; }
.printOnly { display: none; }
.screenOnly { display: show; }


'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobile1Body
^'
body {
	font-size: 13pt;
	}
#container {
	width: 800px;
	}
#containerPadded {    /* for printing header, has no efect here */
	width: 800px;
	}
#content {
	font-size: 90%;
	}
#content {
	margin-left: 135px;
	padding-left: 0;
	}

/* through all width of page, in navigation space too */
#contentWide {
	font-size: 90%;
	}
'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobile21Text
^'
h1, h2, h3, h4, h5, h6 { font-size: 100%; }
h1 { font-size: 150%; }
h2 { font-size: 130%; }
h3 { font-size: 120%; }
h4 { font-size: 100%; }
h5 { font-size: 90%; }
pre	{  }
'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobile23Inputs
^'
fieldset { }
fieldset td { }
legend { font-size: 100%; }
form { }
input, button {
	font-size: 120%;
	padding: 7px; spacing: 2px;
	padding-left: 3px; padding-right: 3px;
	spacing-left: 0px; spacing-right: 0px;
}
textarea { font-size: 100%; }
select {
	font-size: 110%;
	padding: 7px; spacing: 2px;
	padding-left: 3px; padding-right: 3px;
	spacing-left: 0px; spacing-right: 0px;
}
'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobile24WebGrid
	^'
table.webGrid { }
table.webGrid tr {}
table.webGrid td {border-top: 1px solid #F8F8F8;}
table.webGrid td input {font-size: 12pt;}
table.webGrid th { }
'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobile40NavigationBar
	^'
#navigation {
	width: 125px;
	top: 135px;
	font-size: 90%;
	}
#navigation div { font-size: 100%; 	}
#navigation h3 { 	font-size: 90%; }
'! !

!DefaultWebStyle methodsFor: 'styles-mobile'!
cssMobileTabs1
	^'
ul.tabs1 { font-size:12px; }
'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint10Body
	^'
body {
	font-family: Times, serif;
	font-size: 12pt;
	color: black;
	background: white;
	margin: 0; border: 0; padding: 0;
	}'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint11Page
	^'
@page {
    size: A4 portrait;
    margin: 54mm 16mm 27mm 16mm;
}
@page {
    @top { margin-top: 27mm; content: flow(header) };
    @bottom-center { content: counter(page) " od "  counter(pages); }
}'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint21Text
	^'
td { font-size: 12pt }
h1,h2,h3,h4,h5 { font-family: Arial, Helvetica, sans-serif; }
h1 { font-size: 14pt; }
h2 { font-size: 12pt; margin-top: 25pt; }
h3 { font-size: 11pt; margin-top: 20pt; }
h4 { font-size: 11pt; }
h5 { font-size: 10pt; }
'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint22Links
	^'
a:link, a:visited, a:active, a:hover {
	color: black;
	background: transparent;
	font-weight: normal;
	text-decoration: none;
	}
/* #content a:link:after, #content a:visited:after  { content: " (" attr(href) ") "; }  expanded links!! */
'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint23Inputs
	^''! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint24WebGrid
	^''! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint25PageBreak
	^'
.pageBreak { page-break-after: always; }
'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint90Hide
	^'
#banner, #header, #logo, #dashboard, #switcher { display: none; }
#navigation, #hierarchyLinks { display: none; }
'! !

!DefaultWebStyle methodsFor: 'styles-print'!
cssPrint9Show
	^'
.print { display: show; }
.printOnly { display: show; }

'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'NicolasPetton 11/4/2011 17:12'!
cssTabs1
	^'
/*from A List Apart article: http://www.alistapart.com/articles/slidingdoors/ */
/*WebTabs newClass: #tabs1 but dont forget to define class tabs1selected too !! */

ul.tabs1 {
  float:left; 
  width:100%; 
  background:#DAE0D2 url("/img/tab1bggif.gif") repeat-x bottom; 
  font-size:10px;
  line-height:normal;
  margin:0;
  padding:10px 0 0 0;
  list-style:none;
  }
ul.tabs1 li {
  float:left; 
  background:url("/img/tab1leftgif.gif") no-repeat left top;
  margin:0;
  padding:0 0 0 9px;
  }
ul.tabs1 a, ul.tabs1 b {
  float:left; 
  display:block;
  background:url("/img/tab1rightgif.gif") no-repeat right top;
  padding:5px 15px 4px 6px;
  text-decoration:none;
  font-weight:bold;
  color:#765;
  }
/* Commented Backslash Hack
   hides rule from IE5-Mac \*/
ul.tabs1 a {float:none;}
/* End IE5-Mac hack */
ul.tabs1 a:hover {
  color:#333;
  }
ul.tabs1 li.tabs1selected {
  background-image:url("/img/tab1leftongif.gif");
  }
ul.tabs1 li.tabs1selected a {
  background-image:url("/img/tab1rightongif.gif");
  color:#333;
  padding-bottom:5px;
  }
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
cssTabs2
	^'
/*WebTabs newClass: #tabs2 but dont forget to define here class tabs2selected too !! */

ul.tabs2 {
	height: 20px;
	margin: 0;
	padding-left: 10px;
	background: url("/img/tab2bottomgif.gif") repeat-x bottom;
	}
ul.tabs2, ul.tabs2 li {
	margin: 0;
	padding: 0;
	display: inline;
	list-style-type: none;
	}
ul.tabs2 a:link, ul.tabs2 a:visited, ul.tabs2 b {
	float: left;
	background: #f3f3f3;
	font-size: 10px;
	line-height: 14px;
	font-weight: bold;
	padding: 2px 10px 2px 10px;
	margin-right: 4px;
	border: 1px solid #ccc;
	text-decoration: none;
	color: #666;
	}
ul.tabs2 a:hover {
	background: #fff;
	}
ul.tabs2 li.tabs2selected b {
	border-bottom: 1px solid #fff;
	background: #fff;
	color: #000;
	}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
cssTabs3
	^'
/*WebTabs newClass: #tabs3 but dont forget to define here class tabs3selected too !! */

ul.tabs3 {
	border-top-width: 2px;
	border-right-width: 2px;
	border-bottom-width: 2px;
	border-left-width: 2px;
	border-bottom-style: solid;
	border-top-color: #CCCCCC;
	border-right-color: #CCCCCC;
	border-bottom-color: #CCCCCC;
	border-left-color: #CCCCCC;
}
ul.tabs3 li {
	background-color: #f0f0e7;
	background-repeat: repeat-x;
	padding: 0px;
	border-top: 2px solid #CCCCCC;
	border-right: 2px none #FFFFFF;
	border-bottom: 0px none #CCCCCC;
	border-left: 2px none #FFFFFF;
	background-position: left center;
	color: #000000;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: 60px;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
	vertical-align: baseline;
	}
ul.tabs3 a:link {
	background-color: #f0f0e7;
	background-repeat: repeat-x;
	padding: 4px;
	border-top: 0px solid #CCCCCC;
	border-right: 1px solid #CCCCCC;
	border-bottom: 0px none #FFFFFF;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #336699;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
}
ul.tabs3 a:visited {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 2px solid #CCCCCC;
	border-right: 1px solid #CCCCCC;
	border-bottom: 0px none #CCCCCC;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #336699;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 60px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
	vertical-align: baseline;
	list-style-image: url(back1.gif);
}
ul.tabs3 a:hover {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 2px solid #999999;
	border-right: 1px solid #CCCCCC;
	border-bottom: 2px none #FFFFFF;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #FF9900;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
}
ul.tabs3 li.tabs3selected {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 0px solid #CCCCCC;
	border-right: 0px none #FFFFFF;
	border-bottom: 2px solid #CCCCCC;
	border-left: 0px none #FFFFFF;
	background-position: left center;
	color: #FF9900;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
cssTabs4
	^'
/*WebTabs newClass: #tabs4 but dont forget to define here class tabs4selected too !! */

ul.tabs4 {
	border-top-width: 1px;
	border-right-width: 1px;
	border-bottom-width: 1px;
	border-left-width: 1px;
	border-bottom-style: solid;
	border-top-color: #CCCCCC;
	border-right-color: #CCCCCC;
	border-bottom-color: #CCCCCC;
	border-left-color: #CCCCCC;
}
ul.tabs4 li {
	background-color: #f0f0e7;
	background-repeat: repeat-x;
	padding: 0px;
	border-top: 2px solid #CCCCCC;
	border-right: 2px none #FFFFFF;
	border-bottom: 0px none #CCCCCC;
	border-left: 2px none #FFFFFF;
	background-position: left center;
	color: #000000;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: 60px;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
	vertical-align: baseline;
}
ul.tabs4 a:link {
	background-color: #f0f0e7;
	background-repeat: repeat-x;
	padding: 4px;
	border-top: 0px solid #CCCCCC;
	border-right: 1px solid #CCCCCC;
	border-bottom: 0px none #FFFFFF;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #336699;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
}
ul.tabs4 a:visited {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 2px solid #CCCCCC;
	border-right: 1px solid #CCCCCC;
	border-bottom: 2px solid #CCCCCC;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #336699;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 60px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
	vertical-align: baseline;
	list-style-image: url(back1.gif);
}
ul.tabs4 a:hover {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 2px solid #CCCCCC;
	border-right: 1px solid #CCCCCC;
	border-bottom: 2px none #FFFFFF;
	border-left: 1px solid #CCCCCC;
	background-position: left center;
	color: #FF9900;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
	background-image: url(/img/tab3backgif.gif);
}
ul.tabs4 li.tabs4selected {
	background-color: #F0F0E7;
	background-repeat: repeat;
	padding: 4px;
	border-top: 0px solid #CCCCCC;
	border-right: 0px none #FFFFFF;
	border-bottom: 2px solid #CCCCCC;
	border-left: 0px none #FFFFFF;
	background-position: left center;
	color: #FF9900;
	display: inline;
	white-space: pre;
	text-align: center;
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	letter-spacing: normal;
	word-spacing: normal;
	margin: 0px;
	clear: none;
	float: none;
	height: 70px;
	width: auto;
	text-decoration: none;
}
'! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: ' 21/4/07 10:33'!
cssTabs5
	^'
ul.tabs5 {
    float:left;
    width:600px;
    background:#DAE0D2 url("/img/tab5bggif.gif") repeat-x bottom;
    font-size:93%;
    line-height:normal;
    text-decoration: none;
    color: #333333;
    margin:0;
    padding:10px 10px 0;
    list-style:none;
    }
ul.tabs5 li {
    float:left;
    background:url("/img/tab5rightgif.gif") no-repeat right top;
    margin:0;
    padding:0 0 0 ;
    }
ul.tabs5 a, ul.tabs5 b {
   display:block;
   background:url("/img/tab5leftgif.gif") no-repeat left top;
   padding:5px 15px 4px 6px;
   text-decoration: none;
   color: #006699;
   font-family: Arial, Helvetica, sans-serif;
   font-weight: bold;
   font-size: 12px;
   }

/* Commented Backslash Hack
   hides rule from IE5-Mac \*/
ul.tabs5 a {float:none;}
/* End IE5-Mac hack */
ul.tabs5 a:hover {
  color:#333;
  }
ul.tabs5 li.tabs5selected {
  background-image:url("/img/tab5rightongif.gif");
  }
ul.tabs5 li.tabs5selected b {
  background-image:url("/img/tab5leftongif.gif");
  padding-bottom:5px;
  color: #666666;
  font-family: Arial, Helvetica, sans-serif;
  }
ul.tabs5 a:hover {
  color: #EFEFE6;
  }
'! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: 'janko 7/8/2011 23:18'!
csvBigPng
	"'imgs/csv_file64.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 64 0 0 0 64 8 6 0 0 0 170 105 113 222 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 17 4 73 68 65 84 120 218 236 155 105 108 92 215 117 199 127 247 190 247 102 33 135 59 41 82 212 70 237 178 181 197 91 28 203 142 100 21 178 107 199 118 28 53 254 208 197 233 7 167 65 144 54 78 130 52 77 154 162 64 91 20 109 209 32 41 210 15 5 146 54 49 208 108 181 93 111 176 227 184 118 156 197 178 34 59 222 34 201 178 118 81 38 69 82 34 53 228 136 28 206 242 150 123 111 63 188 153 209 112 102 72 13 41 199 9 224 60 226 98 222 114 223 187 247 252 239 217 238 57 135 194 24 195 123 249 144 188 199 143 223 1 240 94 7 192 6 152 158 78 207 235 37 165 20 190 239 11 33 196 205 24 110 211 70 183 74 41 213 124 7 23 136 217 199 208 202 57 112 224 192 243 163 231 206 61 100 89 54 96 48 198 224 56 17 182 108 221 2 128 214 26 173 53 42 80 24 99 240 60 143 68 83 19 173 173 173 104 173 47 57 126 111 111 111 8 192 60 103 141 16 2 224 11 90 235 79 3 203 11 215 151 77 116 249 17 248 1 217 76 230 246 32 8 6 108 219 121 249 215 165 172 237 226 138 214 77 128 16 248 190 255 21 165 213 95 73 36 66 10 234 1 160 94 194 139 99 120 158 135 155 207 47 201 100 115 79 216 182 125 143 109 219 123 127 29 32 200 226 128 245 52 41 37 74 169 29 65 16 124 65 32 222 57 226 69 89 43 187 165 13 24 173 186 179 217 220 99 74 169 109 191 21 74 80 107 253 81 64 212 187 162 53 251 137 218 68 87 61 51 6 173 13 198 232 174 124 62 255 136 82 122 251 124 196 173 110 17 240 92 183 126 0 140 89 45 68 125 171 63 43 241 245 201 1 218 132 74 206 24 131 82 106 177 235 230 31 141 70 35 247 72 105 189 160 181 122 231 56 64 90 86 253 77 74 57 31 121 94 16 241 133 195 24 131 49 170 160 237 13 198 152 206 76 38 243 208 133 11 169 15 90 150 245 78 138 128 152 71 195 212 67 72 21 72 162 118 159 90 127 23 1 208 40 101 80 170 200 9 16 4 170 251 173 67 135 30 27 79 142 239 180 109 231 55 231 8 205 139 11 68 109 194 235 249 182 49 186 192 9 6 173 53 66 64 16 168 206 35 71 14 63 60 49 62 177 211 182 236 203 7 96 94 235 95 7 59 47 88 68 202 149 147 101 35 165 133 214 10 99 116 225 87 161 181 66 8 80 74 119 30 59 118 244 161 137 137 137 155 47 71 28 228 124 37 96 222 196 137 133 129 227 56 14 139 22 117 163 181 65 41 85 80 132 166 36 18 66 8 148 10 186 78 158 60 241 200 228 228 228 46 203 182 222 61 17 120 39 86 248 146 28 96 219 244 245 245 209 221 221 141 235 230 81 234 162 40 20 197 1 4 74 233 142 254 254 254 135 38 39 39 119 46 132 19 222 213 205 80 189 192 25 99 16 2 90 90 90 184 254 250 235 233 89 220 27 122 134 110 30 207 115 241 125 175 212 148 10 240 125 175 253 212 201 83 15 167 82 169 91 231 235 38 44 104 47 240 110 28 198 128 101 89 44 234 238 102 199 246 237 12 12 12 144 76 38 209 74 35 100 232 149 150 55 33 68 167 82 193 131 150 101 221 5 252 162 94 32 230 15 128 41 180 119 9 8 91 218 180 180 182 178 177 185 9 229 135 62 1 133 61 65 56 21 83 244 155 112 108 167 205 178 237 157 192 47 126 125 28 240 46 31 69 2 109 203 198 182 108 48 181 159 23 69 7 240 230 45 2 179 237 177 28 33 209 198 160 49 239 24 49 11 85 160 165 157 224 28 0 204 166 119 132 16 37 174 169 9 192 36 110 213 75 202 104 114 185 44 45 78 3 45 118 3 202 232 133 17 114 153 226 50 23 129 151 34 94 10 129 167 21 233 32 135 99 85 123 141 109 115 113 64 96 52 67 185 113 198 131 52 203 99 157 116 56 205 4 70 93 28 116 129 132 93 14 23 204 139 181 133 100 34 200 240 118 246 60 17 203 161 57 218 56 63 51 40 0 91 88 104 224 72 122 136 164 55 137 45 173 133 173 76 13 182 189 212 251 85 125 204 204 239 204 245 190 45 44 146 94 154 19 153 179 4 70 97 33 145 136 170 86 151 18 148 66 96 128 35 211 67 92 129 160 195 78 4 202 168 48 64 50 167 173 17 117 186 206 98 65 50 163 107 238 201 4 6 227 38 253 41 142 102 134 177 132 133 35 229 194 173 64 97 128 62 41 196 234 64 107 125 116 122 72 172 136 117 245 138 153 177 193 223 136 199 88 139 3 44 36 41 63 179 113 212 157 220 46 132 112 108 41 124 224 128 16 98 114 214 57 26 99 56 53 49 82 67 9 42 78 166 134 190 236 6 222 95 26 232 176 132 101 132 48 66 253 150 103 146 4 2 41 132 54 198 200 64 107 45 133 56 214 17 111 254 108 87 99 235 143 49 51 165 241 138 174 21 33 7 156 207 92 168 80 12 130 105 63 119 207 133 204 244 63 71 109 135 158 230 118 26 35 81 33 132 224 146 244 139 139 178 58 135 245 153 127 223 249 68 173 65 106 163 73 101 51 114 44 157 186 98 52 152 248 158 48 226 3 66 136 211 53 69 32 57 125 161 42 42 155 113 115 127 164 148 98 121 215 82 98 142 67 198 205 93 210 27 48 198 160 180 66 23 40 177 164 196 177 109 140 174 102 88 99 12 129 14 119 121 8 176 68 117 95 95 5 72 41 137 216 54 74 233 42 95 217 87 1 182 109 99 75 11 85 145 7 176 132 164 167 185 13 1 12 76 140 45 26 240 71 111 1 254 179 188 207 141 43 54 135 0 228 220 106 63 32 235 186 109 109 137 70 2 237 179 127 96 16 55 240 230 148 105 79 5 56 210 98 81 83 27 139 154 218 80 74 51 48 58 202 217 201 36 177 120 132 134 88 44 220 198 2 158 14 136 217 14 221 77 29 116 54 54 19 40 197 96 114 140 161 212 121 26 26 162 196 163 81 124 165 88 221 209 75 50 53 65 255 248 8 61 157 29 165 247 77 65 81 174 233 90 202 225 129 1 166 130 44 173 77 9 140 54 101 70 199 208 218 144 96 69 87 55 142 176 200 229 243 142 16 178 182 18 244 253 160 138 3 130 32 80 65 160 57 50 116 134 172 231 98 137 217 181 169 23 248 44 105 237 228 166 213 91 232 110 110 47 221 223 182 114 19 199 135 207 240 232 47 95 96 34 154 166 167 189 141 172 231 177 172 173 139 237 107 223 71 123 67 115 169 239 13 43 225 248 208 25 190 183 247 57 98 45 81 214 244 244 242 123 107 175 102 106 58 195 23 191 251 13 226 177 40 113 39 130 54 33 216 125 237 61 236 88 189 149 86 26 249 250 51 255 203 182 107 54 161 2 61 67 77 142 76 140 19 40 133 209 224 250 129 145 179 1 224 5 53 0 80 154 115 169 20 129 86 8 64 81 59 10 27 168 128 69 205 237 124 104 211 54 226 78 132 227 67 103 56 52 124 154 246 182 38 214 119 47 103 221 210 101 252 121 235 71 248 135 135 255 27 131 161 167 165 157 93 27 174 35 17 141 243 127 175 255 146 225 116 146 206 214 22 174 235 91 207 186 165 203 184 247 166 91 249 151 199 191 71 103 83 51 25 47 71 115 162 145 77 75 250 56 61 114 142 85 75 123 9 148 194 15 124 86 118 244 0 112 33 51 141 101 91 248 126 64 16 84 207 113 52 149 194 146 146 64 107 68 13 26 100 145 3 42 155 231 7 100 242 57 124 223 199 43 92 87 54 215 247 241 2 197 7 215 108 33 238 68 216 127 234 4 255 250 228 15 120 115 244 20 123 79 28 228 187 47 61 203 233 241 179 180 36 18 220 117 205 54 14 159 124 155 214 134 4 137 104 156 225 100 146 255 122 254 41 70 166 147 28 28 58 197 227 111 236 33 231 187 244 117 247 34 140 100 56 121 158 19 231 134 66 238 184 98 19 201 137 73 60 223 199 245 60 108 97 177 178 115 49 0 47 30 62 72 123 107 2 215 155 109 158 62 57 215 45 209 84 222 230 228 0 207 247 241 124 127 78 91 239 171 128 222 150 78 150 183 119 163 180 230 187 63 123 142 182 182 38 98 118 4 165 53 217 124 158 103 14 188 204 159 222 120 27 25 55 135 109 89 76 231 114 0 116 183 182 177 251 253 219 57 58 54 128 237 88 12 100 199 248 254 75 207 17 149 17 58 59 155 145 66 114 240 76 63 239 91 190 150 45 43 87 19 147 17 46 164 211 8 33 88 209 187 130 68 180 129 209 84 138 35 35 3 108 92 183 130 92 62 191 160 45 219 172 58 192 243 3 92 47 192 154 3 128 156 239 209 189 180 13 33 4 211 217 44 99 83 41 250 218 122 66 165 90 112 232 206 166 198 249 143 231 31 103 58 155 101 101 111 15 167 71 207 114 104 168 159 77 75 87 113 239 206 91 73 103 179 12 79 36 57 58 50 192 161 161 211 156 157 74 210 221 214 142 82 138 254 209 97 206 167 83 116 53 181 241 190 190 53 188 58 120 148 197 93 29 172 239 94 14 192 158 67 7 144 182 64 105 67 16 168 5 185 93 179 2 80 20 5 53 7 0 174 231 19 177 35 225 185 239 161 180 198 247 21 1 97 248 186 104 238 70 50 231 137 58 14 17 203 193 11 124 190 191 247 199 108 91 191 153 107 86 174 167 183 181 131 13 13 203 217 176 116 57 183 95 245 1 126 248 202 62 158 222 191 143 158 174 14 114 174 203 107 253 199 185 125 235 245 92 191 238 74 158 61 248 10 171 22 47 102 213 162 94 0 94 58 118 136 214 230 4 249 188 199 66 19 167 33 0 65 45 0 66 17 152 203 223 247 60 159 116 54 3 64 196 118 48 198 224 122 30 86 193 255 54 6 180 209 108 94 182 154 161 243 231 57 63 125 33 180 233 8 158 122 109 47 123 142 236 167 163 177 153 53 61 75 185 170 111 29 171 187 123 249 232 141 59 56 54 52 200 177 177 65 218 154 155 216 255 246 9 110 221 124 29 91 86 173 166 45 222 68 75 44 65 115 188 145 99 67 131 12 38 71 233 91 182 152 188 235 177 208 148 225 28 74 208 199 243 230 110 90 105 78 141 142 96 140 161 169 161 129 150 134 4 169 116 26 63 8 223 159 202 76 211 211 210 206 159 237 188 147 187 175 190 137 254 51 35 108 88 178 130 207 223 249 135 44 107 234 102 120 44 201 96 114 140 103 126 245 50 95 125 234 127 56 58 50 24 186 168 203 250 152 76 103 48 26 6 198 206 113 108 100 16 219 178 184 122 213 58 150 182 46 10 149 223 161 131 8 75 16 4 65 184 88 222 252 91 9 128 74 237 232 251 1 110 65 203 187 165 243 234 166 141 225 228 200 48 39 206 14 97 73 201 159 220 124 11 19 169 52 201 201 41 198 39 167 208 26 238 186 58 204 106 39 167 38 113 125 143 174 68 11 75 218 59 249 227 237 187 152 156 202 48 149 201 224 121 1 233 76 22 63 8 39 149 117 243 104 173 67 75 148 203 241 218 201 163 0 236 190 97 59 219 55 110 37 80 138 125 199 14 209 24 143 145 119 189 57 231 56 87 187 104 5 42 116 128 44 42 65 223 71 138 185 183 147 174 231 243 240 190 159 242 215 187 239 229 131 27 183 208 28 111 224 141 254 227 68 35 14 215 174 221 192 186 197 203 200 228 243 60 186 239 231 180 53 55 243 226 225 131 236 218 114 29 171 123 151 240 55 247 220 203 79 14 190 78 60 22 229 166 43 183 176 121 249 106 130 64 241 210 209 183 136 69 163 228 93 23 99 4 175 156 60 202 71 111 184 153 165 93 93 0 188 122 252 8 231 46 140 211 211 217 65 190 176 146 11 14 156 212 210 1 82 8 60 207 199 175 3 0 41 224 245 147 199 249 218 147 15 241 177 29 183 178 117 213 26 182 174 90 83 122 126 122 244 44 223 124 230 73 134 47 36 105 73 52 50 56 54 202 215 158 120 144 251 118 221 193 141 87 110 230 198 43 55 151 250 158 75 77 240 192 143 159 230 237 228 89 90 155 66 219 14 48 146 76 178 231 173 253 220 126 245 7 0 120 124 223 139 72 25 154 234 203 173 26 41 112 128 95 203 15 144 158 23 92 18 128 112 227 97 241 226 161 3 28 122 187 159 85 221 189 44 110 239 64 10 193 80 242 60 199 135 207 144 206 103 105 140 199 201 187 62 18 201 27 167 142 115 98 100 136 181 139 151 208 219 209 137 64 50 50 145 228 212 217 97 198 167 39 73 196 27 112 93 127 70 140 228 59 63 123 150 227 195 67 76 102 166 121 243 204 41 226 145 24 121 215 175 219 244 105 140 152 21 128 152 19 153 73 144 180 152 202 100 38 243 174 135 93 103 186 201 18 146 137 116 154 209 212 91 97 236 94 128 20 146 136 99 99 75 27 215 245 102 108 183 167 50 25 94 58 122 184 84 205 37 165 192 177 29 28 203 153 209 183 120 164 51 62 79 189 178 15 41 4 241 72 164 106 209 230 36 222 24 164 144 126 45 75 97 3 172 234 94 92 145 151 179 48 70 63 56 56 54 182 59 22 137 132 187 64 81 150 178 153 211 172 8 100 89 236 48 240 21 193 44 251 136 202 190 42 80 168 64 205 25 232 44 234 157 185 99 2 37 39 4 109 52 142 101 39 223 191 225 138 231 109 105 85 69 146 236 162 13 175 20 129 21 157 61 15 143 79 165 215 159 62 119 246 11 66 208 44 16 40 173 113 131 58 144 55 11 126 56 191 92 220 44 143 98 142 131 20 178 168 31 250 183 246 173 185 127 253 146 101 253 90 87 103 56 236 48 253 100 85 77 177 181 169 137 213 61 189 255 232 122 254 195 99 23 38 86 166 115 57 209 16 141 114 223 246 93 255 100 11 121 149 41 198 4 11 229 82 225 57 96 4 229 12 19 134 122 10 215 151 147 31 48 229 17 36 83 252 41 6 246 194 92 162 144 76 76 167 31 120 236 213 95 60 148 15 60 187 173 177 201 109 136 199 222 108 77 52 141 121 65 80 83 97 218 16 214 8 149 216 176 80 51 168 181 38 80 10 219 178 142 249 74 29 179 45 201 231 110 191 155 109 107 54 124 42 239 185 87 89 82 34 132 44 148 207 9 68 152 160 156 41 46 136 18 55 150 130 41 243 5 97 70 66 200 148 93 95 60 215 198 132 149 36 218 224 72 121 176 175 179 235 185 175 60 253 24 202 132 1 148 202 170 209 242 52 122 88 42 59 53 133 33 84 90 109 93 157 248 174 91 154 167 175 2 44 41 249 236 239 239 230 134 53 27 72 165 167 108 165 117 49 35 91 170 31 172 85 87 88 92 177 170 29 165 184 116 212 216 84 70 48 107 220 43 175 21 40 171 29 136 190 127 213 58 62 127 219 221 124 123 207 243 120 42 40 137 117 36 22 197 178 44 38 198 206 151 194 118 54 192 151 63 118 31 6 176 29 135 157 119 125 136 155 239 186 147 142 206 14 100 196 65 32 248 220 109 31 230 186 149 107 73 231 178 168 66 125 110 168 185 101 137 107 42 65 144 82 34 140 152 161 116 138 64 212 99 187 203 51 72 151 34 188 120 175 88 59 60 149 205 112 253 170 117 68 108 155 31 188 188 7 59 26 197 137 56 188 177 119 31 135 247 31 96 239 143 158 197 243 125 62 57 253 7 97 88 188 114 133 26 26 226 172 221 180 145 93 187 239 230 158 59 63 204 178 166 86 178 110 190 88 194 250 163 32 8 110 183 44 107 198 234 151 3 82 188 95 121 94 9 68 125 133 18 98 6 145 149 173 6 32 95 50 198 124 5 4 17 219 66 219 54 223 121 252 17 126 248 200 163 28 252 229 171 51 152 202 24 19 114 64 165 165 207 101 115 28 120 229 53 250 15 190 197 198 206 30 122 111 185 5 203 178 74 181 58 133 194 69 164 148 165 73 74 41 11 85 92 162 212 167 200 13 197 137 22 9 47 7 160 22 24 229 132 85 254 86 18 94 212 87 149 192 72 41 137 53 52 240 204 211 79 243 245 191 253 59 50 174 139 172 145 11 148 179 109 17 45 32 157 207 113 223 39 62 193 39 62 254 113 220 66 228 216 247 125 81 28 176 200 114 165 178 117 165 80 74 213 188 87 254 172 214 121 173 62 181 126 107 141 57 227 59 65 32 227 241 56 78 36 194 19 79 60 193 253 159 249 12 25 215 197 154 69 255 206 153 26 179 0 13 60 247 147 159 240 169 79 126 146 111 124 243 155 52 38 18 83 23 82 41 108 219 158 33 243 229 43 94 82 130 80 213 167 94 81 40 103 255 242 247 106 137 65 57 39 180 180 182 166 247 252 252 231 124 235 219 223 102 239 222 189 152 26 28 94 149 26 179 235 144 73 5 220 188 99 7 247 223 127 255 103 214 173 91 247 239 249 124 190 74 254 103 35 124 54 214 175 20 141 114 182 174 148 253 114 226 43 207 139 28 217 16 143 123 47 188 240 194 181 127 241 233 79 191 233 7 1 130 185 171 192 2 99 234 2 64 148 129 96 174 185 234 170 142 111 61 240 192 94 163 245 134 32 8 74 10 174 28 140 74 197 87 14 194 165 116 64 37 151 204 166 15 138 150 168 8 68 44 22 227 252 216 216 3 119 222 113 199 199 211 217 172 176 234 112 61 3 99 170 0 18 5 142 177 129 40 16 47 180 70 32 33 161 249 245 95 253 42 253 111 95 253 234 167 242 249 252 201 134 134 134 176 74 171 204 34 72 41 41 90 8 33 4 86 88 96 93 89 209 53 227 188 210 124 86 250 24 181 222 47 142 97 217 54 141 141 141 12 14 14 254 232 75 95 252 226 223 167 179 217 6 11 18 133 57 23 231 31 45 208 84 165 10 138 28 32 202 116 66 20 136 1 17 192 41 188 84 106 6 164 134 220 150 205 155 151 239 254 200 71 238 185 230 218 107 111 112 28 167 9 33 138 251 77 81 41 6 84 220 175 114 8 203 54 47 101 247 194 171 138 149 47 57 195 38 28 110 106 106 234 236 207 126 250 211 103 31 121 244 209 39 71 199 198 242 86 56 103 85 209 252 66 241 84 30 112 129 160 192 1 166 28 0 81 32 190 145 16 193 34 114 86 25 122 178 0 130 208 225 71 252 68 60 158 16 66 56 133 244 174 168 65 159 152 199 14 199 212 0 101 134 233 46 236 61 138 91 3 227 251 126 46 231 121 121 32 106 133 243 83 5 221 173 10 132 170 2 209 57 96 26 200 20 174 77 37 0 20 86 60 90 70 124 164 130 3 138 166 84 0 178 0 68 113 155 34 43 8 172 4 67 204 11 128 139 231 166 118 145 12 186 120 109 205 188 214 101 0 20 155 87 6 130 91 224 8 2 99 140 93 49 136 95 120 217 45 35 88 148 17 46 203 136 19 2 132 85 113 111 22 194 197 188 57 160 154 232 74 32 76 25 193 181 238 233 10 80 202 57 195 204 230 7 152 162 124 92 98 213 46 69 92 189 4 207 55 178 96 234 4 105 174 243 250 29 161 58 63 34 230 93 225 116 185 229 65 213 99 46 188 160 228 119 255 61 254 30 63 254 127 0 88 61 42 48 51 217 18 132 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: 'janko 7/8/2011 23:19'!
csvMediumPng
	"'imgs/csv_file32.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 32 0 0 0 32 8 6 0 0 0 115 122 122 244 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 6 231 73 68 65 84 120 218 196 151 91 108 20 215 25 199 127 223 57 179 23 239 26 95 112 109 131 161 134 180 13 80 2 14 224 210 66 83 106 72 147 86 69 69 10 169 218 70 85 251 208 167 62 68 173 202 91 133 120 104 170 62 4 85 141 162 246 169 79 201 75 35 170 84 229 162 68 137 219 114 77 64 10 34 50 20 59 9 136 128 140 109 110 155 245 174 189 158 157 153 157 203 233 195 238 216 107 175 161 168 170 196 72 223 206 204 153 157 243 253 207 255 187 156 255 136 49 134 71 121 40 30 241 97 1 204 204 148 26 30 24 99 240 60 239 167 192 30 17 1 104 160 74 144 217 107 173 181 117 253 198 245 187 35 195 195 7 68 100 178 183 119 21 203 123 122 240 92 151 74 165 66 91 123 27 233 116 19 245 140 247 244 244 84 1 68 81 212 0 32 8 130 125 81 20 189 162 84 35 73 245 142 235 15 123 198 198 182 203 235 178 217 236 94 96 234 161 67 16 134 225 98 246 99 37 138 218 234 27 157 203 124 19 37 128 193 243 188 93 174 235 28 17 145 54 37 242 112 0 162 200 44 180 4 144 93 184 208 121 206 235 198 226 241 200 24 194 48 32 8 130 157 119 238 220 62 236 122 94 219 98 12 54 0 16 145 133 102 106 198 34 252 55 56 158 187 135 192 15 48 198 48 153 159 220 249 241 71 35 71 130 32 120 32 136 26 128 70 123 216 184 215 39 109 119 247 50 18 201 4 142 227 16 70 33 249 124 126 224 202 149 43 199 42 149 74 27 247 121 255 255 86 134 97 24 210 221 221 205 192 192 0 157 157 157 100 50 25 154 155 151 16 4 193 142 124 62 127 84 43 181 100 33 211 0 98 140 161 88 152 36 14 133 49 96 48 86 24 134 151 68 100 253 253 226 127 63 70 148 214 248 126 133 192 15 170 204 96 16 17 18 150 181 19 145 211 245 111 45 237 248 92 181 12 29 194 234 42 130 128 180 74 144 16 93 27 249 95 152 8 208 90 163 181 5 198 96 106 237 195 24 131 18 193 141 124 76 29 124 11 160 76 128 18 197 61 175 72 16 250 172 201 246 96 137 50 196 9 178 8 11 178 48 43 99 71 200 130 150 85 125 174 69 133 183 189 2 57 191 68 123 186 5 128 229 49 0 45 130 18 33 161 52 57 183 176 114 120 122 180 109 85 186 51 37 210 88 114 247 45 139 122 175 166 58 28 175 94 33 76 250 246 234 113 55 63 218 150 108 206 105 17 119 94 43 158 118 203 40 81 20 202 165 125 218 200 239 45 203 50 183 130 130 158 155 207 16 70 17 34 130 86 106 214 87 100 34 34 99 208 74 161 68 8 163 106 188 99 72 145 137 80 181 255 27 204 107 25 43 101 77 57 246 96 147 78 61 39 84 65 88 0 159 230 198 49 198 232 208 68 63 235 108 105 213 37 219 198 212 57 1 161 167 173 131 192 15 25 207 231 72 167 146 4 97 72 123 102 9 29 153 22 38 38 115 56 129 199 210 108 11 165 178 141 169 213 86 38 153 198 241 28 140 24 68 196 74 39 147 96 204 119 134 39 174 63 169 149 250 160 127 197 218 218 102 84 118 0 180 31 133 137 207 166 166 168 4 1 34 66 100 12 73 173 217 189 97 59 132 144 204 88 100 104 226 200 197 247 232 255 210 90 122 179 203 40 56 37 182 174 92 207 27 231 254 201 138 181 93 24 3 167 175 93 162 181 57 195 243 155 6 56 62 244 33 185 112 138 116 34 137 8 100 147 105 156 138 167 230 133 192 118 92 4 204 180 91 38 12 195 217 26 245 2 159 103 159 216 138 99 123 188 126 246 29 218 219 154 121 97 235 183 104 214 25 150 53 47 229 246 100 158 163 151 222 99 235 23 215 145 182 146 140 140 221 96 247 134 237 188 115 249 3 150 181 182 147 177 210 220 156 188 75 42 155 192 9 170 97 183 203 206 188 92 82 0 229 178 75 185 236 98 219 46 165 178 67 201 174 154 93 118 89 217 222 201 240 205 235 184 126 133 153 25 135 63 31 63 202 221 153 60 167 62 26 226 243 93 93 252 250 123 63 225 177 142 30 110 21 62 227 234 173 49 80 208 209 212 66 119 243 82 110 220 185 77 110 102 138 114 217 155 157 115 198 118 103 175 23 50 128 237 56 248 53 250 1 92 191 194 84 217 166 41 149 34 87 40 98 59 14 207 108 252 10 99 185 123 88 104 94 125 235 77 178 233 20 63 216 182 139 231 182 236 224 229 99 127 225 210 232 53 182 63 254 4 217 76 19 231 62 25 38 8 2 74 118 249 193 123 129 237 184 216 142 75 201 46 207 179 25 219 225 31 67 231 217 177 254 73 118 172 233 227 27 107 250 216 179 229 235 228 10 69 54 175 126 156 31 110 219 69 217 241 112 253 10 229 138 135 87 241 57 121 121 136 175 174 93 207 242 214 14 62 252 244 10 190 31 52 204 27 219 44 3 181 27 41 217 142 4 97 0 117 165 244 254 200 191 49 33 236 220 176 9 128 87 143 253 141 79 38 70 201 253 171 200 247 183 13 240 163 167 158 230 94 161 200 155 103 79 162 81 92 29 31 227 237 11 231 184 87 44 146 159 158 38 147 74 45 236 18 4 97 48 155 132 98 140 225 183 135 94 71 41 197 200 232 141 193 201 82 233 219 90 41 188 192 159 125 193 173 84 230 166 16 33 157 168 150 97 37 240 209 74 19 70 33 41 43 129 86 10 3 120 190 143 136 144 178 18 179 142 45 173 177 148 66 43 85 238 237 234 222 172 69 174 254 241 231 191 170 50 208 219 181 12 49 64 196 139 167 46 15 237 115 92 175 101 211 170 199 246 104 165 91 171 109 119 225 70 52 247 107 230 117 246 120 100 126 115 84 74 24 205 221 123 247 102 62 119 187 111 245 23 222 218 241 229 190 171 85 5 21 139 210 226 52 29 221 93 44 109 111 191 150 78 164 94 124 225 107 223 212 223 237 219 114 49 140 194 86 173 53 74 105 148 170 201 51 1 249 111 82 171 218 249 48 198 96 162 8 49 112 119 170 240 187 63 188 115 244 172 182 44 82 153 38 166 139 197 185 16 180 46 89 194 134 173 253 108 126 122 39 187 159 121 150 205 43 122 173 194 244 244 37 96 125 117 103 171 2 80 34 136 154 211 137 141 64 76 181 131 26 67 100 12 81 20 17 69 17 97 20 97 137 12 120 38 58 51 120 241 2 103 222 126 151 243 39 78 49 49 62 94 219 11 102 102 56 119 242 52 231 207 188 79 58 87 100 221 47 127 33 0 190 239 99 106 19 197 12 196 231 122 81 81 175 138 98 149 109 234 0 68 81 68 50 147 81 133 137 9 222 120 249 21 46 92 28 98 94 18 90 34 179 33 139 128 231 247 238 229 192 129 3 39 180 214 187 98 231 177 197 32 22 99 32 6 16 59 143 207 217 108 214 255 235 161 67 155 15 30 60 56 50 85 42 17 239 114 129 49 85 6 226 158 32 160 20 168 191 31 62 92 177 44 235 79 251 247 239 127 170 41 147 73 10 204 3 48 187 250 186 114 53 85 207 213 184 215 27 48 56 56 248 218 111 94 122 233 227 138 239 39 244 220 58 163 122 6 44 160 29 104 5 154 12 36 35 168 108 218 184 177 175 191 191 127 155 136 88 166 78 61 199 37 176 72 50 154 186 47 31 35 74 201 196 216 216 245 19 39 79 30 119 60 47 210 16 2 78 237 163 165 16 24 19 196 0 20 144 169 89 18 72 24 208 17 248 64 0 232 154 83 85 167 64 100 129 26 49 117 215 81 237 28 2 162 32 37 213 49 31 168 0 101 160 28 24 19 205 203 129 251 200 29 89 68 254 60 64 14 53 220 155 197 190 43 227 28 144 71 253 121 254 159 1 0 98 125 155 130 216 23 180 102 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: 'janko 7/8/2011 23:19'!
csvSmallPng
	"'imgs/csv_file16.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 10 79 105 67 67 80 80 104 111 116 111 115 104 111 112 32 73 67 67 32 112 114 111 102 105 108 101 0 0 120 218 157 83 103 84 83 233 22 61 247 222 244 66 75 136 128 148 75 111 82 21 8 32 82 66 139 128 20 145 38 42 33 9 16 74 136 33 161 217 21 81 193 17 69 69 4 27 200 160 136 3 142 142 128 140 21 81 44 12 138 10 216 7 228 33 162 142 131 163 136 138 202 251 225 123 163 107 214 188 247 230 205 254 181 215 62 231 172 243 157 179 207 7 192 8 12 150 72 51 81 53 128 12 169 66 30 17 224 131 199 196 198 225 228 46 64 129 10 36 112 0 16 8 179 100 33 115 253 35 1 0 248 126 60 60 43 34 192 7 190 0 1 120 211 11 8 0 192 77 155 192 48 28 135 255 15 234 66 153 92 1 128 132 1 192 116 145 56 75 8 128 20 0 64 122 142 66 166 0 64 70 1 128 157 152 38 83 0 160 4 0 96 203 99 98 227 0 80 45 0 96 39 127 230 211 0 128 157 248 153 123 1 0 91 148 33 21 1 160 145 0 32 19 101 136 68 0 104 59 0 172 207 86 138 69 0 88 48 0 20 102 75 196 57 0 216 45 0 48 73 87 102 72 0 176 183 0 192 206 16 11 178 0 8 12 0 48 81 136 133 41 0 4 123 0 96 200 35 35 120 0 132 153 0 20 70 242 87 60 241 43 174 16 231 42 0 0 120 153 178 60 185 36 57 69 129 91 8 45 113 7 87 87 46 30 40 206 73 23 43 20 54 97 2 97 154 64 46 194 121 153 25 50 129 52 15 224 243 204 0 0 160 145 21 17 224 131 243 253 120 206 14 174 206 206 54 142 182 14 95 45 234 191 6 255 34 98 98 227 254 229 207 171 112 64 0 0 225 116 126 209 254 44 47 179 26 128 59 6 128 109 254 162 37 238 4 104 94 11 160 117 247 139 102 178 15 64 181 0 160 233 218 87 243 112 248 126 60 60 69 161 144 185 217 217 229 228 228 216 74 196 66 91 97 202 87 125 254 103 194 95 192 87 253 108 249 126 60 252 247 245 224 190 226 36 129 50 93 129 71 4 248 224 194 204 244 76 165 28 207 146 9 132 98 220 230 143 71 252 183 11 255 252 29 211 34 196 73 98 185 88 42 20 227 81 18 113 142 68 154 140 243 50 165 34 137 66 146 41 197 37 210 255 100 226 223 44 251 3 62 223 53 0 176 106 62 1 123 145 45 168 93 99 3 246 75 39 16 88 116 192 226 247 0 0 242 187 111 193 212 40 8 3 128 104 131 225 207 119 255 239 63 253 71 160 37 0 128 102 73 146 113 0 0 94 68 36 46 84 202 179 63 199 8 0 0 68 160 129 42 176 65 27 244 193 24 44 192 6 28 193 5 220 193 11 252 96 54 132 66 36 196 194 66 16 66 10 100 128 28 114 96 41 172 130 66 40 134 205 176 29 42 96 47 212 64 29 52 192 81 104 134 147 112 14 46 194 85 184 14 61 112 15 250 97 8 158 193 40 188 129 9 4 65 200 8 19 97 33 218 136 1 98 138 88 35 142 8 23 153 133 248 33 193 72 4 18 139 36 32 201 136 20 81 34 75 145 53 72 49 82 138 84 32 85 72 29 242 61 114 2 57 135 92 70 186 145 59 200 0 50 130 252 134 188 71 49 148 129 178 81 61 212 12 181 67 185 168 55 26 132 70 162 11 208 100 116 49 154 143 22 160 155 208 114 180 26 61 140 54 161 231 208 171 104 15 218 143 62 67 199 48 192 232 24 7 51 196 108 48 46 198 195 66 177 56 44 9 147 99 203 177 34 172 12 171 198 26 176 86 172 3 187 137 245 99 207 177 119 4 18 129 69 192 9 54 4 119 66 32 97 30 65 72 88 76 88 78 216 72 168 32 28 36 52 17 218 9 55 9 3 132 81 194 39 34 147 168 75 180 38 186 17 249 196 24 98 50 49 135 88 72 44 35 214 18 143 19 47 16 123 136 67 196 55 36 18 137 67 50 39 185 144 2 73 177 164 84 210 18 210 70 210 110 82 35 233 44 169 155 52 72 26 35 147 201 218 100 107 178 7 57 148 44 32 43 200 133 228 157 228 195 228 51 228 27 228 33 242 91 10 157 98 64 113 164 248 83 226 40 82 202 106 74 25 229 16 229 52 229 6 101 152 50 65 85 163 154 82 221 168 161 84 17 53 143 90 66 173 161 182 82 175 81 135 168 19 52 117 154 57 205 131 22 73 75 165 173 162 149 211 26 104 23 104 247 105 175 232 116 186 17 221 149 30 78 151 208 87 210 203 233 71 232 151 232 3 244 119 12 13 134 21 131 199 136 103 40 25 155 24 7 24 103 25 119 24 175 152 76 166 25 211 139 25 199 84 48 55 49 235 152 231 153 15 153 111 85 88 42 182 42 124 21 145 202 10 149 74 149 38 149 27 42 47 84 169 170 166 170 222 170 11 85 243 85 203 84 143 169 94 83 125 174 70 85 51 83 227 169 9 212 150 171 85 170 157 80 235 83 27 83 103 169 59 168 135 170 103 168 111 84 63 164 126 89 253 137 6 89 195 76 195 79 67 164 81 160 177 95 227 188 198 32 11 99 25 179 120 44 33 107 13 171 134 117 129 53 196 38 177 205 217 124 118 42 187 152 253 29 187 139 61 170 169 161 57 67 51 74 51 87 179 82 243 148 102 63 7 227 152 113 248 156 116 78 9 231 40 167 151 243 126 138 222 20 239 41 226 41 27 166 52 76 185 49 101 92 107 170 150 151 150 88 171 72 171 81 171 71 235 189 54 174 237 167 157 166 189 69 187 89 251 129 14 65 199 74 39 92 39 71 103 143 206 5 157 231 83 217 83 221 167 10 167 22 77 61 58 245 174 46 170 107 165 27 161 187 68 119 191 110 167 238 152 158 190 94 128 158 76 111 167 222 121 189 231 250 28 125 47 253 84 253 109 250 167 245 71 12 88 6 179 12 36 6 219 12 206 24 60 197 53 113 111 60 29 47 199 219 241 81 67 93 195 64 67 165 97 149 97 151 225 132 145 185 209 60 163 213 70 141 70 15 140 105 198 92 227 36 227 109 198 109 198 163 38 6 38 33 38 75 77 234 77 238 154 82 77 185 166 41 166 59 76 59 76 199 205 204 205 162 205 214 153 53 155 61 49 215 50 231 155 231 155 215 155 223 183 96 90 120 90 44 182 168 182 184 101 73 178 228 90 166 89 238 182 188 110 133 90 57 89 165 88 85 90 93 179 70 173 157 173 37 214 187 173 187 167 17 167 185 78 147 78 171 158 214 103 195 176 241 182 201 182 169 183 25 176 229 216 6 219 174 182 109 182 125 97 103 98 23 103 183 197 174 195 238 147 189 147 125 186 125 141 253 61 7 13 135 217 14 171 29 90 29 126 115 180 114 20 58 86 58 222 154 206 156 238 63 125 197 244 150 233 47 103 88 207 16 207 216 51 227 182 19 203 41 196 105 157 83 155 211 71 103 23 103 185 115 131 243 136 139 137 75 130 203 46 151 62 46 155 27 198 221 200 189 228 74 116 245 113 93 225 122 210 245 157 155 179 155 194 237 168 219 175 238 54 238 105 238 135 220 159 204 52 159 41 158 89 51 115 208 195 200 67 224 81 229 209 63 11 159 149 48 107 223 172 126 79 67 79 129 103 181 231 35 47 99 47 145 87 173 215 176 183 165 119 170 247 97 239 23 62 246 62 114 159 227 62 227 60 55 222 50 222 89 95 204 55 192 183 200 183 203 79 195 111 158 95 133 223 67 127 35 255 100 255 122 255 209 0 167 128 37 1 103 3 137 129 65 129 91 2 251 248 122 124 33 191 142 63 58 219 101 246 178 217 237 65 140 160 185 65 21 65 143 130 173 130 229 193 173 33 104 200 236 144 173 33 247 231 152 206 145 206 105 14 133 80 126 232 214 208 7 97 230 97 139 195 126 12 39 133 135 133 87 134 63 142 112 136 88 26 209 49 151 53 119 209 220 67 115 223 68 250 68 150 68 222 155 103 49 79 57 175 45 74 53 42 62 170 46 106 60 218 55 186 52 186 63 198 46 102 89 204 213 88 157 88 73 108 75 28 57 46 42 174 54 110 108 190 223 252 237 243 135 226 157 226 11 227 123 23 152 47 200 93 112 121 161 206 194 244 133 167 22 169 46 18 44 58 150 64 76 136 78 56 148 240 65 16 42 168 22 140 37 242 19 119 37 142 10 121 194 29 194 103 34 47 209 54 209 136 216 67 92 42 30 78 242 72 42 77 122 146 236 145 188 53 121 36 197 51 165 44 229 185 132 39 169 144 188 76 13 76 221 155 58 158 22 154 118 32 109 50 61 58 189 49 131 146 145 144 113 66 170 33 77 147 182 103 234 103 230 102 118 203 172 101 133 178 254 197 110 139 183 47 30 149 7 201 107 179 144 172 5 89 45 10 182 66 166 232 84 90 40 215 42 7 178 103 101 87 102 191 205 137 202 57 150 171 158 43 205 237 204 179 202 219 144 55 156 239 159 255 237 18 194 18 225 146 182 165 134 75 87 45 29 88 230 189 172 106 57 178 60 113 121 219 10 227 21 5 43 134 86 6 172 60 184 138 182 42 109 213 79 171 237 87 151 174 126 189 38 122 77 107 129 94 193 202 130 193 181 1 107 235 11 85 10 229 133 125 235 220 215 237 93 79 88 47 89 223 181 97 250 134 157 27 62 21 137 138 174 20 219 23 151 21 127 216 40 220 120 229 27 135 111 202 191 153 220 148 180 169 171 196 185 100 207 102 210 102 233 230 222 45 158 91 14 150 170 151 230 151 14 110 13 217 218 180 13 223 86 180 237 245 246 69 219 47 151 205 40 219 187 131 182 67 185 163 191 60 184 188 101 167 201 206 205 59 63 84 164 84 244 84 250 84 54 238 210 221 181 97 215 248 110 209 238 27 123 188 246 52 236 213 219 91 188 247 253 62 201 190 219 85 1 85 77 213 102 213 101 251 73 251 179 247 63 174 137 170 233 248 150 251 109 93 173 78 109 113 237 199 3 210 3 253 7 35 14 182 215 185 212 213 29 210 61 84 82 143 214 43 235 71 14 199 31 190 254 157 239 119 45 13 54 13 85 141 156 198 226 35 112 68 121 228 233 247 9 223 247 30 13 58 218 118 140 123 172 225 7 211 31 118 29 103 29 47 106 66 154 242 154 70 155 83 154 251 91 98 91 186 79 204 62 209 214 234 222 122 252 71 219 31 15 156 52 60 89 121 74 243 84 201 105 218 233 130 211 147 103 242 207 140 157 149 157 125 126 46 249 220 96 219 162 182 123 231 99 206 223 106 15 111 239 186 16 116 225 210 69 255 139 231 59 188 59 206 92 242 184 116 242 178 219 229 19 87 184 87 154 175 58 95 109 234 116 234 60 254 147 211 79 199 187 156 187 154 174 185 92 107 185 238 122 189 181 123 102 247 233 27 158 55 206 221 244 189 121 241 22 255 214 213 158 57 61 221 189 243 122 111 247 197 247 245 223 22 221 126 114 39 253 206 203 187 217 119 39 238 173 188 79 188 95 244 64 237 65 217 67 221 135 213 63 91 254 220 216 239 220 127 106 192 119 160 243 209 220 71 247 6 133 131 207 254 145 245 143 15 67 5 143 153 143 203 134 13 134 235 158 56 62 57 57 226 63 114 253 233 252 167 67 207 100 207 38 158 23 254 162 254 203 174 23 22 47 126 248 213 235 215 206 209 152 209 161 151 242 151 147 191 109 124 165 253 234 192 235 25 175 219 198 194 198 30 190 201 120 51 49 94 244 86 251 237 193 119 220 119 29 239 163 223 15 79 228 124 32 127 40 255 104 249 177 245 83 208 167 251 147 25 147 147 255 4 3 152 243 252 99 51 45 219 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 2 169 73 68 65 84 120 218 164 147 193 107 84 87 20 135 191 243 222 187 51 111 50 211 153 76 18 107 72 67 43 180 42 138 197 78 20 201 214 174 43 182 208 117 87 93 117 87 138 136 80 193 82 5 87 46 20 87 46 244 79 80 132 74 193 10 37 72 41 210 54 11 67 107 4 39 38 90 108 50 51 79 102 154 247 102 230 189 123 79 23 111 70 210 186 236 189 92 56 139 123 207 57 191 223 249 174 168 42 255 103 5 0 189 94 23 17 33 77 211 143 173 181 167 68 196 0 42 8 190 239 75 167 211 238 47 45 45 125 121 224 224 193 95 74 97 137 114 165 66 24 134 168 106 158 32 203 50 0 172 181 223 138 200 33 0 65 64 0 129 52 77 233 118 187 63 14 6 195 147 229 137 242 15 59 59 240 0 208 252 8 98 119 62 150 209 54 166 192 96 48 44 175 60 124 120 187 221 110 47 138 200 191 37 136 8 34 224 148 215 12 177 214 82 175 215 57 254 225 113 162 78 167 100 140 185 93 44 22 142 153 32 104 170 27 73 136 92 130 239 160 230 135 118 156 33 175 34 140 107 237 223 187 15 65 112 234 102 146 116 48 25 217 24 227 7 35 19 179 254 116 43 137 62 155 11 235 115 78 21 167 14 95 188 145 50 69 68 240 134 130 58 197 243 60 94 166 219 159 167 234 174 85 139 149 229 0 224 143 63 215 62 82 244 210 115 219 98 186 82 227 173 218 12 235 157 45 140 241 169 152 9 186 253 109 162 237 30 19 165 144 225 48 37 213 236 11 167 110 247 48 203 62 13 0 158 111 182 188 94 63 6 129 183 247 238 230 187 7 63 49 243 198 36 239 76 205 18 197 61 182 186 47 153 173 78 17 199 125 214 54 95 16 103 125 60 145 236 149 137 47 90 29 254 78 98 28 74 60 63 160 32 5 124 124 54 218 155 204 79 237 34 78 250 120 53 161 98 74 60 218 88 167 104 12 170 185 227 35 144 226 116 99 235 47 6 89 198 141 232 14 7 230 247 240 235 234 42 97 161 192 174 90 157 149 245 38 149 176 68 209 24 158 181 183 40 6 134 74 24 18 22 139 136 170 114 245 206 173 234 207 191 175 124 178 184 231 189 243 65 16 204 103 206 81 8 2 20 197 218 60 118 170 168 42 133 32 96 121 237 201 197 106 125 242 250 187 51 111 174 138 170 242 254 177 163 92 56 247 13 139 135 27 203 73 63 57 108 140 193 247 253 156 15 36 159 134 42 214 90 4 72 210 225 194 87 103 191 254 237 254 189 123 121 7 34 226 205 205 206 114 249 202 149 155 141 70 227 132 106 62 46 207 243 16 145 92 239 232 211 69 81 20 157 57 125 250 131 239 239 222 125 6 56 81 85 2 145 105 11 181 106 185 60 221 88 88 56 2 152 17 76 99 142 20 80 207 243 180 217 108 62 110 62 125 250 200 135 4 104 141 19 4 128 177 144 2 217 24 198 255 80 253 10 82 31 194 209 189 244 159 1 0 66 117 56 116 112 179 106 136 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
cutIconGif
	"'imgs/jure-cut.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 12 0 196 0 0 0 0 0 255 255 255 242 244 248 42 86 143 69 107 157 95 128 171 136 160 192 175 191 213 215 223 234 55 97 150 82 118 164 122 150 185 149 171 199 161 181 206 202 213 227 228 234 241 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 16 0 44 0 0 0 0 11 0 12 0 64 5 60 96 32 142 100 128 12 232 178 160 131 35 10 4 203 30 129 144 176 79 160 160 137 216 200 45 17 138 32 16 197 80 14 4 99 217 120 45 25 1 6 203 176 66 138 14 192 230 21 56 40 136 110 3 133 192 193 242 150 206 33 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
docYellowPng
	"'imgs/suse/suse-doc.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 3 0 0 0 40 45 15 83 0 0 0 4 103 65 77 65 0 0 175 200 55 5 138 233 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 73 109 97 103 101 82 101 97 100 121 113 201 101 60 0 0 0 84 80 76 84 69 60 83 19 99 99 99 196 228 137 161 212 68 182 222 110 211 235 166 167 215 79 193 227 132 202 231 148 198 229 141 180 221 106 189 225 122 209 234 164 191 226 127 186 224 117 156 210 58 154 209 52 143 196 45 147 202 46 196 228 138 204 232 153 169 216 84 151 207 47 132 181 42 128 176 40 199 229 143 172 217 89 255 255 255 99 155 214 1 0 0 0 28 116 82 78 83 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 255 0 23 178 226 215 0 0 0 214 73 68 65 84 120 218 98 144 102 134 1 70 105 16 0 8 32 6 105 102 86 86 86 30 32 100 230 7 139 0 4 16 72 128 1 8 120 56 132 132 196 65 34 0 1 4 22 96 101 101 224 100 98 98 98 97 1 138 0 4 16 76 64 88 132 131 131 137 11 40 0 16 64 48 45 156 64 12 22 0 8 32 160 0 15 7 7 39 19 39 80 15 59 72 0 32 128 64 2 12 80 192 203 11 20 0 8 32 160 128 36 80 55 39 59 19 59 59 11 72 5 64 0 49 72 243 11 195 84 176 128 84 0 4 16 131 180 24 19 19 39 80 154 137 155 27 108 45 64 0 49 72 11 48 65 228 185 89 120 65 2 0 1 196 32 45 8 116 18 80 63 72 1 200 12 128 0 2 9 128 180 179 240 241 241 129 5 0 2 136 65 90 66 74 148 13 10 4 128 2 0 1 196 32 45 205 136 4 164 165 1 2 12 0 95 63 9 245 228 242 236 115 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
emailJpg
	"'imgs/toledo-email.jpg' asFilename contentsAsMethod"
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 219 0 67 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 219 0 67 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 192 0 17 8 0 14 0 22 3 1 34 0 2 17 1 3 17 1 255 196 0 31 0 0 1 5 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 16 0 2 1 3 3 2 4 3 5 5 4 4 0 0 1 125 1 2 3 0 4 17 5 18 33 49 65 6 19 81 97 7 34 113 20 50 129 145 161 8 35 66 177 193 21 82 209 240 36 51 98 114 130 9 10 22 23 24 25 26 37 38 39 40 41 42 52 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 225 226 227 228 229 230 231 232 233 234 241 242 243 244 245 246 247 248 249 250 255 196 0 31 1 0 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 17 0 2 1 2 4 4 3 4 7 5 4 4 0 1 2 119 0 1 2 3 17 4 5 33 49 6 18 65 81 7 97 113 19 34 50 129 8 20 66 145 161 177 193 9 35 51 82 240 21 98 114 209 10 22 36 52 225 37 241 23 24 25 26 38 39 40 41 42 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 130 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 226 227 228 229 230 231 232 233 234 242 243 244 245 246 247 248 249 250 255 218 0 12 3 1 0 2 17 3 17 0 63 0 254 213 30 211 196 102 79 17 248 239 84 190 241 127 140 124 60 124 77 227 155 93 71 195 126 29 241 103 140 124 61 226 93 2 203 195 62 43 214 124 51 167 63 131 180 207 12 120 143 68 208 60 65 167 91 233 90 37 140 247 222 28 185 210 237 188 87 121 121 54 185 172 216 248 147 196 186 149 198 147 224 217 124 143 197 255 0 26 62 20 91 121 182 190 13 241 199 140 188 83 174 147 115 28 30 22 240 215 197 31 31 106 62 36 51 90 222 71 97 113 13 230 155 125 227 24 63 177 69 189 204 233 246 155 191 17 75 164 105 246 112 44 183 151 119 73 105 11 200 223 22 254 210 255 0 240 80 207 134 191 2 254 50 124 71 253 156 126 42 248 103 226 13 246 139 224 221 126 243 91 212 173 252 7 99 160 106 182 30 62 63 18 89 254 37 105 218 111 136 175 53 191 21 248 78 238 195 195 90 70 141 227 29 58 207 91 240 205 165 141 244 126 44 213 160 184 179 213 53 111 248 68 226 190 209 124 79 243 39 196 15 248 42 151 192 31 29 216 221 105 183 190 11 248 195 37 149 211 70 236 146 232 190 16 183 154 41 109 231 142 238 210 234 210 234 215 226 31 159 99 168 217 94 91 218 222 88 234 86 143 21 229 141 229 188 55 118 50 219 77 111 3 39 101 8 115 43 201 90 246 106 214 178 139 73 197 91 85 170 215 68 154 91 251 199 93 42 112 122 206 221 58 54 186 93 53 102 157 189 45 109 53 110 231 234 7 236 223 241 31 226 149 255 0 237 41 103 224 207 19 248 222 239 84 240 207 136 62 11 124 80 241 101 207 132 62 221 168 107 250 94 147 172 248 59 199 159 5 116 175 14 222 90 248 135 196 242 95 248 146 239 81 131 77 241 247 137 236 117 59 187 41 252 59 161 107 144 201 166 207 47 132 109 46 244 203 107 201 10 249 103 254 9 129 241 57 191 104 159 142 190 55 248 139 162 45 228 126 27 248 61 240 171 87 240 13 245 207 137 162 181 211 188 83 174 95 124 98 241 119 129 252 65 225 203 193 165 232 242 234 218 49 26 109 167 193 95 19 65 226 59 229 213 180 245 158 247 80 209 46 52 189 18 56 47 53 8 52 146 176 196 90 53 90 140 82 86 142 137 36 175 104 173 180 232 215 225 231 108 107 242 123 89 114 43 71 221 73 90 218 168 171 233 167 91 179 255 217 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
emailSmall1Gif
	"'imgs/intelicom-email.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 15 0 11 0 194 0 0 0 0 0 255 255 255 204 204 204 204 0 0 102 51 204 153 153 153 153 0 102 0 0 0 33 249 4 1 0 0 7 0 44 0 0 0 0 15 0 11 0 0 3 42 8 186 220 16 48 74 40 84 16 56 227 65 70 125 66 81 104 2 97 16 223 69 110 93 138 137 48 105 173 235 28 194 163 102 211 217 206 23 142 224 34 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
emailSmall2Gif
	"'imgs/jta-email.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 13 0 14 0 128 0 0 255 255 255 42 42 161 33 249 4 0 0 0 0 0 44 0 0 0 0 13 0 14 0 0 2 31 132 143 23 203 237 137 24 8 112 78 106 163 89 170 111 124 133 223 70 102 28 168 73 213 229 180 220 10 199 114 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
emailSmall3Gif
	"'imgs/las-email.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 15 0 11 0 162 255 0 255 255 255 204 204 204 192 192 192 51 102 153 0 51 102 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 2 0 44 0 0 0 0 15 0 11 0 64 3 45 40 186 220 66 36 200 57 161 138 97 128 189 49 185 26 39 2 214 35 69 90 228 93 80 235 182 236 43 95 217 216 5 159 41 133 100 69 99 184 10 142 70 41 14 19 0 59 )! !

!DefaultWebStyle methodsFor: 'layout'!
enhancedTitle: aString
	"enhanced with additional info, if needed"
	"if user is Admin, site name is attached at the start, for easier administration of many sites"
	aString aidaIsAssociation ifTrue: [^aString]. "dealing with multilang strings later"
	self app user isAdminUser ifTrue:
		[^self site name, ': ', aString].
	^aString! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
eranovaHeaderGif
	"'imgs/head-en.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 88 2 100 0 179 0 0 255 255 255 231 231 237 223 223 223 204 204 204 180 180 180 161 159 183 153 153 153 116 131 158 153 102 102 111 111 111 100 108 144 57 93 121 69 69 92 24 83 125 51 51 51 15 15 15 33 249 4 4 20 0 255 0 44 0 0 0 0 88 2 100 0 0 4 255 16 200 73 171 189 56 235 205 187 255 96 40 142 100 105 158 104 170 174 108 235 190 112 44 207 116 109 223 120 174 239 124 239 255 192 160 112 72 44 26 143 200 164 114 201 108 58 159 208 168 116 74 173 90 175 216 172 118 203 237 122 191 224 176 120 76 46 155 207 232 52 53 192 86 187 217 112 183 124 78 199 193 219 117 242 61 144 239 251 255 35 123 120 128 92 130 124 91 123 132 138 139 37 134 140 90 142 136 119 143 148 149 26 137 150 87 130 146 152 153 158 148 157 159 82 161 88 145 162 52 164 167 71 131 170 163 172 144 169 173 45 177 178 181 182 97 180 183 39 166 186 189 190 89 113 191 43 188 194 197 198 199 104 155 200 203 204 205 156 175 206 209 99 135 94 208 210 36 193 215 218 107 212 23 214 77 223 18 225 219 228 229 184 2 2 214 227 74 232 232 221 19 233 230 242 243 231 2 3 247 239 235 73 1 3 246 248 20 1 4 208 27 72 16 146 191 127 19 222 69 65 119 175 31 181 128 5 35 74 28 213 112 192 67 133 11 43 82 139 55 177 163 199 125 1 255 57 2 208 183 36 164 187 67 34 63 170 92 249 35 17 73 38 108 210 181 121 201 178 166 205 89 0 49 114 131 167 243 166 207 159 47 122 106 18 8 180 168 209 97 185 166 40 59 202 180 105 135 152 73 161 152 156 228 180 170 51 126 21 179 54 60 132 85 171 69 161 226 218 45 189 84 145 40 133 131 102 19 10 32 80 160 45 129 148 0 14 14 176 208 181 95 5 172 39 169 90 221 43 44 128 1 4 128 3 11 14 76 64 2 129 4 136 19 43 78 96 96 46 6 67 196 42 8 88 64 121 129 130 180 0 14 84 62 208 77 128 230 6 160 67 31 112 44 225 64 232 5 239 10 132 110 112 0 160 88 200 96 249 202 206 20 96 176 109 194 134 23 235 70 76 218 53 236 92 3 42 83 46 156 80 51 229 214 19 10 44 88 205 188 65 129 228 171 49 43 88 77 154 159 204 188 119 224 206 222 158 76 175 135 1 183 111 59 54 176 123 119 190 56 144 219 105 55 44 124 1 231 132 10 42 63 151 160 124 121 115 234 244 241 195 91 173 128 43 58 9 215 169 199 144 255 69 220 21 216 157 119 28 128 23 222 96 115 249 165 152 1 16 146 183 88 111 1 113 5 155 88 24 212 39 92 117 241 13 39 65 112 149 53 96 217 1 159 133 214 31 0 3 232 151 95 104 196 133 36 78 118 1 182 3 12 130 6 214 24 153 6 10 2 70 128 87 255 212 150 24 1 217 73 136 24 113 97 241 81 225 111 21 94 96 156 112 243 197 181 225 72 37 54 160 0 129 252 76 199 98 92 171 53 25 128 149 160 25 105 143 151 175 201 100 210 122 81 68 85 163 108 99 113 64 128 96 96 129 247 99 5 3 40 70 100 146 80 33 233 206 93 75 86 118 34 138 194 9 4 98 101 189 161 184 90 107 1 216 231 220 126 161 205 151 151 128 98 198 164 158 38 105 158 89 160 153 21 172 25 88 155 138 5 42 128 156 240 8 132 36 28 7 229 211 97 123 196 17 32 28 31 26 46 208 36 124 38 178 193 37 114 0 168 22 154 167 118 141 217 232 29 26 89 113 163 164 219 101 227 129 95 130 17 32 236 176 194 146 118 88 98 152 29 203 91 145 159 134 148 85 255 103 194 45 137 156 134 253 5 144 103 160 165 157 198 135 105 160 41 32 206 171 0 198 248 26 168 247 236 216 16 164 52 242 170 46 7 192 46 8 152 1 19 40 155 128 185 229 62 232 165 145 144 221 195 208 107 4 78 240 231 148 29 94 22 235 102 35 141 186 103 5 220 138 136 106 171 130 134 214 96 60 160 138 41 151 190 237 244 203 141 175 235 78 113 207 46 216 214 81 155 187 58 78 32 100 121 137 57 150 100 66 112 52 116 171 163 105 153 74 89 127 26 62 183 228 115 147 17 172 164 182 0 16 128 179 172 82 242 145 87 88 3 58 180 199 190 232 102 92 69 112 12 36 141 25 8 5 48 64 72 142 238 182 56 114 121 64 162 60 18 156 66 27 242 104 114 155 241 211 245 204 78 218 108 65 194 168 53 12 90 58 92 62 231 98 55 120 29 153 93 69 70 203 64 41 21 229 198 102 129 2 222 2 160 0 114 118 249 235 88 58 4 218 67 159 211 29 203 1 53 177 136 155 76 178 189 47 98 132 157 32 234 81 35 45 148 149 17 48 106 97 53 31 231 13 255 151 39 10 16 93 138 179 142 100 141 67 39 137 37 87 220 49 204 45 69 185 16 18 233 65 211 7 84 173 55 222 222 22 26 159 183 241 49 112 0 237 168 193 30 159 31 150 2 6 150 0 8 36 102 192 176 83 183 168 206 111 114 113 5 118 206 155 61 185 165 158 10 129 14 26 114 133 58 156 176 162 235 29 41 113 197 91 161 238 194 174 86 12 32 172 144 34 20 160 64 210 194 50 192 6 3 64 206 117 128 211 191 19 224 126 0 64 54 141 34 3 133 167 17 60 2 152 122 83 188 30 84 36 12 172 140 92 42 251 150 124 0 52 170 62 149 134 122 120 202 210 183 18 197 165 191 117 239 43 48 146 203 91 196 55 139 72 97 97 0 16 74 64 210 18 16 130 141 101 134 1 77 163 221 91 104 71 63 111 233 47 57 132 227 95 30 218 133 0 3 128 69 94 20 18 18 188 70 242 21 111 64 78 61 230 219 17 3 43 55 129 60 189 236 16 169 90 85 172 86 179 0 179 36 236 85 40 113 200 5 196 165 193 182 44 141 131 187 80 29 20 14 147 52 248 255 133 32 62 247 192 219 0 100 8 36 188 157 112 118 251 235 199 2 6 160 191 49 246 239 12 52 68 0 226 136 229 24 121 189 67 135 70 218 81 56 134 86 46 2 64 200 49 127 90 163 191 218 227 158 67 4 82 85 112 80 206 160 40 192 51 21 9 160 0 82 244 97 72 248 33 172 2 144 232 0 87 196 98 35 210 5 9 33 138 192 51 73 19 152 114 24 224 45 151 205 15 141 3 211 93 172 98 248 70 51 64 45 106 18 24 217 29 141 119 136 97 97 80 33 123 48 95 132 12 64 20 151 81 198 44 211 139 86 113 8 25 31 230 8 12 58 198 124 72 91 32 217 168 156 128 138 45 187 179 140 221 52 249 1 140 81 147 6 255 115 87 131 240 88 1 110 162 200 143 199 203 74 163 26 114 190 16 242 146 61 71 100 100 123 86 37 128 6 222 71 144 20 176 94 162 224 180 187 216 245 145 116 12 25 150 37 59 244 158 107 250 115 10 217 92 80 131 138 135 152 29 82 192 155 248 139 80 226 178 130 60 115 10 139 15 6 232 90 60 73 5 167 81 53 103 255 74 22 240 28 115 48 19 0 229 236 173 45 7 112 11 57 161 185 187 128 21 64 118 255 76 105 19 192 185 203 150 70 200 72 187 116 93 110 10 250 16 63 26 239 120 115 100 41 121 254 40 147 2 36 0 111 6 21 71 73 197 152 81 245 25 202 50 5 184 98 48 41 163 68 0 25 81 1 110 97 11 72 73 52 170 216 145 73 165 88 29 66 179 6 145 10 82 240 67 135 173 67 92 76 139 101 33 107 230 162 46 22 147 164 53 197 97 84 17 141 136 68 203 28 234 37 33 57 205 172 218 117 26 186 116 169 66 201 138 144 37 60 114 159 150 193 219 37 225 186 35 127 212 245 174 204 48 97 92 50 249 33 147 245 237 24 108 8 98 177 40 118 145 39 164 108 153 244 138 228 90 17 187 141 245 177 47 86 207 105 203 5 62 59 191 188 113 246 180 242 192 74 9 154 182 173 5 44 86 0 186 51 18 105 72 249 28 218 1 168 95 115 73 43 106 119 235 11 252 33 175 149 24 24 163 2 54 56 187 20 182 111 125 115 65 161 183 148 27 43 188 201 48 148 94 255 84 69 95 211 170 219 167 20 14 127 140 29 129 76 193 1 92 222 50 129 88 17 34 193 0 60 219 26 51 162 80 111 173 81 31 0 248 199 63 168 150 114 36 231 85 165 102 78 49 128 7 56 192 1 15 32 33 0 28 224 186 4 0 119 83 20 32 128 3 48 112 223 160 150 96 192 251 141 193 188 94 32 96 239 94 193 166 34 100 128 126 67 176 150 193 141 119 185 207 33 165 109 219 11 85 245 170 111 126 25 14 173 211 62 17 128 7 236 48 0 14 128 23 127 31 235 183 179 84 173 193 241 66 112 92 136 244 128 22 195 227 111 165 50 11 66 106 12 16 148 206 152 46 62 238 241 33 248 43 14 31 111 12 127 92 9 242 89 238 33 227 34 99 132 184 14 214 42 98 238 43 195 244 193 111 0 243 219 18 134 209 184 49 254 41 135 141 83 226 31 108 51 140 59 211 102 194 0 35 254 80 141 239 139 95 18 18 57 1 108 150 64 2 236 251 0 1 60 32 191 49 6 0 156 241 235 52 252 174 249 206 8 190 115 126 239 59 104 252 22 134 205 15 64 177 255 125 1 80 99 2 208 185 48 123 126 64 154 81 244 104 196 72 128 1 141 169 244 157 41 109 232 253 18 58 210 252 120 244 5 230 28 231 120 137 26 30 116 158 112 148 133 16 68 19 104 134 148 133 49 227 252 86 248 89 254 141 177 185 122 211 48 153 127 41 10 75 83 96 205 36 44 49 138 219 119 105 32 37 90 207 194 106 114 131 225 60 18 30 55 26 193 41 102 180 64 152 93 226 185 32 6 192 251 45 140 179 179 157 179 26 83 155 199 114 38 225 91 236 220 236 0 88 122 131 68 118 64 110 7 236 0 113 31 155 191 231 94 154 176 245 220 100 34 59 154 2 150 46 113 118 87 237 135 243 170 194 215 226 88 51 113 248 11 111 65 231 23 198 134 81 246 128 125 189 109 95 91 154 199 12 15 55 0 208 220 233 109 131 219 219 250 5 119 92 238 156 0 129 240 23 205 27 207 175 199 181 109 112 110 195 152 191 118 22 185 5 96 140 112 70 79 64 227 68 230 54 191 41 225 239 83 216 153 26 32 143 185 186 63 174 95 63 33 120 45 45 95 118 198 37 255 80 99 242 72 28 226 67 215 51 99 86 76 100 139 27 9 227 68 207 201 24 157 102 0 7 120 49 178 73 227 246 177 227 98 114 104 3 137 31 89 135 19 130 91 126 236 18 83 32 186 49 159 185 218 49 0 103 97 205 217 227 240 102 247 91 76 236 232 67 207 171 221 2 54 139 208 163 238 114 59 67 168 206 46 87 58 223 11 90 112 109 207 197 219 240 147 176 224 3 47 103 248 49 28 226 142 119 51 188 68 120 24 185 231 204 235 148 183 116 90 241 126 223 197 234 57 241 36 252 79 213 15 83 99 126 172 253 244 221 28 33 81 24 35 97 62 216 251 179 113 129 115 176 21 255 33 18 66 72 2 208 54 12 236 17 124 251 4 79 220 134 178 95 176 8 19 108 238 118 67 116 135 77 46 126 2 14 225 107 229 67 212 1 233 144 61 31 252 139 34 253 250 215 249 200 6 136 8 141 126 123 236 247 190 234 29 175 126 128 115 74 254 242 155 255 252 232 79 191 250 215 207 254 246 187 255 253 240 143 191 252 231 79 255 250 219 255 254 248 71 156 17 210 254 133 255 18 111 87 5 141 129 122 2 184 3 139 22 6 118 166 106 45 240 127 3 184 128 12 216 128 14 248 128 16 24 129 18 152 7 44 214 65 255 113 1 21 56 129 26 88 52 106 178 0 161 244 58 77 101 1 88 86 26 23 118 1 41 180 129 40 168 43 35 37 20 1 160 74 147 193 55 164 145 91 62 19 91 113 97 49 181 130 55 2 225 90 102 52 23 255 161 101 68 145 129 41 24 132 72 96 46 224 164 128 186 7 15 5 99 91 194 133 92 198 165 62 200 53 25 183 227 50 73 85 102 235 229 92 39 197 84 193 17 31 176 34 132 92 104 4 231 131 24 180 151 33 147 150 25 121 179 55 110 180 94 33 150 51 240 181 79 63 102 70 4 80 94 91 102 70 114 216 26 176 101 132 93 120 135 59 0 66 123 230 62 26 96 63 72 84 130 179 115 134 241 21 90 123 163 92 102 38 107 177 22 135 84 232 111 53 135 135 142 232 3 248 179 96 28 96 25 108 132 66 202 129 14 170 34 136 33 230 70 99 166 28 57 211 31 114 200 7 230 85 91 84 232 134 85 246 250 136 168 200 4 237 148 52 243 49 63 231 165 137 39 164 62 186 118 66 94 100 63 102 132 70 231 37 135 222 178 138 209 149 138 190 248 139 192 24 140 194 56 140 196 88 140 198 120 140 200 152 140 202 184 140 204 88 11 52 33 25 68 97 122 205 56 141 68 128 21 195 34 2 183 248 66 218 192 73 212 248 19 59 242 133 118 120 1 217 56 98 252 128 18 145 245 33 55 102 11 30 212 141 62 241 133 34 132 128 28 128 55 109 177 62 57 67 74 94 196 59 188 147 25 150 81 54 173 64 62 236 200 18 122 216 69 135 165 55 129 181 62 45 88 24 126 104 70 172 53 70 246 19 107 91 40 10 254 248 143 43 225 23 16 50 144 168 212 52 103 232 70 10 25 67 41 36 143 178 176 142 18 121 38 227 8 0 238 161 143 104 212 70 236 245 28 80 166 10 90 20 146 123 49 146 227 69 74 2 177 145 105 100 57 50 121 11 22 233 146 58 185 147 60 217 147 62 249 147 64 25 148 66 57 148 68 89 148 70 121 148 72 153 148 74 185 148 230 16 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
eranovaLogoGif
	"'imgs/color-slo-small.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 161 0 40 0 135 0 0 35 38 39 39 42 44 39 44 46 42 44 45 41 45 48 41 48 51 45 50 53 46 53 57 48 52 54 49 54 57 49 57 61 54 60 63 54 61 65 56 63 67 57 65 69 61 68 71 56 67 72 60 68 73 61 71 76 61 72 78 62 76 84 65 70 73 64 74 78 66 76 81 65 78 85 68 77 82 66 80 87 70 80 85 67 81 88 69 82 89 74 83 87 72 83 89 73 85 90 74 86 92 76 86 92 74 88 95 77 88 93 75 92 101 76 90 97 78 92 99 77 93 101 77 95 105 80 92 99 81 94 101 80 96 104 82 101 110 85 98 105 85 100 107 86 101 109 88 100 107 89 103 110 93 104 110 85 103 113 86 104 114 87 106 116 88 104 112 88 107 117 91 109 117 94 105 112 92 108 116 89 109 120 93 111 120 93 113 122 93 114 125 95 117 127 96 110 117 101 112 118 96 112 120 97 115 124 97 116 126 100 115 122 101 118 126 105 117 124 118 118 118 119 119 120 118 120 122 121 122 123 98 119 129 100 118 128 100 120 130 101 121 132 102 124 134 106 121 129 106 123 132 104 124 134 104 126 138 108 127 136 119 126 129 123 126 128 103 128 141 106 128 139 105 129 141 108 130 141 106 132 145 109 133 145 109 135 149 111 137 151 119 128 132 124 129 131 124 133 137 126 136 142 113 134 145 113 137 149 113 138 152 114 140 154 114 142 156 117 141 153 116 142 156 125 140 147 126 142 152 118 144 157 122 145 156 126 144 153 125 146 157 117 146 161 119 149 164 120 146 160 121 148 162 121 150 165 124 147 160 126 148 160 124 150 164 124 152 166 122 153 169 124 154 169 125 156 171 126 157 173 126 159 176 127 160 176 190 157 92 163 157 127 182 155 101 182 156 106 188 158 97 186 158 104 181 159 112 174 160 118 173 162 125 187 162 109 189 161 105 191 163 108 189 164 110 179 161 117 179 163 123 186 164 116 186 168 125 218 155 54 216 156 59 223 160 60 236 153 26 254 152 0 252 155 11 245 155 19 242 156 25 251 157 17 226 153 39 228 156 44 238 158 38 229 158 49 241 158 32 255 161 23 253 162 27 236 160 43 229 160 52 226 161 59 232 161 50 232 164 58 243 161 38 242 162 41 250 163 34 240 164 48 212 159 70 206 160 79 198 160 91 204 161 86 202 163 91 201 163 93 204 163 89 206 164 90 205 165 94 214 160 71 212 161 76 219 161 68 217 162 73 218 164 75 217 164 77 211 164 84 208 164 89 217 166 81 217 168 86 216 169 92 195 162 98 194 165 108 198 168 109 203 168 102 192 166 114 194 168 115 205 175 118 210 172 105 225 164 67 130 132 133 128 134 137 129 137 140 136 139 141 129 140 147 132 144 150 130 147 155 138 146 150 136 147 152 142 159 155 146 159 153 159 159 146 129 150 161 129 153 165 133 152 162 132 154 165 129 154 168 129 156 170 129 158 173 132 156 169 132 158 172 138 155 164 136 157 168 128 159 176 143 160 158 147 161 156 152 160 147 153 162 152 155 164 154 157 165 153 130 160 174 133 160 170 132 161 174 141 162 165 138 162 171 129 160 176 132 162 177 137 163 176 138 166 180 142 168 178 146 164 164 162 156 132 163 160 133 164 162 138 171 161 129 169 163 132 172 163 128 170 166 139 172 168 142 163 165 146 169 168 144 178 165 129 178 169 138 180 176 151 166 175 166 171 175 161 33 249 4 3 0 0 128 0 44 0 0 0 0 161 0 40 0 0 8 255 0 1 9 28 56 80 93 34 93 158 64 89 90 200 16 148 167 88 195 126 117 98 72 177 34 67 95 2 195 237 58 37 239 15 193 116 144 106 113 74 5 42 212 169 81 186 18 169 251 227 81 224 31 107 212 98 202 140 185 141 229 53 102 98 144 137 73 102 141 160 79 64 127 252 80 35 147 19 25 178 43 202 218 112 107 57 144 221 204 153 126 6 254 121 42 147 219 207 106 108 146 93 49 122 148 12 28 109 76 127 226 163 116 201 162 89 75 154 92 69 18 117 182 98 32 64 138 202 90 18 212 18 222 173 182 11 47 197 58 55 80 91 146 191 128 1 179 201 150 44 48 224 49 97 93 102 35 163 196 176 225 100 217 8 110 115 252 183 218 64 107 148 149 44 21 232 167 25 22 202 129 201 104 251 73 206 20 222 182 154 130 193 58 109 169 81 35 138 130 4 218 195 196 122 97 39 112 2 241 128 78 194 134 201 110 103 62 255 56 107 188 27 48 147 56 3 117 83 222 12 136 25 101 49 30 95 126 46 14 248 74 228 129 246 228 214 54 139 139 216 105 99 218 231 254 255 217 23 158 117 39 190 206 65 251 222 141 88 42 25 234 134 153 100 99 25 39 115 84 64 235 166 27 118 198 18 14 124 195 100 12 132 200 118 167 173 242 11 94 154 84 36 136 58 9 18 184 208 47 127 136 241 31 101 203 248 17 93 27 19 6 198 140 71 221 80 134 133 57 2 93 147 25 136 212 100 24 152 64 249 56 120 218 48 164 16 40 200 107 102 221 178 72 37 103 117 98 14 113 148 53 3 7 142 134 93 49 16 54 60 26 7 7 27 234 173 3 136 51 148 49 193 18 32 68 58 166 204 31 218 172 103 24 22 113 140 177 27 32 230 124 82 91 38 149 148 103 209 37 247 120 121 150 32 45 126 233 13 32 143 180 133 25 104 108 176 132 12 104 1 10 84 24 101 112 0 226 87 102 124 48 73 89 50 45 233 23 152 53 127 96 72 89 77 122 92 9 12 107 164 132 195 206 31 240 224 114 218 46 181 108 39 72 38 102 129 194 14 32 227 180 53 205 110 212 252 193 206 110 205 176 164 77 144 127 41 49 218 100 160 245 241 71 147 134 133 193 18 55 73 70 255 229 39 96 88 120 84 205 149 90 226 149 73 58 4 161 51 17 106 250 72 74 155 69 161 24 25 78 91 241 20 9 8 54 187 225 33 144 127 207 121 132 100 146 139 66 67 25 51 2 77 11 224 31 204 82 70 134 71 245 101 150 226 105 178 252 116 32 94 251 228 122 218 62 13 86 84 73 70 109 209 3 26 98 83 237 86 19 32 111 122 203 18 171 83 122 148 158 97 109 254 49 167 97 150 105 107 88 157 128 52 3 154 24 231 226 133 200 79 145 156 230 10 43 8 170 34 73 62 98 190 11 72 57 109 61 2 218 134 205 129 134 197 55 128 124 10 26 127 128 72 168 47 32 86 58 86 231 141 142 213 10 200 123 131 10 164 178 99 100 148 137 23 45 133 244 236 115 46 167 149 226 200 89 154 60 130 142 71 239 180 75 145 198 13 91 116 8 104 157 254 145 175 99 99 132 184 219 53 118 146 250 87 27 2 181 108 24 30 47 81 198 6 80 55 7 166 132 71 37 130 6 71 42 42 110 135 201 60 103 221 179 164 64 224 68 99 247 221 209 128 51 207 40 120 17 255 2 218 82 235 104 157 4 215 128 8 234 152 18 70 162 74 89 53 30 45 67 217 29 33 59 86 211 31 124 84 110 185 229 212 36 35 120 18 213 136 217 246 151 255 152 133 201 162 63 125 180 8 42 172 13 146 164 71 138 59 6 232 31 94 27 6 29 32 208 58 38 31 217 148 157 243 205 172 73 136 81 58 80 217 176 193 187 99 230 124 190 157 56 102 169 242 59 126 243 216 226 185 69 134 236 217 223 110 163 253 33 165 97 27 254 65 179 99 208 177 116 61 96 218 220 234 24 127 76 65 9 71 217 197 213 106 124 109 200 91 68 74 98 2 221 195 150 131 209 59 70 248 246 253 2 2 43 212 2 13 159 68 156 127 88 130 237 180 161 48 195 104 70 42 216 32 195 247 168 243 164 231 173 111 33 237 171 136 36 230 38 144 117 244 162 45 182 104 75 253 8 198 18 244 1 70 25 2 73 27 101 34 99 142 223 8 132 29 188 99 194 58 6 6 152 100 88 8 63 205 16 92 1 41 195 181 80 176 166 18 155 200 161 14 119 200 67 29 114 34 83 22 153 196 79 255 134 118 22 71 28 235 44 134 32 149 57 254 176 142 221 32 236 95 241 49 146 8 29 195 184 63 124 99 129 88 200 6 169 128 3 148 218 25 144 26 226 163 12 214 60 193 154 123 44 239 140 227 170 136 16 125 194 55 179 204 2 16 71 52 203 34 98 102 171 221 88 6 118 11 203 22 104 148 0 34 64 244 129 50 202 240 226 95 150 0 22 44 45 48 9 74 216 70 225 246 120 52 93 176 38 17 247 57 227 79 236 97 150 53 18 100 88 22 129 7 32 164 209 150 57 110 107 145 160 49 146 245 64 19 42 60 70 75 32 127 164 26 254 254 242 36 129 24 14 96 44 89 37 96 102 71 201 211 252 2 98 163 200 165 46 119 57 10 96 180 162 146 62 113 135 210 24 162 137 149 196 209 34 158 12 12 194 100 249 151 217 181 206 48 212 232 223 199 90 114 39 195 196 208 49 209 148 19 104 176 129 59 111 69 165 29 14 180 132 40 22 197 20 157 157 101 17 156 0 38 65 146 102 150 80 92 234 152 21 73 38 96 176 246 7 255 197 105 138 134 137 76 53 169 56 255 144 118 80 102 106 198 153 219 33 149 4 8 116 8 142 139 128 184 203 105 130 49 55 72 176 134 31 103 177 164 64 216 105 145 84 188 179 147 60 66 92 65 77 120 36 145 69 5 159 128 81 66 36 195 104 54 199 100 15 16 207 60 12 218 118 195 205 140 132 211 18 157 168 69 45 126 133 151 99 200 34 162 62 161 104 69 64 129 142 77 182 133 17 178 11 225 110 174 195 175 192 204 174 168 45 156 219 29 38 100 25 129 132 203 164 30 153 97 20 9 242 203 7 82 228 18 236 194 41 65 132 121 22 120 252 33 141 22 1 106 104 252 165 44 150 129 6 26 29 4 13 227 146 243 31 153 9 4 138 202 236 38 247 194 130 14 50 90 117 33 192 56 70 91 38 145 24 76 86 228 24 136 144 196 79 247 211 181 133 45 9 174 180 122 3 98 255 210 158 129 116 8 62 32 19 72 24 22 166 216 221 124 43 44 233 72 167 85 93 33 12 188 72 84 32 243 107 155 88 1 19 153 122 126 108 32 6 155 80 22 41 40 72 208 220 75 178 38 10 76 54 125 162 142 85 255 172 239 18 195 232 172 103 205 101 188 209 38 129 160 251 163 140 179 4 18 37 19 97 161 169 4 65 170 99 194 224 147 216 153 232 58 165 171 199 41 84 116 9 91 232 131 18 172 249 44 32 224 225 215 138 152 130 109 102 241 237 24 62 106 47 169 164 182 56 98 152 79 98 94 121 178 176 156 55 164 82 13 12 65 151 135 142 121 228 162 187 95 18 5 48 248 193 139 151 90 66 187 128 200 135 186 40 82 10 117 128 55 172 129 9 152 114 147 128 133 66 186 4 15 135 12 12 22 156 97 164 210 89 171 56 74 128 110 5 153 137 5 107 176 55 169 146 60 33 57 232 177 136 87 244 34 23 189 136 69 33 30 161 15 127 244 163 24 39 230 133 140 103 76 99 26 15 131 130 5 121 196 49 50 161 9 76 144 2 18 32 130 196 34 134 76 228 33 231 195 25 72 118 198 117 174 145 228 38 59 99 182 4 17 10 51 146 129 133 37 88 121 39 109 184 6 201 150 199 100 39 59 249 117 63 185 6 81 150 192 132 49 56 227 27 127 240 134 151 145 124 13 248 133 248 255 205 112 14 177 59 220 28 231 58 19 132 37 120 182 179 158 93 146 231 61 251 249 207 128 14 180 160 7 77 232 66 27 250 208 62 241 66 9 126 16 20 40 12 196 209 3 73 131 27 232 44 201 52 156 225 140 118 240 194 239 206 224 134 42 32 250 211 160 254 201 19 50 96 7 22 216 192 11 35 168 176 28 74 6 20 12 184 65 32 62 216 67 5 103 61 144 42 156 129 137 2 49 129 26 8 82 225 10 211 0 10 158 106 9 57 231 208 7 57 80 58 212 200 254 243 31 14 16 149 46 80 64 3 27 200 192 23 124 144 5 24 196 192 3 127 88 64 20 76 80 134 0 148 97 2 72 120 128 30 118 224 2 11 176 196 13 3 152 194 13 92 176 129 111 32 96 7 14 232 195 5 140 80 129 62 160 224 5 25 248 67 4 248 176 129 25 188 128 223 51 80 128 30 56 112 6 20 80 97 5 18 152 67 178 23 30 232 60 64 64 32 44 120 66 3 252 224 132 30 56 192 11 5 72 65 2 212 48 128 19 252 193 12 29 224 131 2 254 96 129 50 8 32 5 5 255 200 19 31 34 176 6 2 164 192 0 102 184 0 32 22 64 7 9 0 66 2 92 0 193 31 46 128 135 8 156 192 11 127 96 0 10 170 176 142 4 112 161 4 37 224 2 0 82 160 0 48 48 252 233 123 214 195 200 211 112 128 53 48 128 228 111 112 0 13 136 112 13 42 152 32 10 13 248 195 9 182 240 132 26 248 33 2 78 24 2 54 166 224 145 31 180 160 8 68 168 134 21 80 224 133 60 76 160 5 79 176 131 4 122 80 132 62 52 160 7 57 216 183 23 58 96 129 57 60 129 5 27 64 195 3 186 16 130 118 72 1 234 144 183 51 15 46 16 130 57 112 65 6 36 0 66 19 108 160 7 16 132 160 14 65 248 6 17 220 0 5 25 28 65 15 117 120 2 31 68 16 2 52 8 228 11 36 176 131 8 64 128 134 33 248 65 13 92 216 65 31 206 16 133 61 124 128 4 104 56 2 31 204 240 129 21 236 65 11 42 48 0 29 132 96 247 63 140 0 4 91 136 188 244 253 108 134 7 240 225 216 160 238 195 3 116 96 130 63 204 193 1 95 88 94 2 64 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
excelBigGif
	"'imgs/excel_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 34 0 32 0 135 0 0 0 0 0 0 128 0 128 128 128 192 192 192 192 220 192 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 3 0 0 4 0 44 0 0 0 0 34 0 32 0 0 8 255 0 9 8 28 72 176 160 193 131 8 13 10 88 200 176 161 67 134 9 15 10 40 64 177 162 197 139 5 4 0 136 88 112 34 198 143 20 23 110 84 24 64 64 201 147 38 83 158 4 41 96 128 70 131 40 99 170 76 57 160 102 205 138 19 93 142 28 104 18 164 197 158 31 61 234 36 88 178 0 74 156 69 139 6 173 56 84 96 207 153 25 87 154 180 73 85 39 128 171 88 5 38 53 58 51 105 75 139 3 192 50 29 9 52 0 215 163 81 195 50 21 75 113 192 72 165 70 207 122 228 90 181 238 88 167 102 207 202 53 59 149 109 219 187 4 188 174 60 90 82 237 223 181 109 201 242 141 169 119 106 93 170 128 5 171 60 91 216 111 1 195 110 241 6 69 217 23 241 225 203 111 231 250 44 252 216 38 224 174 168 79 26 190 12 50 115 224 212 168 87 51 189 153 56 225 220 199 151 105 155 174 141 240 54 219 221 187 65 219 246 204 58 183 93 222 18 103 87 53 222 150 182 240 222 196 213 2 119 238 58 249 231 226 211 49 239 84 168 188 244 241 234 220 125 138 23 71 30 126 188 79 240 29 189 171 167 186 189 32 214 247 240 227 203 231 72 159 126 64 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
excelSmallPng
	"'imgs/ikone-dok/corendal-excel.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 130 73 68 65 84 120 156 98 248 15 3 155 14 221 216 120 240 250 134 3 215 214 237 187 178 118 239 165 213 187 46 174 218 121 126 197 182 179 203 182 157 94 186 229 212 191 127 80 101 0 1 196 144 187 33 61 115 109 82 234 242 232 248 133 193 81 179 60 131 39 59 248 246 152 185 183 234 58 53 168 218 85 203 125 254 254 239 237 151 191 115 86 31 48 247 78 253 7 214 4 16 64 32 13 255 113 0 227 2 222 47 223 255 189 255 242 119 234 146 157 187 142 94 129 232 1 8 32 144 134 201 135 250 82 86 36 4 77 247 0 42 58 115 235 116 220 140 80 32 154 179 97 182 113 46 223 151 31 127 223 127 253 59 121 209 118 160 106 8 2 8 32 134 244 85 241 79 223 60 157 124 164 55 107 77 170 83 167 105 201 210 130 196 5 17 238 29 214 215 30 93 51 206 228 159 176 238 26 4 45 221 115 103 201 238 187 64 13 0 1 196 144 184 40 4 104 240 249 187 231 103 29 155 22 189 40 194 170 86 221 40 67 227 192 197 3 64 65 147 100 193 207 63 64 78 2 106 120 248 230 207 194 93 119 205 188 82 0 2 136 33 98 134 59 80 110 194 222 238 136 121 65 211 142 76 4 234 177 46 84 42 152 157 123 255 229 125 147 56 17 184 13 247 95 253 158 187 227 30 80 3 64 0 49 248 247 89 2 85 219 148 203 91 229 203 153 37 75 3 217 30 147 236 173 51 228 22 110 158 111 18 33 10 52 254 213 71 144 13 119 95 254 158 185 237 1 80 3 64 0 49 184 181 232 32 135 76 251 202 86 203 2 57 211 56 169 132 186 24 147 32 113 184 13 183 158 253 158 186 249 17 80 3 64 0 49 216 215 42 226 10 86 83 95 137 23 239 255 60 122 243 231 206 139 223 215 158 252 234 223 248 24 168 1 32 128 24 172 202 37 129 225 109 146 203 7 12 19 147 20 33 147 56 97 160 75 76 130 197 77 124 37 77 61 165 128 170 239 190 248 13 180 225 210 195 95 93 235 158 0 53 0 4 16 3 220 188 153 43 246 189 248 240 247 229 135 191 64 242 249 251 63 79 223 254 121 248 26 164 244 250 211 95 64 242 220 189 159 173 107 158 1 53 0 4 16 66 195 180 101 187 31 189 249 13 119 52 200 221 207 127 193 217 167 110 255 104 92 254 28 168 1 32 128 16 26 128 241 15 244 217 173 231 191 111 62 251 125 227 233 175 107 79 126 95 126 244 251 194 131 159 103 238 254 56 121 251 231 241 91 63 106 150 188 4 106 0 8 32 132 6 96 252 95 122 244 107 222 142 251 192 224 155 186 229 209 196 141 143 122 214 63 233 88 251 180 101 245 179 134 229 207 171 151 190 168 88 252 26 168 1 32 128 16 26 128 28 98 16 64 128 1 0 75 134 252 209 86 255 47 249 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
favicon
	"'imgs/favicon.ico' asFilename contentsAsMethod"
^#(0 0 1 0 2 0 16 16 0 0 0 0 0 0 104 5 0 0 38 0 0 0 16 16 0 0 0 0 0 0 104 3 0 0 142 5 0 0 40 0 0 0 16 0 0 0 32 0 0 0 1 0 8 0 0 0 0 0 64 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 255 0 0 0 0 0 153 204 255 0 102 153 204 0 191 191 191 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 255 255 255 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 4 4 4 4 1 1 1 1 1 1 2 2 1 3 3 1 1 4 4 4 4 1 1 1 2 2 2 2 1 3 3 3 3 1 4 4 4 1 1 2 2 2 2 2 1 3 3 3 3 3 1 4 1 1 1 2 2 2 2 2 1 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 1 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 1 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 1 3 3 3 3 3 1 1 1 1 1 2 2 2 1 1 2 1 1 3 3 3 1 1 1 1 1 2 1 1 2 2 2 2 2 1 1 3 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 255 19 156 248 1 16 160 224 0 19 92 192 0 16 160 128 1 19 100 128 3 16 160 128 3 19 108 128 3 16 160 128 3 19 116 128 3 16 160 128 3 19 124 192 7 16 160 224 15 19 132 248 63 16 160 255 255 19 140 255 255 16 160 40 0 0 0 16 0 0 0 32 0 0 0 1 0 24 0 0 0 0 0 64 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 191 191 191 191 191 191 191 191 191 191 191 191 191 191 191 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 0 0 0 0 0 0 191 191 191 191 191 191 191 191 191 191 191 191 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 191 191 191 191 191 191 191 191 191 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 191 191 191 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 102 153 204 102 153 204 102 153 204 102 153 204 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 0 0 0 0 0 0 153 204 255 0 0 0 0 0 0 102 153 204 102 153 204 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 0 0 0 102 153 204 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 153 204 255 153 204 255 153 204 255 153 204 255 153 204 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 255 19 156 248 1 16 160 224 0 19 92 192 0 16 160 128 1 19 100 128 3 16 160 128 3 19 108 128 3 16 160 128 3 19 116 128 3 16 160 128 3 19 124 192 7 16 160 224 15 19 132 248 63 16 160 255 255 19 140 255 255 16 160 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
folderYellowClosedPng
	"'imgs/suse/suse-folder_closed.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 3 0 0 0 40 45 15 83 0 0 0 129 80 76 84 69 255 255 255 204 153 51 203 152 50 201 150 48 199 148 46 255 255 255 194 143 41 255 255 153 189 138 36 186 135 33 183 132 30 181 130 28 179 128 26 176 125 23 255 247 145 255 244 142 174 123 21 102 102 102 255 235 133 255 230 128 197 146 44 192 141 39 188 137 35 184 133 31 180 129 27 255 224 122 163 112 10 255 212 110 248 197 95 160 109 7 255 204 102 239 188 86 158 107 5 230 179 77 156 105 3 191 140 38 220 169 67 154 103 1 211 160 58 153 102 0 171 120 18 168 117 15 165 114 12 116 56 156 204 0 0 0 1 116 82 78 83 0 64 230 216 102 0 0 0 1 98 75 71 68 0 136 5 29 72 0 0 0 9 112 72 89 115 0 0 14 194 0 0 14 194 1 21 40 74 128 0 0 0 7 116 73 77 69 7 210 9 10 13 46 39 87 90 186 133 0 0 0 135 73 68 65 84 120 156 101 207 235 14 130 48 12 5 224 110 48 10 58 145 194 16 1 153 136 92 212 247 127 64 55 50 146 37 251 254 245 164 73 79 1 2 140 241 40 246 103 97 37 126 128 134 72 179 211 89 94 108 192 243 171 181 239 21 100 130 168 172 212 174 190 53 119 41 1 226 86 137 67 37 58 2 213 51 60 60 112 32 72 52 199 220 121 226 72 80 107 133 165 243 194 137 32 213 111 108 157 25 23 130 76 55 216 59 43 110 230 176 233 83 124 190 191 110 24 167 101 35 219 132 124 225 175 129 63 253 91 11 53 214 159 30 119 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
folderYellowOpenedPng
	"'imgs/suse/suse-folder_opened.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 3 0 0 0 40 45 15 83 0 0 0 117 80 76 84 69 255 255 255 204 153 51 203 152 50 201 150 48 199 148 46 255 255 255 194 143 41 255 255 153 189 138 36 186 135 33 183 132 30 181 130 28 179 128 26 176 125 23 255 247 145 255 244 142 255 224 122 102 102 102 255 235 133 255 230 128 197 146 44 174 123 21 192 141 39 184 133 31 180 129 27 220 169 67 158 107 5 255 204 102 248 197 95 156 105 3 154 103 1 255 212 110 211 160 58 153 102 0 171 120 18 168 117 15 165 114 12 163 112 10 160 109 7 41 224 143 149 0 0 0 1 116 82 78 83 0 64 230 216 102 0 0 0 1 98 75 71 68 0 136 5 29 72 0 0 0 9 112 72 89 115 0 0 14 194 0 0 14 194 1 21 40 74 128 0 0 0 7 116 73 77 69 7 210 9 10 13 46 54 61 234 154 119 0 0 0 135 73 68 65 84 120 156 101 143 235 18 130 32 16 70 215 11 162 133 193 162 80 136 90 118 123 255 71 140 221 154 198 25 206 191 239 204 94 1 50 138 162 172 234 125 22 68 179 23 50 33 218 238 112 84 61 137 242 164 181 209 154 235 122 76 162 178 131 37 134 4 139 218 252 243 87 140 134 112 222 251 241 124 81 10 160 225 204 35 68 144 19 130 143 49 186 217 74 234 11 114 65 104 57 91 110 12 114 69 232 102 23 175 63 110 114 75 99 211 61 238 254 120 190 222 211 178 110 72 123 112 79 254 107 198 7 32 212 11 87 225 11 89 100 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'layout' stamp: ' 21/4/07 10:33'!
headerBanner
	^WebElement newId: #banner! !

!DefaultWebStyle methodsFor: 'layout' stamp: 'JM 4/26/2007 13:44'!
headerDashboard
	"login, font size selection, etc"
	^(WebElement newId: #dashboard)
		add: self headerLogin;
		add: ((WebElement newId: #switcher)
			addHelpLink; addNbSp;
			addGif: #textFontSizeGif size: 54@15; 
			addLinkTo: '/' gif: #textSizeSmallGif title: 'Small font size' size: 16@15; 
			addLinkTo: '/' gif: #textSizeMediumGif title: 'Medium font size' size: 16@15; 
			addLinkTo: '/' gif: #textSizeLargeGif title: 'Large font size' size: 16@15; 
			yourself);
"		add: (WebElement new style: '{flow: right}'; addGif: #cornerDashboardRightGif; yourself);"
		yourself! !

!DefaultWebStyle methodsFor: 'layout' stamp: 'np 10/3/2008 20:06'!
headerElement
	^(WebElement newId: #header)
		add: ((WebElement newId: #logo)
			addImage: '/img/aidabannerjpg.jpg'; yourself ); yourself! !

!DefaultWebStyle methodsFor: 'layout'!
headerLogin
	| e |
	e := WebElement new.
	e addNbSp: 3; addGif: #keyGif.
	self app user isGuest
		ifTrue: [e addTextBold: ' ', self guestUserText]
		ifFalse: [e add: self headerUserElement].
	self app user isGuest 
		ifTrue: 
			[e addText: ' | '; addLinkTo: self site admin text: self loginText view: 'login'.
			self site registrationAllowed ifTrue:
				[e addText: ' | '; addLinkTo: self site registration text: self registerText] ]
		ifFalse: 
			[e addText: ' | '; addLinkTo: self app user text: self profileText.
			e addText: ' | '; addLinkTo: self site admin text: self logoutText view: 'logout'].
	^e! !

!DefaultWebStyle methodsFor: 'layout' stamp: 'janko 8/25/2012 20:03'!
headerUserElement
	| e usr te adminStyle |
	e := WebElement newSpan. e ensureId.
 	usr := self app user.
	adminStyle := 'color: red'.
	te := e addTextBold: ' ', usr name, ' ', usr surname.
	usr hasAdminRights 
		ifTrue: 
			[te style: adminStyle. e addSpace.
			usr isAdminUser not
				ifTrue: [(e addNilLinkText: #en-> '(Admin)')
						style: adminStyle;
						onClickDo: 
							[usr unEscalateFromAdmin. 
							self app page redirectTo: self app observee] ] "to refresh links too"
				ifFalse: [e addText: #en->'(has always Admin rights)'] ]
		ifFalse: 
			[usr inAdminGroup ifTrue: 
				[(e addSpace; addNilLinkText: #en-> '(be Admin)')
					onClickDo: 
						[usr escalateToAdmin. 
						self app page redirectTo: self app observee] ] ]. "to refresh links too"
	^e! !

!DefaultWebStyle methodsFor: 'layout'!
htmlHeaderElements
	self app context page addMetaDescription: 'Demo of AIDA/Web Smalltalk Web Application server'.
	self app context page addMetaKeywords: 'Smalltalk, Web, Web Server, Web Applications, HTML'.! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
ieBigGif
	"'imgs/ie_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 35 0 34 0 135 0 0 27 67 106 45 70 89 45 74 94 55 77 92 56 78 95 44 75 98 32 79 115 42 80 115 44 86 126 46 90 126 52 81 101 59 85 97 48 85 114 48 90 125 59 90 114 60 94 122 61 98 122 66 92 102 69 96 106 72 101 111 68 98 114 80 111 126 89 115 121 29 85 136 29 97 155 36 90 141 37 91 145 37 98 143 35 104 153 54 102 143 63 105 138 55 106 150 56 117 154 39 120 170 34 120 177 49 111 163 48 114 163 57 120 167 50 124 190 43 126 197 71 106 131 66 110 143 76 113 135 68 114 146 73 122 145 74 122 154 82 113 128 90 119 128 91 124 131 84 123 144 66 127 183 37 129 182 49 132 188 57 129 180 58 132 189 38 138 205 45 133 198 45 133 201 37 134 210 37 137 212 37 142 220 42 134 213 45 134 219 42 138 212 42 143 221 39 148 219 51 132 195 53 137 204 56 130 198 58 134 202 49 134 216 54 157 219 46 139 225 37 147 225 38 153 226 43 148 229 46 150 232 41 155 229 45 154 232 54 142 225 49 143 232 51 148 228 50 148 234 50 159 224 51 155 236 56 145 229 59 155 234 57 157 241 57 167 220 44 166 233 38 164 243 37 171 249 40 172 247 45 177 238 51 164 233 57 166 242 57 179 237 55 182 245 59 193 245 95 132 138 87 131 157 91 132 153 93 136 144 92 136 155 69 134 180 67 130 185 69 139 189 78 133 177 79 139 183 73 146 179 84 131 162 87 142 167 86 142 170 91 142 161 87 143 180 93 147 171 83 151 178 101 132 139 108 138 142 98 133 145 99 139 144 108 141 147 107 146 150 117 147 148 115 155 157 122 150 148 126 155 149 124 155 153 102 152 165 104 157 187 114 159 179 115 162 172 123 165 166 120 163 175 117 166 191 64 134 193 66 138 196 69 151 198 66 152 223 93 159 198 64 149 224 72 161 200 69 162 219 91 170 201 82 175 213 90 184 216 70 164 234 78 171 233 64 162 245 68 172 247 67 171 248 73 175 248 73 186 231 66 177 246 64 191 247 72 180 246 73 182 248 74 185 247 88 177 233 83 180 243 81 190 248 95 184 243 97 158 196 102 168 197 105 181 202 106 186 216 112 172 195 113 181 202 112 191 204 120 178 207 126 188 195 120 185 203 119 184 211 98 179 227 68 197 245 75 211 247 83 201 235 88 195 249 85 214 245 89 227 249 116 194 206 122 197 212 96 197 225 98 198 250 105 215 245 118 205 238 120 214 249 100 233 252 105 241 251 120 237 254 118 247 254 129 156 151 132 163 156 137 167 157 140 171 159 130 164 163 133 168 162 130 168 171 137 171 164 141 173 169 142 178 172 140 186 185 144 171 161 150 180 165 149 182 173 150 184 175 153 180 167 152 182 169 156 186 171 158 189 176 161 190 173 161 191 176 140 189 194 154 198 189 164 194 175 164 195 178 165 203 188 169 198 178 172 202 181 171 204 185 175 209 190 177 207 184 180 209 186 185 214 189 188 217 190 137 198 203 135 198 212 141 211 217 146 194 195 149 202 207 157 205 201 148 206 217 146 210 209 133 204 243 134 213 231 128 216 250 152 215 230 149 216 243 141 224 232 137 226 253 135 240 254 149 226 232 157 233 253 152 240 254 165 204 193 166 208 198 172 209 194 162 214 213 177 212 193 182 216 195 184 215 192 189 219 192 165 231 252 166 248 254 180 254 255 192 220 192 33 249 4 3 0 0 255 0 44 0 0 0 0 35 0 34 0 0 8 255 0 255 9 28 72 176 160 193 131 8 19 42 36 136 143 156 169 81 163 200 45 156 56 240 91 181 71 144 34 141 162 211 6 75 155 102 221 192 81 60 8 238 98 36 90 128 198 224 225 195 7 80 34 61 215 190 237 155 104 207 92 57 113 226 106 209 34 133 201 150 25 24 122 140 117 19 152 141 212 27 102 67 19 238 171 119 174 221 188 121 240 122 237 154 245 234 21 172 70 115 136 73 155 249 239 27 74 100 221 184 26 196 119 142 159 191 126 80 125 241 218 245 202 149 24 49 154 192 36 34 164 109 32 171 65 200 184 33 180 199 206 159 191 121 239 220 185 227 69 85 76 152 46 136 195 132 57 2 8 90 183 124 166 134 53 243 38 118 32 190 190 254 222 169 187 119 15 87 97 196 89 186 100 201 242 5 204 148 51 207 178 37 51 150 77 95 229 127 250 250 246 91 167 46 95 57 92 175 192 96 81 162 100 116 150 38 77 72 127 57 146 7 218 181 107 220 94 255 35 215 175 159 174 113 251 106 201 122 133 101 6 7 14 34 130 40 1 222 196 137 151 47 153 74 252 255 186 230 77 100 65 110 234 250 229 66 183 15 149 44 89 88 72 192 248 229 39 15 139 27 220 153 120 255 98 69 133 51 202 6 81 243 78 46 225 252 227 158 44 96 132 96 65 54 3 45 243 70 16 77 44 225 4 19 84 124 81 201 7 125 100 99 30 65 226 228 82 14 56 170 192 34 139 43 93 24 208 71 82 2 5 131 131 19 75 48 65 225 21 150 216 240 130 52 223 20 4 78 43 225 148 4 75 91 135 113 0 194 27 115 4 57 7 28 57 48 209 226 139 150 56 66 193 127 5 97 115 202 55 250 68 210 22 24 162 41 17 68 16 60 4 1 196 150 75 28 41 197 21 87 84 242 137 3 202 132 68 16 54 216 252 115 138 43 36 138 198 93 119 78 196 233 162 139 95 130 121 201 45 14 248 81 151 65 213 96 162 73 24 163 53 161 196 14 58 232 176 67 15 63 244 160 104 15 62 24 129 196 19 85 72 18 202 3 123 104 104 16 36 127 186 105 37 6 23 100 144 129 6 26 124 234 233 167 160 114 240 193 7 14 236 161 205 134 2 37 3 134 38 154 42 255 145 4 0 126 36 165 220 72 143 252 249 197 111 178 46 145 129 48 222 16 116 204 26 105 200 144 134 26 137 136 146 138 33 198 88 35 211 153 175 134 225 69 22 113 46 145 68 15 119 64 19 236 63 221 8 226 3 20 95 126 17 203 59 242 4 114 135 179 5 153 162 88 24 187 82 193 98 151 39 144 193 140 54 219 8 210 3 184 95 124 1 202 58 253 180 243 0 12 232 14 164 143 35 97 76 225 68 190 94 76 104 36 20 72 16 113 72 17 223 86 168 175 46 253 240 227 198 0 170 178 74 143 23 97 100 176 193 119 95 92 49 161 20 224 66 1 174 20 21 110 18 139 46 243 240 147 74 0 46 48 73 16 57 91 76 81 0 5 53 88 145 239 21 84 80 33 197 207 40 231 219 201 45 235 180 204 74 1 18 4 179 106 65 171 108 65 131 2 118 252 129 70 20 148 80 2 230 213 148 124 193 73 44 184 144 219 78 32 10 68 208 71 192 4 157 178 5 9 20 108 5 141 27 38 60 97 69 213 148 84 194 9 40 183 232 178 78 58 169 180 16 192 4 126 56 150 203 170 64 102 143 80 193 182 208 228 177 194 8 68 48 162 136 36 147 120 210 74 43 139 164 80 192 2 47 8 147 205 55 127 11 68 141 22 52 184 176 237 63 210 0 211 66 7 8 28 128 64 2 13 48 160 192 0 18 192 0 12 52 218 212 136 16 62 63 104 81 67 49 250 216 67 142 33 139 200 17 3 12 99 212 33 188 29 121 0 179 140 52 218 148 183 80 33 57 240 192 195 15 67 32 194 70 25 121 28 19 141 52 211 92 99 205 53 217 36 143 57 69 222 28 67 70 10 30 160 240 66 29 192 100 227 141 55 223 180 143 185 72 183 142 36 255 66 1 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
imageSmallPng
	"'imgs/ikone-dok/corendal-jpeg.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 149 73 68 65 84 120 156 98 248 15 6 237 43 239 160 161 142 213 247 90 22 95 3 50 94 127 252 249 31 9 0 4 16 3 92 195 127 84 240 239 223 255 159 127 64 226 229 91 94 165 148 246 174 218 176 251 193 227 231 63 126 254 2 8 32 236 26 32 170 191 252 250 239 178 236 59 16 57 77 126 80 215 62 253 224 209 115 111 222 125 4 8 32 132 134 95 191 126 161 169 126 251 237 255 153 171 32 180 106 243 215 250 206 45 211 231 173 186 126 243 62 64 0 33 52 252 248 241 227 255 252 138 239 185 166 255 75 205 255 247 187 253 95 19 250 255 96 226 163 143 255 239 188 251 127 237 245 255 93 39 191 20 86 117 29 58 118 22 32 128 16 26 190 125 251 246 191 61 108 103 130 225 255 114 203 255 211 60 255 111 141 250 127 119 230 255 243 101 127 87 133 76 92 123 110 239 217 207 9 25 149 219 119 31 6 8 32 132 134 207 159 191 108 183 50 202 55 209 216 100 42 124 194 90 230 170 147 252 171 72 173 119 177 58 183 61 149 218 231 30 223 117 230 115 84 114 201 150 29 7 0 2 8 161 225 221 135 79 15 38 198 205 138 54 90 144 164 243 166 217 244 115 143 249 247 125 169 95 187 205 95 181 219 119 172 60 183 253 228 39 136 6 128 0 130 106 104 94 116 245 229 155 15 215 23 214 111 175 13 78 118 214 187 61 33 252 217 204 144 111 87 170 190 223 174 191 57 57 161 121 229 149 173 39 160 26 0 2 8 170 161 113 206 249 39 47 223 29 154 51 117 87 71 85 132 163 203 246 230 130 203 243 75 158 30 107 122 123 170 230 224 132 218 154 229 183 54 30 253 8 209 0 16 64 80 13 181 83 79 220 127 246 102 205 244 53 253 181 75 115 50 119 44 107 155 242 248 72 211 175 231 109 255 159 53 108 157 62 185 116 233 189 245 135 63 64 52 0 4 16 84 67 85 255 161 219 143 94 205 152 116 168 171 113 219 132 198 245 147 155 214 172 154 48 251 230 174 182 39 7 234 230 246 172 40 89 241 108 245 65 168 6 128 0 130 106 40 235 216 125 245 254 139 139 47 254 174 187 244 109 229 133 111 75 206 126 91 112 250 219 156 147 223 166 31 255 54 249 200 183 165 23 255 174 216 255 30 162 1 32 128 160 26 138 155 182 94 188 253 236 226 139 255 103 158 253 63 250 232 255 193 7 255 119 223 253 191 237 214 255 141 55 254 175 186 242 127 233 165 255 75 247 190 139 78 41 221 186 243 32 64 0 65 53 228 215 172 155 187 246 230 172 21 215 102 44 187 60 125 201 165 153 11 207 76 159 119 114 218 156 99 83 103 30 153 60 237 96 247 196 109 221 125 59 210 11 234 119 237 61 10 16 64 80 13 103 206 95 233 155 178 32 45 191 14 104 12 208 106 52 4 20 4 74 1 21 0 149 1 4 24 0 49 85 52 237 131 13 12 50 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
infoBigGif
	"'imgs/info.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 35 0 34 0 135 0 0 1 1 61 1 1 73 9 27 70 13 30 74 1 18 80 3 30 88 1 1 100 1 8 101 1 11 110 1 12 125 1 25 127 14 35 81 19 38 77 20 41 83 25 45 84 27 49 87 28 50 88 20 52 110 27 54 100 31 56 112 33 52 90 37 56 93 35 59 98 33 60 106 40 63 103 35 64 110 43 67 102 45 66 101 38 68 115 41 76 124 51 69 100 50 71 105 55 73 102 57 77 109 50 75 117 54 81 127 62 83 121 68 86 111 67 90 121 76 99 126 82 100 122 1 28 131 1 28 139 1 33 141 5 45 129 1 39 146 1 43 151 1 43 154 3 49 143 1 48 156 25 63 137 1 48 163 11 63 166 29 68 141 27 74 170 27 79 189 28 81 190 44 74 132 32 72 147 50 80 133 62 95 135 61 100 149 63 98 155 41 94 204 44 96 204 64 99 142 75 101 135 66 99 155 89 108 129 82 110 149 95 112 131 93 117 141 78 109 162 87 125 167 99 119 137 103 123 138 105 124 138 97 118 150 96 127 163 87 128 172 93 138 185 109 128 142 110 132 147 113 133 147 124 142 150 100 136 172 106 129 167 97 138 180 104 140 177 102 145 190 109 146 185 113 138 180 114 144 179 112 149 190 123 155 188 79 134 223 82 133 227 100 135 201 106 141 193 117 150 201 116 154 192 123 149 192 120 151 200 124 154 201 111 161 214 121 160 198 113 161 212 115 170 223 125 168 215 128 146 154 136 154 159 137 155 160 128 153 177 128 159 191 136 156 189 143 161 164 132 162 191 145 162 165 150 168 170 155 173 171 150 174 180 170 175 189 165 182 178 174 191 183 173 190 184 133 157 199 131 157 200 130 163 196 129 165 206 132 169 202 139 170 196 139 172 203 129 168 218 138 175 212 140 178 211 148 173 194 146 174 204 153 174 194 153 174 212 147 177 205 154 176 195 154 178 203 146 180 212 147 182 216 150 184 219 152 182 211 158 185 213 155 187 216 146 188 227 162 183 204 166 185 202 171 187 195 169 187 201 163 189 212 178 191 205 177 195 188 178 196 188 180 197 188 158 193 229 156 196 236 157 193 241 173 195 195 167 192 214 172 197 219 180 195 205 185 195 205 187 204 194 177 196 213 176 198 222 180 201 223 184 198 211 188 201 214 163 196 229 164 198 232 170 198 226 170 199 232 172 201 231 163 203 244 165 207 249 167 209 253 172 210 250 180 204 227 180 207 235 184 206 228 188 210 229 178 212 245 176 212 248 182 216 241 180 217 252 185 215 246 185 216 245 187 221 253 189 226 255 195 205 215 193 209 197 198 216 206 201 218 203 197 210 210 192 210 218 202 211 221 210 214 220 210 216 221 220 222 222 198 217 235 203 220 238 196 218 243 194 222 250 220 222 224 207 224 208 208 224 207 208 225 208 212 228 209 215 231 212 214 233 223 219 235 214 223 239 217 196 226 254 202 228 254 205 232 255 212 227 228 221 227 235 223 236 229 219 234 236 210 226 242 209 230 253 211 234 254 218 230 243 221 233 244 219 237 254 211 243 255 220 241 255 223 249 255 224 240 217 226 242 220 227 244 221 230 246 221 231 248 223 228 228 226 225 229 233 230 232 235 232 231 231 236 237 237 227 235 243 225 239 255 230 246 226 227 242 254 227 250 255 234 245 254 236 250 255 240 240 238 245 245 243 241 246 251 243 251 254 249 248 246 253 254 254 0 0 0 33 249 4 3 0 0 236 0 44 0 0 0 0 35 0 34 0 0 8 255 0 217 9 28 72 176 160 193 131 8 19 178 163 183 205 93 188 135 249 30 202 243 54 44 154 66 133 197 144 233 219 232 175 163 199 126 253 252 241 187 100 241 34 193 110 238 64 246 227 231 177 84 30 125 30 249 133 28 105 82 224 54 120 249 96 122 244 71 2 0 128 2 33 61 238 219 231 111 149 169 139 219 218 189 35 186 243 88 128 20 42 12 108 217 41 82 30 63 102 124 18 38 93 26 147 165 188 3 49 190 204 80 36 242 30 75 127 251 228 221 27 181 231 96 53 101 238 152 242 219 199 175 174 191 62 54 192 132 41 123 175 47 203 123 227 238 193 57 90 240 216 51 121 29 231 210 197 119 86 36 223 123 245 34 179 28 55 110 217 148 130 213 144 113 187 135 246 30 62 207 68 207 242 235 107 47 242 188 211 230 248 225 251 102 174 201 29 130 198 146 113 171 219 183 54 62 43 19 114 236 136 64 64 14 191 122 243 204 145 27 94 15 31 184 111 163 148 148 100 87 234 216 184 207 145 33 123 238 195 34 129 138 21 8 202 240 19 62 156 92 184 112 246 192 45 255 195 21 34 171 192 82 193 196 65 54 61 79 50 63 29 45 98 164 240 195 207 187 247 239 225 204 125 195 133 139 194 156 129 165 172 242 205 61 168 205 67 142 57 230 212 195 15 18 41 200 119 6 62 247 129 19 14 56 18 102 115 11 46 16 184 49 16 41 2 34 216 221 112 249 225 51 68 131 41 60 24 142 54 218 128 131 162 54 225 56 115 203 45 15 104 40 144 37 170 48 195 221 125 223 145 99 207 136 242 153 97 207 137 217 100 163 77 144 218 52 83 139 43 49 14 148 137 38 198 128 131 227 132 223 157 195 99 10 62 14 153 13 54 87 94 105 11 42 143 100 56 80 40 152 156 210 204 119 43 170 24 206 57 62 144 56 198 57 87 98 227 166 155 189 184 50 74 17 14 212 49 16 52 162 96 146 74 54 42 90 41 164 57 105 202 55 134 57 111 2 99 232 47 175 100 226 200 5 32 152 39 208 33 150 88 82 11 54 67 186 41 164 148 41 184 160 128 24 246 96 3 204 47 191 96 195 203 43 146 76 146 196 0 75 72 67 144 53 116 36 82 73 45 206 96 255 233 166 54 190 200 16 3 13 46 212 176 139 167 191 0 51 106 36 139 144 177 128 7 119 168 83 80 40 130 28 210 136 43 190 184 89 14 32 7 188 112 3 16 63 224 0 3 33 162 234 194 138 35 139 164 145 129 3 83 44 71 16 30 94 48 210 136 36 172 228 2 140 46 160 240 34 75 44 177 0 51 139 44 186 180 2 201 34 139 116 193 1 3 70 152 178 206 65 235 216 81 69 178 136 68 50 73 186 188 248 98 232 186 158 56 130 200 32 129 60 209 64 3 68 108 98 44 66 233 232 113 4 22 116 8 34 72 32 129 12 98 136 39 180 196 2 201 195 127 92 193 193 2 21 68 209 201 197 9 173 35 12 21 66 240 224 132 23 94 196 17 199 32 159 124 82 136 22 65 116 32 0 5 40 212 65 76 77 2 89 211 9 21 68 152 128 129 8 92 240 28 11 32 18 48 224 1 17 111 8 99 13 210 171 90 99 141 41 37 140 80 8 37 179 176 81 1 19 124 16 131 14 215 9 17 227 65 22 148 196 162 198 6 175 177 125 17 31 26 64 17 11 26 22 216 30 97 183 73 166 156 160 198 26 22 252 247 183 73 82 244 176 129 157 135 155 164 71 27 156 52 46 185 65 1 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
javaBigGif
	"'imgs/sunjava-java_logo.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 38 0 66 0 196 31 0 254 35 13 52 71 158 255 145 134 154 163 207 205 210 231 254 49 28 255 228 226 254 76 59 254 115 101 103 117 182 255 173 165 255 242 241 255 201 195 230 233 243 255 214 210 243 244 249 254 90 74 254 63 43 128 140 195 192 198 225 116 129 188 77 94 170 254 132 119 255 187 180 167 175 213 179 186 219 90 106 176 255 159 150 218 221 237 141 152 201 65 83 164 255 255 255 33 249 4 1 0 0 31 0 44 0 0 0 0 38 0 66 0 0 5 255 224 39 142 100 105 138 203 169 174 236 136 180 112 252 33 151 108 159 136 112 239 227 161 243 55 3 96 3 188 65 0 142 162 108 3 128 40 99 10 0 242 217 18 72 21 212 213 2 33 125 161 20 8 98 214 113 144 90 68 6 75 1 145 202 50 10 87 145 160 80 168 101 63 81 64 33 185 40 31 12 119 31 14 112 123 31 125 0 7 109 119 17 82 118 22 122 138 89 66 136 40 93 129 34 14 82 63 12 150 151 31 112 155 82 5 128 151 86 94 159 157 129 11 116 109 86 82 98 129 153 94 11 140 122 158 120 0 118 131 82 183 120 5 109 143 17 189 120 94 86 118 74 13 25 3 20 24 36 12 34 7 167 35 29 9 21 1 20 15 43 15 25 26 1 18 28 42 2 88 43 18 1 26 42 13 30 1 222 224 42 15 4 4 202 20 9 18 13 36 214 4 42 3 214 235 253 254 255 21 40 12 104 71 162 91 62 22 240 148 13 88 184 48 3 60 123 43 26 172 203 214 162 193 0 32 15 186 93 108 49 193 27 139 6 4 6 80 20 145 49 192 198 22 24 250 255 85 72 192 178 101 183 126 30 154 125 152 224 33 1 65 24 19 36 240 251 183 142 30 134 118 29 58 64 4 2 18 30 129 155 119 8 72 24 70 130 67 0 15 29 6 24 77 56 32 1 133 131 200 118 242 244 183 244 198 131 9 11 39 136 200 64 65 235 186 128 24 134 146 24 89 130 0 5 111 19 216 142 40 42 247 68 7 172 35 50 172 235 144 133 67 135 10 106 69 188 237 151 96 0 134 135 238 140 98 88 150 192 28 134 108 19 240 126 8 41 33 129 186 173 152 3 172 28 48 193 222 182 4 231 90 188 131 183 152 225 66 163 67 27 128 109 236 225 228 138 9 212 36 152 142 172 112 225 188 151 53 165 238 0 9 214 180 239 195 146 153 10 47 162 0 130 147 225 174 134 127 72 142 156 23 10 6 208 73 25 128 78 194 1 3 82 11 160 95 255 96 192 1 41 57 188 12 148 145 98 6 215 20 17 154 196 147 239 114 1 192 15 240 0 12 173 17 32 224 72 174 73 103 184 55 250 148 163 126 156 18 204 145 176 138 123 31 248 33 66 123 0 124 55 2 159 40 38 4 72 194 17 58 48 145 224 114 0 8 99 2 132 13 58 103 0 2 112 144 167 67 38 67 20 8 128 23 27 214 162 73 134 241 237 18 129 5 2 48 242 3 35 16 44 176 159 1 112 172 216 34 129 0 242 194 197 113 31 96 248 193 35 0 68 81 128 8 92 28 48 130 143 36 36 119 68 126 34 134 162 199 136 34 28 113 74 25 239 141 144 28 23 5 40 160 192 120 239 117 8 192 51 51 92 177 229 137 57 166 232 101 1 84 186 32 133 133 130 156 153 102 9 101 28 103 192 6 226 44 48 221 119 211 109 55 194 156 117 222 89 66 30 85 222 34 161 145 194 57 16 65 160 183 132 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-bullets' stamp: ' 21/4/07 10:33'!
keyGif
	"'imgs/fast/fast-key.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 18 0 8 0 145 2 0 209 173 75 221 185 87 245 245 236 245 216 100 33 249 4 1 0 0 2 0 44 0 0 0 0 18 0 8 0 0 2 32 148 134 99 203 156 217 226 155 20 29 4 64 157 33 229 20 116 67 216 5 23 103 132 139 153 62 108 212 144 47 108 20 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'layout'!
lastChangedElement
	| e url |
	e := WebElement newId: #sitePageChanged. e table width: 1.
	e cell align: #center; addRulerSize: 1; addBreak.
	e cell addText: self lastChangedText.
	self observee modifiedTimestamp notNil ifTrue: 
		[e cell addTextBold: self app observee modifiedTimestamp asDate shortPrintSloString].
	self app user hasAdminRights ifTrue: 
		[url := self site urlResolver halfUrlFor: self app observee.
		e cell addLinkTo: self site statistics 
			text: ' visits: <b>', self app visitsCount printDotString, '</b>'
			parameter: 'url' value: url].
	^e! !

!DefaultWebStyle methodsFor: 'layout' stamp: 'mivsek 6/13/2007 16:50'!
lastChangedText
	^'Updated: '! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
leftCornerGif
	"'imgs/fast/fast-left_corner.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 4 0 4 0 128 1 0 255 255 255 229 236 243 33 249 4 1 0 0 1 0 44 0 0 0 0 4 0 4 0 0 2 6 132 17 97 169 12 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
leftStripeGif
	"'imgs/fast/fast-left_stripe.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 8 0 1 0 128 0 0 170 167 153 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 8 0 1 0 0 2 3 132 111 5 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: 'jm 8/1/2010 13:04'!
lockSmallPng
	"'imgs/aesthetica-version-2/16x16/lock.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 6 0 0 0 31 243 255 97 0 0 0 9 112 72 89 115 0 0 11 19 0 0 11 19 1 0 154 156 24 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 233 0 0 117 48 0 0 234 96 0 0 58 152 0 0 23 111 146 95 197 70 0 0 2 206 73 68 65 84 120 218 84 147 205 139 92 85 16 197 127 247 222 247 94 247 116 79 39 70 147 54 35 19 194 204 32 154 44 4 7 4 63 80 17 5 17 69 20 252 88 100 161 75 147 108 102 39 238 93 100 151 85 18 16 84 20 92 137 184 241 31 16 55 130 18 73 50 18 68 141 161 187 39 232 116 247 116 186 167 95 191 251 62 110 85 22 147 249 176 160 160 22 117 14 167 14 167 140 170 114 229 242 37 118 75 85 169 37 181 119 51 239 207 74 8 143 139 42 85 85 254 21 199 201 231 113 28 125 109 140 209 221 221 179 231 206 19 113 160 68 2 237 246 241 139 170 178 246 240 241 133 220 57 115 13 76 80 213 213 225 112 248 124 81 228 47 121 239 63 180 214 238 97 162 125 176 112 228 200 131 111 157 56 177 184 54 24 12 126 217 220 252 247 29 159 23 29 85 168 215 226 99 11 11 11 223 204 207 183 62 232 245 186 63 142 70 163 47 119 73 236 174 108 17 97 105 105 233 163 162 44 185 115 103 227 189 105 86 118 44 138 51 66 234 67 191 211 233 188 15 100 203 203 203 107 34 130 170 238 43 8 106 80 44 173 214 161 229 94 175 219 157 21 238 246 35 241 109 158 118 223 97 16 174 134 215 249 187 56 61 82 244 198 124 171 245 152 177 206 6 69 246 8 234 102 74 137 197 231 21 147 180 244 237 112 131 151 163 47 72 170 25 0 47 114 153 188 58 131 117 79 248 209 104 140 149 76 99 43 251 10 222 110 124 22 231 173 211 171 51 119 234 232 202 177 50 172 28 78 207 213 205 155 81 32 2 12 145 17 94 19 241 195 7 252 226 120 38 141 55 78 174 191 218 184 251 243 79 240 113 138 170 50 253 225 149 79 138 238 183 119 203 237 117 149 244 166 138 239 105 149 111 106 40 134 26 202 177 74 72 85 213 171 134 137 170 122 149 244 159 60 191 250 233 5 85 221 81 32 206 173 84 146 29 182 101 74 40 250 80 121 32 33 142 19 140 75 168 164 6 174 134 137 18 112 9 132 34 161 181 216 222 59 193 104 17 144 109 180 28 34 227 107 104 214 39 178 45 126 189 222 37 43 45 207 60 247 20 226 154 144 52 48 113 13 138 1 50 185 190 111 162 33 197 133 30 82 212 161 24 160 179 13 172 26 110 254 57 101 203 215 120 246 212 58 33 121 8 83 111 98 106 117 52 223 64 178 91 7 131 84 65 53 196 4 143 153 254 14 233 54 149 30 226 209 147 71 153 150 13 36 207 192 204 32 118 24 117 32 83 76 152 252 63 137 70 102 168 76 193 111 192 100 19 242 58 163 173 39 153 84 22 70 125 76 11 172 3 91 3 252 45 200 255 56 72 160 32 51 40 199 32 5 24 71 89 193 234 220 111 136 52 40 166 109 92 156 66 179 137 209 57 84 11 32 112 192 3 21 200 160 250 15 52 3 99 80 99 153 179 21 88 69 77 12 54 186 223 247 103 118 190 50 2 168 182 250 95 225 138 166 77 178 23 196 151 165 86 128 4 212 200 142 63 146 162 197 8 153 25 76 228 163 48 220 90 15 3 249 30 224 222 0 67 28 148 64 252 14 50 176 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
multimediaSmallPng
	"'imgs/ikone-dok/corendal-wave.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 143 73 68 65 84 120 156 98 248 15 3 237 43 239 160 161 142 213 247 90 22 95 43 105 216 116 247 238 221 175 95 191 66 148 1 4 16 3 92 195 212 67 95 255 254 251 143 9 128 26 10 23 159 56 122 244 40 68 15 64 0 33 52 76 218 251 1 168 1 19 101 101 207 222 119 234 191 211 212 39 16 61 0 1 132 208 208 191 245 5 80 250 231 159 255 63 254 128 72 56 3 168 1 130 106 27 87 3 245 0 4 16 66 195 132 29 175 222 205 153 0 68 83 118 39 47 221 183 98 201 201 55 39 159 254 255 252 243 255 231 31 32 18 104 73 85 221 242 206 206 78 128 0 130 106 248 182 116 210 207 16 157 255 110 74 64 84 124 128 49 101 33 99 65 191 209 244 157 231 151 93 253 255 250 219 255 55 95 255 239 61 245 191 164 98 113 97 97 33 64 0 129 52 124 95 53 253 79 144 250 255 134 248 175 179 59 239 110 234 88 117 43 170 110 47 95 204 36 198 168 114 217 174 237 119 55 220 250 255 228 211 255 93 167 254 231 23 205 3 106 0 8 0 49 0 206 255 0 248 235 231 247 88 47 255 125 91 244 175 155 144 146 146 214 220 226 240 235 248 211 225 189 125 173 37 81 120 1 102 123 97 119 192 254 219 237 255 183 204 255 104 106 151 113 113 113 2 136 225 203 250 57 127 60 197 255 79 46 251 246 249 109 94 94 30 80 104 222 188 121 239 95 127 219 113 126 114 116 179 136 109 132 66 214 238 255 151 95 254 223 114 230 127 98 242 4 160 44 64 0 49 108 158 181 74 189 246 126 252 214 159 16 13 106 106 106 140 140 140 201 201 153 64 61 47 15 171 28 95 46 149 177 231 223 153 167 255 55 156 253 31 29 211 13 212 0 16 64 12 109 171 111 179 86 125 128 104 48 51 53 145 145 145 169 171 175 191 126 235 241 255 191 47 63 157 182 4 106 72 217 245 239 200 163 255 107 207 254 15 11 107 7 106 0 8 32 134 163 103 238 200 38 156 6 90 178 254 236 91 160 99 174 93 189 4 10 181 191 47 95 95 74 1 218 48 165 221 56 117 215 191 253 247 255 175 62 251 63 40 168 25 168 1 32 128 24 126 252 248 30 152 187 69 208 247 152 81 225 229 238 245 111 79 92 121 244 253 217 194 215 23 18 94 157 48 59 177 136 189 112 230 198 190 99 255 79 221 248 191 242 28 84 3 64 0 129 130 245 254 253 135 22 126 11 197 172 182 200 187 29 1 162 87 199 244 95 31 81 60 182 144 179 36 55 54 45 99 74 124 226 132 152 152 158 136 200 206 208 176 54 160 6 128 0 130 70 220 253 251 247 138 203 103 169 27 76 80 55 232 235 169 214 238 169 210 206 206 72 40 42 42 42 68 5 83 167 78 5 8 32 68 210 0 38 44 96 50 190 136 23 0 21 0 4 24 0 34 93 26 208 218 204 108 191 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'layout-navigation'!
navBarAdminElement
	| e |
	self app user hasAdminRights ifFalse: [^WebElement new]. 
	e := (WebElement newClass: #navdiv)
		add: (self navHeader: ' ADMIN' bullet: #bulletManTranspWhiteGif);
		add: (WebList newUnordered
			addLinkTo: self site admin text: 'Login' view: 'login'; 
			addLinkTo: self site admin text: 'Logout'  view: 'logout'; 
"			addLinkTo: self site admin text: 'Sites' view: 'sites';  "
			addLinkTo: self site admin text: 'Settings' view: 'settings'; 
			addLinkTo: self site securityManager text: "#en->" 'Security';
			addLinkTo: self site admin text: 'Uptime' view: 'serverStatistics'; 
			addLinkTo: self site statistics text: 'Statistics';
"			addLinkTo: self site admin text: 'Tests' view: #tests;"
			yourself);
		yourself.
	^e! !

!DefaultWebStyle methodsFor: 'layout-navigation'!
navBarContactElement
	| e |
	e := (WebElement newClass: #navdiv)
		add: (self navLinkTo: 'mailto:info@eranova.si' 
			header: 'info@eranova.si' bullet: #bulletLetterTranspWhiteGif);
		yourself. 
	^e! !

!DefaultWebStyle methodsFor: 'layout-navigation' stamp: 'janko 3/19/2012 13:24'!
navBarDemosIn: e
	"Squeak specific"
	| list |
	list := WebList newUnordered.
	list
		addLinkTo: self site demo	text: 'Introduction' view: #main; 
"		addLinkTo: self site demo	text: 'Image gallery' view: #imageGallery; "
"		addLinkTo: self site demo	text: 'Live image' view: #liveImage;  " "Squeak specific"
"		addLinkTo: self site demo text: 'File upload' view: #fileUpload; "
"		addLinkTo: self site demo text: 'Calendar' view: #calendar;  "
		addLinkTo: self site demo text: 'Grid, tabs, menus' view: #grid; 
"		addLinkTo: self site demo text: 'Javascript' view: #javascript;  "
		addLinkTo: self site demo text: 'Ajax' view: #ajax;
		addLinkTo: self site demo text: 'Widgets, popups' view: #widgets.
	self site contextProcesses ifTrue: 
		[list addLinkTo: self site demo text: 'Control flow' view: #controlFlow].
"	list addLinkTo: self site demo text: 'Rich Editor' view: #richEditor.  "
	e add: ((WebElement newClass: #navdiv)
		add: (self navHeader: ' DEMOS' bullet: #bulletStarTranspWhiteGif);
		add: list;
		yourself)! !

!DefaultWebStyle methodsFor: 'layout-navigation'!
navBarMainLinksElement
	| e |
	e := (WebElement newClass: #navdiv)
		add: (self navHeader: ' AIDA LINKS' bullet: #bulletSquareDownTranspWhiteGif);
		add: (WebList newUnordered
			addLinkTo: 'http://www.aidaweb.si' text: 'Website';
			addLinkTo: 'http://www.aidaweb.si/tutorial.html' text: 'Tutorial';
			addLinkTo: 'http://www.aidaweb.si/documentation.html' text: 'Documentation';
			addLinkTo: 'http://www.aidaweb.si/screenshots.html' text: 'Screenshots';
			addLinkTo: 'http://www.aidaweb.si/community.html' text: 'Community';
			yourself);
		yourself. 
	^e! !

!DefaultWebStyle methodsFor: 'layout-navigation' stamp: 'JM 4/26/2007 13:45'!
navHeader: aString bullet: aSymbol
	^(WebText header: 3)
		addGif: aSymbol size: 13@13; addText: aString; yourself.! !

!DefaultWebStyle methodsFor: 'layout-navigation' stamp: ' 21/4/07 10:33'!
navHeader: aString bullet: aSymbol linkTo: anObject
	^(WebText header: 3)
		addGif: aSymbol size: 13@13; addLinkTo: anObject text: aString; yourself.! !

!DefaultWebStyle methodsFor: 'layout-navigation' stamp: ' 21/4/07 10:33'!
navHeader: aString bullet: aSymbol linkTo: anObject view: aView
	^(WebText header: 3)
		addGif: aSymbol size: 13@13; addLinkTo: anObject text: aString view: aView; yourself.! !

!DefaultWebStyle methodsFor: 'layout-navigation' stamp: ' 21/4/07 10:33'!
navHeader: aString bullet: aSymbol linkTo: anObject view: aView parameter: aParmString value: aValueString
	^(WebText header: 3)
		addGif: aSymbol size: 13@13; addLinkTo: anObject text: aString 
		view: aView parameter: aParmString value: aValueString;
			yourself.! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
navLeftGif
	"'imgs/fast/fast-nav_left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 7 0 82 0 128 0 0 127 160 177 255 255 255 33 249 4 1 0 0 0 0 44 0 0 0 0 7 0 82 0 0 2 64 140 143 6 144 139 203 14 124 78 86 117 195 180 17 119 157 109 30 245 137 96 25 166 232 74 182 156 59 190 114 76 159 176 61 227 181 201 171 119 207 202 1 127 62 97 113 119 212 41 135 198 32 210 185 76 50 159 68 232 20 211 248 28 10 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'layout-navigation'!
navLinkTo: anObject header: aString bullet: aSymbol
	| e |
	e := WebText header: 3.
	e addGif: aSymbol size: 13@13.
	e addLinkTo: anObject text: ' ', aString.
	^e! !

!DefaultWebStyle methodsFor: 'layout-navigation'!
navigationBarElement
	| e |
	e := WebElement newId: #navigation.
	e add: self navBarMainLinksElement.
	self navBarDemosIn: e.
	e add: self navBarAdminElement.
"	e add: self navBarSearchElement."
"	e add: self navBarContactElement. "
	^e! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
noteSmallGif
	"small triangle with !! for notes/comments"
	"'imgs/simplebits-note_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 12 0 12 0 162 0 0 227 203 118 250 226 142 51 51 51 204 153 102 255 255 255 0 0 0 0 0 0 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 12 0 12 0 0 3 42 72 170 51 251 44 194 24 220 116 33 219 231 132 168 16 230 105 28 17 140 32 117 126 1 96 97 89 236 18 86 134 182 13 1 236 60 239 52 192 160 35 1 0 59 )! !

!DefaultWebStyle methodsFor: 'styles-screen' stamp: 'janko 9/19/2011 12:19'!
oldCss24WebGrid
^'
table.webGrid {
	background: #fdfae7;
	font-size: 10pt;
	}
table.webGrid tr { }
table.webGrid td {
	padding: 0px; spacing: 2px;
	vertical-align: top;
	background: #fcf4df;
	}
table.webGrid td input { font-size: 10pt }

table.webGrid th {
	padding: 0px; spacing: 2px;
	vertical-align: top;
	background: #fcf4df;
	font-size: 11pt; font-weight: normal;
	}

table.webGrid tr.red td, tr.red a { color: red; }
table.webGrid tr.green td, tr.green a { color: forestgreen; }
table.webGrid tr.blue td, tr.blue a { color: blue; }
table.webGrid tr.yellow td, tr.yellow a { color: yellow; }
table.webGrid tr.gray td, tr.gray a { color: darkgray; }
table.webGrid tr.summary td, tr.summary a { color: darkgray; font-weight: bold }
'! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
outlookBigGif
	"'imgs/outlook_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 30 0 30 0 135 0 0 128 128 0 153 153 51 204 204 153 192 220 192 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 3 0 0 3 0 44 0 0 0 0 30 0 30 0 0 8 206 0 7 8 28 72 176 160 193 131 3 1 40 92 200 176 161 195 135 2 31 74 156 200 48 34 197 139 14 45 2 32 192 177 163 199 143 32 9 44 212 232 81 64 128 133 1 4 132 244 56 114 192 194 142 39 29 6 88 201 177 229 75 2 49 85 114 20 160 112 230 74 155 10 9 240 220 40 146 104 81 157 32 129 110 60 169 51 232 78 0 62 147 42 36 233 180 40 75 163 31 149 90 173 201 112 171 84 0 84 141 54 44 250 144 44 73 166 33 135 150 213 58 52 164 66 164 92 205 186 116 154 179 227 80 159 47 131 106 229 24 179 97 212 188 27 247 114 69 9 23 176 220 155 113 105 118 212 59 117 46 86 198 14 175 30 174 106 85 162 100 193 94 21 67 38 185 24 99 87 204 158 63 55 70 172 152 38 230 210 110 71 135 246 172 113 53 197 214 174 37 34 156 77 155 96 64 0 59 )! !

!DefaultWebStyle methodsFor: 'layout'!
pageFrameWideNoNavigationWith: aWebElement title: aTitleString
	"set a web page just with header and wide element below"
	| e |
	self app title: (self enhancedTitle: aTitleString). self htmlHeaderElements.
"	self app	add: self headerBanner. "
	e := (WebElement newId: #container)
		add: self headerElement; 	add: self headerDashboard;
		add: ((WebElement newId: #contentWide)
			add: aWebElement; yourself);
		yourself.
	^self app add: e; yourself! !

!DefaultWebStyle methodsFor: 'layout'!
pageFrameWideNoNavigationWith: aWebElement title: aTitleString printHeader: aHeaderElement
	"set a web page just with header and wide element below"
	| e containerId |
	self app title: (self enhancedTitle: aTitleString). self htmlHeaderElements.
"	self app	add: self headerBanner. "
	containerId := aHeaderElement elements notEmpty ifTrue: [#containerPadded] ifFalse: [#container].
	e := (WebElement newId: containerId)
		add: self headerElement; 	add: self headerDashboard;
		add: ((WebElement newId: #contentWide)
			add: aWebElement; yourself);
		yourself.
	^self app 
		add: aHeaderElement; "print header"
		add: e; yourself! !

!DefaultWebStyle methodsFor: 'layout' stamp: ' 21/4/07 10:33'!
pageFrameWith: aWebElement title: aTitleString
	"set a web page with standard  page look (navigation bar, header) "
	^self pageFrameWith: aWebElement wide: WebElement new title: aTitleString! !

!DefaultWebStyle methodsFor: 'layout'!
pageFrameWith: aWebElement wide: aWideElement title: aTitleString
	"set a web page with standard  page look (navigation bar, header) "
	"Wide element comes below content besides navigation and it have full page width"
	| e |
	self app title: (self enhancedTitle: aTitleString). self htmlHeaderElements.
"	self app	add: self headerBanner. "
	e := (WebElement newId: #container)
		add: self headerElement; 	add: self headerDashboard;
		add: ((WebElement newId: #content) 
			add: self navigationBarElement; add: aWebElement;  yourself); 
		add: ((WebElement newId: #contentWide)
			add: aWideElement; yourself);
		yourself.
	^self app add: e; yourself! !

!DefaultWebStyle methodsFor: 'layout'!
pageFrameWith: aWebElement wide: aWideElement title: aTitleString printHeader: aPrintHeaderElement
	"set a web page with standard  page look (navigation bar, header) "
	"Wide element comes below content besides navigation and it have full page width"
	"printHeader if exist is added first, out of all other elements"
	| e containerId |
	self app title: (self enhancedTitle: aTitleString). self htmlHeaderElements.
"	self app	add: self headerBanner. "
	containerId := aPrintHeaderElement elements notEmpty ifTrue: [#containerPadded] ifFalse: [#container].
	e := (WebElement newId: containerId)
		add: self headerElement; 	add: self headerDashboard;
		add: ((WebElement newId: #content) 
			add: self navigationBarElement; add: aWebElement;  yourself); 
		add: ((WebElement newId: #contentWide)
			add: aWideElement; yourself);
		yourself.
	^self app 
		add: aPrintHeaderElement; "print header"
		add: e; yourself! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
pasteIconGif
	"'imgs/jure-paste.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 12 0 196 0 0 0 0 0 255 255 255 242 244 240 139 158 117 152 169 132 177 190 162 203 212 193 216 222 209 49 82 9 62 93 24 88 115 55 101 125 71 114 136 86 127 147 102 165 179 147 229 233 224 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 16 0 44 0 0 0 0 11 0 12 0 64 5 59 96 32 142 164 120 32 8 83 142 4 90 4 45 98 136 15 106 35 137 32 42 55 126 136 133 197 226 183 18 17 142 4 135 65 39 50 160 22 4 158 76 196 64 53 6 9 220 8 165 48 120 73 5 20 161 72 22 133 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
pdfBigGif
	"'imgs/pdf_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 35 0 35 0 135 0 0 48 49 51 56 55 58 59 59 60 62 62 65 59 67 59 60 69 60 77 1 1 66 65 67 66 66 68 69 69 69 71 71 73 73 73 76 79 79 83 79 91 79 82 82 86 84 84 86 84 84 88 90 90 93 93 93 94 95 95 97 96 96 99 98 98 101 101 101 102 103 103 104 104 104 109 108 108 110 110 110 114 114 114 117 121 121 122 122 122 126 121 121 129 185 79 82 179 88 89 201 1 4 206 3 6 208 2 6 215 3 6 214 5 8 217 4 7 221 6 9 225 5 8 230 7 10 227 8 11 234 6 9 236 7 10 236 8 12 242 8 11 241 10 13 245 9 12 247 12 15 255 7 10 248 10 13 255 10 14 247 13 16 250 14 17 254 14 17 254 18 21 249 23 26 254 22 25 254 25 29 255 28 31 255 30 33 228 63 63 234 50 50 255 33 37 255 37 41 255 40 43 255 41 45 255 46 49 255 48 50 255 53 55 255 53 57 255 56 58 255 57 60 255 61 63 255 62 64 214 109 112 222 123 124 226 78 78 232 76 76 231 87 88 230 88 88 231 91 92 230 93 94 234 87 87 233 89 89 236 89 89 255 71 74 255 81 83 255 91 93 254 93 96 232 96 97 234 100 100 232 105 106 233 108 108 230 112 112 230 115 116 231 124 125 236 117 118 233 121 122 233 123 124 254 98 101 251 109 111 252 110 112 254 114 116 255 119 122 255 122 124 222 127 129 227 127 129 254 126 128 129 129 130 133 133 137 141 141 141 143 143 145 143 143 148 137 156 137 145 145 148 150 150 154 151 151 156 153 153 154 154 154 157 159 159 159 159 159 163 159 159 168 145 166 145 156 178 156 163 163 164 165 165 168 166 166 174 167 169 175 170 167 175 169 169 173 169 169 177 173 172 178 174 174 181 176 176 178 177 176 181 181 181 182 180 180 185 181 182 189 185 185 189 188 188 191 187 187 194 189 188 194 190 190 197 173 199 173 178 204 178 182 208 182 186 213 186 189 217 189 214 140 143 217 135 138 211 157 160 221 176 179 225 129 131 230 129 130 228 131 132 232 134 135 233 135 136 235 136 137 235 139 140 238 141 142 226 145 146 231 144 146 232 153 155 232 156 157 252 132 133 253 135 136 253 138 139 253 143 144 252 146 148 252 150 152 231 158 160 230 160 162 230 165 167 231 167 170 236 162 163 233 171 172 234 173 174 234 175 176 225 181 181 232 177 178 235 182 183 236 179 180 239 182 182 234 182 184 194 194 194 193 192 198 197 197 198 194 194 201 196 195 202 197 197 202 198 198 204 196 201 196 200 199 206 200 200 200 200 201 205 202 202 208 203 204 209 205 205 210 205 206 212 192 220 192 196 218 196 201 209 201 200 218 200 209 209 213 210 212 214 214 214 214 212 212 217 215 215 220 209 216 209 216 216 219 217 217 221 219 220 223 220 220 222 222 221 225 223 224 227 229 197 200 238 193 194 235 198 200 228 221 223 236 209 210 237 215 216 235 216 217 235 218 220 236 220 221 254 219 220 228 222 224 238 223 225 224 224 225 226 226 229 228 228 230 230 230 233 229 229 236 231 232 234 233 225 228 232 231 234 238 230 232 232 232 234 234 234 236 235 236 238 239 232 233 236 235 237 236 236 238 238 238 240 234 241 246 240 228 228 255 224 224 240 240 241 243 243 244 245 245 246 247 247 248 251 251 251 251 251 252 254 254 254 0 0 0 33 249 4 3 0 0 201 0 44 0 0 0 0 35 0 35 0 0 8 255 0 147 9 28 72 176 160 193 131 8 17 82 146 36 41 18 195 135 12 41 81 74 72 81 96 165 57 132 2 17 26 100 232 16 162 142 27 7 37 26 20 172 226 193 139 128 2 5 18 84 168 144 161 150 131 98 14 186 195 107 24 179 132 168 84 165 66 117 202 84 155 54 106 210 164 65 67 244 140 209 163 102 62 216 73 84 110 152 180 74 7 87 149 209 130 229 202 18 36 68 132 104 13 194 21 72 15 30 59 116 228 192 97 192 207 32 127 214 120 45 139 90 53 73 145 123 226 218 220 16 71 55 11 13 186 226 102 184 88 177 194 192 32 63 254 252 53 93 91 80 213 21 37 69 132 136 219 33 110 174 140 187 56 196 217 168 241 162 133 10 20 6 14 229 9 140 86 23 225 129 169 150 24 17 2 132 174 154 185 58 24 71 22 103 170 69 138 19 36 12 32 250 195 89 240 48 101 4 83 29 33 18 164 199 189 29 59 122 136 227 161 163 177 184 24 47 86 156 40 49 194 64 163 68 112 162 231 209 245 140 23 65 84 137 135 12 185 199 187 52 93 45 54 196 237 255 69 97 66 68 8 3 137 70 198 252 147 231 142 174 73 3 79 25 65 130 196 72 226 32 64 194 234 184 97 67 239 10 20 36 132 112 222 49 198 16 227 203 35 140 48 226 135 31 125 12 4 130 1 16 70 40 225 132 20 94 19 141 51 199 0 179 139 35 139 252 49 7 69 23 21 115 12 52 212 88 131 205 57 230 112 227 4 45 231 160 120 13 53 208 32 35 204 46 144 64 242 97 66 23 65 51 141 53 215 84 131 141 57 41 174 216 162 57 47 198 56 163 47 192 220 136 208 69 214 80 115 77 57 39 170 243 206 60 83 212 242 206 59 234 156 131 13 140 25 10 67 140 146 39 205 81 14 143 230 156 227 206 60 244 116 227 195 24 104 206 227 206 57 22 58 83 76 49 200 128 105 208 69 112 70 41 15 62 248 132 178 137 23 218 208 67 207 60 234 152 83 77 140 199 52 99 103 65 23 169 83 142 57 232 184 67 15 62 237 84 225 141 45 92 8 74 207 59 112 78 211 12 50 138 130 56 135 163 144 190 35 40 46 83 12 10 198 39 242 204 51 15 58 229 80 255 227 76 51 161 226 56 135 60 144 186 35 15 61 246 80 113 203 160 237 120 97 69 41 179 200 226 74 38 206 24 227 204 162 4 93 132 206 179 238 192 67 79 40 80 144 163 77 41 160 108 210 197 22 63 64 193 70 19 151 16 179 172 168 238 68 122 229 55 79 192 18 139 44 219 128 227 234 59 217 136 162 201 26 150 0 83 235 146 115 96 201 142 59 235 116 66 70 59 248 12 250 46 58 68 70 131 9 19 189 220 27 38 60 238 176 83 11 43 82 128 83 15 29 135 160 147 142 4 4 255 146 1 58 197 248 2 201 49 204 14 116 209 166 164 180 242 197 43 229 30 96 1 58 190 44 144 14 48 199 56 208 12 52 139 44 242 72 200 22 205 129 79 46 97 120 194 137 59 234 92 99 193 27 138 8 48 65 28 3 216 177 0 2 127 68 0 129 33 56 39 115 81 62 180 136 49 138 58 207 242 66 129 27 23 236 66 1 5 139 40 240 134 30 1 96 128 0 212 162 238 147 15 61 242 148 139 14 30 21 88 224 0 36 17 76 96 72 2 29 212 1 128 6 132 32 90 18 245 69 253 232 147 207 60 239 148 235 198 49 135 112 48 193 6 114 48 80 135 3 16 236 241 128 7 104 219 234 15 63 106 211 3 15 167 216 196 10 77 178 51 114 168 136 33 132 56 242 55 31 13 16 80 192 234 172 183 238 58 235 4 52 192 71 69 145 240 49 199 237 184 231 174 187 238 124 68 98 210 239 192 7 47 188 64 1 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
pdfMediumGif
	"'imgs/sigov-pdf.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 16 0 16 0 247 0 0 0 0 0 128 0 0 0 128 0 128 128 0 0 0 128 128 0 128 0 128 128 192 192 192 192 220 192 166 202 240 0 0 0 16 16 16 255 0 0 231 41 41 231 49 49 239 57 57 231 57 66 231 66 66 231 74 74 239 66 74 231 82 90 231 90 90 239 82 82 239 90 90 231 99 99 231 107 107 231 115 115 231 123 123 231 132 132 231 140 140 231 156 156 231 173 173 231 181 181 231 181 189 231 189 189 222 206 206 222 214 214 222 222 222 222 231 231 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 255 251 240 160 160 164 128 128 128 255 0 0 0 255 0 255 255 0 0 0 255 255 0 255 0 255 255 255 255 255 33 249 4 1 0 0 39 0 44 0 0 0 0 16 0 16 0 0 8 130 0 79 8 4 64 176 96 193 5 11 4 42 4 80 162 161 195 134 11 24 36 52 72 145 96 137 136 18 1 48 216 200 145 35 195 131 26 59 118 100 232 112 65 69 138 15 19 14 124 40 225 195 195 139 11 31 66 240 240 82 229 9 146 13 27 104 112 104 2 230 202 134 30 70 116 200 144 50 102 9 18 23 62 128 112 240 32 2 133 16 54 73 114 136 208 97 3 136 15 29 48 76 136 90 162 66 132 151 71 69 68 205 32 97 4 216 18 38 162 90 56 91 82 33 194 183 112 225 6 4 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
pdfSmallGif
	"'imgs/ibm-pdf.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 11 0 12 0 162 0 0 0 0 0 204 204 204 153 153 153 204 0 0 255 255 255 254 1 2 0 0 0 0 0 0 33 249 4 5 20 0 5 0 44 0 0 0 0 11 0 12 0 0 3 39 72 176 204 42 48 6 48 169 157 181 181 192 129 226 193 48 128 30 197 137 228 119 142 157 138 162 101 40 206 67 137 130 45 192 226 147 162 53 9 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
pdfSmallPng
	"'imgs/ikone-dok/corendal-pdf.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 131 73 68 65 84 120 156 98 248 15 3 183 111 223 222 186 117 235 198 141 27 55 108 216 0 33 33 96 243 230 205 47 94 188 128 43 3 8 32 6 56 235 200 145 35 135 15 159 222 183 239 216 158 61 135 118 237 58 176 105 211 142 21 43 214 116 116 244 222 191 127 31 168 237 209 163 71 16 101 0 1 196 240 175 182 225 127 118 238 255 144 240 255 158 190 255 157 92 255 219 57 252 183 176 254 111 100 250 91 223 248 182 148 92 99 99 235 239 223 191 129 122 214 172 89 3 209 3 16 64 12 255 75 203 255 155 91 253 87 82 253 47 38 245 159 87 232 63 59 247 127 70 214 175 140 44 47 25 89 87 51 177 22 21 149 252 6 3 160 158 245 235 215 191 121 243 6 32 128 24 254 39 165 252 215 208 254 47 45 255 95 88 226 63 143 192 127 86 206 95 140 44 239 24 89 110 51 178 116 51 50 119 117 245 150 150 86 20 23 151 214 215 55 246 244 244 221 188 121 19 32 128 24 174 75 201 2 37 176 162 70 86 246 103 207 158 157 62 125 250 232 209 163 187 119 239 62 113 226 196 161 67 135 0 2 8 225 233 227 199 143 95 185 114 229 204 153 51 23 46 92 184 119 239 222 229 160 224 59 183 111 63 120 240 224 198 141 27 151 46 93 2 202 2 141 223 179 103 15 64 0 161 104 0 74 95 189 122 245 238 221 187 95 190 124 185 239 239 247 248 209 99 160 163 159 62 125 10 12 241 115 231 206 61 124 248 112 251 246 237 0 1 132 162 225 201 147 39 183 110 221 2 42 122 113 251 246 93 27 235 23 179 230 2 117 190 123 247 14 168 7 104 249 243 231 207 55 109 218 4 16 64 40 26 128 66 64 99 190 126 253 250 170 182 230 229 219 143 207 250 39 188 90 181 250 219 183 111 192 136 3 26 244 242 229 75 160 6 128 0 66 209 0 52 251 213 171 87 175 47 95 123 233 227 251 114 213 42 32 122 238 233 245 220 195 227 109 112 240 237 150 182 143 31 63 2 53 0 4 16 138 134 79 159 62 125 254 252 249 113 116 244 171 61 251 222 223 186 243 254 195 167 15 255 255 63 121 251 225 198 182 157 151 83 51 129 102 1 53 0 4 16 138 134 247 143 158 62 138 75 120 218 219 15 212 246 250 245 107 160 11 129 174 7 134 4 208 61 103 207 158 5 6 6 80 3 64 0 161 104 120 88 80 248 180 176 16 104 53 208 247 64 207 220 185 115 7 24 166 23 47 94 4 6 244 129 3 7 46 95 190 12 212 0 16 64 8 13 192 216 1 146 223 191 127 127 251 246 45 208 118 96 148 1 19 15 68 15 48 30 142 29 59 6 212 0 76 133 0 1 132 208 112 248 240 97 71 71 71 53 28 64 94 94 30 40 187 119 239 94 128 0 3 0 11 108 48 6 214 146 182 59 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
powerpointSmallPng
	"'imgs/ikone-dok/corendal-powerpoint.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 166 73 68 65 84 120 156 98 248 15 3 155 14 221 216 120 240 250 134 3 215 214 237 187 178 118 239 165 213 187 46 174 218 121 126 197 182 179 203 182 157 94 186 229 212 191 127 80 101 0 1 196 112 187 57 9 136 110 54 38 92 173 137 185 80 30 113 166 48 228 120 182 255 225 84 239 253 137 30 123 227 92 63 127 255 247 246 203 223 57 171 15 152 123 167 254 3 107 2 8 32 144 6 32 245 239 249 237 13 241 46 19 173 140 129 104 110 172 199 183 107 199 128 130 64 13 95 190 255 123 255 229 239 212 37 59 119 29 189 2 209 3 16 64 12 55 27 226 129 170 215 187 91 254 249 242 254 255 239 239 97 60 252 64 61 109 218 186 64 61 219 35 28 191 252 248 251 254 235 223 201 139 182 3 85 67 16 64 0 49 92 173 141 1 154 253 231 243 219 255 127 126 253 255 251 27 168 225 102 164 246 135 217 233 64 193 245 1 214 19 214 93 131 160 165 123 238 44 217 125 23 168 1 32 128 24 46 150 71 76 50 213 253 90 237 244 174 41 228 69 127 214 30 127 253 15 211 179 62 44 43 1 10 46 113 55 249 252 3 228 164 151 31 254 60 124 243 103 225 174 187 102 94 41 0 1 196 112 166 48 120 162 181 201 135 147 211 63 156 93 248 97 111 247 135 137 233 32 180 32 31 168 97 166 141 14 220 134 251 175 126 207 221 113 15 168 1 32 128 24 78 100 251 3 109 255 48 39 238 195 209 73 31 182 53 126 152 89 248 97 90 246 135 137 32 119 246 26 170 2 141 127 245 241 239 147 183 127 238 190 252 61 115 219 3 160 6 128 0 98 56 156 230 13 241 244 135 185 177 31 150 102 125 152 150 241 97 82 244 6 75 125 160 96 179 134 28 220 134 91 207 126 79 221 252 8 168 1 32 128 24 14 36 122 64 130 245 96 73 244 68 115 131 73 102 122 64 6 144 11 20 172 81 144 120 241 254 207 163 55 127 238 188 248 125 237 201 175 254 141 143 129 26 0 2 136 1 24 216 59 162 156 54 5 219 174 242 177 88 228 98 12 114 183 137 122 135 142 98 131 138 76 153 148 8 220 134 75 15 127 117 173 123 2 212 0 16 64 12 240 164 49 115 197 190 23 31 128 1 242 23 72 62 127 255 231 233 219 63 15 95 255 6 154 125 253 233 175 203 143 126 157 187 247 179 117 205 51 160 6 128 0 66 104 152 182 108 247 163 55 191 129 14 128 132 9 220 108 8 58 117 251 71 227 242 231 64 13 0 1 132 208 0 140 127 160 207 110 61 255 125 243 217 239 27 79 127 93 123 242 251 242 163 223 23 30 252 60 115 247 199 201 219 63 143 223 250 81 179 228 37 80 3 64 0 33 52 0 227 255 210 163 95 243 118 220 7 6 223 212 45 143 38 110 124 212 179 254 73 199 218 167 45 171 159 53 44 127 94 189 244 69 197 226 215 64 13 0 1 132 208 0 228 16 131 0 2 12 0 18 21 0 105 149 238 239 221 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-common symbols' stamp: ' 21/4/07 10:33'!
printerJpg
	"'imgs/toledo-printer.jpg' asFilename contentsAsMethod"
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 219 0 67 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 219 0 67 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 255 192 0 17 8 0 22 0 20 3 1 34 0 2 17 1 3 17 1 255 196 0 31 0 0 1 5 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 16 0 2 1 3 3 2 4 3 5 5 4 4 0 0 1 125 1 2 3 0 4 17 5 18 33 49 65 6 19 81 97 7 34 113 20 50 129 145 161 8 35 66 177 193 21 82 209 240 36 51 98 114 130 9 10 22 23 24 25 26 37 38 39 40 41 42 52 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 225 226 227 228 229 230 231 232 233 234 241 242 243 244 245 246 247 248 249 250 255 196 0 31 1 0 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 255 196 0 181 17 0 2 1 2 4 4 3 4 7 5 4 4 0 1 2 119 0 1 2 3 17 4 5 33 49 6 18 65 81 7 97 113 19 34 50 129 8 20 66 145 161 177 193 9 35 51 82 240 21 98 114 209 10 22 36 52 225 37 241 23 24 25 26 38 39 40 41 42 53 54 55 56 57 58 67 68 69 70 71 72 73 74 83 84 85 86 87 88 89 90 99 100 101 102 103 104 105 106 115 116 117 118 119 120 121 122 130 131 132 133 134 135 136 137 138 146 147 148 149 150 151 152 153 154 162 163 164 165 166 167 168 169 170 178 179 180 181 182 183 184 185 186 194 195 196 197 198 199 200 201 202 210 211 212 213 214 215 216 217 218 226 227 228 229 230 231 232 233 234 242 243 244 245 246 247 248 249 250 255 218 0 12 3 1 0 2 17 3 17 0 63 0 254 205 254 42 248 150 223 225 223 197 164 93 102 105 46 244 31 136 158 17 147 94 211 18 238 254 241 97 208 252 73 224 43 237 63 68 214 173 99 34 230 24 173 237 252 71 163 120 191 68 190 210 236 98 24 55 62 26 241 93 244 155 140 200 34 229 126 19 124 105 117 253 160 238 188 7 37 196 255 0 240 175 190 32 252 59 26 247 132 181 11 155 139 137 180 93 39 226 103 131 53 147 99 226 111 6 218 106 183 114 73 109 30 173 226 239 7 235 26 87 138 244 79 14 165 201 190 189 183 240 71 143 181 123 75 87 180 210 245 57 45 190 102 241 254 183 30 181 226 47 136 94 33 248 185 55 196 63 7 90 106 255 0 16 126 34 248 58 215 197 119 26 222 181 109 240 235 89 240 87 194 223 138 94 59 208 188 45 163 105 154 239 132 245 43 221 47 193 239 6 139 100 210 106 122 30 191 31 132 124 109 172 234 218 150 179 172 120 58 227 84 212 144 220 105 158 7 175 254 208 191 0 175 109 78 145 240 235 225 245 231 142 32 136 188 95 240 144 234 22 158 34 214 244 141 57 132 13 9 212 127 225 97 252 81 215 244 123 61 46 242 202 218 121 26 41 238 175 36 241 21 128 103 146 207 66 186 12 209 201 239 75 52 203 231 147 44 12 178 185 60 198 209 143 246 146 197 168 193 66 157 104 78 31 236 107 12 249 167 236 99 236 37 47 172 71 79 222 107 38 209 229 172 22 49 102 127 92 89 132 150 13 198 207 47 116 28 147 147 167 200 218 174 235 174 85 237 57 106 164 168 189 83 141 236 238 191 160 10 43 241 175 246 28 253 178 124 109 227 31 134 190 55 182 212 116 169 47 52 191 7 252 80 191 240 207 131 207 136 245 185 53 237 106 223 194 23 94 4 248 127 227 45 34 11 205 114 218 218 198 61 86 47 51 197 183 115 233 211 165 172 22 214 218 84 246 58 118 153 20 122 69 150 159 26 21 243 240 148 103 8 206 46 241 156 99 56 187 53 120 205 41 69 217 164 213 211 78 205 38 186 164 207 77 53 40 198 73 221 74 42 81 125 212 146 105 217 234 174 154 118 122 247 62 203 248 175 251 47 248 138 254 251 198 158 45 248 17 241 22 79 135 218 255 0 143 45 117 51 227 127 135 94 50 178 159 198 223 2 188 125 171 234 54 115 91 73 226 61 71 194 82 220 65 173 120 7 198 51 23 140 223 248 179 225 158 181 225 248 252 67 177 102 241 223 134 252 111 113 109 166 201 97 249 109 225 63 248 36 79 237 11 23 139 244 255 0 29 248 255 0 226 183 192 63 21 120 147 80 182 182 131 81 130 227 195 63 23 117 63 1 252 62 22 75 50 66 124 25 240 230 247 199 22 154 95 139 238 164 136 219 43 203 174 234 190 18 209 37 187 130 107 237 95 195 26 242 94 77 96 10 43 69 38 148 146 229 247 151 43 188 99 38 149 212 189 215 36 220 29 210 247 160 227 43 94 55 229 148 147 127 215 245 223 230 126 161 124 27 253 136 62 28 124 42 240 222 167 166 234 254 40 241 175 196 143 18 248 143 94 147 197 30 41 241 126 187 54 129 225 79 237 29 102 77 23 68 240 250 71 163 120 59 225 190 135 224 239 2 248 63 195 246 58 71 135 180 171 45 43 195 158 25 240 237 134 159 99 20 12 248 158 230 121 238 37 40 162 164 15 255 217 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
redPixelGif
	"'imgs/redpix.gif' asFilename contentsAsMethod"
	 ^#(71 73 70 56 57 97 1 0 1 0 145 255 0 255 255 255 196 0 67 
		0 0 0 0 0 0 44 0 0 0 0 1 0 1 0 0 2 2 76 1 0 59 )! !

!DefaultWebStyle methodsFor: 'layout'!
searchButton
	searchButton isNil ifTrue: 
		[self searchButton: (WebButton new
			title: 'Search'; text: 'S'; action: #search; style: '{font-size: 90%}';
			tabIndex: 99;
			id: #search234;
			yourself)].
	^searchButton! !

!DefaultWebStyle methodsFor: 'layout'!
searchButton: aWebButton
	searchButton := aWebButton! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab1BgGif
	"'/home/mivsek/download/tab1bg.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 1 0 45 0 132 32 0 221 227 213 219 225 211 254 254 254 242 244 238 230 233 224 218 224 210 252 252 252 245 247 242 249 249 247 234 237 228 224 228 214 229 232 222 238 241 234 237 240 233 239 242 235 226 229 218 248 248 246 247 247 245 243 245 240 233 236 227 250 250 248 251 251 251 235 238 231 119 102 85 227 230 219 228 231 221 253 253 253 236 239 232 225 228 217 241 243 238 224 227 216 232 235 226 44 0 0 0 0 1 0 45 0 0 5 33 96 81 4 36 96 42 232 131 101 11 225 78 73 98 109 13 227 12 221 32 29 71 4 33 8 74 197 96 208 8 142 151 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab1LeftGif
	"'imgs/tab1left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 9 0 150 0 196 31 0 183 174 136 239 237 229 224 220 204 236 234 224 241 239 233 231 228 216 215 210 189 219 214 196 214 209 187 244 243 237 251 251 250 246 245 242 232 229 218 223 219 203 248 247 244 217 213 194 225 222 208 241 239 232 240 238 231 197 190 160 235 232 222 237 235 226 238 236 227 249 248 246 220 216 198 188 180 144 211 207 183 216 211 191 238 236 228 229 226 212 199 192 163 226 229 218 33 249 4 1 0 0 31 0 44 0 0 0 0 9 0 150 0 0 5 240 224 39 66 136 151 1 128 120 76 199 224 40 202 247 104 4 108 67 83 4 95 206 178 104 15 5 111 145 40 78 24 195 4 33 34 201 36 122 202 8 199 2 232 17 9 1 75 165 234 75 72 44 3 10 160 139 173 80 196 100 51 131 49 86 6 40 133 14 4 80 148 12 10 16 65 131 46 165 116 26 24 15 0 4 18 21 12 16 129 27 131 1 3 135 7 27 8 139 119 2 7 6 145 88 147 149 151 140 5 148 150 146 157 154 160 158 155 153 159 152 161 167 156 164 163 162 168 172 175 174 171 178 166 165 169 182 176 179 170 181 173 187 183 189 184 180 191 177 190 185 188 196 193 197 194 198 195 186 201 207 192 209 200 210 206 212 199 213 211 217 216 219 215 221 205 222 204 225 203 227 202 229 208 218 224 228 231 220 223 237 226 230 214 238 234 241 239 235 233 240 232 242 248 236 245 244 243 249 253 0 254 227 55 240 158 61 125 7 3 18 220 103 208 31 67 132 14 19 22 132 40 240 161 194 134 21 37 90 10 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab1LeftOnGif
	"'imgs/tab1lefton.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 9 0 150 0 196 31 0 255 255 255 119 102 85 254 254 254 253 253 252 250 250 248 249 249 247 253 253 253 252 252 250 249 248 246 248 247 245 245 244 239 246 245 241 244 242 237 242 241 235 246 245 240 247 246 242 221 217 213 187 179 170 245 244 243 129 113 97 233 230 227 152 139 126 147 133 120 147 133 119 174 164 154 214 212 204 242 241 234 214 212 203 196 189 180 185 177 167 183 174 164 226 229 218 33 249 4 1 0 0 31 0 44 0 0 0 0 9 0 150 0 0 5 223 224 39 102 93 53 5 129 200 89 17 36 1 192 199 97 20 108 111 87 109 195 94 180 219 21 200 15 54 121 13 3 67 24 18 38 104 54 3 78 131 97 64 13 76 7 7 2 161 80 8 80 179 136 68 226 17 208 22 16 15 135 130 81 62 39 212 141 70 59 236 96 52 52 229 109 98 177 102 103 207 15 124 10 1 7 127 97 11 11 94 88 91 8 97 86 83 89 91 93 82 87 133 7 80 77 148 85 76 78 79 73 0 75 71 159 161 63 164 59 166 54 168 74 163 172 73 170 160 173 162 174 177 165 180 167 182 169 184 171 179 188 178 190 181 189 192 191 183 193 196 195 185 197 200 199 187 203 176 201 204 194 209 198 210 202 212 208 211 216 213 217 215 218 221 220 223 206 205 175 227 186 225 214 230 219 232 222 234 224 228 207 236 240 238 226 229 242 231 245 233 247 235 249 237 244 253 239 251 241 252 205 251 39 208 94 65 124 7 245 37 4 23 2 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab1RightGif
	"'imgs/tab1right.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 144 1 150 0 196 31 0 213 208 186 183 174 136 210 204 181 217 212 193 226 222 208 233 230 219 222 218 201 243 242 236 214 209 188 235 232 222 214 208 187 236 234 224 240 238 231 247 246 243 238 236 227 231 228 216 250 250 248 253 253 252 201 194 166 212 207 184 208 202 178 205 199 173 203 196 169 192 184 151 229 226 212 220 216 198 216 211 191 207 201 176 206 200 174 202 195 167 252 252 251 226 229 218 33 249 4 1 0 0 31 0 44 0 0 0 0 144 1 150 0 0 5 255 96 32 142 100 105 158 104 170 174 108 235 190 112 44 207 116 109 223 120 174 239 176 68 101 159 96 100 72 44 26 143 200 164 114 201 108 58 159 208 168 116 74 173 90 175 216 172 118 203 117 122 32 7 130 224 34 8 66 206 232 180 122 205 110 187 223 240 184 124 78 175 219 239 248 188 126 207 239 251 255 128 115 13 7 12 9 6 18 101 13 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 150 7 7 11 15 4 3 23 25 166 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 186 12 14 9 24 6 25 29 22 12 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 221 202 169 205 99 14 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 0 3 10 28 72 176 160 193 131 8 19 42 236 151 160 0 179 12 3 16 4 88 64 177 162 197 139 24 51 106 220 200 177 163 199 143 32 67 138 28 73 178 164 201 147 40 83 255 170 92 201 178 229 199 4 9 30 60 28 160 33 0 204 155 56 115 234 220 201 179 167 207 159 64 131 10 29 74 180 168 209 163 72 147 42 93 202 180 169 211 167 67 11 184 203 160 65 98 129 171 88 179 106 221 202 181 171 215 175 96 195 138 29 75 182 172 217 179 104 211 170 93 203 182 173 219 183 112 199 202 36 0 17 129 196 7 120 243 234 221 203 183 175 223 191 128 3 11 30 76 184 176 225 195 136 19 43 94 204 184 177 227 199 144 35 19 198 64 160 153 221 9 1 8 104 222 204 185 179 231 207 160 67 139 30 77 186 180 233 211 168 83 171 94 205 186 181 235 215 176 99 203 158 125 186 153 6 0 2 4 4 48 192 187 183 239 223 192 131 11 31 78 188 184 241 227 200 147 43 95 206 188 185 243 231 208 163 75 159 78 189 250 241 12 16 53 76 160 64 97 67 128 1 224 195 139 31 79 190 188 249 243 232 211 171 95 207 190 189 251 247 240 227 203 159 79 191 190 253 251 248 243 179 175 186 157 67 133 10 1 216 37 224 128 4 22 104 224 129 8 38 168 224 255 130 12 54 232 224 131 16 70 40 225 132 20 86 104 225 133 24 102 168 225 131 19 8 176 65 5 22 116 16 224 134 36 150 104 226 137 40 166 168 226 138 44 182 168 33 0 29 82 224 95 7 34 2 96 227 141 56 230 168 227 142 60 246 232 227 143 64 6 41 228 144 68 22 105 228 145 72 38 169 228 146 76 54 233 228 147 65 78 16 35 136 29 72 16 0 148 88 102 169 229 150 92 118 233 229 151 96 134 9 165 148 2 80 64 165 149 98 166 169 230 154 108 182 233 230 155 112 226 72 166 153 33 162 25 231 157 120 230 169 231 158 124 114 57 231 153 87 246 41 232 160 132 22 106 168 155 127 214 25 232 161 140 54 234 232 163 144 242 152 104 149 139 70 106 233 165 152 102 202 230 164 118 106 234 233 167 160 134 122 36 167 149 138 106 234 169 168 122 74 106 170 172 182 234 234 161 171 190 42 235 172 180 182 25 107 173 184 230 170 235 147 183 238 234 235 175 192 250 216 107 176 196 22 187 235 176 198 38 171 108 171 200 46 235 236 179 170 78 169 40 180 212 86 139 105 255 179 214 102 171 45 159 216 110 235 237 183 182 74 75 41 184 228 150 187 169 184 157 154 171 238 186 90 118 203 238 187 240 18 233 110 188 244 214 171 227 188 246 230 75 47 190 250 246 187 46 191 254 6 12 46 192 2 23 156 45 193 6 39 252 44 194 10 55 108 44 195 14 71 252 43 196 18 87 140 43 197 22 103 252 42 198 26 119 140 42 199 30 135 12 42 200 34 151 124 45 186 165 154 172 50 179 40 175 236 178 171 36 191 44 243 160 49 207 108 179 158 53 223 172 51 156 57 239 236 243 154 61 255 44 52 152 65 15 109 244 150 69 31 173 52 175 45 47 237 116 158 73 63 45 181 145 81 79 109 117 148 77 95 173 117 152 85 111 237 181 156 89 127 45 54 150 93 143 189 117 217 102 95 141 118 218 83 175 205 246 211 110 191 189 116 220 114 31 77 119 221 67 223 141 247 207 122 239 189 115 223 126 223 12 120 224 51 15 78 248 203 134 31 190 114 226 138 155 204 120 227 34 63 14 185 199 146 79 174 113 229 150 91 140 121 230 18 111 206 185 195 158 127 174 112 254 232 162 27 76 122 233 2 159 142 186 191 170 175 174 111 235 174 219 11 123 236 251 134 77 251 215 179 223 254 110 238 186 255 107 123 239 106 255 14 124 219 194 15 15 119 241 198 207 141 124 242 118 47 207 124 222 206 63 207 119 244 210 255 77 125 245 130 95 143 125 225 218 111 143 120 247 222 47 14 126 248 142 143 79 126 228 230 159 79 121 250 234 95 206 126 251 154 191 15 127 231 242 207 15 122 253 246 143 142 127 254 166 239 207 127 234 254 251 31 235 2 40 192 215 17 176 128 178 59 32 2 107 87 38 64 45 208 101 188 123 96 174 34 40 193 90 81 176 130 179 186 32 6 55 166 192 13 154 75 131 30 100 21 8 67 248 177 14 146 240 91 35 60 161 168 82 168 194 145 153 176 133 7 123 33 12 171 197 194 25 102 170 134 54 188 20 14 115 24 169 29 242 240 81 62 252 97 163 130 40 68 88 201 176 136 15 59 34 18 137 69 196 37 210 76 137 78 156 24 20 163 120 172 41 82 113 130 86 188 162 5 179 168 197 12 114 177 139 28 108 160 162 66 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab1RightOnGif
	"'imgs/tab1righton.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 144 1 150 0 196 31 0 255 255 255 253 253 252 254 254 254 244 242 237 249 249 247 242 241 234 119 102 85 242 241 235 250 250 248 247 246 242 246 245 241 248 247 245 209 205 193 145 131 116 229 225 213 232 230 218 239 237 230 174 164 150 249 248 246 234 232 222 237 234 226 231 227 216 245 244 239 246 245 240 253 253 253 241 240 233 252 252 250 240 238 231 189 181 169 235 233 223 128 112 95 226 229 218 33 249 4 1 0 0 31 0 44 0 0 0 0 144 1 150 0 0 5 255 160 33 142 100 105 158 104 170 174 108 235 190 112 44 207 116 109 223 120 174 239 175 215 68 140 143 16 64 44 26 143 200 164 114 201 108 58 159 208 168 116 74 173 90 175 216 172 118 203 237 58 5 1 9 133 17 105 112 134 222 180 122 205 110 187 223 240 184 156 11 150 88 54 227 200 121 206 239 251 255 128 129 130 131 69 117 22 16 29 15 12 13 12 132 142 143 144 145 146 147 109 134 136 15 14 17 17 148 156 157 158 159 160 129 150 137 21 139 161 167 168 169 170 171 75 163 152 14 30 172 178 179 180 181 162 97 135 164 14 6 2 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 199 24 26 18 3 151 14 187 1 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 234 26 4 9 220 19 175 12 16 24 72 176 160 193 131 8 19 42 92 200 176 161 195 135 16 35 74 156 72 177 162 197 139 24 51 106 220 200 209 225 130 11 5 40 60 168 224 205 64 130 147 40 83 255 170 92 201 178 165 203 151 48 99 202 156 73 179 166 205 155 56 115 234 220 201 179 167 207 159 64 99 42 184 112 96 67 34 111 187 6 40 93 202 180 169 211 167 80 163 74 157 74 181 170 213 171 88 179 106 221 202 181 171 215 175 96 195 138 29 75 245 64 81 10 0 145 26 40 192 182 173 219 183 112 227 202 157 75 183 174 221 187 120 243 234 221 203 183 175 223 191 128 3 11 30 76 184 240 221 12 16 208 190 218 101 184 177 227 199 144 35 75 158 76 185 178 229 194 25 54 36 38 85 161 130 1 179 160 67 139 30 77 186 180 233 211 168 83 171 94 205 186 181 235 215 176 99 203 158 77 187 182 237 219 184 87 23 64 76 33 209 131 7 6 200 10 31 78 188 184 241 227 200 147 43 95 46 252 0 111 10 189 13 40 152 78 189 186 245 235 216 179 107 223 206 189 187 247 239 224 195 139 31 79 190 188 249 243 232 211 171 95 207 190 251 133 11 22 6 236 214 12 193 192 130 251 248 243 235 223 207 191 191 255 255 0 6 40 224 128 4 22 104 224 129 8 38 168 224 255 130 12 54 232 224 131 16 10 120 18 124 3 128 38 80 71 24 102 168 225 134 28 118 232 225 135 32 134 216 145 4 11 36 48 221 123 6 32 160 226 138 44 182 232 226 139 48 198 40 227 140 52 214 104 227 141 56 230 168 227 142 60 246 232 227 143 64 6 41 228 144 55 14 36 193 145 18 24 160 207 146 76 54 233 228 147 80 70 41 229 148 84 50 169 193 149 43 242 114 205 150 92 118 233 229 151 96 134 41 230 152 100 110 137 193 153 104 26 96 203 154 108 182 233 102 26 106 190 41 231 156 116 214 89 68 156 118 230 169 231 158 168 224 201 231 159 128 6 42 136 159 130 22 106 232 161 112 34 170 232 162 140 78 65 104 163 144 70 202 232 163 146 86 106 233 159 148 94 170 233 166 111 102 202 233 167 160 178 226 105 168 164 150 218 201 168 166 166 170 234 32 168 174 234 234 171 113 180 10 235 172 180 118 33 107 173 184 230 234 168 174 188 246 122 197 173 190 6 235 43 176 194 22 139 43 177 198 38 251 42 178 202 54 107 42 179 206 70 251 41 180 210 86 107 41 255 181 214 102 219 40 182 218 118 123 40 183 222 134 11 40 184 226 150 155 39 185 230 166 43 39 186 234 182 187 38 187 238 198 43 11 188 242 214 219 167 189 248 242 73 111 190 252 78 178 111 191 0 59 242 111 192 4 3 50 112 193 8 207 113 112 194 12 187 177 112 195 16 39 26 241 196 167 82 108 177 191 23 103 252 200 195 26 119 236 4 199 30 135 156 4 200 34 151 76 4 201 38 139 140 114 202 30 175 204 178 198 46 191 124 113 204 50 83 76 115 205 17 223 140 115 195 58 239 156 112 207 62 23 12 116 208 1 15 77 116 191 70 31 157 111 210 74 219 203 116 211 242 62 13 181 187 82 79 173 110 213 86 155 139 117 214 226 110 205 181 183 94 127 173 109 216 98 91 75 118 217 210 158 141 182 179 106 175 173 108 219 110 27 11 119 220 194 206 77 247 176 119 251 108 119 222 186 238 205 247 177 127 215 236 119 224 179 14 78 248 178 135 179 108 120 226 170 46 206 248 179 143 151 236 120 228 161 78 78 249 180 151 183 156 121 199 150 111 126 105 231 158 87 10 122 140 232 145 142 78 250 182 167 219 156 250 196 166 175 142 104 235 174 27 10 123 236 130 206 78 251 184 183 255 156 59 194 182 239 174 103 239 190 219 9 124 240 116 14 79 252 186 199 35 157 60 191 198 47 207 102 243 206 219 2 125 244 180 76 79 253 188 215 71 157 125 188 214 111 159 74 247 222 159 2 126 248 160 140 79 190 39 230 159 207 73 250 234 99 220 126 184 236 191 15 73 252 242 11 92 127 183 244 223 63 168 254 217 230 207 255 31 254 251 95 31 2 40 64 133 21 48 90 4 60 32 28 18 168 64 135 53 240 109 33 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab2BottomGif
	"'imgs/tab2bottom.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 1 0 1 0 128 0 0 204 204 204 0 0 0 33 249 4 0 0 0 0 0 44 0 0 0 0 1 0 1 0 0 2 2 68 1 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab3BackGif
	"'imgs/jure-tabs-back.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 7 0 24 0 213 0 0 0 0 0 255 255 255 254 255 254 254 255 253 251 252 250 251 252 249 250 251 248 250 251 247 248 249 245 247 248 242 245 246 240 244 245 238 243 244 237 242 243 236 243 244 236 242 243 235 243 243 234 243 243 235 242 242 234 244 244 237 243 243 236 242 242 235 247 247 241 246 246 240 245 245 239 244 244 238 243 243 237 248 248 243 247 247 242 246 246 241 249 249 245 247 247 243 246 246 242 252 252 249 251 251 248 250 250 247 252 252 250 250 250 248 254 254 253 253 253 252 247 246 242 251 250 247 254 253 252 252 251 250 254 254 254 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 45 0 44 0 0 0 0 7 0 24 0 64 6 88 192 71 37 242 128 72 32 30 15 34 153 12 56 159 1 140 116 138 97 153 88 44 1 107 0 125 106 40 140 73 216 97 65 129 56 40 139 37 180 34 21 8 132 85 119 78 127 70 40 148 72 227 190 232 103 22 127 23 10 23 29 131 29 9 28 31 31 27 139 34 6 7 41 37 35 37 39 149 39 42 42 39 117 155 156 157 80 65 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab5BgGif
	"'imgs/jure-tab-bg.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 20 0 45 0 196 0 0 221 227 213 219 225 211 254 254 254 242 244 238 230 233 224 218 224 210 252 252 252 245 247 242 249 249 247 234 237 228 224 228 214 229 232 222 238 241 234 237 240 233 239 242 235 226 229 218 248 248 246 247 247 245 243 245 240 233 236 227 250 250 248 251 251 251 235 238 231 119 102 85 227 230 219 228 231 221 253 253 253 236 239 232 225 228 217 241 243 238 224 227 216 232 235 226 44 0 0 0 0 20 0 45 0 0 5 40 160 32 142 100 105 158 104 170 174 108 235 190 112 44 207 116 109 223 120 174 239 124 239 255 192 160 112 72 44 26 143 200 228 204 194 108 58 159 207 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab5LeftGif
	"'imgs/jure-tab-left.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 9 0 142 0 213 0 0 0 0 0 255 255 255 214 226 233 133 176 198 132 175 197 131 174 196 131 173 195 129 171 193 128 170 191 134 177 199 130 172 193 129 170 192 128 169 190 127 168 189 135 177 199 131 172 193 125 164 184 136 178 200 136 177 199 136 178 199 134 175 197 135 176 197 131 170 191 128 167 187 127 165 185 130 169 189 135 173 193 132 168 187 144 177 194 154 184 200 185 206 217 198 215 224 209 223 230 211 224 231 235 241 244 130 173 194 132 175 196 135 178 199 134 177 198 132 175 195 134 177 197 133 174 194 129 169 188 126 165 184 140 175 192 152 183 198 172 197 209 171 196 208 253 254 254 252 253 253 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 50 0 44 0 0 0 0 9 0 142 0 0 6 191 192 128 80 8 19 184 90 195 128 168 131 89 173 134 159 77 211 41 244 56 87 153 20 37 16 114 94 42 145 200 36 198 90 89 36 225 201 4 4 121 168 223 165 151 10 94 42 57 56 168 122 221 193 215 240 255 14 9 9 10 130 133 9 38 38 39 136 139 136 3 4 3 144 145 146 147 148 145 4 151 152 153 154 155 156 36 152 36 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 181 5 204 205 206 205 6 206 6 211 212 213 214 213 35 217 218 35 6 217 10 223 223 222 224 227 223 7 230 231 7 10 232 235 231 11 238 232 238 241 239 238 8 245 245 241 245 12 250 247 8 250 254 251 255 2 254 107 240 47 8 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab5LeftOnGif
	"'imgs/jure-tab-left-on.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 9 0 142 0 213 0 0 0 0 0 255 255 255 228 228 219 225 225 216 224 224 215 223 223 214 222 222 213 240 240 231 239 239 230 238 238 229 237 237 228 236 236 227 235 235 226 234 234 225 232 232 223 231 231 222 227 227 219 226 226 218 225 225 217 224 224 216 223 223 215 222 222 214 221 221 213 220 220 212 219 219 211 218 218 210 217 217 209 216 216 208 240 240 232 239 239 231 236 236 228 234 234 226 233 233 225 232 232 224 230 230 222 220 220 213 215 215 208 214 214 207 228 228 221 226 226 219 224 224 217 236 236 230 231 231 225 229 229 223 239 239 234 242 242 238 245 245 242 245 245 243 244 244 242 250 250 249 254 254 254 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 51 0 44 0 0 0 0 9 0 142 0 0 6 255 192 128 112 248 74 169 134 129 152 106 82 144 12 91 17 138 193 224 12 176 8 149 138 32 145 8 184 38 134 129 130 195 149 153 10 162 14 135 156 128 77 66 235 53 55 5 137 31 14 220 149 231 206 231 158 16 124 119 92 19 129 130 9 132 133 131 133 120 135 139 138 137 9 20 8 147 148 92 146 148 147 150 152 153 145 156 92 92 21 159 162 9 161 163 160 166 167 168 165 166 171 163 173 162 175 159 177 169 172 168 164 182 179 183 170 184 188 187 190 181 191 174 189 192 196 194 193 176 195 198 197 200 199 178 201 204 203 206 205 180 202 213 208 214 210 209 212 215 220 217 216 219 222 221 224 227 186 218 229 223 231 226 233 225 236 228 185 239 207 237 235 238 241 244 211 243 248 240 247 250 230 252 232 254 234 0 202 19 104 175 95 189 124 7 9 38 176 160 160 161 67 46 12 27 46 104 200 101 196 130 139 24 43 98 204 152 96 4 131 143 32 185 92 96 240 161 100 73 46 24 76 154 68 9 162 165 75 46 25 92 190 76 16 19 68 136 155 32 96 222 220 25 130 139 134 18 16 14 130 6 245 25 244 129 81 7 92 54 216 34 177 212 86 16 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab5RightGif
	"'imgs/jure-tab-right.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 236 0 142 0 213 0 0 0 0 0 255 255 255 133 176 198 132 175 197 131 174 196 131 173 195 129 171 193 128 170 191 126 167 188 124 164 185 134 177 199 130 172 193 129 170 192 128 169 190 127 168 189 126 166 187 125 165 186 124 164 184 123 163 183 135 177 199 129 169 190 125 164 184 123 162 182 136 178 200 136 178 199 135 176 198 134 175 197 137 178 200 137 179 200 133 173 194 127 165 185 138 179 200 139 180 201 139 179 200 133 172 192 131 169 189 130 168 187 129 167 186 128 166 185 141 181 202 140 180 201 139 178 199 138 178 198 130 167 186 142 182 202 134 172 191 132 169 188 131 168 187 134 170 189 130 173 194 132 175 196 125 166 186 135 178 199 134 177 198 131 173 193 127 166 185 126 165 184 130 170 189 140 181 201 137 177 196 131 169 187 132 169 187 133 170 188 255 255 255 33 249 4 1 0 0 63 0 44 0 0 0 0 236 0 142 0 0 6 255 64 83 169 180 34 189 120 61 151 111 185 132 57 159 208 168 116 74 173 90 175 216 172 118 203 237 122 191 93 230 210 213 235 253 206 232 223 77 72 52 34 147 226 184 124 78 175 219 239 248 188 126 207 239 251 255 128 118 46 100 60 47 47 105 63 30 38 108 69 134 111 73 131 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 131 101 60 133 36 43 105 28 31 31 32 32 40 58 58 39 179 44 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 185 41 59 45 43 67 38 103 27 171 173 174 176 178 179 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 231 182 218 177 42 35 37 207 63 23 209 172 211 175 213 214 232 249 250 251 252 253 254 255 249 98 233 64 129 2 68 8 17 38 110 252 192 32 143 131 180 122 246 8 74 156 72 177 162 197 139 24 51 106 220 200 177 163 199 143 32 67 138 252 40 112 160 68 87 174 88 117 240 240 131 6 195 134 15 33 162 156 73 179 166 205 155 56 115 234 220 201 179 167 207 255 159 64 131 10 29 106 147 222 7 14 57 112 76 112 201 112 67 180 152 70 163 74 157 74 181 170 213 171 88 179 106 221 202 181 171 215 175 96 89 205 164 234 112 67 134 10 10 150 50 189 32 207 169 67 168 97 227 202 157 75 183 174 221 187 88 223 58 101 139 129 66 141 180 106 49 8 102 219 214 169 225 195 136 19 43 94 204 184 177 227 199 144 35 75 158 76 185 178 229 201 111 57 36 38 44 152 134 141 26 127 21 0 166 65 90 240 96 194 168 83 171 94 205 186 181 235 215 176 99 203 158 77 187 182 237 219 184 83 155 238 76 99 130 6 1 2 64 135 6 60 65 45 233 227 200 147 43 95 206 188 185 243 231 208 163 75 159 78 189 186 245 235 212 119 51 47 62 65 52 240 239 193 65 139 30 207 189 188 249 243 232 211 171 95 207 190 189 251 247 240 227 203 159 79 191 126 250 241 162 65 15 24 0 190 191 240 255 0 6 40 224 128 4 22 104 224 129 8 38 168 224 130 12 54 232 224 131 195 229 71 32 112 251 85 184 95 127 24 102 168 225 134 28 118 232 255 225 135 32 134 40 226 136 36 150 104 226 137 26 90 168 226 133 40 182 232 226 139 48 198 40 227 140 38 174 184 34 141 56 230 168 227 142 60 186 104 227 143 44 246 40 228 144 68 22 137 34 144 72 86 104 228 146 76 54 201 100 146 80 58 41 229 148 84 194 8 101 148 85 102 169 229 150 27 94 153 36 151 96 134 153 165 151 72 138 105 230 153 70 146 9 36 154 108 182 153 163 154 63 186 41 231 156 45 194 105 35 157 120 230 9 162 157 55 234 233 231 159 224 241 169 34 160 132 250 41 168 133 133 38 74 231 161 74 42 234 40 155 140 6 249 232 164 96 70 202 31 165 152 110 105 105 166 156 86 185 105 167 160 54 249 105 168 164 18 57 106 169 168 238 120 106 170 172 206 184 106 171 176 250 24 105 172 180 190 248 106 173 184 134 120 107 174 188 114 184 107 175 192 246 247 107 176 196 14 75 44 176 198 30 203 107 178 202 226 202 108 179 180 62 11 45 172 210 78 203 106 181 214 162 138 109 182 164 110 203 45 168 222 126 203 105 184 226 98 74 110 185 147 158 139 255 174 163 234 174 155 104 187 238 18 10 111 188 127 206 75 175 158 246 222 139 103 190 250 206 201 111 191 110 254 11 48 164 179 14 172 109 193 6 119 139 112 194 224 46 204 240 184 14 63 108 110 196 18 167 75 113 197 236 94 140 241 187 26 111 44 111 199 30 215 11 114 200 248 142 76 242 190 38 159 236 111 202 42 7 204 114 203 4 51 10 51 199 50 207 252 113 205 54 139 140 115 206 37 239 204 51 202 62 255 188 114 208 66 187 76 116 209 49 31 138 52 208 74 47 61 116 211 78 27 13 117 212 73 11 74 181 212 86 95 93 53 159 90 111 109 103 215 104 10 12 118 140 98 143 109 235 203 102 23 89 118 218 71 162 205 182 144 107 191 93 98 220 114 143 72 119 221 186 186 141 247 155 122 239 77 227 221 126 119 8 120 224 93 246 77 184 149 134 31 46 235 209 138 247 56 120 227 129 38 14 121 141 146 79 78 226 227 150 99 62 185 230 144 115 222 184 231 138 131 126 184 232 132 147 30 184 233 126 163 190 183 234 120 91 42 169 229 124 67 41 195 236 50 184 110 255 251 237 184 231 174 251 238 188 211 46 3 1 192 7 79 128 239 196 23 111 252 241 200 39 175 252 242 204 55 239 252 243 208 71 47 253 244 209 11 47 124 1 216 103 175 253 246 214 119 239 253 247 224 135 47 254 248 228 151 111 254 249 232 167 175 254 250 215 111 239 126 246 4 188 95 64 12 244 211 47 255 253 248 231 175 255 254 252 247 239 255 255 0 12 160 0 7 248 190 250 217 79 126 6 92 128 2 23 200 192 6 58 240 129 16 140 160 4 39 72 193 10 90 240 130 24 204 160 6 55 200 65 12 26 112 126 11 52 128 8 71 72 194 18 154 240 132 40 76 161 10 87 200 194 22 186 240 133 48 140 161 12 103 72 67 25 46 48 6 11 40 33 3 118 200 128 3 248 240 135 64 12 162 16 135 72 196 34 26 241 136 72 76 162 18 151 200 196 38 58 241 137 80 20 34 15 25 80 194 28 138 112 135 63 108 128 22 183 200 197 46 122 241 139 96 12 163 24 199 72 198 50 154 241 140 104 76 163 26 215 200 70 49 254 112 135 36 196 98 23 29 64 199 58 218 255 241 142 120 204 163 30 247 200 199 62 250 241 143 128 12 164 32 7 73 200 66 26 82 143 93 60 0 28 123 120 128 45 222 17 1 144 140 164 36 39 73 201 74 90 242 146 152 204 164 38 55 201 201 78 122 242 147 160 12 165 40 37 121 199 45 250 176 135 142 164 227 36 31 192 202 86 186 242 149 176 140 165 44 103 73 203 90 218 242 150 184 204 165 46 119 201 203 94 250 146 149 147 172 163 41 27 217 0 85 66 146 149 51 72 166 50 151 201 204 102 58 243 153 208 140 166 52 167 73 205 106 90 243 154 216 204 166 54 183 217 76 96 66 146 142 90 36 166 3 34 249 128 100 66 224 156 232 76 167 58 215 201 206 118 186 243 157 240 140 167 60 231 73 207 122 218 243 158 248 204 103 59 147 249 128 72 58 192 145 199 156 1 58 19 64 208 8 24 244 160 8 77 168 66 23 202 208 134 58 244 161 16 141 168 68 39 74 209 138 90 244 162 24 53 40 65 19 128 206 25 244 19 1 255 84 101 57 207 89 80 9 152 244 164 40 77 169 74 87 202 210 150 186 244 165 65 48 141 169 76 103 74 211 154 218 244 166 56 85 105 4 8 122 78 143 130 212 152 2 133 64 2 34 128 82 11 24 245 168 72 77 170 82 151 202 212 166 58 245 169 80 141 170 84 167 74 213 170 90 245 170 88 53 42 74 119 218 211 111 6 1 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
tab5RightOnGif
	"'imgs/jure-tab-right-on.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 236 0 142 0 213 0 0 0 0 0 255 255 255 209 209 200 205 205 196 230 230 221 229 229 220 228 228 219 227 227 218 226 226 217 225 225 216 224 224 215 223 223 214 222 222 213 221 221 212 220 220 211 219 219 210 218 218 209 217 217 208 216 216 207 215 215 206 214 214 205 211 211 202 241 241 232 240 240 231 239 239 230 238 238 229 237 237 228 236 236 227 235 235 226 232 232 223 231 231 222 226 226 218 225 225 217 224 224 216 223 223 215 222 222 214 213 213 205 212 212 204 208 208 200 207 207 199 206 206 198 205 205 197 241 241 233 240 240 232 237 237 229 234 234 226 233 233 225 232 232 224 230 230 223 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 49 0 44 0 0 0 0 236 0 142 0 0 6 255 64 145 98 24 42 134 18 72 144 114 201 108 58 159 208 168 116 74 173 90 175 216 172 118 203 93 34 19 197 152 120 28 19 45 206 162 180 144 104 108 187 223 240 184 124 78 175 219 239 248 188 126 207 239 191 135 10 34 97 100 11 35 103 11 106 105 128 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 145 137 10 132 22 161 162 22 42 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 172 44 45 5 102 67 98 11 163 193 184 195 196 197 198 199 200 201 195 161 44 8 11 159 49 11 43 193 212 164 202 215 216 217 218 219 184 212 23 48 35 34 209 43 211 213 230 231 232 233 234 235 236 237 238 239 240 241 242 243 241 47 11 227 228 229 244 251 252 253 254 255 0 3 238 251 112 230 66 62 114 2 19 42 92 200 176 97 194 21 27 22 48 184 64 241 96 62 135 24 51 106 220 24 208 162 68 138 32 45 138 28 73 178 164 201 147 40 83 170 92 201 178 165 203 151 48 83 142 58 121 225 35 200 155 6 99 234 220 201 179 167 207 255 159 64 123 130 180 137 179 168 209 163 72 147 42 93 202 180 169 211 167 80 163 74 157 250 244 224 82 6 19 169 106 221 202 181 171 215 175 96 195 30 101 208 0 131 216 179 104 211 170 93 203 150 34 89 12 112 227 182 157 75 183 174 221 180 111 227 234 133 123 183 175 223 191 128 111 230 221 171 55 176 225 195 136 187 234 109 80 150 112 225 196 144 35 75 6 233 24 46 227 202 114 39 107 222 236 23 51 134 203 158 57 139 30 189 214 243 231 198 152 73 171 94 237 213 52 232 212 172 99 203 126 234 26 117 229 217 184 115 31 173 109 90 183 111 223 188 67 255 30 46 59 56 108 226 200 73 27 191 157 188 57 231 229 142 157 75 159 12 157 240 244 235 137 171 239 197 206 61 176 246 199 221 195 219 253 158 89 188 249 182 228 249 158 95 175 54 189 89 246 240 197 186 143 79 255 235 252 250 248 181 222 207 207 31 234 254 254 0 46 245 95 128 4 26 53 96 129 8 82 116 96 130 5 46 200 96 128 14 62 216 95 132 18 230 71 97 133 245 93 136 97 124 26 110 200 255 94 135 30 158 7 98 136 226 141 72 98 119 38 158 136 93 138 42 78 199 98 139 206 189 8 99 114 50 206 72 92 141 54 254 134 99 142 186 237 200 35 110 62 254 88 156 103 175 49 39 164 121 65 30 185 90 146 74 42 71 164 109 209 53 25 30 147 82 62 247 100 111 85 114 71 101 150 212 93 41 28 151 46 122 121 28 152 49 138 105 36 153 205 109 137 38 98 106 174 105 88 155 110 2 6 103 156 157 153 25 37 157 195 205 137 231 120 118 90 183 167 142 125 110 247 39 112 129 130 55 40 144 133 150 119 232 108 122 46 90 90 162 234 57 58 36 102 69 222 41 41 107 141 94 122 86 166 154 134 197 105 167 246 65 250 30 168 78 82 10 165 159 164 142 246 105 170 91 173 202 42 85 174 190 42 85 172 178 250 39 106 173 155 209 138 107 83 186 238 42 224 173 190 70 214 107 176 72 13 75 172 129 192 30 123 152 177 202 222 196 108 179 10 38 11 237 95 207 66 91 109 179 215 42 155 237 177 219 18 219 109 176 223 250 26 238 174 227 226 90 110 173 231 202 154 255 238 171 235 178 218 110 170 239 146 26 47 168 243 118 90 175 166 247 94 154 175 164 251 58 218 239 162 255 30 234 94 164 211 214 101 154 101 14 100 160 240 193 12 55 236 240 195 16 71 44 241 196 20 87 108 113 196 10 103 224 192 3 26 116 236 113 198 32 135 44 242 200 36 151 108 242 201 40 167 172 242 202 44 183 236 242 203 48 175 236 177 199 15 60 176 193 205 56 231 172 243 204 60 247 236 243 207 64 7 45 244 208 68 23 109 244 209 72 39 173 244 210 58 55 157 115 205 78 115 32 181 212 78 87 109 245 213 88 103 173 245 214 92 119 237 245 215 96 135 45 246 212 84 55 93 51 217 45 164 173 246 218 108 183 237 246 219 112 199 45 247 220 116 215 109 247 221 120 231 173 247 222 119 147 253 0 4 106 187 32 248 224 132 23 110 248 225 136 39 174 248 226 140 55 238 248 227 144 71 46 249 228 148 75 174 54 4 17 20 254 194 230 47 116 224 249 231 160 135 46 250 232 164 151 110 250 233 168 167 174 250 234 172 183 238 250 235 176 139 206 249 11 133 71 32 255 129 224 155 127 238 193 238 188 247 238 251 239 192 7 47 252 240 196 23 111 252 241 200 39 175 252 242 204 55 63 252 231 155 11 46 129 4 185 251 78 192 245 216 103 175 253 246 220 119 239 253 247 224 135 47 254 248 228 151 111 254 249 232 167 223 189 239 29 108 46 193 4 158 243 126 125 1 244 27 96 255 253 248 231 175 255 254 252 247 239 255 255 0 12 160 0 7 72 192 2 26 240 128 8 196 31 253 10 112 61 222 121 110 2 20 144 95 253 240 119 128 10 90 240 130 24 204 160 6 55 200 193 14 122 240 131 32 12 161 8 71 72 194 18 154 240 132 21 204 31 253 8 192 59 10 68 208 3 4 40 192 253 42 136 128 26 218 240 134 56 204 161 14 119 200 195 30 250 240 135 64 12 162 16 135 72 196 34 26 241 136 57 76 161 253 24 184 59 10 144 192 3 50 180 223 1 106 216 133 42 90 241 138 88 204 162 22 183 88 197 26 30 224 126 5 240 0 9 72 64 0 41 34 96 9 70 72 132 26 215 200 198 54 186 241 141 112 140 163 28 231 72 199 58 218 119 241 142 120 204 99 27 141 176 4 4 124 209 0 4 32 65 9 100 56 69 37 20 65 4 35 72 164 34 23 201 200 70 58 242 145 144 140 164 36 39 73 201 74 90 242 146 152 204 164 38 55 217 72 65 132 64 9 126 52 64 1 74 80 130 10 84 64 0 38 48 193 9 80 144 130 86 166 96 0 176 140 165 44 103 73 203 90 218 242 150 184 204 165 46 119 201 203 94 250 242 151 192 12 166 48 97 233 202 20 160 224 4 169 20 128 41 75 16 4 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
textFontSizeGif
	"'imgs/fast/fast-font_size.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 54 0 14 0 128 1 0 153 153 153 238 238 238 33 249 4 1 0 0 1 0 44 0 0 0 0 54 0 14 0 0 2 75 140 143 169 203 237 15 163 76 0 204 139 143 189 251 245 252 69 97 230 85 155 169 161 129 57 170 167 186 86 200 215 213 134 189 46 33 173 245 247 236 203 9 133 163 27 110 24 131 81 130 39 95 209 249 3 42 120 169 99 109 39 139 178 170 71 146 247 11 14 139 199 228 114 163 0 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
textSizeLargeGif
	"'imgs/fast/fast-t_lg.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 16 0 15 0 196 28 0 249 249 246 250 250 248 254 254 253 252 252 250 252 252 251 246 246 242 248 248 245 247 247 244 243 243 238 241 241 235 245 245 240 255 255 254 247 247 243 242 242 237 251 251 250 244 244 239 244 244 240 249 249 247 200 200 185 253 253 253 245 245 241 240 240 233 242 242 236 250 250 247 254 254 254 253 253 252 251 251 249 245 245 236 177 176 176 232 232 222 196 196 181 255 255 255 33 249 4 1 0 0 28 0 44 0 0 0 0 16 0 15 0 0 5 96 224 182 117 100 105 146 226 248 173 108 187 122 170 43 191 221 60 123 245 202 237 252 206 226 50 159 11 232 18 178 22 196 150 17 35 200 36 89 62 102 134 160 121 234 56 147 204 64 19 0 60 23 152 221 246 2 56 20 136 82 130 35 16 49 152 21 15 92 154 11 48 48 10 10 68 35 1 147 108 187 118 20 16 8 22 9 21 48 34 30 138 139 140 138 34 33 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
textSizeMediumGif
	"'imgs/fast/fast-t_med.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 16 0 15 0 196 28 0 249 249 246 252 252 251 250 250 248 254 254 253 252 252 250 248 248 245 246 246 242 243 243 238 247 247 243 245 245 240 241 241 235 255 255 254 253 253 253 247 247 244 200 200 185 250 250 247 242 242 237 245 245 241 240 240 233 242 242 236 251 251 250 244 244 240 249 249 247 244 244 239 254 254 254 253 253 252 251 251 249 245 245 236 177 176 176 232 232 222 196 196 181 255 255 255 33 249 4 1 0 0 28 0 44 0 0 0 0 16 0 15 0 0 5 96 224 182 117 100 105 146 226 248 173 108 187 122 170 43 191 221 60 123 181 237 226 45 231 255 45 158 203 231 90 8 123 28 22 102 144 57 178 136 203 76 64 227 92 249 24 25 130 70 0 112 46 48 140 128 246 1 104 24 132 209 0 69 96 41 152 19 23 92 122 11 40 32 12 137 3 68 1 115 104 185 118 17 21 7 19 10 18 48 34 30 138 139 140 138 34 33 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
textSizeSmallGif
	"'imgs/fast/fast-t_med.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 16 0 15 0 196 28 0 249 249 246 252 252 251 250 250 248 254 254 253 252 252 250 248 248 245 246 246 242 243 243 238 247 247 243 245 245 240 241 241 235 255 255 254 253 253 253 247 247 244 200 200 185 250 250 247 242 242 237 245 245 241 240 240 233 242 242 236 251 251 250 244 244 240 249 249 247 244 244 239 254 254 254 253 253 252 251 251 249 245 245 236 177 176 176 232 232 222 196 196 181 255 255 255 33 249 4 1 0 0 28 0 44 0 0 0 0 16 0 15 0 0 5 96 224 182 117 100 105 146 226 248 173 108 187 122 170 43 191 221 60 123 181 237 226 45 231 255 45 158 203 231 90 8 123 28 22 102 144 57 178 136 203 76 64 227 92 249 24 25 130 70 0 112 46 48 140 128 246 1 104 24 132 209 0 69 96 41 152 19 23 92 122 11 40 32 12 137 3 68 1 115 104 185 118 17 21 7 19 10 18 48 34 30 138 139 140 138 34 33 0 59 13 10 )! !

!DefaultWebStyle methodsFor: 'imgs-other' stamp: ' 21/4/07 10:33'!
transparentPixelGif
	"transparent 1x1 gif"
	"'imgs/trapix.gif' asFilename contentsAsMethod"
^#(71 73 70 56 55 97 1 0 1 0 179 0 0 255 255 255 196 0 67 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 0 0 44 0 0 0 0 1 0 1 0 0 4 2 16 68 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
txtSmallPng
	"'imgs/ikone-dok/corendal-txt.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 1 95 73 68 65 84 120 156 98 248 143 23 252 252 254 9 77 4 32 128 24 224 172 51 27 75 238 156 206 155 90 104 181 126 74 8 144 177 109 217 20 32 185 105 201 226 157 75 187 145 53 0 4 16 84 195 175 95 127 55 111 190 83 81 113 112 66 182 225 158 85 19 123 43 243 119 110 187 188 114 66 254 190 45 187 128 26 158 61 123 6 215 0 16 64 80 13 64 213 71 142 61 106 203 116 122 249 229 19 144 124 243 237 11 144 252 254 251 23 144 4 202 174 92 185 18 174 1 32 128 16 26 118 159 189 0 84 13 65 64 13 31 127 124 7 106 248 243 247 47 154 6 128 0 66 104 56 120 254 26 49 26 0 2 8 161 97 255 185 171 64 165 117 245 245 16 180 123 239 94 172 26 0 2 8 73 195 217 171 196 216 0 16 64 8 13 251 46 92 68 182 1 98 9 68 22 89 3 64 0 33 105 56 123 133 24 27 0 2 8 201 73 167 110 16 99 3 64 0 33 133 210 185 155 196 216 0 16 64 8 13 123 206 92 129 216 0 52 24 143 6 128 0 66 104 248 240 229 43 196 248 215 95 63 191 249 250 229 200 169 147 123 15 30 92 188 108 233 164 201 147 111 220 184 1 215 0 16 64 136 196 247 245 219 247 187 247 239 55 180 180 228 21 20 228 228 228 148 149 149 29 58 116 232 210 165 75 143 30 61 250 249 243 39 92 25 64 0 33 52 0 193 135 15 31 94 190 124 249 233 211 39 160 138 191 96 199 96 2 128 0 3 0 49 229 159 98 54 52 32 115 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
unknownSmallPng
	"'imgs/ikone-dok/corendal-unk.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 1 250 73 68 65 84 120 156 98 248 255 255 255 133 11 231 175 92 185 120 249 50 20 93 189 122 5 130 128 130 231 207 159 123 248 240 225 127 36 0 16 64 12 64 12 84 244 31 7 248 248 241 195 129 3 251 144 245 0 4 16 1 13 47 95 190 2 146 103 207 158 122 244 232 17 68 4 32 128 8 104 248 250 245 211 221 187 183 15 29 218 63 101 202 20 136 8 64 0 129 52 92 185 114 9 72 222 188 245 240 194 133 199 151 47 223 7 162 75 151 238 159 63 255 16 136 46 92 120 112 254 252 213 75 151 206 246 246 246 64 52 0 4 16 92 195 191 240 208 94 57 169 76 14 238 137 28 28 19 132 4 38 105 106 214 105 106 86 201 201 85 7 4 128 204 62 115 230 4 68 3 64 0 65 53 252 249 243 123 254 130 5 123 54 175 222 186 100 253 198 77 187 150 173 223 188 103 207 150 109 91 118 172 88 190 170 171 171 15 168 230 226 197 75 16 13 0 1 4 213 240 227 199 247 131 39 143 126 220 178 234 82 150 223 147 175 95 53 250 230 3 197 211 139 174 102 231 175 95 182 108 246 191 127 255 46 92 184 0 209 0 16 64 72 26 14 238 59 118 124 255 180 185 61 47 95 127 40 173 219 250 243 231 159 105 11 23 207 89 188 104 222 220 57 200 26 0 2 8 161 97 215 190 237 191 31 126 253 191 247 253 15 80 200 204 253 241 235 235 199 45 155 111 174 93 49 109 14 138 13 0 1 132 208 112 228 212 193 43 43 207 31 204 221 253 234 237 141 186 6 247 31 223 190 44 136 138 88 221 92 55 127 201 98 100 13 0 1 4 213 240 243 231 143 89 51 167 207 95 50 187 111 70 215 198 13 235 59 58 186 118 237 218 214 57 169 119 202 204 201 109 173 173 255 65 201 7 170 1 32 128 16 161 52 121 242 100 96 96 79 156 56 1 72 78 158 60 169 167 167 123 210 164 137 221 221 93 171 87 175 6 170 57 127 254 60 68 3 64 0 17 136 105 56 56 119 238 28 132 1 16 64 32 13 87 175 94 38 168 225 226 69 168 161 0 1 4 210 112 228 200 33 160 19 207 225 6 64 247 236 218 181 11 162 1 32 192 0 104 150 135 8 60 245 67 255 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
wordBigGif
	"'imgs/word_icon.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 34 0 32 0 135 0 0 0 0 0 0 0 255 128 128 128 192 192 192 192 220 192 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 3 0 0 4 0 44 0 0 0 0 34 0 32 0 0 8 255 0 9 8 28 72 176 160 193 131 8 13 10 88 200 176 161 67 134 9 15 10 40 64 177 162 197 139 5 4 0 136 88 112 34 198 143 20 23 110 52 8 32 64 201 147 38 83 162 4 41 96 128 70 131 42 99 162 60 201 178 128 203 145 3 75 130 180 168 179 226 128 159 46 41 222 36 104 114 103 197 162 62 129 122 180 249 82 224 76 153 49 45 254 12 9 160 170 213 145 81 83 22 144 57 213 230 197 1 62 71 206 44 64 179 108 0 169 93 187 218 196 10 128 236 89 173 38 39 154 76 11 214 103 88 167 111 159 150 4 219 83 232 84 160 119 9 20 213 139 116 110 93 160 136 3 235 132 123 210 99 95 163 107 5 14 158 188 151 162 97 196 152 21 231 221 220 150 226 99 163 3 216 66 222 10 0 179 105 205 132 159 142 22 202 22 170 94 211 153 89 39 92 186 26 99 232 217 73 97 195 14 44 177 54 200 219 8 151 234 214 205 91 161 239 143 192 123 143 62 45 59 248 113 219 56 141 63 151 26 189 227 116 234 179 135 107 71 92 157 224 213 239 224 195 91 5 229 72 158 124 64 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
wordSmallPng
	"'imgs/ikone-dok/corendal-word.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 120 73 68 65 84 120 156 98 248 15 3 155 14 221 216 120 240 250 134 3 215 214 237 187 178 118 239 165 213 187 46 174 218 121 126 197 182 179 203 182 157 94 186 229 212 191 127 80 101 0 1 196 48 121 245 51 32 234 92 250 178 97 222 179 154 233 55 210 187 174 70 212 93 12 42 63 229 148 119 68 43 105 251 231 239 255 222 126 249 59 103 245 1 115 239 212 127 96 77 0 1 4 210 240 31 7 224 244 222 244 229 251 191 247 95 254 78 93 178 115 215 209 43 16 61 0 1 196 0 52 123 213 190 143 205 115 110 37 52 158 189 118 231 21 144 188 243 232 75 104 238 146 238 37 119 65 26 126 252 125 255 245 239 228 69 219 129 170 33 8 32 128 24 128 46 1 170 0 106 136 175 61 12 100 184 100 237 4 146 190 89 203 203 187 230 0 53 76 88 119 13 136 94 126 252 187 116 207 157 37 187 239 2 53 0 4 16 67 249 196 171 64 219 129 36 80 233 250 61 247 21 125 102 1 205 182 138 154 113 242 210 35 54 167 217 159 127 252 3 105 248 240 231 225 155 63 11 119 221 53 243 74 1 8 32 6 160 47 129 26 210 235 54 3 53 196 150 174 102 53 107 50 138 222 166 97 151 11 20 4 106 248 244 13 164 225 217 187 63 247 95 253 158 187 227 30 80 3 64 0 49 132 86 159 3 202 1 29 13 52 117 251 137 47 64 13 64 180 118 215 5 160 32 135 77 7 208 199 64 13 79 222 254 185 251 242 247 204 109 15 128 26 0 2 136 193 179 228 12 72 78 191 219 34 113 221 135 79 191 128 170 29 210 182 64 66 9 200 134 248 225 225 171 223 183 158 253 158 186 249 17 80 3 64 0 49 88 101 238 192 21 172 140 70 21 47 222 255 121 244 230 207 157 23 191 175 61 249 213 191 241 49 80 3 64 0 49 0 99 7 24 26 16 4 116 52 4 1 29 3 52 30 168 1 98 195 245 167 191 47 61 252 213 181 238 9 80 3 64 0 49 192 205 155 185 98 223 139 15 127 95 126 248 11 36 159 191 255 243 244 237 159 135 175 127 3 205 190 254 244 215 229 71 191 206 221 251 217 186 230 25 80 3 64 0 33 52 76 91 182 251 209 155 223 64 7 64 76 69 70 231 238 253 56 117 251 71 227 242 231 64 13 0 1 132 208 0 140 127 160 207 110 61 255 125 243 217 239 27 79 127 93 123 242 251 242 163 223 23 30 252 60 115 247 199 201 219 63 143 223 250 81 179 228 37 80 3 64 0 33 52 0 227 255 210 163 95 243 118 220 7 6 223 212 45 143 38 110 124 212 179 254 73 199 218 167 45 171 159 53 44 127 94 189 244 69 197 226 215 64 13 0 1 132 208 0 228 16 131 0 2 12 0 71 114 23 164 38 70 157 109 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
xmlBigGif
	"'imgs/xml.gif' asFilename contentsAsMethod"
^#(71 73 70 56 57 97 32 0 32 0 179 10 0 153 102 153 128 128 128 17 17 17 198 198 198 204 204 204 102 102 102 102 51 102 0 0 0 204 153 204 255 255 255 255 255 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 249 4 1 0 0 10 0 44 0 0 0 0 32 0 32 0 0 4 255 80 73 5 140 189 56 235 12 166 50 72 40 142 100 73 26 30 24 30 34 139 184 237 90 162 147 138 20 236 81 200 163 11 139 52 137 237 166 107 193 14 190 89 138 244 67 174 112 188 81 240 211 131 62 115 175 40 112 25 59 102 177 217 19 247 181 179 98 193 191 208 84 85 12 65 89 184 157 15 233 68 172 221 164 50 254 230 46 248 119 118 99 38 131 131 107 27 135 136 23 30 7 9 141 142 143 144 145 144 7 139 146 150 151 141 148 19 140 152 157 143 154 18 156 158 158 160 10 162 163 152 165 167 168 150 140 2 175 176 177 177 172 9 7 2 163 3 183 168 182 9 3 190 191 192 190 1 186 146 116 198 183 192 2 190 202 191 195 150 4 7 4 210 208 5 200 203 201 205 196 144 208 211 58 10 214 204 216 3 206 146 220 212 18 200 225 193 202 228 145 220 222 232 189 185 193 243 227 218 143 208 240 241 191 234 225 195 198 0 245 237 227 119 45 219 159 131 127 60 12 164 7 108 152 194 135 10 217 5 152 72 177 98 128 92 16 51 42 72 32 171 35 172 4 26 3 33 70 0 0 59 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
xmlSmallPng
	"'imgs/ikone-dok/corendal-xml.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 0 208 73 68 65 84 120 156 98 104 35 2 252 71 2 0 1 196 128 198 199 4 7 14 28 64 86 3 16 64 56 53 124 252 248 17 66 2 53 0 25 112 101 0 1 132 208 0 87 129 70 50 32 1 32 23 32 128 160 26 128 114 203 78 125 128 170 104 104 0 34 227 180 255 232 226 96 13 0 1 4 213 0 20 101 96 152 9 81 13 36 141 129 104 38 80 69 3 88 221 76 136 30 136 6 128 0 2 105 128 171 6 137 2 205 6 170 62 3 212 0 84 208 0 51 123 38 88 13 72 3 64 0 161 219 0 116 9 208 108 176 106 236 54 0 4 16 54 63 48 52 64 16 86 63 0 4 16 225 80 130 147 16 13 0 1 132 176 193 56 109 38 46 132 108 3 64 0 145 108 3 64 0 145 108 3 64 0 145 108 3 64 0 33 108 32 72 66 52 0 4 16 3 73 0 168 1 32 192 0 122 128 24 248 27 252 237 14 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DefaultWebStyle methodsFor: 'imgs-filetype icons' stamp: ' 21/4/07 10:33'!
zipSmallPng
	"'imgs/ikone-dok/corendal-zip.png' asFilename contentsAsMethod"
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 16 8 2 0 0 0 144 145 104 54 0 0 0 4 103 65 77 65 0 0 88 199 252 71 224 2 0 0 0 32 99 72 82 77 0 0 122 37 0 0 128 131 0 0 249 255 0 0 128 230 0 0 117 46 0 0 234 95 0 0 58 151 0 0 23 111 105 228 196 43 0 0 2 37 73 68 65 84 120 156 98 248 143 1 90 14 127 110 60 240 169 122 207 199 210 237 31 242 54 190 75 91 243 54 113 197 107 184 44 64 0 49 188 184 216 126 126 33 31 4 1 217 64 185 47 255 255 31 127 243 119 207 211 223 107 111 255 156 125 254 107 199 225 207 101 219 63 120 182 95 132 104 0 8 32 6 160 186 143 146 140 16 4 100 171 103 30 71 67 86 13 23 98 86 127 139 158 121 157 197 123 3 80 3 64 0 1 53 8 220 218 162 117 115 187 230 205 253 90 55 247 235 220 220 163 127 115 187 225 237 157 198 183 118 153 222 219 103 189 165 134 31 168 168 105 227 253 210 141 79 32 26 0 2 136 225 234 106 165 127 127 103 254 255 127 228 255 255 157 255 255 175 255 255 119 201 255 223 179 254 255 154 240 255 71 219 231 39 185 155 106 249 128 138 38 108 187 15 244 24 68 3 64 0 49 92 93 37 255 235 219 228 159 223 158 254 120 119 234 215 203 181 191 30 247 255 190 87 242 231 102 196 191 203 22 247 182 50 66 52 76 219 121 191 251 212 79 136 6 128 0 98 184 2 212 240 117 226 239 207 231 126 189 222 252 251 249 244 63 143 106 127 223 77 249 123 211 253 207 21 67 172 26 0 2 136 40 13 83 182 35 52 0 4 16 208 73 138 191 190 78 248 253 97 239 175 23 11 255 60 105 253 115 47 247 239 173 192 191 87 45 191 157 213 129 107 152 177 243 126 231 201 239 16 13 0 1 196 112 105 153 200 247 247 77 55 214 105 92 89 46 125 117 153 216 213 101 2 87 151 114 95 89 204 113 105 1 59 92 195 132 205 247 138 54 62 131 104 0 8 32 134 157 173 154 155 170 149 87 231 242 174 202 229 93 83 34 139 25 15 133 115 46 23 172 127 23 187 244 53 68 3 64 0 49 160 165 11 72 76 103 108 255 159 184 249 127 209 238 255 21 251 64 8 168 218 186 234 8 68 1 64 0 161 107 128 232 209 201 218 173 145 186 77 57 126 3 16 41 70 175 133 152 13 1 0 1 132 69 3 154 102 228 148 7 4 0 1 132 93 67 240 172 71 37 75 30 228 46 124 16 53 229 134 95 255 13 231 174 235 150 173 215 133 252 87 2 165 0 2 8 151 134 39 39 110 124 219 114 254 219 140 67 95 203 183 124 9 91 246 197 98 230 103 177 128 229 64 41 128 0 3 0 79 174 47 198 171 105 151 124 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
codepage
	codepage isNil ifTrue: [self codepage: self defaultCodepage].
	^codepage! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
codepage: aSymbol
	" #cp1250  #iso2 #'7bit'"
	codepage := aSymbol.! !

!DelimitedFile methodsFor: 'private' stamp: ' 21/4/07 22:07'!
crlf
	"return an cr-lf combination"

	^(Character cr) asSymbol ", (Character lf) asSymbol".! !

!DelimitedFile methodsFor: 'accessing'!
defaultCodepage
	^#UTF8
"	^#cp1250 " "Windows"! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
defaultDelimiter
	"default delimiter is ; "

	^$;! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delimiter
	"delimiter is a character, which separate fields in a delimited file"
	delimiter isNil ifTrue: [self delimiter: self defaultDelimiter].
	^delimiter! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delimiter: aCharacter
	"delimiter is a character, which separate fields in a delimited file"
	delimiter := aCharacter.! !

!DelimitedFile methodsFor: 'private' stamp: ' 21/4/07 22:07'!
endOfLine: aStream
	"return true if we are at the end of line (on cr or lf characters)"
	aStream peek isNil ifTrue: [^true].
	^(aStream peek = Character cr or: [aStream peek = Character lf]).! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
filename
	^filename! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
filename: aFilename
	filename := aFilename.! !

!DelimitedFile methodsFor: 'initialize - release' stamp: ' 21/4/07 22:07'!
initialize! !

!DelimitedFile methodsFor: 'private' stamp: ' 21/4/07 22:07'!
newRecordFrom: aStream

	"read one line from delimited file, detect and separate fields and convert to
	appropriate objects into an ordered collection. return that collection"

	| collection field |
	collection := OrderedCollection new.
	[self endOfLine: aStream] whileFalse:
		[field := self readFieldFrom: aStream.
		collection add: field].
	self skipEndOfLine: aStream.
	^collection! !

!DelimitedFile methodsFor: 'private' stamp: 'mivsek 6/13/2007 16:03'!
readFieldFrom: aStream
	"read one field from delimited file, and convert to appropriate object. Return that object"
	| object stream |
	aStream peek = $" ifTrue:  "start of a text field"
		[object := aStream upTo: $"; upTo: $".
		(self endOfLine: aStream) ifFalse: [aStream upTo: self delimiter].
		^AIDASite convert: object fromCodepage: self codepage].
	stream := WriteStream on: String new.
	[aStream peek = self delimiter or: [self endOfLine: aStream]] 
		whileFalse: [aStream peek isNil ifTrue: [^stream contents]. stream nextPut: aStream next].
	aStream peek = self delimiter ifTrue: [aStream skip: 1].
	object := stream contents. stream close.
	^object
"
	(object includes: $. ) false
		ifTrue:
			[(Date readSloFrom: object readStream) notNil 
				ifTrue: [^Date readSloFrom: object readStream]
				ifFalse: [^object asInteger]]
		ifFalse: [^object asInteger].
"! !

!DelimitedFile methodsFor: 'file reading'!
readFrom: aFilenameString
	"read a delimited file and convert content to object representation in 'records' collection"
	| stream | 
	self filename: (SpFilename named: aFilenameString).
	[stream :=  self filename readStream.
	self readFromStream: stream] 
		ensure: [stream close].

"DelimitedFile readFrom: 'm:\geoplin\tarifni\exports\ddnevnik.txt' "! !

!DelimitedFile methodsFor: 'file reading' stamp: ' 21/4/07 22:07'!
readFromStream: aStream
	"read a delimited file and convert content to object representation in 'records' collection"
	[aStream atEnd] whileFalse: [self records add: (self newRecordFrom: aStream)]! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
records
	"when aDelimitedFile is created on a existing file, all records (lines in a file) are 
	converted and stored in this ordered collection. Fields in each record are stored in 
	another ordered collection as objects of appropriate class (texts as Strings, 
	numbers as Integers or Floats, dates as Dates)"

	records isNil ifTrue: [self records:OrderedCollection new].
	^records! !

!DelimitedFile methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
records: aCollection
	records := aCollection.! !

!DelimitedFile methodsFor: 'private' stamp: ' 21/4/07 22:07'!
skipEndOfLine: aStream

	"skip all cr and lf characters)"

	[aStream atEnd] whileFalse: 
		[(aStream peek = Character cr or: [aStream peek = Character lf]) 
			ifTrue:	[aStream skip: 1]
			ifFalse: [^self]
		].! !

!DelimitedFile methodsFor: 'file writing' stamp: ' 21/4/07 22:07'!
writeRecord: anArray to: aStream

	| dm data1 |
	dm := false.
	anArray do: [:data |
		dm ifTrue: [aStream nextPut: self delimiter].
		(data isKindOf: Integer) ifTrue: [aStream nextPutAll: data printString].
		(data isKindOf: String) ifTrue: 
			[data1 := AIDASite returnCSZFromCP852String:  data.
			data1 := data1 select: [:ch | ch asInteger <=255].
			aStream nextPutAll: '"',data1,'"'].
		(data isKindOf: FixedPoint) ifTrue: 
			[data1 := data printDotString select: [:ch | ch ~= $. ].
			aStream nextPutAll: data1].
		dm := true].
	aStream nextPutAll: self crlf.! !

!DelimitedFile methodsFor: 'file writing' stamp: ' 21/4/07 22:07'!
writeToFile
	self writeToFile: self filename.
"
|dmFile|
dmFile := DelimitedFile fileToWrite: 'test.dat'.
dmFile records 
	add: (Array with: 123 with: 'abcd' with: 345);
	add: (Array with: 234 with: 'CDE' with: 567).
dmFile writeToFile
"! !

!DelimitedFile methodsFor: 'file writing' stamp: ' 21/4/07 22:07'!
writeToFile: aFilenameString
	"export all records to delimited file"
	| stream | 
	self filename: aFilenameString asFilename.
	[stream :=  self filename writeStream.
	records do: [:record | self writeRecord: record to: stream] ]
		ensure: [stream close].
"
|dmFile|
dmFile := DelimitedFile new.
dmFile records 
	add: (Array with: 123 with: 'abcd' with: 345);
	add: (Array with: 234 with: 'CDE' with: 567).
dmFile writeToFile: 'test.dat'
"! !

!DelimitedFile class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
fileToWrite: aFilenameString

	"create a new instance on a specified (empty) file to write. After you fill records attribute with all
	data, call writeToFile method to do actual exporting to this file"

	| instance |
	instance := self new.
	instance filename: aFilenameString asFilename.
	^instance.! !

!DelimitedFile class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!DelimitedFile class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
readFrom: aFilenameString

	"read a specified delimited file and store records in a records attribute. Use default delimiter
	for field separator (character ; )"

	| instance |
	instance := self new.
	instance readFrom: aFilenameString.
	^instance.

"DelimitedFile readFrom: 'i:\projekti\dare\proizvod.txt' "! !

!DocLink methodsFor: 'converting' stamp: ' 21/4/07 22:07'!
asWebLink
	^WebLink text: self title linkTo: self url! !

!DocLink methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	^self! !

!DocLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
migrateToUnicode
	"DocLink allInstances do: [:each | each migrateToUnicode]"
	title notNil ifTrue: [title := title ensureUnicodeSloveneChars]! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object
	^object! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object: anObject
	object := anObject! !

!DocLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString
	^'a Doclink
		title:  ', (self title notNil ifTrue: [self title] ifFalse: ['']), '
		url: ', (self url notNil ifTrue: [self url] ifFalse: ['']), '
		object: ', self object printString! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title
	^title! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title: aString
	title := aString! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
url
	^url! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
url: aString
	url := aString! !

!DocLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
uuid
	^self hash printString! !

!DocLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	"Answer a newly created and initialized instance."

	^super new initialize! !

!EMailMessenger methodsFor: 'private-sending'!
adapt: aString
	"correct some characters to suit the emailer and its bugs"
	"EMailMessenger new adapt: 'BOZ^IC^' convertToSloveneChars"
	| win in out ch |
	win := true. "SpEnvironment onWindows."
	in := aString readStream.
	out := WriteStream on: aString class new.
	[in atEnd] whileFalse:
		[ch := in next.
		win ifTrue: [ch = AIDASite charC ifTrue: [ch := $C] ].  "problem with SMTPClient on Windows"
		out nextPut: ch].
	^out contents! !

!EMailMessenger methodsFor: 'receiving'!
alreadyExist: aDocument
	^false "later!!"! !

!EMailMessenger methodsFor: 'receiving'!
anyNewMail
	^self mailbox deliveryQueue peek notNil.! !

!EMailMessenger methodsFor: 'private'!
client
	"a SMTP client"
	client isNil ifTrue: [self initClient].
	^client! !

!EMailMessenger methodsFor: 'receiving'!
dealWithDocument: aDocument
	aDocument isReceivedInvoice ifFalse: [^nil].
	(self alreadyExist: aDocument) ifTrue: [^nil].
	aDocument issuer addInvoice: aDocument! !

!EMailMessenger methodsFor: 'private'!
emailAddressFor: aPersonOrCollection
	"one or more email addresses, separated with comma"
	| collection |
	(aPersonOrCollection isKindOf: String) ifTrue: [^(self adapt: aPersonOrCollection)].
	collection := (aPersonOrCollection isKindOf: Collection) 
		ifTrue: [aPersonOrCollection] ifFalse: [Array with: aPersonOrCollection].
	collection := collection select: [:each | each notNil and: [each email isValidEMailAddress]].
	collection isEmpty ifTrue: [^'User has no email!! <info@eranova.si>'].
	^self adapt: (collection inject: '' into: [:string :each |    "no full name, just plain address!! "
				(string = '' ifTrue: [''] ifFalse: [string, ', ']), each email])
"	^self adapt: (collection inject: '' into: [:string :each |
				(string = '' ifTrue: [''] ifFalse: [string, ', ']), '""', each nameSurname, '"" <', each email, '>'])
					ensureUnicodeSloveneChars
"! !

!EMailMessenger methodsFor: 'examples' stamp: 'jm 11/10/2010 15:03'!
exampleICalMeeting
	| event calendar |
	event := ICEvent summary: 'Example meeting'.
	event 
"		textualDescription: (self url, (String with: Character cr), self agendaText); "
		uid: ICSqueakUUIDStrategy new generateUid;
		start: (SpTimestamp now addSeconds: 24*3600)  asSqueakDateAndTime;
		end: (SpTimestamp now addSeconds: 25*3600)  asSqueakDateAndTime;
		organizer: (ICUser new
				commonName: 'Janko'; 
				emailAddress: 'janko@eranova.si');
		location: 'Room 123';
		beMediumPriority; 
		beOpaque;
		beConfirmed. 
	calendar := ICCalendar name: 'aida'.
	calendar method: ICCalendar methodRequest.
	calendar addEvent: event.
 	^(ICCalendarExporter calendar: calendar) 
		export dataStream contents copyReplaceAll: String crlf with: (String with: Character cr)! !

!EMailMessenger methodsFor: 'receiving'!
getDocTypeOfMessage: aMailMessage
	"for now only Mobitel's XML invoices"
	aMailMessage attachments size = 3 ifFalse: [^nil].
	('E-racun za opravljene storitve Mobitel*' match: aMailMessage subject) 
		ifTrue:  [^#XMLSloSimpleInvoice].
	('*e-racun@mobitel.si*' match: aMailMessage from first asLowercase) ifTrue: [^#XMLSloSimpleInvoice].
	^nil! !

!EMailMessenger methodsFor: 'receiving'!
getMailDocument
	"returns appropriate Document, like ReceivedInvoice with atachments"
	| message type |
	message := self getMailMessage.
	type := self getDocTypeOfMessage: message.
	type = #XMLSloSimpleInvoice 
		ifTrue: [^ReceivedInvoice fromMailMessage: message on: self repository].
	^nil

"(AIDASite named: 'biart') repository messenger getMailDocument "! !

!EMailMessenger methodsFor: 'receiving' stamp: 'jm 8/2/2010 13:51'!
getMailMessage
	"gets a MailMEssage from postbox if any. Blocks if there is no messages!! "
	| letterInTransit |
	letterInTransit := self mailbox queue next.
"	^Net.MailMessage readFrom: letterInTransit letterText readStream "! !

!EMailMessenger methodsFor: 'initialize-release'!
initClient
	client := self class smtpClientClass host: self repository emailSMTPServer.
	self repository emailSMTPUsername trimBlanks notEmpty ifTrue:
		[client username: self repository emailSMTPUsername.
		client user password: self repository emailSMTPPassword.]! !

!EMailMessenger methodsFor: 'initialize-release'!
initMailbox
	mailbox notNil ifTrue: [mailbox stopFetchingMail].
	mailbox := AIDA.Mailbox new.
	mailbox 
		username: self repository emailPOP3Username;
		password: self repository emailPOP3Password;
		server: self repository emailPOP3Server.
	mailbox 	startFetchingMail! !

!EMailMessenger methodsFor: 'initialize-release'!
initQueue
	queue := SharedQueue new.
	self initSenderProcess.! !

!EMailMessenger methodsFor: 'initialize-release'!
initSenderProcess
	self sendingLoop notNil ifTrue: [self sendingLoop terminate].
	self sendingLoop: 
		([self senderProcess] forkAt: Processor userBackgroundPriority).! !

!EMailMessenger methodsFor: 'sending'!
isSendingStarted
	^self sendingLoop notNil! !

!EMailMessenger methodsFor: 'accessing'!
mailbox
	mailbox isNil ifTrue: [self initMailbox].
	^mailbox! !

!EMailMessenger methodsFor: 'private-error reports'!
messageForError: anErrorString for: aRFC822Message
	| text |
	text := 'Napaka pri pos^iljanju e-pos^te

	', anErrorString, '

prejemnik: ', aRFC822Message to first.

	text := text, '  

To je samodejno sporoc^ilo iz informacijskega portala sistema kakovosti BiArt.'.

	^text! !

!EMailMessenger methodsFor: 'private-error reports'!
notifyError: anErrorString toSenderOf: aRFC822Message
	"VW specific"
	| msg address |
	msg := Net.MailMessage newTextPlain.
	address := aRFC822Message from notEmpty
		ifTrue: [aRFC822Message from first]
		ifFalse: [''].
	msg 
		subject: 'BiArt: Napaka pri dostavljanju e-pos^te';
		text:  (self messageForError: anErrorString for: aRFC822Message);
		from: address; to: address.
	self privSendMessage: msg reportError: #nomore "try to send only once!! "! !

!EMailMessenger methodsFor: 'private-sending'!
privSendMessage: aRFC822Message reportError: aReportSymbol
	| errorText |
	[aRFC822Message fromSendStrings isEmpty 
		ifTrue: [aRFC822Message from: self repository adminEMail].
	self client 
		connect;
		useAuthentication: false; "for now"
		login;
		sendMessage: aRFC822Message;
		quit.
	self reportMailSend: aRFC822Message]
			on: Error
			do: [:ex | errorText := ex class name, ': ', ex errorString.
				Transcript cr; show: 'e-mail sending on ', self repository site name, ' failed: ', errorText; cr.
				(Delay forMilliseconds: 1000) wait.
				aReportSymbol = #repeat ifTrue:
					[Transcript show: 'repeating: '.
					self privSendMessage: aRFC822Message reportError: #report].
				aReportSymbol = #report ifTrue:
					[self notifyError: errorText toSenderOf: aRFC822Message] ].
	(Delay forMilliseconds: 200) wait.! !

!EMailMessenger methodsFor: 'accessing'!
queue
	queue isNil ifTrue: [self initQueue].
	^queue.! !

!EMailMessenger methodsFor: 'private-receiving'!
receivingLoop
	"doc receiving process"
	^receivingLoop! !

!EMailMessenger methodsFor: 'private-receiving'!
receivingLoop: aProcess
	"doc receiving process"
	receivingLoop := aProcess! !

!EMailMessenger methodsFor: 'private-sending'!
reportMailSend: aRFC822Message
	| receiver subject |
	receiver := aRFC822Message toSendStrings first.
	(receiver includes: $<) ifTrue: [receiver := receiver readStream upTo: $<; upTo: $>].
	subject := aRFC822Message subject asSloveneWithoutCircumflexes contractTo: 40.
	Transcript cr; show: 'e-mail sent to: ', receiver, ' ', subject
		.! !

!EMailMessenger methodsFor: 'accessing'!
repository
	^repository! !

!EMailMessenger methodsFor: 'private'!
repository: aRepository
	repository := aRepository! !

!EMailMessenger methodsFor: 'examples'!
sendExample
	"(AIDASite named: 'aidademo') repository messenger sendExample"
	"Setup SMTP server first in repository settings!!"
	| body from to |
	body := 'Emailing test'.
	from := Person new email: 'aida@eranova.si'.
	to := Person new email: 'janko@eranova.si'.
	self 
		sendSubject: 'Aida Emailer test' body: body 
		from: from to: to! !

!EMailMessenger methodsFor: 'examples'!
sendICalExample
	"(AIDASite named: 'aidademo') repository messenger sendICalExample"
	"Setup SMTP server first in repository settings!!"
	| body from to |
	body := 'Test meeting call'.
	from := Person new email: 'aida@eranova.si'.
	to := Person new email: 'janko.testni@eranova.si'.
	self 
		sendSubject: 'Aida Meeting call test' body: body 
		icalName: 'meeting.ics'
		content: self exampleICalMeeting
		from: from to: to! !

!EMailMessenger methodsFor: 'sending' stamp: 'jm 8/2/2010 13:39'!
sendSubject: aSubjectString body: aBodyString attachFile: aFilenameString content: aContentString from: aPerson to: aPersonOrCollection
	"VW specific!!"
	| message receiverAddresses body attachment |
	receiverAddresses := self emailAddressFor: aPersonOrCollection.
	receiverAddresses isEmpty ifTrue: [^nil].
	message := MailMessage newTextPlain. 
	body := "ObjectMemory versionId at: 5" true >= 76 "7.6?" 
		ifTrue: [aBodyString copyReplaceAll: (String with: Character cr) with: String crlf ] "why after 7.6?"
		ifFalse: [aBodyString].
	message 
		charset: 'UTF-8'; headerCharset: 'UTF-8'; 
		from: (self emailAddressFor: aPerson); 
		to: receiverAddresses; 
		subject: (self adapt: aSubjectString convertToSloveneChars);
		text: (self adapt: body convertToSloveneChars ensureUnicodeSloveneChars).
 	message addContentTransferEncoding: '8bit'.
	aFilenameString notNil ifTrue:
		["attachment := MimeEntity new."
		attachment fileName: aFilenameString; 
			contentType: ("MimeEntity mimeTypeForFile: aFilenameString" true).
		attachment body source: aContentString readStream. 
		attachment addContentTransferEncoding: '8bit'.
		message addPart: attachment].
	self queue nextPut: message.! !

!EMailMessenger methodsFor: 'sending'!
sendSubject: aSubjectString body: aBodyString attachFile: aFilename from: aPerson to: aPersonOrCollection
	"VW specific"
	| message receiverAddresses body |
	receiverAddresses := self emailAddressFor: aPersonOrCollection.
	receiverAddresses isEmpty ifTrue: [^nil].
	message := Net.MailMessage newTextPlain. 
	body := (ObjectMemory versionId at: 5) >= 76 "7.6?" 
		ifTrue: [aBodyString copyReplaceAll: (String with: Character cr) with: String crlf ] "why after 7.6?"
		ifFalse: [aBodyString].
	message 
		charset: 'UTF-8'; headerCharset: 'UTF-8'; 
		from: (self emailAddressFor: aPerson); 
		to: receiverAddresses; 
		subject: (self adapt: aSubjectString convertToSloveneChars);
		text: (self adapt: body convertToSloveneChars ensureUnicodeSloveneChars).
 	message addContentTransferEncoding: '8bit'.
	message addFileAttachment: aFilename .
	self queue nextPut: message.! !

!EMailMessenger methodsFor: 'sending'!
sendSubject: aSubjectString body: aBodyString from: aPerson to: aPersonOrCollection
	^self 
		sendSubject: aSubjectString body: aBodyString 
		attachFile: nil content: nil 
		from: aPerson to: aPersonOrCollection! !

!EMailMessenger methodsFor: 'sending'!
sendSubject: aSubjectString body: aBodyString icalName: anICalNameString content: anICalString from: aPerson to: aPersonOrCollection
	"VW specific"
	| message receiverAddresses body iCalString attachment |
	receiverAddresses := self emailAddressFor: aPersonOrCollection.
	receiverAddresses isEmpty ifTrue: [^nil].
	body := (ObjectMemory versionId at: 5) >= 76 "7.6?"  
			"SystemUtils version"  " SystemUtils.SystemVersionName"
		ifTrue: [aBodyString copyReplaceAll: (String with: Character cr) with: String crlf ] "why after 7.6?"
		ifFalse: [aBodyString].
	message := Net.MailMessage new. 
	message 
		charset: 'UTF-8'; headerCharset: 'UTF-8'; 
		from: (self emailAddressFor: aPerson); 
		to: receiverAddresses; 
		subject: (self adapt: aSubjectString convertToSloveneChars);
		text: (self adapt: body convertToSloveneChars ensureUnicodeSloveneChars).
 	message addContentTransferEncoding: 'base64' "'8bit'".
	anICalNameString notNil ifTrue:
		[attachment := Net.MimeEntity new.
		attachment 
"			fileName: anICalNameString; "
			contentType: ('text/calendar; method=REQUEST; charset=UTF-8; name=', 
				anICalNameString);
"			contentDisposition: 'attachment'. "
			contentDisposition: 'inline'. "Lotus Notes 6.5 requests inline, does not recognize attachment!! "
		iCalString := (ObjectMemory versionId at: 5) >= 76 "7.6?" 
			ifTrue: [anICalString copyReplaceAll: (String with: Character cr) with: String crlf ] "why after 7.6?"
			ifFalse: [anICalString].
		attachment body source: iCalString readStream. 
		attachment addContentTransferEncoding: '7bit'.
		message addPart: attachment].
	self queue nextPut: message.! !

!EMailMessenger methodsFor: 'private-sending'!
senderProcess
	[ [true] whileTrue: [self privSendMessage: self queue next reportError: #repeat] ] 
		on: Error do: [:ex | self halt]. "to find the cause of termination"! !

!EMailMessenger methodsFor: 'private-sending'!
sendingLoop
	"sender process"
	^sendingLoop! !

!EMailMessenger methodsFor: 'private-sending'!
sendingLoop: aProcess
	sendingLoop := aProcess! !

!EMailMessenger methodsFor: 'accessing'!
site
	^self repository site "temporary"! !

!EMailMessenger methodsFor: 'private'!
site: anAIDASite
	self repository: anAIDASite repository "temporary, to more easy migrate"! !

!EMailMessenger methodsFor: 'receiving' stamp: 'janko 8/8/2011 19:12'!
startReceiving
	"start receiving documents from e-mail account"
	| block doc |
"	self mailbox startFetchingMail. "
"temporary off, not yet migrated!! "	
"	self receivingLoop notNil ifTrue: [self stopReceiving].
	block := 
		[ [true] whileTrue: 
			[doc := self getMailDocument.
			self dealWithDocument: doc] ].
	self receivingLoop: block fork."! !

!EMailMessenger methodsFor: 'sending'!
startSending
	self initClient.
	self initSenderProcess.! !

!EMailMessenger methodsFor: 'receiving' stamp: 'janko 8/8/2011 16:48'!
stopReceiving
	self receivingLoop notNil ifTrue: [self receivingLoop terminate. self receivingLoop: nil].
"	self mailbox stopFetchingMail. "! !

!EMailMessenger methodsFor: 'sending'!
stopSending
	self sendingLoop notNil ifTrue: 
		[self sendingLoop terminate. 
		self sendingLoop: nil].
	client := nil.
"	queue := nil."! !

!EMailMessenger class methodsFor: 'instance creation' stamp: 'janko 8/8/2011 16:47'!
newOn: anAIDASite
	^super basicNew 
		site: anAIDASite! !

!FileProxy methodsFor: 'parsing' stamp: ' 21/4/07 22:07'!
absoluteTagFrom: aTagString urlStart: anURLString

	""

	| tag url |
	tag := (aTagString copyReplaceAll: '\' with: '/').
	((tag copyFrom: 1 to: 3) = '../')
		ifFalse:  "not relative to parent directory"
			[^((tag copyUpTo: $"), '"', anURLString, 
				(tag copyFrom: ((tag indexOf: $") + 1) to: tag size))]
		ifTrue:
			[tag := tag readStream upTo: $/; upToEnd.
			url := anURLString copyFrom: 1 to: (anURLString lastIndexOf: $/).
			^self absoluteTagFrom: tag urlStart: url].! !

!FileProxy methodsFor: 'accessing-timestamps' stamp: 'mivsek 8/22/2007 16:02'!
accessedTimestamp
	^self timestamps at: #accessed ifAbsent: [nil]! !

!FileProxy methodsFor: 'accessing'!
aidaContentType
	"MIME type of original content. 'unknown' if not known"
	contentType isNil ifTrue: [self aidaContentType: 'unknown'].
	^contentType.! !

!FileProxy methodsFor: 'private'!
aidaContentType: aMIMEString
	"MIME type of original content"
	contentType := aMIMEString.! !

!FileProxy methodsFor: 'testing' stamp: 'janko 4/25/2012 10:58'!
aidaIsRespondingStreamed
	"should we stream that file directly to TCP socket or not?"
	self content notNil ifTrue: [^false].  "cached content is sent faster without streaming"
	self aidaContentType = 'text/html' ifTrue: [^false]. "pure HTML files also not"
	^true! !

!FileProxy methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	self fileStillExist ifFalse: [self removeYourself. ^WebPage new].
	(self content isNil and: [self aidaContentType = 'text/html' or: [self isToBeCached] ]) 
		ifTrue: [^self refreshContent]. 
	self hasFileChanged ifTrue: 
		[self refreshContent.
		self indexContent].
	^self! !

!FileProxy methodsFor: 'servlets'!
argumentsFrom: aMessageString

	^Array new: 0 "for now!! "! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
bodyTagIndex
	"index of element, which represent body tag in original html file"
	^bodyTagIndex! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
bodyTagIndex: anInteger
	"set the index of element, which represent body tag in original html file"
	bodyTagIndex := anInteger.! !

!FileProxy methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
clearElements
	elements := OrderedCollection new.! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
clearImgTagIndexes
	imgTagIndexes := OrderedCollection new.! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
clearLinkTagIndexes
	linkTagIndexes := OrderedCollection new.! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
clearServletTagIndexes
	servletTagIndexes := OrderedCollection new.! !

!FileProxy methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
codepage
	" #iso2 by default"
	codepage isNil ifTrue: [self codepage: #'iso-8859-2'].
	^codepage.! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
codepage: aSymbol
	codepage := aSymbol.! !

!FileProxy methodsFor: 'accessing' stamp: 'jm 2/16/2011 23:43'!
content
	content isNil ifTrue: 
		[(self aidaContentType ~= 'text/html') 
			ifTrue: [self refreshContent] 
			ifFalse: [self content: ''] ].
	^content! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
content: aString
	content := aString.! !

!FileProxy methodsFor: 'accessing-timestamps' stamp: 'mivsek 8/22/2007 16:02'!
createdTimestamp
	^self timestamps at: #created ifAbsent: [nil]! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
detectCodepage: aString
	" "
	| win1250 iso2 sevenBit above127 |
	win1250 := 0.
	aString do: [:ch | (#(200 154 138 158 142) includes: ch asInteger) ifTrue: [win1250 := win1250+1] ].
	iso2 := 0.
	aString do: [:ch | (#(200 185 169 190 174) includes: ch asInteger) ifTrue: [iso2 := iso2+1] ].
	sevenBit := 0.
"	aString do: [:ch | (#(94 123 91 96 64) includes: ch asInteger) ifTrue: [sevenBit := sevenBit+1] ]."
	above127 := 0.
	aString do: [:ch | ch asInteger > 127 ifTrue: [above127 := above127+1] ].
	above127 = 0 
		ifTrue: [sevenBit ~= 0 ifTrue: [^#'7bit'] ifFalse: [^#csz] ]
		ifFalse: [iso2 > win1250 ifTrue: [^#'iso-8859-2'] ifFalse: [^#'win-1250'] ].! !

!FileProxy methodsFor: 'private' stamp: 'np 10/20/2008 13:53'!
elements

	"all elements (texts and tags) of a html page"

	elements isNil ifTrue: 
		[self clearElements.
"		(self contentType = 'text/html') ifTrue: [self refreshContent] "].
	^elements! !

!FileProxy methodsFor: 'accessing-timestamps' stamp: 'mivsek 8/22/2007 17:10'!
expiresTimestamp
	"for broswer: after 6 hours by default. It is good to reload from time to time 
	if changes were made "
	^SpTimestamp fromSeconds: (SpTimestamp now asSeconds + (6 * 3600))! !

!FileProxy methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
fileStillExist
	^self filename exists! !

!FileProxy methodsFor: 'accessing'!
filename
	| separator |
	separator := SpEnvironment onUnix ifTrue: ['/'] ifFalse: ['\'].
	(filename isKindOf: SpFilename) ifTrue: [self filename: filename].
	filename isNil ifTrue: [^''].
	SpEnvironment onUnix   "needed in case of migration to other OS"
		ifTrue: [(filename includes: $\ ) ifTrue: 
			[filename := filename copyReplaceAll: '\' with: '/'] ]
		ifFalse: [(filename includes: $/ ) ifTrue: 
			[filename := filename copyReplaceAll: '/' with: '\'] ].
	^SpFilename named:
		(self site homeDirectory, 
			(filename 
				copyReplaceAll: (self site homeDirectory copyReplaceAll: '.', separator with: '')
				with: ''))! !

!FileProxy methodsFor: 'private' stamp: 'janko 3/22/2008 13:20'!
filename: aFilename
	filename := aFilename asString.
	self site notNil ifTrue: 
		[filename := filename copyReplaceAll: self site homeDirectory with: ''].! !

!FileProxy methodsFor: 'initialize-release'!
from: aString
	| file relFilename |
	self releaseContent. "if any from before"
	file := SpFilename named: aString. file exists ifFalse: [^nil].
	relFilename := (file asString copyReplaceAll: self site homeDirectory with: '').
	self filename: (relFilename isEmpty ifTrue: ['\'] ifFalse: [relFilename]).
	self refreshTimestamps.
	self aidaContentType: (self site mimeMap typeForExtension: file extension).
	self size: file fileSize.
	self aidaContentType = 'text/html' 
		ifTrue:
			[self content: file contentsOfEntireFile.
			self codepage: #utf8. "(self detectCodepage: self content)."
"			self content: (AIDASite convert: self content fromCodepage: self codepage). "
			self setSize
			"self prepareHTMLPage. self makeAbsoluteImgTags. self content: nil"]
		ifFalse: 
			[self isToBeCached ifTrue:  "otherwise we will stream directly"
				[| stream | 
				[stream := file readStream binary. self content: stream contents] ensure: [stream close] ] ]! !

!FileProxy methodsFor: 'testing' stamp: 'mivsek 8/22/2007 17:07'!
hasFileChanged
	"check if original file changed since last visit"
	^self modifiedTimestamp ~= self filename modifiedTimestamp.! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
imgTagIndexes
	"indexes of elements, which represent image tags in original html file"
	imgTagIndexes isNil ifTrue: [self clearImgTagIndexes].
	^imgTagIndexes! !

!FileProxy methodsFor: 'indexing'!
indexContent
	"index text in server global index"
	self aidaContentType = 'text/html' ifTrue: [self site index indexObject: self]! !

!FileProxy methodsFor: 'indexing' stamp: ' 21/4/07 22:07'!
indexText
	"pure text, without tags, for indexer"
	| stream bodyStart element text |
	bodyStart := (1 to: self elements size) 
		detect: [:index | '<BODY*' match: (self elements at: index)] ifNone: [1].
	stream := WriteStream on: String new.
	bodyStart + 1 to: self elements size do:  [:index | 
		element := self elements at: index.
		(element notEmpty and: [element first ~= $<]) ifTrue: [stream nextPutAll: element] ].
	text := stream contents "copyReplaceAll: WebElement new eol with: ' '". 
	text := text copyReplaceAll: '&nbsp;' with: ' '.
	^text! !

!FileProxy methodsFor: 'indexing' stamp: ' 21/4/07 22:07'!
indexTitle
	"find title, if noone, then return url"
	1 to: self elements size do: [:index |
		('<TITLE*' match: (self elements at: index)) ifTrue: [^self elements at: index+1] ].
	^self site urlResolver halfUrlFor: self! !

!FileProxy methodsFor: 'testing' stamp: 'jm 2/16/2011 23:31'!
isCaching
	"should this file be always cached?"
	caching isNil ifTrue: [self resetCaching].
	^caching! !

!FileProxy methodsFor: 'testing' stamp: 'jm 2/16/2011 23:30'!
isToBeCached
	"cache this file or not?"
	^self isCaching or: [self size < self sizeToCache]! !

!FileProxy methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebElement
	^false! !

!FileProxy methodsFor: 'testing' stamp: ' 21/8/07 09:38'!
isWebPage
	^true "not actually, but let pretend it is"! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
linkTagIndexes
	"indexes of elements, which represent link tags in original html file"
	linkTagIndexes isNil ifTrue: [self clearLinkTagIndexes].
	^linkTagIndexes! !

!FileProxy methodsFor: 'parsing' stamp: 'mivsek 1/10/2008 19:16'!
makeAbsoluteImgTags
	"if image url's are relative, make them absolute. Also do it for a body tag (background image). 
	Url is constructed from a imageServer address from WebServer settings, and from filename with 	homeDirectory substracted. "
	| fname urlStart index tag bodyTag |
	fname := (self filename asString) copyReplaceAll: (self site homeDirectory) with: ''.
	fname := fname copyFrom: 1 to: (fname lastIndexOf: (AIDASite slash at: 1)).
	urlStart := 'http://', self site host, (fname copyReplaceAll: '\' with: '/').
	self imgTagIndexes do: [:inx  | tag := self elements at: inx.
		('*http://*' match: tag) ifFalse:    "not an absolute source url"
			[self elements at: inx put: (self absoluteTagFrom: tag urlStart: urlStart)] ].
	self bodyTagIndex notNil ifTrue:
		[bodyTag := self elements at: bodyTagIndex.
		(('*background*' match:  bodyTag) and: [('*http://*' match:  bodyTag) not]) 
			ifTrue: 
				[index := bodyTag asLowercase findString: 'background' startingAt: 1.
				index := bodyTag findString: '"' startingAt: index.
				(( bodyTag at: index+1) = $#) ifTrue: [^self]. "only colored background"
				self elements at: bodyTagIndex put:
					((bodyTag copyFrom: 1 to: index), urlStart, 
						(bodyTag copyFrom: index + 1 to: bodyTag size)) ] ].! !

!FileProxy methodsFor: 'servlets'!
methodFrom: aMessageString

	^aMessageString asSymbol "for now!! "! !

!FileProxy methodsFor: 'accessing-timestamps' stamp: 'mivsek 8/22/2007 16:01'!
modifiedTimestamp
	^self timestamps at: #modified ifAbsent: [nil]! !

!FileProxy methodsFor: 'parsing' stamp: ' 21/8/07 09:38'!
prepareHTMLPage
	"decompose content into elements (texts and tags)"
	| stream tag index |
	self clearElements. self clearImgTagIndexes. 
	self clearLinkTagIndexes. self clearServletTagIndexes.
	stream := ReadStream on: self content.
	index := 1.
	[stream atEnd] whileFalse:
		[self elements add: (stream upTo: $<). index := index + 1.
		tag := ('<', (stream upTo: $>), '>').
		('<aida*' match: tag) ifTrue: [self servletTagIndexes add: index].
		('*img*' match: tag) ifTrue: [self imgTagIndexes add: index].
		('*href*' match: tag) 
			ifTrue: [self linkTagIndexes add: index]
			ifFalse: 
				[(('*body*' match: tag) and: [('*/body*' match: tag) not])
					ifTrue: [self bodyTagIndex: index]].
		self elements add: tag. index := index + 1.
		].! !

!FileProxy methodsFor: 'parsing'!
prepareHtmlPage
	"decompose content into elements (texts and tags)"
	| stream tag index |
	self clearElements. self clearImgTagIndexes. 
	self clearLinkTagIndexes. self clearServletTagIndexes.
	stream := ReadStream on: self content.
	index := 1.
	[stream atEnd] whileFalse:
		[self elements add: (stream upTo: $<). index := index + 1.
		tag := ('<', (stream upTo: $>), '>').
		('<aida*' match: tag) ifTrue: [self servletTagIndexes add: index].
		('*img*' match: tag) ifTrue: [self imgTagIndexes add: index].
		('*href*' match: tag) 
			ifTrue: [self linkTagIndexes add: index]
			ifFalse: 
				[(('*body*' match: tag) and: [('*/body*' match: tag) not])
					ifTrue: [self bodyTagIndex: index]].
		self elements add: tag. index := index + 1.
		].! !

!FileProxy methodsFor: 'private'!
printString
	^('aFileProxy for: ', self filename asString)! !

!FileProxy methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
put: aString
	"replace self with contents in aString from PUT request"
	self content: aString.
	self writeToFile! !

!FileProxy methodsFor: 'initialize-release' stamp: 'np 10/20/2008 13:44'!
refreshContent
	self releaseContent. "in case we switch from cached to non cached because of size change"
	self from: self filename asString.! !

!FileProxy methodsFor: 'private' stamp: 'mivsek 8/22/2007 16:34'!
refreshTimestamps
	self timestamps at: #created put: self filename createdTimestamp.
	self timestamps at: #modified put: self filename modifiedTimestamp.! !

!FileProxy methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
releaseContent
	"release origContent and elements to save memory"
	content := nil.
	elements := nil.! !

!FileProxy methodsFor: 'private'!
removeYourself
	"remove from url resolver and elsewhere"
	self releaseContent.
	self site urlResolver removeObject: self.
	self fileStillExist ifTrue: [self filename delete]! !

!FileProxy methodsFor: 'accessing' stamp: 'jm 2/16/2011 23:33'!
resetCaching
	"don't cahce this file,except if it is smallter than "
	caching := false! !

!FileProxy methodsFor: 'servlets'!
servletPerform: aMessageString on: aWebApp

	| method |
	method := (self methodFrom: aMessageString).
	(aWebApp class canUnderstand: method) ifFalse: [^nil].
	^aWebApp
		perform: method
		withArguments: (self argumentsFrom: aMessageString).! !

!FileProxy methodsFor: 'accessing-tags' stamp: ' 21/4/07 22:07'!
servletTagIndexes
	"indexes of elements, which represent servlet in original html file"
	servletTagIndexes isNil ifTrue: [self clearServletTagIndexes].
	^servletTagIndexes! !

!FileProxy methodsFor: 'accessing' stamp: 'jm 2/16/2011 23:33'!
setCaching
	"this file should always be cached, regardless of size"
	caching := true! !

!FileProxy methodsFor: 'private' stamp: ' 21/8/07 09:38'!
setSize
	"size of content in bytes"
	(self elements notEmpty)
		ifTrue: [self size: (self elements inject: 0 into: [:sum : e | sum + e size]) ]
		ifFalse: [self size: self content size]! !

!FileProxy methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	^site! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site: anAIDASite
	site := anAIDASite.! !

!FileProxy methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
size
	"size of content"
	size isNil ifTrue: [self setSize].
	^size! !

!FileProxy methodsFor: 'private' stamp: ' 21/8/07 09:38'!
size: anInteger
	size := anInteger! !

!FileProxy methodsFor: 'testing' stamp: 'mivsek 2/10/2008 15:53'!
sizeAboveMark

	"test if content is above specified size"
	^self size > (5 * 1024) "bytes" "5KB"! !

!FileProxy methodsFor: 'accessing' stamp: 'jm 2/16/2011 23:34'!
sizeToCache
	"file size below which files are always cached"
	^(5 * 1024) "bytes" "5KB"! !

!FileProxy methodsFor: 'private-streaming' stamp: 'janko 3/19/2012 14:24'!
streamFileToResponse: aHTTPStreamedResponse
	| stream | 
	[stream := self filename asFilename readStream binary. 
	[stream atEnd] whileFalse: [aHTTPStreamedResponse nextPut: stream next] ] 
		ensure: [stream close]! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
timestamps
	timestamps isNil ifTrue: [self timestamps: Dictionary new.].
	^timestamps! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
timestamps: aDictionary
	" a dictionary with a DateAndTime at: 
	#accessed #modified #statusChanged #created"
	timestamps := aDictionary.! !

!FileProxy methodsFor: 'private' stamp: ' 21/4/07 22:07'!
writeToFile
	| stream |
	[stream := self filename writeStream. stream binary.
	stream nextPutAll: self content]
		ensure: [stream close].
	self refreshTimestamps.! !

!FileProxy class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
from: aFilenameString onSite: aSite
	"read a file and make a HTML proxy of it. Return nil, if file does not exist or cannot be opened. 
	Also record a server for which you make a proxy"
	| proxy |
	proxy := self new site: aSite; from: aFilenameString.
	proxy indexContent.
	^proxy! !

!Float methodsFor: '*Aida' stamp: 'janko 8/3/2011 19:14'!
asScaledDecimal: aScaleInteger
	^ScaledDecimal  newFromNumber: self scale: aScaleInteger! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkCodeSize
	(freeCode > maxCode and: [codeSize < 12])
		ifTrue:
			[codeSize := codeSize + 1.
			maxCode := (1 bitShift: codeSize) - 1]! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
colorValueFrom: rgbInteger 
	| scalingValue |
	scalingValue := ColorValue scalingValue.
	^ColorValue
		scaledRed: (self
				convertValue: ((rgbInteger bitShift: -16)
						bitAnd: 255)
				from: 255
				to: scalingValue)
		scaledGreen: (self
				convertValue: ((rgbInteger bitShift: -8)
						bitAnd: 255)
				from: 255
				to: scalingValue)
		scaledBlue: (self
				convertValue: (rgbInteger bitAnd: 255)
				from: 255
				to: scalingValue)! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
convertToCoverageWithTransparentPixel: pixelValue with: anImage 
	| image row |
	image := Image
				extent: anImage extent
				depth: 1
				palette: CoveragePalette monoMaskPalette.
	0 to: anImage height - 1
		do: 
			[:i | 
			row := anImage rowAt: i.
			row := row collect: [:p | p = pixelValue
							ifTrue: [0]
							ifFalse: [1]].
			image rowAt: i putAll: row].
	^image! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
convertToGray: coverageValue 
	coverageValue = CoverageValue transparent ifTrue: [^ColorValue white].
	coverageValue = CoverageValue opaque ifTrue: [^ColorValue black].
	^ColorValue brightness: coverageValue coverage! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
convertToMappedPalette: coveragePalette 
	coveragePalette size = 2 ifTrue: [^MappedPalette whiteBlack].
	^MappedPalette withColors: (coveragePalette collect: [:coverage | self convertToGray: coverage])! !

!GifImageStream methodsFor: 'packing' stamp: ' 21/4/07 22:07'!
fillBuffer
	| packSize |
	packSize := self next.
	bufStream := ReadStream on: (self next: packSize)! !

!GifImageStream methodsFor: 'bits access' stamp: ' 21/4/07 22:07'!
flushBits
	remainBitCount = 0
		ifFalse: 
			[self nextBytePut: bufByte.
			remainBitCount := 0].
	self flushBuffer! !

!GifImageStream methodsFor: 'packing' stamp: ' 21/4/07 22:07'!
flushBuffer
	bufStream isEmpty ifTrue: [^self].
	self nextPut: bufStream size.
	self nextPutAll: bufStream contents.
	bufStream := WriteStream on: (ByteArray new: 256)! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
flushCode
	self flushBits! !

!GifImageStream methodsFor: 'bits access' stamp: ' 21/4/07 22:07'!
nextBits
	| integer readBitCount shiftCount |
	integer := 0.
	remainBitCount = 0
		ifTrue: 
			[readBitCount := 8.
			shiftCount := 0]
		ifFalse: 
			[readBitCount := remainBitCount.
			shiftCount := remainBitCount - 8].
	[readBitCount < codeSize]
		whileTrue: 
			[self peekByte isNil ifTrue: [^eoiCode].
			integer := integer + (self nextByte bitShift: shiftCount).
			shiftCount := shiftCount + 8.
			readBitCount := readBitCount + 8].
	self peekByte isNil ifTrue: [^eoiCode].
	(remainBitCount := readBitCount - codeSize) = 0
		ifTrue: [integer := integer + (self nextByte bitShift: shiftCount)]
		ifFalse: [integer := integer + (self peekByte bitShift: shiftCount)].
	^integer bitAnd: maxCode! !

!GifImageStream methodsFor: 'bits access' stamp: ' 21/4/07 22:07'!
nextBitsPut: anInteger 
	| integer writeBitCount shiftCount |
	shiftCount := 0.
	remainBitCount = 0
		ifTrue: 
			[writeBitCount := 8.
			integer := anInteger]
		ifFalse: 
			[writeBitCount := remainBitCount.
			integer := bufByte + (anInteger bitShift: 8 - remainBitCount)].
	[writeBitCount < codeSize]
		whileTrue: 
			[self nextBytePut: ((integer bitShift: shiftCount)
					bitAnd: 255).
			shiftCount := shiftCount - 8.
			writeBitCount := writeBitCount + 8].
	(remainBitCount := writeBitCount - codeSize) = 0
		ifTrue: [self nextBytePut: (integer bitShift: shiftCount)]
		ifFalse: [bufByte := integer bitShift: shiftCount].
	^anInteger! !

!GifImageStream methodsFor: 'packing' stamp: ' 21/4/07 22:07'!
nextByte
	bufStream atEnd
		ifTrue:
			[self atEnd ifTrue: [^nil].
			self fillBuffer].
	^bufStream next! !

!GifImageStream methodsFor: 'packing' stamp: ' 21/4/07 22:07'!
nextBytePut: aByte
	bufStream nextPut: aByte.
	bufStream size >= 254 ifTrue: [self flushBuffer]! !

!GifImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextImage
	| bits depth image |
	self readHeader isNil ifTrue: [^nil].
	bits := self readBitData.
	depth := bitsPerPixel > 8
				ifTrue: [^self error: 'unexpected bits per pixel']
				ifFalse: [bitsPerPixel = 1
						ifTrue: [1]
						ifFalse: [bitsPerPixel = 2
								ifTrue: [2]
								ifFalse: [bitsPerPixel <= 4
										ifTrue: [4]
										ifFalse: [8]]]].
	depth < 8 ifTrue: [bits := self
					packBits: bits
					depthFrom8To: depth
					width: width
					height: height
					pad: 8].
	image := Image
				extent: width @ height
				depth: depth
				palette: colorPalette
				bits: bits
				pad: 8.
	transparentPixel notNil ifTrue: [image := OpaqueImage figure: image shape: (CachedImage on: (self convertToCoverageWithTransparentPixel: transparentPixel with: image) asRetainedMedium)].
	^image! !

!GifImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextPutImage: anImage 
	| theImage trueBitsPerPixel achievableBitsPerPixel bits |
	(anImage isKindOf: Image)
		ifFalse: [^self errorCanNotWrite].
	anImage bitsPerPixel > 8
		ifTrue: [theImage := anImage convertToPalette: self class colorPalette256 "renderedBy: ErrorDiffusion new"]
		ifFalse: [theImage := anImage].
	width := theImage width.
	height := theImage height.
	colorPalette := theImage palette.
	trueBitsPerPixel := theImage bitsPerPixel.
	achievableBitsPerPixel := 2 raisedTo: ((colorPalette size - 1) highBit - 1) highBit.
	bitsPerPixel := achievableBitsPerPixel.
	colorPalette := theImage palette.
	colorPalette paintBasis == CoverageValue
		ifTrue: 
			[transparentPixel := 0.
			colorPalette := self convertToMappedPalette: colorPalette].
	bits := theImage bits.
	trueBitsPerPixel < 8 ifTrue: [bits := self
					unpackBits: bits
					depthTo8From: bitsPerPixel
					width: theImage width
					height: theImage height
					pad: 32].
	interlace := true.
	
	[self writeHeader.
	self writeBitData: bits]
		valueNowOrOnUnwindDo: [self close].
	^theImage! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
packBits: bits depthFrom8To: depth width: xSize height: ySize pad: pad 
	| maxPixelVal pixelInByte bitsWidth pBitsWidth pBits |
	(#(1 2 4) includes: depth)
		ifFalse: [^self error: 'depth must be 1, 2, or 4'].
	(#(8 16 32) includes: pad)
		ifFalse: [^self error: 'pad must be 8, 16, or 32'].
	maxPixelVal := (1 bitShift: depth)
				- 1.
	pixelInByte := 8 / depth.
	bitsWidth := xSize * 8 + pad - 1 // pad * (pad / 8).
	pBitsWidth := xSize * depth + pad - 1 // pad * (pad / 8).
	pBits := ByteArray new: pBitsWidth * ySize.
	1 to: ySize
		do: 
			[:i | 
			| bitIndex pBitIndex pixelVal count |
			bitIndex := i - 1 * bitsWidth.
			pBitIndex := i - 1 * pBitsWidth.
			pixelVal := 0.
			count := 0.
			1 to: xSize
				do: 
					[:j | 
					| val |
					val := bits at: (bitIndex := bitIndex + 1).
					val > maxPixelVal ifTrue: [^self error: 'can''t pack bits'].
					pixelVal := (pixelVal bitShift: depth)
								+ val.
					(count := count + 1) >= pixelInByte
						ifTrue: 
							[pBits at: (pBitIndex := pBitIndex + 1) put: pixelVal.
							pixelVal := 0.
							count := 0]].
			count > 0 ifTrue: [pBits at: (pBitIndex := pBitIndex + 1) put: (pixelVal bitShift: depth * (pixelInByte - count))]].
	^pBits! !

!GifImageStream methodsFor: 'packing' stamp: ' 21/4/07 22:07'!
peekByte
	bufStream atEnd
		ifTrue:
			[self atEnd ifTrue: [^nil].
			self fillBuffer].
	^bufStream peek! !

!GifImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readBitData
	| bits outCodes outCount bitMask initCodeSize code curCode oldCode inCode finChar set |
	pass := 0.
	xpos := 0.
	ypos := 0.
	rowByteSize := width * 8 + 7 // 8.
	remainBitCount := 0.
	bufByte := 0.
	bufStream := ReadStream on: ByteArray new.
	bits := ByteArray new: width * height.
	outCodes := ByteArray new: 1025.
	outCount := 0.
	bitMask := (1 bitShift: bitsPerPixel)
				- 1.
	prefixTable := Array new: 4096.
	suffixTable := Array new: 4096.
	initCodeSize := self next.
	self setParameters: initCodeSize.
	set := Set new: height.
	self progress: set size / height.
	[(code := self readCode) = eoiCode]
		whileFalse: [code = clearCode
				ifTrue: 
					[self setParameters: initCodeSize.
					curCode := oldCode := code := self readCode.
					finChar := curCode bitAnd: bitMask.
					set add: ypos.
					self progress: set size / height.
					self writePixel: finChar to: bits]
				ifFalse: 
					[curCode := inCode := code.
					curCode >= freeCode
						ifTrue: 
							[curCode := oldCode.
							outCodes at: (outCount := outCount + 1) put: finChar].
					[curCode > bitMask]
						whileTrue: 
							[outCount > 1024 ifTrue: [^self error: 'corrupt GIF file (OutCount)'].
							outCodes at: (outCount := outCount + 1) put: (suffixTable at: curCode + 1).
							curCode := prefixTable at: curCode + 1].
					finChar := curCode bitAnd: bitMask.
					outCodes at: (outCount := outCount + 1) put: finChar.
					outCount
						to: 1
						by: -1
						do: 
							[:i | 
							set add: ypos.
							self progress: set size / height.
							self writePixel: (outCodes at: i)
								to: bits].
					outCount := 0.
					prefixTable at: freeCode + 1 put: oldCode.
					suffixTable at: freeCode + 1 put: finChar.
					oldCode := inCode.
					freeCode := freeCode + 1.
					self checkCodeSize]].
	prefixTable := suffixTable := nil.
	^bits! !

!GifImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readCode
	^self nextBits! !

!GifImageStream methodsFor: 'GIF89a' stamp: ' 21/4/07 22:07'!
readExtension
	| label |
	label := self next.
	label == GraphicControlLabel
		ifTrue: [self readGraphicControlExtensionBlock]
		ifFalse: [self error: 'unsupported extension block']! !

!GifImageStream methodsFor: 'GIF89a' stamp: ' 21/4/07 22:07'!
readGraphicControlExtensionBlock
	| isTransparent |
	self next.
	isTransparent := (self next bitAnd: 1)
				= 1.
	self next: 2.
	isTransparent
		ifTrue: [transparentPixel := self next]
		ifFalse: [self next].
	self next! !

!GifImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readHeader
	| byte hasColorMap |
	((self hasMagicNumber: 'GIF89a' asByteArray)
		or: [self hasMagicNumber: 'GIF87a' asByteArray])
		ifFalse: [^self errorCanNotRead].
	self readWord.
	self readWord.
	byte := self next.
	hasColorMap := (byte bitAnd: 128)
				~= 0.
	bitsPerPixel := (byte bitAnd: 7)
				+ 1.
	byte := self next.
	byte := self next.
	hasColorMap
		ifTrue: 
			[| array |
			array := Array new: (1 bitShift: bitsPerPixel).
			1 to: array size do: [:i | array at: i put: (self colorValueFrom: (self next bitShift: 16)
							+ (self next bitShift: 8) + self next)].
			colorPalette := MappedPalette withColors: array]
		ifFalse: 
			[Transcript cr; show: 'GIF file does not have a color map.'.
			colorPalette := MappedPalette monochromeDefault].
	
	[byte := self next.
	byte == Extension]
		whileTrue: [self readExtension].
	byte = ImageSeparator ifFalse: [^self error: 'corrupt GIF file (nosep)'].
	self readWord.
	self readWord.
	width := self readWord.
	height := self readWord.
	interlace := (self next bitAnd: 64)
				~= 0! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
readPixelFrom: bits
	| pixel |
	ypos >= height ifTrue: [^nil].
	pixel := bits at: (ypos * rowByteSize + xpos + 1).
	self updatePixelPosition.
	^pixel! !

!GifImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
readWord
	^self next + (self next bitShift: 8)! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rgbIntegerArrayFor: aPalette 
	| colors |
	colors := Array new: aPalette maxIndex + 1.
	1 to: colors size do: [:i | colors at: i put: (self rgbIntegerFrom: (aPalette at: i - 1 ifAbsent: [ColorValue white]))].
	^colors! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rgbIntegerFrom: aColorValue 
	| scalingValue |
	scalingValue := ColorValue scalingValue.
	^((self
		convertValue: aColorValue scaledRed
		from: scalingValue
		to: 255)
		bitShift: 16)
		+ ((self
				convertValue: aColorValue scaledGreen
				from: scalingValue
				to: 255)
				bitShift: 8) + (self
			convertValue: aColorValue scaledBlue
			from: scalingValue
			to: 255)! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
setParameters: initCodeSize
	clearCode := 1 bitShift: initCodeSize.
	eoiCode := clearCode + 1.
	freeCode := clearCode + 2.
	codeSize := initCodeSize + 1.
	maxCode := (1 bitShift: codeSize) - 1! !

!GifImageStream methodsFor: 'GIF89a' stamp: ' 21/4/07 22:07'!
transparentPixel: aPixelValueOrNil 
	transparentPixel := aPixelValueOrNil! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
unpackBits: bits depthTo8From: depth width: xSize height: ySize pad: pad 
	| bitMask pixelInByte bitsWidth upBitsWidth stopWidth trailingSize upBits |
	(#(1 2 4) includes: depth)
		ifFalse: [^self error: 'depth must be 1, 2, or 4'].
	(#(8 16 32) includes: pad)
		ifFalse: [^self error: 'pad must be 8, 16, or 32'].
	bitMask := (1 bitShift: depth)
				- 1.
	pixelInByte := 8 / depth.
	bitsWidth := xSize * depth + pad - 1 // pad * (pad / 8).
	upBitsWidth := xSize * 8 + pad - 1 // pad * (pad / 8).
	stopWidth := xSize * depth + 7 // 8.
	trailingSize := xSize - (stopWidth - 1 * pixelInByte).
	upBits := ByteArray new: upBitsWidth * ySize.
	1 to: ySize
		do: 
			[:i | 
			| bitIndex upBitIndex val |
			bitIndex := i - 1 * bitsWidth.
			upBitIndex := i - 1 * upBitsWidth.
			1 to: stopWidth - 1
				do: 
					[:j | 
					val := bits at: (bitIndex := bitIndex + 1).
					upBitIndex := upBitIndex + pixelInByte.
					1 to: pixelInByte
						do: 
							[:k | 
							upBits at: upBitIndex - k + 1 put: (val bitAnd: bitMask).
							val := val bitShift: depth negated]].
			val := (bits at: (bitIndex := bitIndex + 1))
						bitShift: depth negated * (pixelInByte - trailingSize).
			upBitIndex := upBitIndex + trailingSize.
			1 to: trailingSize
				do: 
					[:k | 
					upBits at: upBitIndex - k + 1 put: (val bitAnd: bitMask).
					val := val bitShift: depth negated]].
	^upBits! !

!GifImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
updatePixelPosition
	(xpos := xpos + 1) >= width ifFalse: [^self].
	xpos := 0.
	interlace
		ifFalse: 
			[ypos := ypos + 1.
			^self].
	pass = 0
		ifTrue: 
			[(ypos := ypos + 8) >= height
				ifTrue: 
					[pass := pass + 1.
					ypos := 4].
			^self].
	pass = 1
		ifTrue: 
			[(ypos := ypos + 8) >= height
				ifTrue: 
					[pass := pass + 1.
					ypos := 2].
			^self].
	pass = 2
		ifTrue: 
			[(ypos := ypos + 4) >= height
				ifTrue: 
					[pass := pass + 1.
					ypos := 1].
			^self].
	pass = 3
		ifTrue: 
			[ypos := ypos + 2.
			^self].
	^self error: 'can''t happen'! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeBitData: bits 
	| maxBits maxMaxCode tSize initCodeSize ent tShift fCode pixel set |

	pass := 0.
	xpos := 0.
	ypos := 0.
	rowByteSize := width * 8 + 31 // 32 * 4.
	remainBitCount := 0.
	bufByte := 0.
	bufStream := WriteStream on: (ByteArray new: 256).
	maxBits := 12.
	maxMaxCode := 1 bitShift: maxBits.
	tSize := 5003.
	prefixTable := Array new: tSize.
	suffixTable := Array new: tSize.
	initCodeSize := bitsPerPixel <= 1
				ifTrue: [2]
				ifFalse: [bitsPerPixel].
	self nextPut: initCodeSize.
	self setParameters: initCodeSize.
	tShift := 0.
	fCode := tSize.
	[fCode < 65536]
		whileTrue: 
			[tShift := tShift + 1.
			fCode := fCode * 2].
	tShift := 8 - tShift.
	1 to: tSize do: [:i | suffixTable at: i put: -1].

"	set := Set new: height.
	self progress: set size / height.
	set add: ypos. 
	self progress: set size / height."

	self writeCodeAndCheckCodeSize: clearCode.
	ent := self readPixelFrom: bits.
	[(pixel := self readPixelFrom: bits) == nil]
		whileFalse: 
			[| index disp nomatch |

"			set add: ypos. 
			self progress: set size / height."

			fCode := (pixel bitShift: maxBits)
						+ ent.
			index := ((pixel bitShift: tShift)
						bitXor: ent)
						+ 1.
			(suffixTable at: index)
				= fCode
				ifTrue: [ent := prefixTable at: index]
				ifFalse: 
					[nomatch := true.
					(suffixTable at: index)
						>= 0
						ifTrue: 
							[disp := tSize - index + 1.
							index = 1 ifTrue: [disp := 1].
							
							[(index := index - disp) < 1 ifTrue: [index := index + tSize].
							(suffixTable at: index)
								= fCode
								ifTrue: 
									[ent := prefixTable at: index.
									nomatch := false].
							nomatch and: [(suffixTable at: index)
									> 0]] whileTrue].
					nomatch
						ifTrue: 
							[self writeCodeAndCheckCodeSize: ent.
							ent := pixel.
							freeCode < maxMaxCode
								ifTrue: 
									[prefixTable at: index put: freeCode.
									suffixTable at: index put: fCode.
									freeCode := freeCode + 1]
								ifFalse: 
									[self writeCodeAndCheckCodeSize: clearCode.
									1 to: tSize do: [:i | suffixTable at: i put: -1].
									self setParameters: initCodeSize]]].
"			set add: ypos. 
			self progress: set size / height"].

	prefixTable := suffixTable := nil.
	self writeCodeAndCheckCodeSize: ent.
	self writeCodeAndCheckCodeSize: eoiCode.
	self flushCode.
	self nextPut: 0.
	self nextPut: Terminator! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeCode: aCode
	self nextBitsPut: aCode! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeCodeAndCheckCodeSize: aCode
	self writeCode: aCode.
	self checkCodeSize! !

!GifImageStream methodsFor: 'GIF89a' stamp: ' 21/4/07 22:07'!
writeGraphicControlExtensionBlock
	self nextPut: Extension.
	self nextPut: GraphicControlLabel.
	self nextPut: 4.
	transparentPixel notNil
		ifTrue: [self nextPut: 1]
		ifFalse: [self nextPut: 0].
	self nextPut: 0.
	self nextPut: 0.
	transparentPixel notNil
		ifTrue: [self nextPut: transparentPixel]
		ifFalse: [self nextPut: 0].
	self nextPut: 0! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeHeader
	| byte array |
	self nextPutAll: 'GIF89a' asByteArray.
	self writeWord: width.
	self writeWord: height.
	byte := 128.
	byte := byte bitOr: (bitsPerPixel - 1 bitShift: 5).
	byte := byte bitOr: bitsPerPixel - 1.
	self nextPut: byte.
	self nextPut: 0.
	self nextPut: 0.
	array := self rgbIntegerArrayFor: colorPalette.
	array do: [:rgb | self nextPut: ((rgb bitShift: -16)
				bitAnd: 255); nextPut: ((rgb bitShift: -8)
				bitAnd: 255); nextPut: (rgb bitAnd: 255)].
	array size + 1 to: (1 bitShift: bitsPerPixel)
		do: [:i | self nextPut: 0; nextPut: 0; nextPut: 0].
	transparentPixel notNil ifTrue: [self writeGraphicControlExtensionBlock].
	self nextPut: ImageSeparator.
	self writeWord: 0.
	self writeWord: 0.
	self writeWord: width.
	self writeWord: height.
	byte := interlace
				ifTrue: [64]
				ifFalse: [0].
	self nextPut: byte! !

!GifImageStream methodsFor: 'decoding' stamp: ' 21/4/07 22:07'!
writePixel: pixel to: bits 
	bits at: ypos * rowByteSize + xpos + 1 put: pixel.
	self updatePixelPosition! !

!GifImageStream methodsFor: 'encoding' stamp: ' 21/4/07 22:07'!
writeWord: aWord 
	self nextPut: (aWord bitAnd: 255).
	self nextPut: ((aWord bitShift: -8)
			bitAnd: 255).
	^aWord! !

!GifImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
copyright
	^'Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.'! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example1
	"GifImageStream example1."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename writeStream.
	[Cursor write showWhile: [stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example2
	"GifImageStream example2."

	| filename stream image |
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename readStream.
	[Cursor read showWhile: [image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example3
	"GifImageStream example3."

	| image filename stream |
	image := Image fromUser.
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			stream nextPutImage: image]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example4
	"GifImageStream example4."

	| filename stream image |
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[stream compute: [:value | Transcript cr; show: value printString].
			image := stream nextImage]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example5
	"GifImageStream example5."

	| image filename stream progress |
	image := Image fromUser.
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename writeStream.
	[Cursor write
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'writing gif...'.
			progress do: [stream nextPutImage: image]]]
		valueNowOrOnUnwindDo: [stream close].
	^image! !

!GifImageStream class methodsFor: 'examples' stamp: ' 21/4/07 22:07'!
example6
	"GifImageStream example6."

	| filename stream image progress |
	filename := 'zzz.gif' asFilename.
	stream := GifImageStream on: filename readStream.
	[Cursor read
		showWhile: 
			[progress := Progress new.
			stream compute: [:value | progress value: value].
			progress message: 'reading gif...'.
			progress do: [image := stream nextImage]]]
		valueNowOrOnUnwindDo: [stream close].
	stream show: image.
	^image! !

!GifImageStream class methodsFor: 'class initialization' stamp: ' 21/4/07 22:07'!
initialize
	"GifImageStream initialize."

	ImageSeparator := $, asInteger.
	Extension := $!! asInteger.
	Terminator := $; asInteger.
	GraphicControlLabel := 249! !

!GifImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
system
	^'Goodies'! !

!GifImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
version
	^'003'! !

!HTTPPost methodsFor: '*Aida'!
ajaxSingleInputName
	"Single form field Ajax posts have additional parameter carying the name of that field"
	"except for autocomplete and inplace editing fields, where a first and only field is returned"
	| pdata |
	pdata := self postDataAt: 'ajaxSingleField' ifAbsent: [nil].
	pdata notNil ifTrue: [^pdata value].
	(self isAjaxAutocompleteRequest | self isAjaxInPlaceEditingRequest) ifTrue: 
		[^self postDataKeys detect: [:each | 'field*' match: each] ifNone: nil].
	^nil! !

!HTTPPost methodsFor: '*Aida' stamp: 'np 10/20/2008 16:44'!
postDataKeysNotStreamed
	"keys for a postData which is not streamed"
	self ensureFullRead. "defered parsing of postData"
	^(self postData underlyingCollection select: [:assoc | assoc value isStreamed not])
		collect: [:assoc | assoc key]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'janko 3/19/2012 13:29'!
aidaPresentationType
	"depending on URL extension it can be #web, #json or #xml"
	| lastPart |
	lastPart := self requestLine requestURI identifierPath last.
	('*.json' match: lastPart) ifTrue: [^#json].
	('*.xml' match: lastPart) ifTrue: [^#xml].
	^#web! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 11/10/2010 21:23'!
ajaxElementId
	"Asynchronous JavaScript (AJAX) request, it has additional parameter ajaxGetElementId, 
       usually used to identify an element to update"
	| id |
	id := self queryAt: 'ajaxGetElementId' ifAbsent: [nil].
	id notNil ifTrue: [^id asSymbol].
	^self isPost 
		ifTrue: [(self postDataAt: 'ajaxGetElementId' ifAbsent: [^nil]) value asSymbol]
		ifFalse: [nil]
! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 11/10/2010 21:23'!
ajaxElementToRecreateId
	"for Ajax updates from contents of another element "
	"see WebElement>>onClickPopup:, WebApplication>>ajaxUpdate:with: etc."
	| id |
	id := self queryAt: 'ajaxElementToRecreateId' ifAbsent: [nil].
	id notNil ifTrue: [^id asSymbol].
	^self isPost 
		ifTrue: [(self postDataAt: 'ajaxElementToRecreateId' ifAbsent: [^nil]) value asSymbol]
		ifFalse: [nil]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 4/24/2009 20:08'!
context
	"an execution context for that request"
	^self environmentAt: #context ifAbsent: [nil]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 4/24/2009 20:08'!
context: aWebContext
	"an execution context for that request"
	self environmentAt: #context put: aWebContext! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 4/24/2009 20:14'!
contextId
	"unique id of the web context this request is executing. May be in query part or post data"
	| id |
	id := self queryAt: WebContext contextIdName "aidaCtx" ifAbsent: [nil].
	id notNil ifTrue: [^id asInteger].
	^self isPost 
		ifTrue: [(self postDataAt: WebContext contextIdName ifAbsent: [^nil]) value asInteger]
		ifFalse: [nil]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 12/14/2010 23:42'!
creationStContexts
	"Smalltalk contexts of element creation methods, to determine, which elements are 
	created first in each method. See WebElement class new, checkIfFirstInMethod, isFirstInMethod"
	^self environmentAt: #creationStContexts ifAbsent: 
		[self environmentAt: #creationStContexts put: Set new.
		^self creationStContexts]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'mivsek 1/10/2008 18:06'!
idFromCookie
	"return session id from our cookie. nil if not aida field present in cookie"
	| stream part |
	stream := self cookie readStream.
	[stream atEnd] whileFalse:
		[part := stream upTo: $; .
		('*aida9357*' match: part) ifTrue:
			[^part readStream upTo: $=; upToEnd] ].
	^nil! !

!HTTPRequest methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:18'!
isAjaxAutocompleteRequest
	"AJAX autocomplete input field request, see WebAutocompleteField"
	self isAjaxRequest ifFalse: [^false].
	^self includesQuery: 'ajaxAutocompleteField'! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 8/20/2009 22:05'!
isAjaxCloseWindowRequest
	"to Ajax close the window and its context (by WebElement>>addCloseWindowText: )"
	| parm2 |
	(self isPost and: [self isAjaxRequest]) ifFalse: [^false].
	parm2 := (self postDataAt: 'parm2').
	^parm2 notNil and: [parm2 value = 'aidaCloseWindow']! !

!HTTPRequest methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:18'!
isAjaxInPlaceEditingRequest
	"AJAX in place editor request, see WebInPlaceEditingText"
	self isAjaxRequest ifFalse: [^false].
	^self includesQuery: 'ajaxInPlaceEditing'! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 8/20/2009 22:05'!
isAjaxPopupWindowRequest
	"to Ajax open some element in a popup window, (WebElement>>onClickPopup: )"
	| parm2 |
	(self isPost and: [self isAjaxRequest]) ifFalse: [^false].
	parm2 := (self postDataAt: 'parm2').
	^parm2 notNil and: [parm2 value = 'aidaPopupWindow']! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 8/20/2009 22:05'!
isAjaxPostRequest
	"Asynchronous JavaScript (AJAX) request, with posting an input field in a query"
	^self isAjaxRequest and: [self isPost]
! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 8/25/2009 22:46'!
isAjaxPostWithInput
	"Asynchronous JavaScript (AJAX) request, with posting an input field in a post data"
	(self isPost and: [self isAjaxRequest]) ifFalse: [^false].
	^(self postDataKeys contains: [:each | 'field*' match: each]) 
		or: [self isAjaxPostWithSingleInput "uncheck a single checkbox doesn't have any add. field !! "
			or: [self postDataKeys includes: 'ajaxPressedButton'] ]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 8/20/2009 22:06'!
isAjaxPostWithSingleInput
	"Ajax post with of one form element only"
	(self isPost and: [self isAjaxRequest]) ifFalse: [^false].
	^(self postDataKeys includes: 'ajaxSingleField')
		or: [self isAjaxAutocompleteRequest | self isAjaxInPlaceEditingRequest]! !

!HTTPRequest methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:19'!
isAjaxRequest
	"Asynchronous JavaScript (AJAX) request, it has additional parameter ajaxRequest"
	^(self headerAt: 'X-Requested-With' ifAbsent: [^false]) value = 'XMLHttpRequest'! !

!HTTPRequest methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:19'!
isAjaxWikiFormatedRequest
	"AJAX in place editor request, see WebInPlaceEditingText"
	self isAjaxRequest ifFalse: [^false].
	^self includesQuery: 'wikiFormated'! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 2/1/2011 21:13'!
isClassicalRequest
	"a classical (not Ajax) request"
	^self isAjaxRequest not! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 12/14/2010 23:42'!
isForwarded
	"Request is forwarded by Proxy server"
	^(self headerAt: 'X-Forwarded-For' ifAbsent: [^false]) notNil! !

!HTTPRequest methodsFor: '*Aida' stamp: 'janko 7/13/2008 11:28'!
isPing
	"/ping.html, for monitoring the site etc."
	^self requestLine requestURI identifier = '/ping.html'! !

!HTTPRequest methodsFor: '*Aida' stamp: 'jm 2/1/2011 21:14'!
isWebEvent
	^false! !

!HTTPRequest methodsFor: '*Aida'!
view
	| view |
	view := self queryAt: 'view' ifAbsent: [nil].
	view notNil ifTrue: [^(view readStream upTo: $# )  asSymbol]. "skip #anchor if any"
	^self isPost 
		ifTrue: [(self postDataAt: 'view' ifAbsent: [^#main]) value asSymbol]
		ifFalse: [#main]! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
activeFromArray: anArray

	"return a active flag from entries in history array"

	^anArray at: 5! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
addValue: aValue dated: aDate author: aString comment: aCommentString
	"adds data, which is newer than any existing one"
	self dates add: aDate asDays.
	self values add: aValue.
	self changedDates add: Date today asDays.
	self authors add: aString.
	self comments add: aString.! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
arrayWithDate: aDate time: aTime value: aValue active: aBoolean

	"return a array with argument vaules for entry to history collection"

	| array |
	array := Array new: 5.
	array 
		at: 1 put: aDate year;
		at: 2 put: aDate day;
		at: 3 put: (aTime notNil ifTrue: [aTime asSeconds] ifFalse: [0]);
		at: 4 put: aValue;
		at: 5 put: aBoolean.
	^array! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
authors
	" a collection of authors, which made changes, (as a String or reference to a WebUser)"
	^authors! !

!HistoryOfValue methodsFor: 'private-adding-removing'!
changeValue: aValue author: aString comment: aCommentString onIndex: anIndexNumber
	"change data in a specified index"
	self values at: anIndexNumber put: aValue.
	self changedDates at: anIndexNumber put: Date today asDays.
	self authors at: anIndexNumber put: aString.
	self comments at: anIndexNumber put: aString.! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
changedDates
	" a collection of dates, when value was changed in asDays format"
	^changedDates! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
comments
	" a collection of comments about changes"
	^comments! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
dateFromArray: anArray

	"return a date from entries in history array"

	^Date
		newDay: (anArray at: 2)
		year: (anArray at: 1)! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
dates
	" a collection of dates of changes in asDays format"
	^dates! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
hasDuplicateDates

	"maintenance - check if more than one entry with the same date exist"

	| unique |
	unique := Set new.
	self dates do: [: date | (unique includes: date)
		ifTrue: [^true]
		ifFalse: [unique add: date] ].
	^false! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
historyCollection
	"this is an ordered collection of array with year, day in year, time, value, active flag. 
	Collection is ordered from oldest to newest version of value. Active flag is used to 
	'delete' some version from history, but you can still have a trace, who/when some 
	change occured.

	3.11.98 NOT USED anymore. Here just for migration!!"


	historyCollection isNil ifTrue: [self initHistoryCollection].
	^historyCollection! !

!HistoryOfValue methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
historyOfChanges

	"return a history of all changes of value. It is returned as ordered collection of collections, each with:
	valid from date
	valid to date (for last change: nil)
	new value
	date of change
	author of change
	comment of change	

Returned collection has the oldest change (by valied from date) as first, the newest as last. "! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
indexForDate: aDate

	"return index of entry in dates collection, which fits most to the specified date. If no direct 
	entry on a specified date exist, then entry for previous date is used. If aDate is older than
	any date in collection, nil is returned!!"


	| first last days mdays index |

	first := 1. last := self dates size.
	last = 0 ifTrue: [^nil].
	days := aDate asDays.
	days >= self dates last ifTrue: [^last].
	days < self dates first ifTrue: [^nil].
	[last >= first] whileTrue: 	
		[ "(first = last and: [days = (self dates at: first)]) ifTrue: [^first].  " " not needed!! "
		index := (first + last) // 2.
		mdays := self dates at: index.
		days = mdays ifTrue: [^index].
		days < mdays
			ifTrue: [last := index - 1.]
			ifFalse: [first := index + 1.]].
"2.11.98 Sivec prej :
		^1 max: index - 1.
"
	index := (first + last) // 2.
	^1 max: index.




"
| h |
h := History new.
h dates
	add: (Date today) asDays;
	add: (Date today + 1) asDays;
	add: (Date today + 3) asDays;
	add: (Date today + 4) asDays.
Transcript cr;show: (h indexForDate: Date today - 1) printString.
Transcript cr;show: (h indexForDate: Date today + 1) printString.
Transcript cr;show: (h indexForDate: Date today + 2) printString.
Transcript cr;show: (h indexForDate: Date today + 3) printString.
h inspect.
"





"
	self historyCollection keysAndValuesDo: [:index :array |
		(self activeFromArray: array) 
			ifTrue:
				[(self dateFromArray: array) < (aDate + 1)
					ifTrue: [prevIndex := index]
					ifFalse: [^prevIndex]	] ].
	^prevIndex
"! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initAuthors
	authors := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initChangedDates
	changedDates := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initComments
	comments := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initDates
	"adds default entry: 1.1.1901"
	dates := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
initHistoryCollection
	historyCollection := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initValues
	values := OrderedCollection new.! !

!HistoryOfValue methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	"2.11.1998 all inits do not add default values anymore"

	self initDates.
	self initValues.
	self initChangedDates.
	self initAuthors.
	self initComments.! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
insertValue: aValue dated: aDate author: aString comment: aCommentString beforeIndex: anIndex
	"adds data in position before specified index"
	self dates add: aDate asDays beforeIndex: anIndex.
	self values add: aValue beforeIndex: anIndex.
	self changedDates add: Date today asDays beforeIndex: anIndex.
	self authors add: aString beforeIndex: anIndex.
	self comments add: aString beforeIndex: anIndex.! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
migrateHistoryCollection

	"migrate from historyCollection to bunch of collections. Remove duplicates"

	| date |
	date := nil.
	self initialize.
	self historyCollection reverseDo: [:array |
		date = (self dateFromArray: array)
			ifFalse: 
				[self 
					value: (self valueFromArray: array)
					dated: (self dateFromArray: array)
					author: ('')
					comment: ('').
				date := self dateFromArray: array] ].


"
Janko := History selectFromOdb select: [:h | h historyCollection size > 10].
(Janko at: 3) migrateHistoryCollection
Janko do: [:each | each migrateHistoryCollection].
Janko  select: [:h | h dates size > 3].
"! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
newestDate

	"return a date of newest version of value"

	self dates isEmpty
		ifTrue: [^nil]
		ifFalse: 	[^Date fromDays: self dates last]

"History new newestDate"! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
newestValue

	"return a newest version of value in historyCollection."

	self values isEmpty
		ifTrue: [^nil]
		ifFalse: 	[^self values last]
	

"History new newestValue"! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
oldestDate

	"return a date of oldest version of value"

	self dates isEmpty
		ifTrue: [^nil]
		ifFalse: 	[^self dates first]
	

"History new oldestDate"! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
oldestValue

	"return a oldest version of value"

	self values isEmpty
		ifTrue: [^nil]
		ifFalse: 	[^self values last]
	

"History new oldestValue"! !

!HistoryOfValue methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString

	^('aHistory: ', self value printString)! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
removeAllNils
	"REPARING BAD HISTORIES - remove all nil entries. Initialize if no more entries"

	2 to: self values size do: [:index |
		(self values at: index) isNil ifTrue: 
			[self removeIndex: index. ^self removeAllNils] ]! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
removeDuplicateDates

	"maintenance - remove all duplicate entries with same dates. Live last one"

	| date index |
	self hasDuplicateDates ifTrue: 
		[date := 0. index := nil.
		1 to: self dates size do: 
			[:inx | 
				(self dates at: inx) = date ifTrue: [index := inx].
				date := self dates at: inx].
		index notNil 
			ifTrue: 
				[self removeIndex: index-1.
				self removeDuplicateDates].
		 ].! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
removeIndex: aNumber
	"remove all entries on specified index"
	self dates removeIndex: aNumber.
	self values removeIndex: aNumber.
	self changedDates removeIndex: aNumber.
	self authors removeIndex: aNumber.
	self comments removeIndex: aNumber.! !

!HistoryOfValue methodsFor: 'private-adding-removing' stamp: ' 21/4/07 22:07'!
removeLastNil
	"REPARING BAD HISTORIES - remove last entry if value nil. Initialize if no more entries"
	self values isEmpty 
		ifTrue: 
			[self initialize. self values removeLast; addLast: true.
			Transcript cr; show: 'init, true']
		ifFalse: [self values last isNil ifTrue: 
			[self removeIndex: (self dates size).
			self removeLastNil] ]! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
timeFromArray: anArray

	"return a time from entries in history array"

	^Time fromSeconds: (anArray at: 3)! !

!HistoryOfValue methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
value
	"get the curently valid value"

	^self valueDated: Date today

"History new value"! !

!HistoryOfValue methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
value: aValue author: aString comment: aCommentString 
	"change a value of time series, which will be valid immediately - today. You should state author and a short comment about changes. see other methods for detailed explanation"

	self value: aValue
		dated: Date today
		author: aString
		comment: aCommentString! !

!HistoryOfValue methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
value: aValue dated: aDate author: aString comment: aCommentString 
	""

	| index |

	index := self indexForDate: aDate. 
	index isNil   "older than any existing or first" 
		ifTrue: 
			[self 
				insertValue: aValue 
				dated: aDate
				author: aString 
				comment: aCommentString
				beforeIndex: 1.
			^self].

"Sprememba 18.11.1998 Sivec, prej 'index >= self dates  size'."
	index > self dates  size  "newer than any existing"
		ifTrue: 
			[self addValue: aValue dated: aDate author: aString comment: aCommentString. ^self].


	(index ~= 0 and: [(self dates at: index) = aDate asDays]) "already exists"
		ifTrue: 
			[self 
				changeValue: aValue 
				author: aString 
				comment: aCommentString 
				onIndex: index.
			^self].

		self    "insert new somewhere in the middle"
			insertValue: aValue 
			dated: aDate
			author: aString 
			comment: aCommentString
			beforeIndex: index+1.



"History new value: 1234 dated: Date today author: 'Janko' comment: 'test'"! !

!HistoryOfValue methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
valueDated: aDate 
	"get the value from history, which was valid on specified date. Returns nil if aDate is older from 
	oldest entry in history"

	
	| index |
	index := self indexForDate: aDate.
	index = 0 ifTrue: [^nil].
	index = nil ifTrue: [^nil].
	^self values at: index.! !

!HistoryOfValue methodsFor: 'private-history arrays' stamp: ' 21/4/07 22:07'!
valueFromArray: anArray

	"return a value from entries in history array"

	^anArray at: 4! !

!HistoryOfValue methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
values
	" a collection of values, each valid from date in dates at the same index"
	^values! !

!HistoryOfValue class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
instancesAreForwarders
	"Gemstone"

	^false! !

!HistoryOfValue class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!HistoryOfValue class methodsFor: 'examples' stamp: 'jm 11/16/2010 17:19'!
tests
	"some test of histories. Use it directly from code with doIt/printIt/inspectIt "

	| history |
	history := HistoryOfValue new.
	history value: 0 dated: (Date today ) author: '' comment: ''.
	history value: -2000 dated: (Date today - (365*100) -2) author: '' comment: ''.
	history value: -3 dated: (Date today -3) author: '' comment: ''.
	history value: -1 dated: (Date today -1) author: '' comment: ''.
	history value: 2 dated: (Date today +2) author: '' comment: ''.
	history value: 1 dated: (Date today +1) author: '' comment: ''.! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
atEnd
	^imageStream atEnd! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
close
	imageStream close! !

!ImageStream methodsFor: 'progress' stamp: ' 21/4/07 22:07'!
compute: aBlock 
	(self progressValue isKindOf: ValueHolder)
		ifTrue: [self progressValue compute: aBlock]! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
contents
	^imageStream contents! !

!ImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
convertValue: value from: fromScale to: toScale 
	^value = 0
		ifTrue: [0]
		ifFalse: [value = fromScale
				ifTrue: [toScale]
				ifFalse: [(value + 1 * (toScale + 1) / (fromScale + 1)) rounded - 1 max: 0]]! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
cr
	^imageStream nextPut: Character cr asInteger! !

!ImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
errorCanNotRead
	self error: 'can''t read the image'.
	^nil! !

!ImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
errorCanNotWrite
	self error: 'can''t write the image'.
	^nil! !

!ImageStream methodsFor: 'private' stamp: ' 21/4/07 22:07'!
hasMagicNumber: aByteArray 
	| position array |
	position := imageStream position.
	imageStream size - position >= aByteArray size
		ifTrue: 
			[array := (imageStream next: aByteArray size) asByteArray.
			array = aByteArray ifTrue: [^true]].
	imageStream position: position.
	^false! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
lf
	^imageStream nextPut: Character lf asInteger! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
next
	^imageStream next! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
next: size 
	^imageStream next: size! !

!ImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextImage
	^self subclassResponsibility! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLong
	^(imageStream next bitShift: 24)
		+ (imageStream next bitShift: 16) + (imageStream next bitShift: 8) + imageStream next! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextLongPut: a32BitW 
	imageStream nextPut: ((a32BitW bitShift: -24)
			bitAnd: 255).
	imageStream nextPut: ((a32BitW bitShift: -16)
			bitAnd: 255).
	imageStream nextPut: ((a32BitW bitShift: -8)
			bitAnd: 255).
	imageStream nextPut: (a32BitW bitAnd: 255).
	^a32BitW! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextPut: aByte 
	^imageStream nextPut: aByte! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextPutAll: aByteArray 
	^imageStream nextPutAll: aByteArray! !

!ImageStream methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextPutImage: anImage 
	^self subclassResponsibility! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextWord
	^(imageStream next bitShift: 8)
		+ imageStream next! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
nextWordPut: a16BitW 
	imageStream nextPut: ((a16BitW bitShift: -8)
			bitAnd: 255).
	imageStream nextPut: (a16BitW bitAnd: 255).
	^a16BitW! !

!ImageStream methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
on: aStream 
	imageStream := aStream.
	(imageStream respondsTo: #binary)
		ifTrue: [imageStream binary].
	self progressValue: (ValueHolder with: nil)! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
position
	^imageStream position! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
position: anInteger 
	^imageStream position: anInteger! !

!ImageStream methodsFor: 'progress' stamp: ' 21/4/07 22:07'!
progress
	^self progressValue value! !

!ImageStream methodsFor: 'progress' stamp: ' 21/4/07 22:07'!
progress: normalizedNumber 
	(0 <= normalizedNumber and: [normalizedNumber <= 1])
		ifTrue: 
			[| truncatedValue |
			truncatedValue := normalizedNumber roundTo: 0.005.
			self progressValue value = truncatedValue ifFalse: [self progressValue value: truncatedValue]]! !

!ImageStream methodsFor: 'progress' stamp: ' 21/4/07 22:07'!
progressValue
	^progressValue! !

!ImageStream methodsFor: 'progress' stamp: ' 21/4/07 22:07'!
progressValue: aValueHolder 
	progressValue := aValueHolder! !

!ImageStream methodsFor: 'viewing' stamp: ' 21/4/07 22:07'!
show: anImage 
	^self class show: anImage! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
size
	^imageStream size! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
skip: anInteger 
	^imageStream skip: anInteger! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
space
	^imageStream nextPut: Character space asInteger! !

!ImageStream methodsFor: 'stream access' stamp: ' 21/4/07 22:07'!
tab
	^imageStream nextPut: Character tab asInteger! !

!ImageStream class methodsFor: 'controls' stamp: ' 21/4/07 22:07'!
assert: assertBlock do: doBlock ensure: ensureBlock 
	assertBlock value.
	[doBlock value]
		valueNowOrOnUnwindDo: [ensureBlock value]! !

!ImageStream class methodsFor: 'constants of palette' stamp: ' 21/8/07 09:38'!
colorPalette256
	"ImageStream colorPalette256."

	| anArray |
	ColorPalette256 notNil ifTrue: [^ColorPalette256].
	anArray := self colorPalette256Array
				collect: 
					[:array | 
					| r g b color |
					r := array at: 1.
					g := array at: 2.
					b := array at: 3.
					ColorValue scalingValue = 8191
						ifTrue: [color := ColorValue
										scaledRed: r
										scaledGreen: g
										scaledBlue: b]
						ifFalse: 
							[r := r / 8191.
							g := g / 8191.
							b := b / 8191.
							color := ColorValue
										red: r
										green: g
										blue: b].
					color yourself].
	ColorPalette256 := MappedPalette withColors: anArray reverse.
	^ColorPalette256! !

!ImageStream class methodsFor: 'constants of palette' stamp: ' 21/8/07 09:38'!
colorPalette256Array
	"ImageStream colorPalette256Array."
	^#(	#(8191 8191 8191)
		#(8191 8191 6553)
		#(8191 8191 4915)
		#(8191 8191 3276)
		#(8191 8191 1638)
		#(8191 8191 0)
		#(8191 6553 8191)
		#(8191 6553 6553)
		#(8191 6553 4915)
		#(8191 6553 3276)
		#(8191 6553 1638)
		#(8191 6553 0)
		#(8191 4915 8191)
		#(8191 4915 6553)
		#(8191 4915 4915)
		#(8191 4915 3276)
		#(8191 4915 1638)
		#(8191 4915 0)
		#(8191 3276 8191)
		#(8191 3276 6553)
		#(8191 3276 4915)
		#(8191 3276 3276)
		#(8191 3276 1638)
		#(8191 3276 0)
		#(8191 1638 8191)
		#(8191 1638 6553)
		#(8191 1638 4915)
		#(8191 1638 3276)
		#(8191 1638 1638)
		#(8191 1638 0)
		#(8191 0 8191)
		#(8191 0 6553)
		#(8191 0 4915)
		#(8191 0 3276)
		#(8191 0 1638)
		#(8191 0 0)
		#(6553 8191 8191)
		#(6553 8191 6553)
		#(6553 8191 4915)
		#(6553 8191 3276)
		#(6553 8191 1638)
		#(6553 8191 0)
		#(6553 6553 8191)
		#(6553 6553 6553)
		#(6553 6553 4915)
		#(6553 6553 3276)
		#(6553 6553 1638)
		#(6553 6553 0)
		#(6553 4915 8191)
		#(6553 4915 6553)
		#(6553 4915 4915)
		#(6553 4915 3276)
		#(6553 4915 1638)
		#(6553 4915 0)
		#(6553 3276 8191)
		#(6553 3276 6553)
		#(6553 3276 4915)
		#(6553 3276 3276)
		#(6553 3276 1638)
		#(6553 3276 0)
		#(6553 1638 8191)
		#(6553 1638 6553)
		#(6553 1638 4915)
		#(6553 1638 3276)
		#(6553 1638 1638)
		#(6553 1638 0)
		#(6553 0 8191)
		#(6553 0 6553)
		#(6553 0 4915)
		#(6553 0 3276)
		#(6553 0 1638)
		#(6553 0 0)
		#(4915 8191 8191)
		#(4915 8191 6553)
		#(4915 8191 4915)
		#(4915 8191 3276)
		#(4915 8191 1638)
		#(4915 8191 0)
		#(4915 6553 8191)
		#(4915 6553 6553)
		#(4915 6553 4915)
		#(4915 6553 3276)
		#(4915 6553 1638)
		#(4915 6553 0)
		#(4915 4915 8191)
		#(4915 4915 6553)
		#(4915 4915 4915)
		#(4915 4915 3276)
		#(4915 4915 1638)
		#(4915 4915 0)
		#(4915 3276 8191)
		#(4915 3276 6553)
		#(4915 3276 4915)
		#(4915 3276 3276)
		#(4915 3276 1638)
		#(4915 3276 0)
		#(4915 1638 8191)
		#(4915 1638 6553)
		#(4915 1638 4915)
		#(4915 1638 3276)
		#(4915 1638 1638)
		#(4915 1638 0)
		#(4915 0 8191)
		#(4915 0 6553)
		#(4915 0 4915)
		#(4915 0 3276)
		#(4915 0 1638)
		#(4915 0 0)
		#(3276 8191 8191)
		#(3276 8191 6553)
		#(3276 8191 4915)
		#(3276 8191 3276)
		#(3276 8191 1638)
		#(3276 8191 0)
		#(3276 6553 8191)
		#(3276 6553 6553)
		#(3276 6553 4915)
		#(3276 6553 3276)
		#(3276 6553 1638)
		#(3276 6553 0)
		#(3276 4915 8191)
		#(3276 4915 6553)
		#(3276 4915 4915)
		#(3276 4915 3276)
		#(3276 4915 1638)
		#(3276 4915 0)
		#(3276 3276 8191)
		#(3276 3276 6553)
		#(3276 3276 4915)
		#(3276 3276 3276)
		#(3276 3276 1638)
		#(3276 3276 0)
		#(3276 1638 8191)
		#(3276 1638 6553)
		#(3276 1638 4915)
		#(3276 1638 3276)
		#(3276 1638 1638)
		#(3276 1638 0)
		#(3276 0 8191)
		#(3276 0 6553)
		#(3276 0 4915)
		#(3276 0 3276)
		#(3276 0 1638)
		#(3276 0 0)
		#(1638 8191 8191)
		#(1638 8191 6553)
		#(1638 8191 4915)
		#(1638 8191 3276)
		#(1638 8191 1638)
		#(1638 8191 0)
		#(1638 6553 8191)
		#(1638 6553 6553)
		#(1638 6553 4915)
		#(1638 6553 3276)
		#(1638 6553 1638)
		#(1638 6553 0)
		#(1638 4915 8191)
		#(1638 4915 6553)
		#(1638 4915 4915)
		#(1638 4915 3276)
		#(1638 4915 1638)
		#(1638 4915 0)
		#(1638 3276 8191)
		#(1638 3276 6553)
		#(1638 3276 4915)
		#(1638 3276 3276)
		#(1638 3276 1638)
		#(1638 3276 0)
		#(1638 1638 8191)
		#(1638 1638 6553)
		#(1638 1638 4915)
		#(1638 1638 3276)
		#(1638 1638 1638)
		#(1638 1638 0)
		#(1638 0 8191)
		#(1638 0 6553)
		#(1638 0 4915)
		#(1638 0 3276)
		#(1638 0 1638)
		#(1638 0 0)
		#(0 8191 8191)
		#(0 8191 6553)
		#(0 8191 4915)
		#(0 8191 3276)
		#(0 8191 1638)
		#(0 8191 0)
		#(0 6553 8191)
		#(0 6553 6553)
		#(0 6553 4915)
		#(0 6553 3276)
		#(0 6553 1638)
		#(0 6553 0)
		#(0 4915 8191)
		#(0 4915 6553)
		#(0 4915 4915)
		#(0 4915 3276)
		#(0 4915 1638)
		#(0 4915 0)
		#(0 3276 8191)
		#(0 3276 6553)
		#(0 3276 4915)
		#(0 3276 3276)
		#(0 3276 1638)
		#(0 3276 0)
		#(0 1638 8191)
		#(0 1638 6553)
		#(0 1638 4915)
		#(0 1638 3276)
		#(0 1638 1638)
		#(0 1638 0)
		#(0 0 8191)
		#(0 0 6553)
		#(0 0 4915)
		#(0 0 3276)
		#(0 0 1638)
		#(7645 0 0)
		#(7099 0 0)
		#(6007 0 0)
		#(5461 0 0)
		#(4369 0 0)
		#(3822 0 0)
		#(2730 0 0)
		#(2184 0 0)
		#(1092 0 0)
		#(546 0 0)
		#(0 7645 0)
		#(0 7099 0)
		#(0 6007 0)
		#(0 5461 0)
		#(0 4369 0)
		#(0 3822 0)
		#(0 2730 0)
		#(0 2184 0)
		#(0 1092 0)
		#(0 546 0)
		#(0 0 7645)
		#(0 0 7099)
		#(0 0 6007)
		#(0 0 5461)
		#(0 0 4369)
		#(0 0 3822)
		#(0 0 2730)
		#(0 0 2184)
		#(0 0 1092)
		#(0 0 546)
		#(7645 7645 7645)
		#(7099 7099 7099)
		#(6007 6007 6007)
		#(5461 5461 5461)
		#(4369 4369 4369)
		#(3822 3822 3822)
		#(2730 2730 2730)
		#(2184 2184 2184)
		#(1092 1092 1092)
		#(546 546 546)
		#(0 0 0)
	)! !

!ImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
copyright
	^'Copyright (C) 1995-1998 AOKI Atsushi, All Rights Reserved.'! !

!ImageStream class methodsFor: 'constants of palette' stamp: ' 21/4/07 22:07'!
flushPalettes
	"ImageStream flushPalettes."

	ColorPalette256 := nil.
	GrayPalette256 := nil! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
fromClipboard
	"ImageStream show: ImageStream fromClipboard."

	| pixmap image |
	pixmap := Pixmap fromClipboard.
	image := pixmap asImage.
	^image! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
fromDisplay
	"ImageStream show: ImageStream fromDisplay."

	^self fromDisplay: Screen default bounds! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
fromDisplay: aRectangle 
	"ImageStream show: (ImageStream fromDisplay: (0 @ 0 extent: 100 @ 100))."

	^Screen default completeContentsOfArea: aRectangle! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
fromUser
	"ImageStream show: ImageStream fromUser."

	^self fromDisplay: Rectangle fromUser! !

!ImageStream class methodsFor: 'constants of palette' stamp: ' 21/4/07 22:07'!
grayPalette256
	"ImageStream grayPalette256."

	| paletteSize anArray |
	GrayPalette256 notNil ifTrue: [^GrayPalette256].
	paletteSize := 256.
	anArray := Array new: paletteSize.
	1 to: paletteSize
		do: 
			[:index | 
			| color |
			color := ColorValue brightness: 1 - (index - 1 / (paletteSize - 1)).
			anArray at: index put: color].
	GrayPalette256 := MappedPalette withColors: anArray reverse.
	^GrayPalette256! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
imageKindTable
	"ImageStream imageKindTable."

	ImageKindTable isNil
		ifTrue: 
			[| aDictionary |
			aDictionary := Dictionary new.
			aDictionary at: 'bos' put: #BosImageStream.
			aDictionary at: 'boss' put: #BosImageStream.
			aDictionary at: 'bmp' put: #BmpImageStream.
			aDictionary at: 'bmpf' put: #BmpImageStream.
			aDictionary at: 'gif' put: #GifImageStream.
			aDictionary at: 'giff' put: #GifImageStream.
			aDictionary at: 'jpg' put: #JpegImageStream.
			aDictionary at: 'jpeg' put: #JpegImageStream.
			aDictionary at: 'pic' put: #PictImageStream.
			aDictionary at: 'pict' put: #PictImageStream.
			ImageKindTable := aDictionary].
	^ImageKindTable! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
imageStreamClassForFileName: aFilename 
	"ImageStream imageStreamClassForFileName: 'zzz.gif' asFilename."

	| aString aSymbol aClass |
	aString := (aFilename asString reverse copyUpTo: $.) reverse.
	aString := aString asLowercase.
	aSymbol := self imageKindTable at: aString ifAbsent: [nil].
	aSymbol isNil ifTrue: [^nil].
	aClass := Smalltalk at: aSymbol ifAbsent: [nil].
	^aClass! !

!ImageStream class methodsFor: 'class initialization' stamp: ' 21/4/07 22:07'!
initialize
	"ImageStream initialize."

	ImageKindTable := nil.
	self flushPalettes! !

!ImageStream class methodsFor: 'class initialization' stamp: ' 21/4/07 22:07'!
install
	"ImageStream install."

	self colorPalette256.
	self grayPalette256! !

!ImageStream class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
on: aStream 
	^self new on: aStream! !

!ImageStream class methodsFor: 'saving' stamp: ' 21/4/07 22:07'!
save
	"ImageStream save."

	| encodingName fileName classCollection aStream |
	encodingName := #default.
	fileName := 'ImgStrm.st'.
	classCollection := self saveClasses.
	aStream := (fileName asFilename withEncoding: encodingName) writeStream.
	[Cursor write
		showWhile: 
			[| timeStamp |
			timeStamp := Date today shortPrintString , ' ' , Time now shortPrintString.
			aStream cr.
			aStream nextChunkPut: timeStamp printString.
			aStream cr; cr.
			(self comment isNil or: [self comment isEmpty])
				ifFalse: 
					[aStream nextChunkPut: self comment printString.
					aStream cr; cr].
			classCollection
				do: 
					[:aClass | 
					aStream nextChunkPut: aClass definition.
					aStream cr; cr].
			classCollection
				do: 
					[:aClass | 
					| sourceCodeStream |
					aStream nextPut: Character newPage.
					aStream cr.
					sourceCodeStream := SourceCodeStream on: aStream.
					aClass fileOutSourceOn: sourceCodeStream.
					aStream cr]]]
		valueNowOrOnUnwindDo: [aStream close].
	^classCollection! !

!ImageStream class methodsFor: 'saving' stamp: ' 21/4/07 22:07'!
saveClasses
	"ImageStream saveClasses."

	| patternCollection classCollection |
	patternCollection := #('*ImageStream*' '*Progress*').
	classCollection := Smalltalk organization superclassOrder: self category.
	classCollection := classCollection
				select: 
					[:aClass | 
					| string something |
					string := aClass name asString.
					something := patternCollection detect: [:it | it match: string]
								ifNone: [nil].
					something notNil].
	^classCollection , Progress saveClasses! !

!ImageStream class methodsFor: 'viewing' stamp: ' 21/4/07 22:07'!
show: anImage 
	"ImageStream show: Image fromUser."

	| image extent window |
	(anImage isKindOf: OpaqueImage)
		ifTrue: [image := anImage]
		ifFalse: [image := CachedImage on: anImage].
	extent := 64 @ 64 max: (image extent min: Screen default bounds extent - 60 asPoint).
	window := ScheduledWindow new.
	window label: 'Image'.
	window minimumSize: extent.
	window component: image.
	window open.
	^anImage! !

!ImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
system
	^'Goodies'! !

!ImageStream class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
toClipboard: anImage 
	"ImageStream toClipboard: Image fromUser."

	| pixmap |
	pixmap := anImage asRetainedMedium.
	pixmap toClipboard.
	^anImage! !

!ImageStream class methodsFor: 'copyright' stamp: ' 21/4/07 22:07'!
version
	^'003'! !

!Integer methodsFor: '*Aida' stamp: 'janko 8/3/2011 19:13'!
asScaledDecimal: aScaleInteger
	^ScaledDecimal  newFromNumber: self scale: aScaleInteger

! !

!JoomlaMenu methodsFor: 'accessing' stamp: ' 10/1/08 16:19'!
addFirstPageWithDescription: aString
	| firstPage assoc firstPageTitle |
	firstPage := self app observee parent defaultPage.
	assoc := self app observee parent pages associations detect: [:each | each value == firstPage].
	firstPageTitle := assoc key.
	self addPage: firstPageTitle description: aString! !

!JoomlaMenu methodsFor: 'accessing' stamp: ' 10/1/08 16:19'!
addPage: aNameString description: aTabNameString
	"aNameString is original/first title of page, not changed one!!"
	| name pageTitle |
	name := aNameString convertToSloveneChars.
	(self pages contains: [:each | each key == name]) ifTrue: [^nil]. 
	pageTitle := (self app observee parent pageTitled: name).
	pageTitle := pageTitle notNil ifTrue: [pageTitle title] ifFalse: [''].
	self pages add:
		(Association key: name value: (Array with: aTabNameString with: pageTitle ))! !

!JoomlaMenu methodsFor: 'initialize-release' stamp: ' 10/1/08 16:19'!
initPages
	pages := OrderedCollection new.! !

!JoomlaMenu methodsFor: 'initialize-release' stamp: ' 10/1/08 16:19'!
initialize
	self initPages.
	^self! !

!JoomlaMenu methodsFor: 'printing' stamp: ' 10/1/08 16:19'!
linkToWikiPage: aTitleString text: aString
	| page titleString |
	titleString := aTitleString "AIDASite convertFromWeb: aTitleString on: self app session".
	page := self app observee parent pageTitled: titleString.
	page notNil ifTrue: [^WebLink text: aString linkTo: page ].
	^(WebLink text: aString linkTo: self app observee parent view: #add )  "new page"
		parameter: 'title' value: (AIDASite convertToWebString: aTitleString)! !

!JoomlaMenu methodsFor: 'private' stamp: ' 10/1/08 16:19'!
pages
	^pages! !

!JoomlaMenu methodsFor: 'printing' stamp: ' 10/1/08 16:19'!
prepareModule
	| inx tabTitle |
	super prepareModule.
	inx := 1.
	self pages do: [:each | 
		tabTitle := each key ensureUnicodeSloveneChars.
		self cell add: 
			((self linkToWikiPage: each key text: each value first) class: #mainlevel).
		each ~= self pages last ifTrue: [self newRow]. 
		inx := inx + 1]! !

!JoomlaMenu class methodsFor: 'instance creation' stamp: ' 10/1/08 16:19'!
new
	^super new initialize! !

!JoomlaModule methodsFor: 'accessing' stamp: ' 10/1/08 16:19'!
body
	"body of the module, add elements to body, not to module directly!!"
	body isNil ifTrue: [body := WebElement new].
	^body! !

!JoomlaModule methodsFor: 'accessing' stamp: ' 10/1/08 16:19'!
header
	header isNil ifTrue: [^''].
	^header! !

!JoomlaModule methodsFor: 'accessing' stamp: ' 10/1/08 16:19'!
header: aString 
	"text on top of menu"
	header := aString! !

!JoomlaModule methodsFor: 'private-streaming'!
prepareModule
	self class: #moduletable.
	self addTextH3: self header.
	self table width: 1; cellPadding: 0; cellSpacing: 0.
	self body elements notEmpty ifTrue: [self add: self body].! !

!JoomlaModule methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareModule.
	self prepareToHtmlStreamingOn: aSession.
	self scriptBefore notNil 
		ifTrue: [self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<div'. self streamAttributesTo: aStream for: aSession. 
	aStream nextPutAll: '>', self eol.
	elements notNil ifTrue: [elements do: [:element | 
		element notNil ifTrue: [element streamHtmlTo: aStream for: aRequest on: aSession] ] ].
	aStream nextPutAll: self ident, '</div>', self eol.
	self scriptAfter notNil 
		ifTrue: [self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!JoomlaStyle methodsFor: 'styles-screen'!
addSuperStyles
	^false! !

!JoomlaStyle methodsFor: 'maintenance'!
adjustCSSLinks
	JoomlaStyle new adjustLinksInCSSMethod: #cssJoomlaTemplate! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:24'!
arrowPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 9 0 0 0 9 8 3 0 0 1 160 72 198 180 0 0 0 6 80 76 84 69 135 185 42 255 255 255 116 52 158 130 0 0 0 2 116 82 78 83 255 0 229 183 48 74 0 0 0 9 112 72 89 115 0 0 10 235 0 0 10 235 1 130 139 13 90 0 0 0 51 73 68 65 84 120 156 53 139 65 14 0 48 8 194 74 194 255 191 236 64 179 131 68 108 181 48 88 206 140 156 118 153 66 9 133 13 102 205 80 232 166 5 181 56 113 16 255 229 223 142 62 184 175 7 88 67 87 53 183 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:24'!
bacFooterPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 2 0 0 0 26 8 2 0 0 1 101 86 42 19 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 99 73 68 65 84 120 156 125 141 49 10 0 33 16 3 87 141 173 79 216 214 255 63 201 78 16 65 43 177 242 140 32 7 87 92 32 12 33 27 22 115 78 140 49 224 156 3 181 214 66 239 29 222 123 164 148 16 66 128 181 22 198 152 67 154 155 156 51 84 21 173 181 211 209 220 222 219 175 107 173 34 130 82 10 17 99 36 246 152 216 61 33 71 55 253 97 63 121 211 3 89 72 36 16 46 250 206 227 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:25'!
bacLogoJpg
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 50 29 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 34 239 187 191 34 32 105 100 61 34 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 34 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 34 97 100 111 98 101 58 110 115 58 109 101 116 97 47 34 32 120 58 120 109 112 116 107 61 34 65 100 111 98 101 32 88 77 80 32 67 111 114 101 32 52 46 49 45 99 48 51 52 32 52 54 46 50 55 50 57 55 54 44 32 83 97 116 32 74 97 110 32 50 55 32 50 48 48 55 32 50 50 58 51 55 58 51 55 32 32 32 32 32 32 32 32 34 62 10 32 32 32 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 34 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 34 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 120 97 112 61 34 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 34 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 60 47 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 55 45 48 53 45 50 57 84 48 55 58 51 54 58 52 52 90 60 47 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 55 45 48 53 45 50 57 84 48 55 58 51 57 58 52 48 90 60 47 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 100 99 61 34 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 34 62 10 32 32 32 32 32 32 32 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 106 112 101 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 34 119 34 63 62 255 219 0 67 0 4 3 3 3 3 3 4 3 3 4 5 4 3 4 5 7 5 4 4 5 7 8 6 6 7 6 6 8 10 8 8 8 8 8 8 10 8 10 10 11 10 10 8 13 13 14 14 13 13 18 18 18 18 18 20 20 20 20 20 20 20 20 20 20 255 219 0 67 1 5 5 5 8 7 8 15 10 10 15 18 15 12 15 18 22 21 21 21 21 22 22 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 255 194 0 17 8 0 219 0 3 3 1 17 0 2 17 1 3 17 1 255 196 0 24 0 1 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 5 6 7 255 196 0 24 1 1 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 4 6 2 255 218 0 12 3 1 0 2 16 3 16 0 0 1 239 80 198 101 34 21 8 0 0 0 0 0 0 0 0 5 141 246 147 89 215 255 196 0 26 16 0 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 2 18 20 3 4 64 255 218 0 8 1 1 0 1 5 2 154 150 243 244 209 218 34 167 255 196 0 20 17 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 255 218 0 8 1 3 1 1 63 1 103 255 196 0 28 17 0 0 6 3 0 0 0 0 0 0 0 0 0 0 0 0 1 4 21 82 161 209 0 16 64 255 218 0 8 1 2 1 1 63 1 197 35 14 128 174 148 211 13 144 189 127 255 196 0 28 16 0 1 3 5 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 49 50 64 146 161 209 255 218 0 8 1 1 0 6 63 2 146 83 22 242 230 141 161 7 255 196 0 24 16 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 97 209 240 255 218 0 8 1 1 0 1 63 33 107 24 222 242 33 255 218 0 12 3 1 0 2 0 3 0 0 0 16 217 182 219 109 182 219 109 182 219 109 175 255 196 0 22 17 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 64 255 218 0 8 1 3 1 1 63 16 29 127 255 196 0 22 17 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 17 64 255 218 0 8 1 2 1 1 63 16 175 12 17 255 196 0 21 16 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 64 97 255 218 0 8 1 1 0 1 63 16 153 153 41 207 255 217 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:25'!
bacModPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 201 0 0 0 4 8 3 0 0 1 100 105 219 203 0 0 0 45 80 76 84 69 216 216 216 217 217 217 227 227 227 228 228 228 237 237 237 238 238 238 246 246 246 247 247 247 248 248 248 249 249 249 250 250 250 252 252 252 253 253 253 254 254 254 255 255 255 133 212 169 111 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 97 73 68 65 84 120 156 197 208 73 14 128 32 12 5 80 138 31 101 240 254 23 85 130 50 136 38 186 196 5 38 141 111 219 180 191 45 140 18 109 9 122 108 87 10 132 156 95 186 218 182 8 27 116 116 93 77 157 118 229 13 48 37 205 25 178 142 42 128 136 56 51 196 53 159 96 83 118 229 200 172 47 99 229 33 7 185 64 161 222 254 222 231 187 231 128 122 2 250 44 33 69 182 32 90 206 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:26'!
botLeftPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 12 0 0 0 12 8 2 0 0 1 174 16 251 38 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 1 10 73 68 65 84 120 156 109 80 201 138 131 80 16 124 106 199 221 144 131 34 46 209 147 255 224 255 223 242 11 66 12 8 130 11 232 65 112 37 58 149 152 137 115 152 130 246 65 87 117 117 181 52 207 243 233 116 34 84 154 166 180 109 27 77 211 68 235 186 222 110 183 56 142 41 73 146 40 138 24 99 100 89 22 123 131 46 151 75 93 215 109 219 210 178 44 121 158 135 97 200 126 65 128 235 186 101 89 130 243 125 255 213 66 193 223 182 237 231 243 57 12 3 86 82 211 52 154 166 137 162 120 12 66 2 75 168 142 22 120 44 66 40 142 227 14 149 105 154 247 251 61 8 130 125 156 64 194 11 131 85 85 193 30 217 95 27 121 158 215 117 93 146 36 172 67 20 194 211 247 61 236 28 199 129 156 253 7 18 4 1 166 152 43 138 226 122 189 254 205 119 136 224 12 226 124 62 67 157 101 153 44 203 158 231 125 19 126 68 40 208 224 118 203 113 28 31 143 7 46 209 223 192 21 104 210 174 133 31 98 162 165 170 170 97 24 123 222 174 235 240 183 62 183 124 193 191 1 169 162 40 48 3 141 47 250 63 196 210 127 221 158 100 237 238 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:26'!
botModPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 201 0 0 0 32 8 3 0 0 1 248 84 156 235 0 0 0 105 80 76 84 69 199 199 199 216 216 216 217 217 217 218 218 218 219 219 219 220 220 220 221 221 221 222 222 222 224 224 224 225 225 225 226 226 226 227 227 227 228 228 228 231 231 231 232 232 232 234 234 234 237 237 237 238 238 238 239 239 239 240 240 240 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 248 248 249 249 249 250 250 250 251 251 251 252 252 252 253 253 253 254 254 254 255 255 255 222 211 132 4 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 2 168 73 68 65 84 120 156 221 88 11 111 211 48 16 246 157 207 121 172 221 218 138 14 144 40 32 241 255 127 19 2 193 164 141 199 70 7 93 169 211 216 92 18 39 203 68 61 106 169 142 232 190 190 146 56 238 249 203 249 206 159 143 22 137 216 13 77 158 6 134 183 201 8 82 158 38 84 244 198 211 207 16 120 58 89 146 158 22 73 239 223 237 110 185 162 5 62 50 246 157 3 216 146 159 147 7 40 120 212 155 52 200 12 2 169 205 215 162 62 169 40 91 176 32 108 117 204 71 130 223 127 67 157 167 4 179 105 208 208 138 207 196 195 11 4 9 159 19 60 0 17 108 165 122 202 62 135 250 59 97 22 116 191 5 164 73 152 9 16 19 154 126 255 105 219 179 218 23 205 143 207 47 112 250 140 22 23 175 87 129 150 194 80 200 143 175 120 94 66 176 51 131 80 241 99 43 50 208 255 129 32 247 137 203 165 181 228 203 106 7 129 174 254 157 48 101 75 154 226 240 177 91 201 70 82 36 58 255 86 190 136 197 6 56 89 95 201 115 34 161 230 229 90 151 15 27 173 203 75 77 36 8 235 46 54 65 225 190 247 51 35 213 156 195 158 166 211 210 183 58 28 4 63 198 242 38 52 141 7 163 138 146 161 140 196 141 72 128 1 152 184 117 34 114 6 147 195 249 100 24 35 38 230 3 67 103 100 27 51 75 214 249 30 116 66 54 222 44 102 249 165 89 82 221 206 209 108 101 148 39 102 237 150 37 222 109 70 201 146 117 69 36 167 0 176 35 236 230 140 212 217 167 151 49 125 162 47 103 138 96 36 110 126 155 7 246 133 147 161 78 235 176 195 156 2 106 242 127 115 97 79 96 54 27 1 71 252 56 213 69 191 83 51 11 58 53 5 162 103 204 47 179 60 54 40 81 156 86 22 191 150 111 141 189 139 42 193 162 98 121 2 8 31 38 227 1 178 240 64 168 153 64 196 144 143 14 112 195 111 124 2 199 204 4 238 215 19 140 45 38 162 2 92 128 60 177 56 57 110 159 184 223 39 199 68 150 193 37 138 255 4 221 192 29 147 68 71 174 28 196 130 233 148 41 129 148 171 145 128 212 108 212 241 113 49 133 170 11 132 43 41 129 100 146 95 43 230 133 169 45 141 221 45 118 26 37 86 79 72 167 188 234 26 148 112 135 174 104 216 157 118 162 170 221 169 139 118 241 221 95 75 253 27 188 34 34 54 133 78 125 157 39 146 48 25 225 101 250 188 90 94 228 113 198 138 253 178 25 229 9 146 144 153 164 226 194 230 185 138 90 49 138 130 194 22 235 53 100 147 140 35 131 170 121 165 202 19 93 222 89 227 117 62 212 74 219 85 158 219 98 78 191 181 63 113 154 91 109 127 31 208 22 170 15 58 189 42 161 2 128 167 137 146 237 198 84 32 170 188 226 241 8 19 183 65 185 143 147 126 73 202 237 96 58 114 237 110 163 189 45 124 203 177 39 19 126 97 171 25 255 0 33 141 209 105 254 155 242 247 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:26'!
botPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 2 0 0 0 12 8 2 0 0 1 176 217 203 149 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 51 73 68 65 84 120 156 99 249 255 255 63 203 205 155 55 89 64 52 8 51 48 48 176 188 123 247 14 206 134 97 144 26 81 81 81 144 56 84 8 147 122 244 232 17 136 146 144 144 0 82 0 89 4 26 71 139 72 243 54 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:27'!
botRightPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 14 0 0 0 12 8 2 0 0 1 170 229 43 27 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 244 73 68 65 84 120 156 109 80 203 14 68 64 16 28 52 17 207 131 120 196 133 68 252 255 247 136 155 16 92 184 172 68 56 216 26 109 55 187 118 235 48 51 221 93 213 93 211 116 28 135 16 130 170 170 74 211 148 16 205 243 76 117 93 151 101 73 92 195 185 239 251 21 108 219 70 226 68 215 117 82 101 219 118 150 101 87 245 141 113 28 81 160 119 12 89 211 52 113 28 203 236 52 77 170 170 18 145 97 24 69 81 40 138 34 29 220 58 192 66 158 231 36 190 1 5 232 95 217 182 109 125 223 215 52 141 62 83 186 174 99 148 228 194 163 188 136 92 215 245 60 15 5 57 45 138 34 72 16 160 35 30 172 187 123 184 97 89 150 190 239 195 48 180 44 235 110 236 19 248 236 48 12 142 227 112 239 255 84 140 194 6 215 117 133 121 56 5 85 238 132 107 88 55 47 253 113 2 246 193 128 125 211 52 225 24 60 233 21 251 84 94 208 78 4 65 128 54 96 224 205 164 235 91 73 146 240 146 249 68 141 101 191 174 158 88 237 108 75 239 1 82 255 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:27'!
buttonBgPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 20 0 0 0 20 8 2 0 0 1 117 236 186 204 0 0 0 9 112 72 89 115 0 0 10 235 0 0 10 235 1 130 139 13 90 0 0 0 126 73 68 65 84 120 156 197 145 75 14 128 32 12 68 89 244 254 7 244 4 70 212 196 15 162 32 70 163 16 165 198 178 104 12 179 234 240 50 253 4 112 155 21 167 160 26 10 95 201 49 84 23 245 200 191 67 63 151 226 33 144 33 24 133 110 175 76 19 251 37 246 19 230 200 107 219 137 111 29 241 150 194 104 218 11 155 154 209 28 157 138 177 113 19 133 173 211 12 108 86 94 115 50 157 113 115 90 137 222 137 48 125 214 159 147 153 107 171 76 147 121 107 231 250 231 29 26 95 110 74 9 7 6 243 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css1Body
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css21Text
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css22Links
^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css23Inputs
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css24WebGrid
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css25AutocompleteField
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css26Popup
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css27Menus
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css3Header
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css40NavigationBar
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css41Login
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css41NavigationBar
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css42ErrorReport
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css43Buckets
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css44ContentHierarchy
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css451Document
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css452DocumentActions
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css453ClassificationLevel
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css46Search
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css47Comments
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css51Wiki
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css52SiteContent
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
css9Hide
	^''! !

!JoomlaStyle methodsFor: 'styles-screen' stamp: ' 10/1/08 16:19'!
cssJoomlaTemplate
	^'
/* Joomla mitra template */

html {
	height: 100%;
}

body {
	height: 100%;
	margin: 3px 3px 3px 3px;
}
.clr {
	clear: both;
}
table.main{
	width:758px;
}
.outline {
  border: 1px solid #cccccc;
  background: #ffffff;
	padding: 2px;
}

#buttons_outer {
	width: 635px;
  	margin-bottom: 2px;
	margin-right: 2px;
	float: left;

}

#buttons_inner {
	border: 1px solid #cccccc;
	height: 21px;
}

#pathway_text {
  overflow: hidden;
	display: block;
	height: 25px;
	line-height: 25px !!important;
	line-height: 22px;
	padding-left: 4px;
	border: 1px solid #008C00;
	margin-bottom: 2px;
}

#pathway_text img {
	margin-left: 5px;
	margin-right: 5px;
	margin-top: 6px;
}

#buttons {
	float: left;
	margin: 0px;
	padding: 0px;
	width: auto;
}


ul#mainlevel-nav
{
	list-style: none;
	padding: 0;
	margin: 0;
	font-size: 0.8em;
}

ul#mainlevel-nav li
{
	background-image: none;
	padding-left: 4px;
	padding-right: 0px;
	float: left;
	font-size: 11px;
	line-height: 22px;
	white-space: nowrap;
	background-image:url(/img/topLinkPng.png);
	background-repeat:no-repeat;
	background-position:right top;
	height:22px;
}

ul#mainlevel-nav li a
{
	display: block;
	padding-left: 15px;
	padding-right: 15px;
	text-decoration: none;
	color:#FFFFFF;
	background: transparent;
}

#buttons>ul#mainlevel-nav li a { width: auto; }

	ul#mainlevel-nav li a:hover
{
	color:#00FF66;
}


#search_outer {
	float: left;
	width: 165px;
}

#search_inner {
  border: 1px solid #cccccc;
	padding: 0px;
  height: 21px !!important;
  height: 23px;
  overflow: hidden;
}

#search_inner form {
  padding: 0;
  margin: 0;
}

#search_inner .inputbox {
	border: 0px;
	padding: 3px 3px 3px 5px;
	font-family: arial, helvetica, sans-serif;
	font-size: 11px;
	color: #008C00;
}

#header_outer {
	text-align: left;
	border: 0px;
	margin: 0px;
}

#header {
	float: left;
	padding: 0px;
	margin-right: 2px;
	width: 635px;
	height: 150px;
	background: url(/img/headerShortJpg.jpg) no-repeat;
}

#top_outer{
	float: left;
	width: 165px;
}

#top_inner {
  border: 1px solid #cccccc;
	padding: 2px;
  height: 144px !!important;
  height: 150px;
  overflow: hidden;
  float: none !!important;
  float: left;
}

#left_outer {
  float: left;
	margin-top: 2px;
	width: 165px;
}

#left_inner {
  border: 1px solid #cccccc;
	padding: 2px;
  float: none !!important;
  float: left;
}

#content_outer {
	padding: 0px;
	margin-top: 0px;
	margin-left: 2px;
	/** border: 1px solid #cccccc; **/
	float: left;
	width: 635px;
}

#content_inner{
  float: none !!important;
  float: left;
  padding: 0;
  padding-top: 2px;
  margin: 0;
}

table.content_table {
  width: 100%;
	padding: 0px;
	margin: 0px;
}

table.content_table td {
	padding: 0px;
	margin: 0px;
}


#banner_inner {
	float: left;
	padding: 0px;
	height: 70px;
}

#poweredby_inner {
	float: right;
	padding: 0px;
	margin-left: 0px;
	height: 70px;
}

#right_outer {
	margin-left: 2px;
	width: 165px;
}

#right_inner {
  float: none !!important;
  float: left;
  border: 1px solid #cccccc;
  padding: 2px;
}


.user1_inner {
	border: 1px solid #cccccc;
  float: none !!important;
  float: left;
	margin: 0px;
	padding: 2px;
}

.user2_inner {
	border: 1px solid #cccccc;
  float: none !!important;
  float: left;
	margin: 0px;
	padding: 2px;
}

table td.body_outer {
	padding: 2px;
	border: 1px solid #cccccc;
}

.maintitle {
	color: #ffffff;
	font-size: 40px;
	padding-left: 15px;
	padding-top: 20px;
}

.error {
  font-style: italic;
  text-transform: uppercase;
  padding: 5px;
  color: #cccccc;
  font-size: 14px;
  font-weight: bold;
}

/** old stuff **/

div.back_button {
	float: left;
  text-align: center;
  font-size: 11px;
  font-weight: bold;
  border: 1px double #cccccc;
  width: auto;
  background: url(/img/bacBtnPng.png) repeat-x;
  padding: 0px 10px;
  line-height: 20px;
  margin: 1px;
  color:#006600;
}

.pagenav {
  text-align: center;
  font-size: 11px;
  font-weight: bold;
  border: 1px double #cccccc;
  width: auto;
  padding: 0px 10px;
  line-height: 20px;
  margin: 1px;
  color:#006600;
}

.pagenavbar {
	margin-right: 10px;
	float: right;
}

#footer {
	text-align: center;
	padding: 3px;
}

ul
{
margin: 0;
padding: 0;
list-style: none;
}

li
{
line-height: 15px;
padding-left: 15px;
padding-top: 0px;
background-image: url(/img/arrowPng.png);
background-repeat: no-repeat;
background-position: 0px 2px;
}


td {
	text-align: left;
	font-size: 11px;
}



body {
	padding: 0px;
	font-family: Arial, Helvetica, Sans Serif;
	line-height: 120%;
	font-size: 11px;
	color:#666666;
}

/* Joomla core stuff */
a:link, a:visited {
	color: #008C00; text-decoration: none;
	font-weight: bold;
}

a:hover {
	color:#008C00;	text-decoration: none;
	font-weight: bold;
}

table.contentpaneopen {
  width: 100%;
	border-collapse: collapse;
	border-spacing: 0px;
	margin: 0px;
}

table.contentpaneopen td {
   padding-right: 5px;

}

table.contentpaneopen td.componentheading {
	padding-left: 4px;
	
}



table.contentpane {
  width: 100%;
	padding: 0px;
	border-collapse: collapse;
	border-spacing: 0px;
	margin: 0px;
}

table.contentpane td {
	margin: 0px;
	padding: 0px;
}

table.contentpane td.componentheading {
	padding-left: 4px;
}

table.contentpaneopen fieldset {
	border: 0px;
	border-bottom: 1px solid #eee;
}

.button {
  color:#006600;
  font-family: verdana, Hevlvetica, sans-serif;
  text-align: center;
  font-size: 11px;
  font-weight: bold;
  border: 1px double #cccccc;
  width: auto;
  background: url(/img/buttonBgPng.png) repeat-x;
  background-position:bottom;
  padding: 0px 5px;
  line-height: 18px !!important;
  line-height: 16px;
  height: 26px !!important;
  height: 24px;
  margin: 1px;
}

.inputbox {
	padding: 2px;
	border:solid 1px #cccccc;
	background-color: #ffffff;
}

.componentheading {
	color: #008C00;
	text-align: left;
	padding-top: 13px;
	padding-left:10px;
	height: 22px;
	font-size: 18px;
	font-family:"Times New Roman", Times, serif;
	background-image:url(/img/bacContentPng.png);
	background-repeat:no-repeat;
	background-position:bottom left;

}

.contentcolumn {
	padding-right: 5px;
}

.contentheading {
	text-align: left;
	padding-top: 13px;
	padding-left:10px;
	height: 25px;
	color: #008C00;
	font-weight: bold;
	font-size: 13px;
	background-image:url(/img/bacContentPng.png);
	background-repeat:no-repeat;
	background-position:bottom left;
	padding-bottom:4px !!important;
	padding-bottom:0px;
}



.contentpagetitle {
	font-size: 13px;
	font-weight: bold;
	color: #cccccc;
	text-align:left;
}

table.searchinto {
	width: 100%;
}

table.searchintro td {
	font-weight: bold;
}

table.moduletable {
	width: 100%;
	margin-bottom: 5px;
	padding: 0px;
	border-spacing: 0px;
	border-collapse: collapse;
}

div.moduletable {
	margin-bottom: 0px;
	background-image:url(/img/botModPng.png);
	background-position:bottom;
	background-repeat:no-repeat;
	padding-bottom:20px;
	padding-left:7px;
}

table.moduletable th, div.moduletable h3 {
	background: url(/img/topModPng.png) no-repeat;
	background-position:bottom;
	color: #FFFFFF;
	text-align: left;
	padding-left: 12px;
	height: 34px;
	line-height: 34px;
	font-weight: bold;
	font-size: 12px;
	font-family:Verdana, Arial, Helvetica, sans-serif;
	margin-top:0px;
	margin-left:-7px;
	margin-bottom:0px;
}
table.moduletable td {
	font-size: 11px;
	margin: 0px;
	font-weight: normal;
}

table.pollstableborder {
  padding: 2px;
  width:96%;
}
moduletable-Banners {
	text-align:center;
}
.sectiontableheader {
  font-weight: bold;
  background-color:#CCCCCC;
  padding: 4px;
}

.sectiontablefooter {

}

.sectiontableentry1 {
	background-color:#EFEFEF;
}

.sectiontableentry2 {
	background-color:#F4F4F4;
}

.small {
	color: #008C00;
	font-size: 11px;
}

.createdate {
	height: 15px;
	padding-bottom: 10px;
	color: #999999;
	font-size: 11px;
}

.modifydate {
	height: 15px;
	padding-top: 10px;
	color: #999999;
	font-size: 11px;
}

table.contenttoc {
  border: 1px solid #cccccc;
  padding: 2px;
  margin-left: 2px;
  margin-bottom: 2px;
}

table.contenttoc td {
  padding: 2px;
}

table.contenttoc th {
  color: #008C00;
	text-align: left;
	padding-top: 2px;
	padding-left: 4px;
	height: 21px;
	font-weight: bold;
	font-size: 10px;
	text-transform: uppercase;
}

a.mainlevel:link, a.mainlevel:visited {
	display: block;
	background: url(/img/menuBgPng.png) no-repeat;
	vertical-align: middle;
	font-size: 11px;
	font-weight: bold;
	color:#008C00;
	text-align: left;
	padding-top: 5px;
	padding-left: 15px;
	height: 21px !!important;
	height: 26px;
	width: 100%;
	text-decoration: none;
}

a.mainlevel:hover {
	background-position: 0px -32px;
	text-decoration: none;
	color:#999999;
	text-align:left !!important;
	padding-right:20px;
}

a.mainlevel#active_menu {
	color:#FF0000;
	font-weight: bold;
	font-size:13px;
}

a.mainlevel#active_menu:hover {
	color: #999999;
}

a.sublevel:link, a.sublevel:visited {
	padding-left: 1px;
	vertical-align: middle;
	font-size: 11px;
	font-weight: bold;
	color: #008C00;
	text-align: left;
}

a.sublevel:hover {
	color: #008C00;
	text-decoration: none;
}

a.sublevel#active_menu {
	color: #333;
}

.highlight {
	background-color: Yellow;
	color: Blue;
	padding: 0;
}
.code {
	background-color: #ddd;
	border: 1px solid #bbb;
}

form {
/* removes space below form elements */
	margin: 0;
 	padding: 0;
	width:98%;
}

div.mosimage {
  border: 1px solid #cccccc;
}

.mosimage {
  border: 1px solid #cccccc;
  margin: 5px
}

.mosimage_caption {
  margin-top: 2px;
  background: #efefef;
  padding: 1px 2px;
  color: #666;
  font-size: 10px;
  border-top: 1px solid #cccccc;
}

span.article_seperator {
	display: block;
	height: 1.5em;
}
td.dot {
	height:5px;
}
table.top_menu{
	padding-top:4px;
}
td.tab{
	height:10px;
}
a.mostread, a.mostread:visited {
	color:#9A927D;
	font-weight:normal;
}
a.mostread:hover {
	color:#008C00;
	font-weight:normal;
}
a.latestnews, a.latestnews:visited {
	color:#9A927D;
	font-weight:normal;
}
a.latestnews:hover {
	color:#008C00;
	font-weight:normal;
}
li.latestnews-user{
	padding-left:20px !!important;
	padding-left:10px;
}
li.mostread-user{
	padding-left:20px !!important;
	padding-left:10px;
}
td.site_name {
	font-size:44px;
	padding-top:16px;
	padding-bottom:10px;
	font-weight:bold;
	color:#008C00;
}
td.site_desc {
	font-size:15px;
	font-weight:bold;
	color:#008C00;
}
table.box_table{
	background-color:#F7F7F7;
}
a.readon {
	display:block;
	border: 1px solid #cccccc;
	width:100px;
	color:#99CC33;
	padding-left:15px;
	background-color:#F4F4F4;
	padding-top:3px;
}
td.bac_module {
	background-image:url(/img/bacModPng.png);
}
td.bac_module2 {
	background-image:url(/img/bacModPng.png);
}
td.ver {
	text-align: center;
	font-size:18px;
	font-weight:bold;
	color:#FFFFFF;
	height:30px;
}
td.logo{
	background-image: url(/img/leftLogoJpg.jpg);
	background-repeat:no-repeat;
	background-position:left;
}
table.logo2 {
	background-image: url(/img/bacLogoJpg.jpg);
	height:219px;
}
td.logo3 {
	background-image: url(/img/logoJpg.jpg);
	background-repeat:no-repeat;
	background-position:right;
}
'! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
cssTabs1
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
cssTabs2
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
cssTabs3
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
cssTabs4
	^''! !

!JoomlaStyle methodsFor: 'styles-screen-no' stamp: ' 10/1/08 16:19'!
cssTabs5
	^''! !

!JoomlaStyle methodsFor: 'maintenance'!
importImages
	JoomlaStyle new importImagesFromDirectory: '/home/me//joomla-mitra/images'! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:28'!
indent1Png
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 16 0 0 0 13 2 3 0 0 0 221 213 6 183 0 0 0 3 115 66 73 84 8 8 8 219 225 79 224 0 0 0 9 80 76 84 69 255 255 255 153 153 153 102 102 102 131 74 186 71 0 0 0 9 112 72 89 115 0 0 10 240 0 0 10 240 1 66 172 52 152 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 55 47 50 54 47 48 52 131 188 17 75 0 0 0 37 116 69 88 116 83 111 102 116 119 97 114 101 0 77 97 99 114 111 109 101 100 105 97 32 70 105 114 101 119 111 114 107 115 32 77 88 32 50 48 48 52 135 118 172 207 0 0 0 28 73 68 65 84 120 156 99 96 192 15 24 151 0 9 182 72 32 193 25 6 35 192 92 176 4 16 0 0 54 118 2 199 200 145 236 116 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:28'!
indent2Png
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 21 0 0 0 13 4 3 0 0 0 180 188 56 83 0 0 0 3 115 66 73 84 8 8 8 219 225 79 224 0 0 0 27 80 76 84 69 255 255 255 198 198 198 197 197 197 129 129 129 128 128 128 124 124 124 110 110 110 107 107 107 106 106 106 39 121 4 106 0 0 0 9 112 72 89 115 0 0 10 240 0 0 10 240 1 66 172 52 152 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 55 47 50 54 47 48 52 131 188 17 75 0 0 0 37 116 69 88 116 83 111 102 116 119 97 114 101 0 77 97 99 114 111 109 101 100 105 97 32 70 105 114 101 119 111 114 107 115 32 77 88 32 50 48 48 52 135 118 172 207 0 0 0 29 73 68 65 84 120 156 99 96 160 42 96 74 19 128 179 57 140 11 16 108 83 4 155 17 73 13 94 0 0 131 203 2 72 7 76 171 50 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:28'!
indent3Png
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 26 0 0 0 13 4 3 0 0 0 69 183 99 222 0 0 0 3 115 66 73 84 8 8 8 219 225 79 224 0 0 0 27 80 76 84 69 255 255 255 198 198 198 197 197 197 129 129 129 128 128 128 124 124 124 110 110 110 107 107 107 106 106 106 39 121 4 106 0 0 0 9 112 72 89 115 0 0 10 240 0 0 10 240 1 66 172 52 152 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 55 47 50 54 47 48 52 131 188 17 75 0 0 0 37 116 69 88 116 83 111 102 116 119 97 114 101 0 77 97 99 114 111 109 101 100 105 97 32 70 105 114 101 119 111 114 107 115 32 77 88 32 50 48 48 52 135 118 172 207 0 0 0 27 73 68 65 84 120 156 99 96 160 37 80 75 68 230 53 155 163 240 194 145 121 98 40 42 9 1 0 172 12 2 147 242 226 65 233 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:29'!
indent4Png
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 31 0 0 0 13 4 3 0 0 0 163 158 168 154 0 0 0 3 115 66 73 84 8 8 8 219 225 79 224 0 0 0 27 80 76 84 69 255 255 255 198 198 198 197 197 197 129 129 129 128 128 128 124 124 124 110 110 110 107 107 107 106 106 106 39 121 4 106 0 0 0 9 112 72 89 115 0 0 10 240 0 0 10 240 1 66 172 52 152 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 55 47 50 54 47 48 52 131 188 17 75 0 0 0 37 116 69 88 116 83 111 102 116 119 97 114 101 0 77 97 99 114 111 109 101 100 105 97 32 70 105 114 101 119 111 114 107 115 32 77 88 32 50 48 48 52 135 118 172 207 0 0 0 30 73 68 65 84 120 156 99 96 160 55 96 74 19 64 21 224 48 46 64 19 48 69 19 96 68 215 66 36 0 0 183 76 2 72 234 160 51 137 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaCenterWith: aWebElement
	| e |
	e := WebElement new.
	e table width: 1; cellPadding: 0; cellSpacing: 0.
	e cell width: 5; valign: #top; style: 'background-image: url(/img/leftPng.png); height: 664px'.
	e cell addPng: #topLeftPng.
	e newCell valign: #top; style: 'background-image: url(/img/topPng.png); background-repeat: repeat-x; background-position: top; height: 664px'.
	e cell add: aWebElement.
	e newCell width: 4; valign: #top; style: 'background-image: url(/img/rightPng.png); height: 664px'.
	e cell addPng: #topRightPng. 
	e newRow.
	e cell width: 5; addPng: #botLeftPng.
	e newCell style: 'background-image: url(/img/botPng.png)'; addPng: #botPng.
	e newCell width: 4; addPng: #botRightPng. 
	^e! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaFooterElement
	| e |
	e := WebElement new.
	e table width: 0.99; cellPadding: 0; cellSpacing: 0; 
		style: 'background-image: url(/img/bacFooterPng.png)'.
	e cell width: 12; addPng: #leftFooterPng.
	e newCell add: 
		(WebElement new align: #center; addTextSmall: '(c)  2007 Z^upnija Sv.Franc^is^ka Asis^kega'). 
	e newCell width: 12; addPng: #rightFooterPng. 
	^e! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaHeaderElement
	| e |
	e := WebElement new.
	e table class: #logo2; width: 1; cellPadding: 0; cellSpacing: 0.
	e cell class: #logo; width: 133; valign: #bottom.
	e cell table width: 130; cellPadding: 0; cellSpacing: 0.
	e cell newRow; newRow.
	e newCell valign: #top.
	e newCell class: #logo3; width: 0.7; align: #right.
	e cell table width: 705; style: 'height:: 217px'; cellPadding: 0; cellSpacing: 0.
	e cell cell table width: 1; cellPadding: 0; cellSpacing: 0.
	e cell cell cell style: 'height: 25px'; addNbSp.
	e cell cell newCell width: 197; style: 'height: 25px'; addNbSp.
	e cell cell newCell width: 8; style: 'height: 25px'; addNbSp.
	e cell cell newRow.
	e cell cell cell style: 'height: 25px'; addNbSp.
	e cell cell newCell width: 197; style: 'height: 25px'; addNbSp. "here add 'user4' !!" 
	e cell cell newCell width: 8; style: 'height: 25px'; addNbSp.
	e cell newCell valign: #top.
	e cell cell table width: 1; style: 'height: 163px'; cellPadding: 0; cellSpacing: 0.
	e cell cell cell width: 219; addNbSp.
	e cell cell newCell addNbSp.
	e cell cell newRow.
	e cell cell cell width: 219; addNbSp.
	e cell cell newCell width: 486; style: 'height: 66px'; addNbSp. "here add 'banner'"
	^e! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaLeftElement
	| e |
	e := WebElement new.
	e table width: 1; cellSpacing: 0; cellPadding: 0.
	e cell class: #'bac_module'.
	e cell add: self menuElement.
	e newTable width: 1; cellSpacing: 0; cellPadding: 0.
	e cell class: #'bac_module'.
	e cell add: self leftBottomElement.
	^e! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaRightElement
	| e |
	e := WebElement new.
	e table width: 1; cellSpacing: 0; cellPadding: 0.
	e cell class: #'bac_module'.
	e cell add: self rightTopElement.
	^e! !

!JoomlaStyle methodsFor: 'layout-joomla'!
joomlaToolbarElement
	| e |
	e := WebElement new.
	e table width: 1; cellPadding: 0; cellSpacing: 0; 
		style: 'background-image: url(/img/topLinkBacPng.png)'.
	e cell width: 133; addJpeg: #leftTopLinkJpg.
	e newCell addNbSp.  "here add 'user3' "
	e newCell width: 11; addPng: #rightTopLinkPng. 
	^e! !

!JoomlaStyle methodsFor: 'layout-general'!
leftBottomElement
	"just for example, override in your own style subclass!! "
 	| e |
	e := JoomlaModule new.
	^e! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'np 4/3/2008 00:01'!
leftFooterPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 12 0 0 0 26 8 2 0 0 1 123 159 26 160 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 1 72 73 68 65 84 120 156 181 82 201 106 133 80 12 117 184 136 232 194 157 40 184 82 255 65 255 255 75 92 9 186 113 22 103 123 242 34 87 91 94 105 161 52 32 102 60 57 73 174 56 207 243 56 14 129 79 211 52 177 109 219 178 44 66 81 20 1 65 76 144 105 24 198 203 5 187 105 154 105 154 200 235 56 14 85 40 47 209 117 157 162 208 214 117 37 176 44 203 130 32 16 101 89 134 97 216 117 157 64 161 231 121 212 234 174 96 237 70 33 141 81 144 135 54 195 48 92 108 198 113 204 243 60 138 34 203 178 136 9 186 192 142 227 24 6 82 136 18 10 247 125 103 160 121 158 85 85 189 80 37 54 21 190 113 113 71 8 35 208 208 108 163 9 24 0 155 102 98 212 186 174 251 190 199 32 182 109 11 36 183 109 139 32 120 113 5 237 5 46 182 1 4 157 92 200 231 56 22 65 188 80 136 237 201 166 223 240 122 186 80 245 87 23 95 248 118 201 177 37 15 100 236 15 185 111 197 213 24 148 87 141 61 64 225 85 93 219 194 15 79 7 49 28 10 67 154 166 233 186 46 158 141 172 167 118 0 64 184 170 170 162 40 146 36 97 30 178 59 86 77 139 1 50 158 10 206 156 166 233 147 31 194 232 112 35 33 207 247 253 183 25 87 18 79 244 36 193 115 200 190 159 22 245 69 126 78 122 210 255 143 36 121 47 150 167 254 43 164 15 27 72 43 211 254 118 143 210 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:29'!
leftLogo1Jpg
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 219 0 67 0 3 2 2 3 2 2 3 3 3 3 4 3 3 4 5 8 5 5 4 4 5 10 7 7 6 8 12 10 12 12 11 10 11 11 13 14 18 16 13 14 17 14 11 11 16 22 16 17 19 20 21 21 21 12 15 23 24 22 20 24 18 20 21 20 255 219 0 67 1 3 4 4 5 4 5 9 5 5 9 20 13 11 13 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 255 194 0 17 8 0 219 0 133 3 1 34 0 2 17 1 3 17 1 255 196 0 28 0 0 2 2 3 1 1 0 0 0 0 0 0 0 0 0 0 0 6 1 4 2 3 5 7 8 255 196 0 27 1 0 1 5 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 3 4 5 6 2 7 255 218 0 12 3 1 0 2 16 3 16 0 0 1 250 167 86 197 246 142 216 154 85 163 144 154 3 144 154 3 144 154 3 144 154 3 144 154 3 144 154 3 144 152 32 240 178 204 181 48 90 36 194 115 4 129 4 129 4 129 4 129 4 129 17 34 44 0 137 233 107 76 171 91 222 150 192 194 114 0 0 0 0 0 0 0 4 76 33 137 34 30 150 178 204 179 189 233 110 98 112 156 192 1 36 72 0 1 18 0 0 64 66 0 8 122 90 203 50 206 247 165 176 48 124 128 0 0 0 0 0 0 1 140 194 0 8 122 98 203 50 206 251 165 162 12 23 50 64 132 144 41 36 8 19 0 19 140 128 16 1 2 47 167 44 51 172 111 149 100 131 3 204 144 4 144 4 144 4 144 4 144 4 226 66 18 64 135 168 43 180 43 122 7 75 17 137 231 188 230 96 6 81 83 165 44 175 151 109 113 245 177 58 230 181 50 49 3 40 128 3 17 23 213 85 90 149 125 9 85 53 214 100 200 46 141 254 101 170 116 255 0 88 76 93 185 18 108 122 58 63 66 173 230 186 180 250 238 85 243 121 207 138 242 34 80 49 43 153 147 17 15 88 83 107 70 244 158 184 20 219 148 105 102 168 221 104 179 10 122 213 222 237 216 103 19 161 208 219 87 206 187 240 67 102 206 84 246 88 54 155 179 180 186 229 109 131 18 10 122 15 13 133 23 210 230 40 216 177 111 33 111 94 229 139 176 23 77 237 183 106 90 215 123 60 170 219 198 166 85 31 93 116 246 83 183 119 161 189 89 183 83 13 72 12 149 95 167 46 49 174 122 100 181 123 188 22 124 5 198 203 155 109 199 143 174 230 113 92 220 84 202 172 133 194 174 117 45 93 215 206 174 177 34 85 223 69 243 103 233 149 220 18 12 173 79 165 43 53 46 111 231 172 116 167 165 227 86 251 122 213 53 68 143 209 173 199 231 222 175 123 159 193 231 220 189 215 224 104 165 58 73 78 41 74 235 63 105 240 239 117 185 169 81 53 24 106 95 101 231 118 53 251 39 107 245 122 220 143 28 179 213 207 207 157 148 157 143 63 46 125 251 248 208 202 141 227 184 211 202 156 243 28 232 251 61 180 94 207 33 158 253 230 121 20 122 42 219 255 196 0 36 16 0 2 2 2 2 3 1 1 0 3 1 0 0 0 0 0 0 2 3 19 1 4 5 18 16 17 21 6 20 34 35 50 33 255 218 0 8 1 1 0 1 5 2 45 92 23 41 114 151 41 114 151 41 114 151 41 114 151 41 114 151 41 114 151 41 114 151 47 141 153 191 158 15 166 199 211 99 233 177 244 216 250 108 125 54 62 155 31 77 143 166 199 211 99 233 177 244 216 250 140 125 70 62 163 120 223 207 173 91 11 11 11 11 11 11 11 11 11 11 11 11 11 14 254 55 243 235 86 194 194 194 194 194 194 194 194 194 194 194 194 194 194 207 27 249 245 171 97 97 97 97 97 97 97 97 97 97 97 97 97 97 103 141 252 250 213 176 176 176 176 176 176 176 176 176 176 176 176 176 176 239 227 127 62 181 108 44 44 44 44 44 44 44 44 44 44 44 44 44 44 241 191 159 90 182 22 22 22 22 22 22 22 22 22 22 22 22 22 22 120 223 207 173 91 11 11 11 11 11 11 11 11 11 11 11 11 11 11 60 111 231 214 173 133 133 133 133 133 133 133 133 133 133 133 133 133 133 158 55 243 235 86 194 194 194 194 194 194 194 194 194 194 194 194 194 194 207 28 134 125 106 88 88 88 88 88 88 88 88 88 88 88 88 88 88 89 227 144 207 173 75 11 11 11 11 11 11 11 11 11 11 11 11 11 14 254 57 12 250 212 176 176 176 176 176 176 176 176 176 176 176 176 176 238 89 227 145 207 173 78 231 115 185 220 238 89 232 196 216 201 220 238 119 59 157 206 231 115 191 142 75 62 181 59 157 206 231 114 93 197 140 212 226 118 119 199 225 53 166 73 115 54 147 226 95 103 115 185 220 238 119 59 248 228 179 235 79 185 172 155 91 249 199 9 200 49 143 206 236 177 78 143 2 188 151 61 179 200 154 175 38 180 154 124 218 109 71 47 231 251 103 60 30 254 12 241 92 146 145 205 150 199 115 185 223 199 39 159 90 123 51 244 143 106 108 240 31 158 207 49 200 72 95 60 134 19 216 177 137 16 145 17 118 66 57 102 193 171 59 217 203 195 252 156 135 115 177 219 199 41 159 90 124 116 95 67 147 253 102 231 244 239 164 98 198 44 98 70 34 17 167 177 35 35 67 63 226 114 48 255 0 127 27 28 189 215 177 216 108 225 113 182 178 242 171 177 181 173 249 221 109 25 219 249 106 138 69 153 117 48 242 172 8 77 86 34 133 22 88 164 107 19 61 113 35 103 10 143 152 251 233 238 81 158 75 135 204 100 115 226 76 118 39 195 236 236 114 124 180 124 106 103 180 140 177 139 24 145 137 24 145 136 130 161 156 250 25 134 97 152 213 228 91 81 185 78 58 61 141 116 127 107 55 250 247 63 65 173 211 144 88 197 65 35 18 49 99 21 5 67 57 25 134 97 178 54 73 230 196 75 178 217 214 252 238 51 235 28 130 255 0 167 244 95 251 171 30 48 248 88 197 65 80 84 21 76 228 102 27 35 100 108 147 206 177 97 114 219 155 95 162 126 167 179 145 126 186 255 0 160 205 60 102 190 90 44 193 34 200 42 10 134 23 208 217 27 35 100 108 141 147 99 125 84 150 92 190 120 189 140 67 201 254 133 114 155 254 205 191 246 108 254 137 251 237 36 98 70 67 150 81 100 199 172 204 163 76 163 78 132 155 145 169 47 34 79 178 242 140 195 49 153 61 103 150 111 236 225 125 159 243 191 203 105 73 141 132 140 72 197 94 163 184 238 59 142 227 184 238 51 12 195 57 28 114 108 203 252 255 0 55 243 9 255 0 18 196 178 174 29 181 201 248 252 41 140 117 195 184 238 59 142 227 184 238 51 12 227 57 167 167 55 37 177 198 241 16 254 127 95 99 142 228 119 165 248 219 158 36 92 50 232 103 252 166 255 0 183 31 35 143 145 198 24 97 143 194 162 227 142 215 92 74 213 169 90 159 255 196 0 38 17 0 2 2 1 3 3 3 5 0 0 0 0 0 0 0 0 0 1 2 3 17 4 16 19 18 33 49 32 81 97 34 35 51 65 80 255 218 0 8 1 3 1 1 63 1 51 190 127 191 140 122 163 23 39 132 45 27 253 178 173 52 43 239 229 150 215 11 23 212 61 39 179 44 173 214 241 232 162 46 63 115 7 55 192 175 207 132 74 236 63 7 55 193 53 203 30 203 122 34 165 60 61 178 57 25 16 141 84 18 93 91 81 249 81 40 184 142 70 68 34 21 251 154 255 0 49 91 105 113 201 220 108 113 76 85 33 82 136 194 49 219 93 142 149 189 22 57 246 98 66 91 223 103 20 58 137 73 205 230 70 15 255 196 0 51 17 0 1 4 1 0 8 2 7 9 0 0 0 0 0 0 0 1 0 2 3 4 17 5 18 21 33 49 52 65 97 48 113 6 16 20 50 209 240 241 19 22 34 81 82 129 145 161 193 255 218 0 8 1 2 1 1 63 1 146 65 19 11 221 209 109 90 253 214 213 175 221 109 90 253 214 213 175 221 109 90 253 214 213 175 221 109 90 253 214 214 175 221 93 229 223 224 221 229 223 224 221 229 223 224 221 229 223 224 222 229 159 224 222 229 159 224 223 229 158 178 178 160 175 37 131 134 5 61 25 96 26 220 71 171 43 43 42 255 0 42 255 0 37 66 187 102 46 124 158 232 69 212 153 194 60 254 234 197 231 57 191 103 24 213 106 142 252 181 15 224 59 191 46 137 218 98 137 223 36 31 193 65 213 174 214 54 42 130 53 78 8 43 43 42 227 12 144 57 141 226 83 98 108 17 123 54 119 241 63 4 250 135 25 214 10 106 122 141 113 47 27 151 176 137 152 28 217 6 255 0 147 243 213 59 66 185 224 145 40 250 45 27 0 209 115 24 229 120 44 147 113 199 78 191 234 181 85 245 157 135 112 89 87 36 124 113 101 137 229 72 229 43 147 178 226 162 174 162 174 170 157 104 95 20 187 218 6 124 150 86 144 33 181 94 74 22 216 253 221 84 142 68 23 40 224 81 192 181 131 119 53 12 182 140 174 28 78 22 86 159 50 10 71 80 121 249 41 167 76 187 56 56 105 220 161 185 39 86 133 29 137 15 68 11 221 239 20 198 40 35 204 50 180 240 199 171 138 244 171 69 69 78 70 77 6 224 252 238 248 40 98 10 24 130 141 128 38 53 85 128 74 240 210 172 80 142 203 4 101 196 55 183 209 125 223 171 250 157 253 124 23 255 196 0 59 16 0 0 5 2 2 6 8 4 5 3 5 0 0 0 0 0 0 1 50 162 226 2 3 17 49 4 16 18 33 65 81 19 34 35 113 146 161 210 225 48 82 97 129 20 51 66 145 193 32 114 177 36 67 98 131 209 255 218 0 8 1 1 0 6 63 2 25 140 198 99 49 152 204 102 51 25 140 198 99 49 152 204 102 51 212 117 145 80 103 183 135 92 190 157 225 54 60 37 234 9 177 225 47 80 77 143 9 122 130 108 120 75 212 19 99 194 94 160 155 30 18 245 4 216 240 151 168 38 199 132 189 65 54 60 37 234 9 177 225 47 80 77 143 9 122 130 108 120 75 212 19 99 194 94 160 155 30 18 245 4 216 240 151 171 86 120 118 156 240 225 222 65 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 233 106 207 14 211 158 28 59 200 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 221 61 89 225 218 115 195 135 121 5 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 231 171 60 59 78 120 112 239 32 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 245 103 135 105 207 14 29 228 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 110 150 172 240 237 57 225 195 188 130 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 210 213 158 29 167 60 56 119 144 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 249 133 190 97 111 152 91 230 22 233 133 186 90 179 195 180 231 135 14 242 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 223 48 183 204 45 243 11 124 194 221 32 183 75 86 120 118 156 254 157 228 22 249 133 190 97 110 152 91 230 22 249 133 190 97 111 152 91 230 22 233 133 190 97 111 152 91 230 22 233 133 186 65 110 150 172 240 237 57 253 59 200 45 210 11 116 130 221 32 183 72 45 210 11 116 130 223 32 183 72 45 210 11 116 130 221 32 183 72 45 210 11 116 130 221 45 89 225 218 243 250 119 144 91 164 22 233 5 186 65 110 144 91 164 22 233 5 186 65 110 144 91 164 22 233 5 186 65 110 144 91 164 22 233 5 186 90 179 195 181 231 244 239 11 116 130 221 32 183 72 45 210 11 116 130 221 32 183 72 45 210 11 116 130 221 32 183 72 45 210 11 116 130 221 32 167 75 86 120 118 188 254 157 225 78 144 83 164 20 233 5 58 65 78 144 91 164 55 86 233 5 58 65 78 144 83 164 20 233 5 58 65 78 144 83 164 20 233 106 207 14 215 248 10 116 130 157 32 167 72 41 210 10 196 255 0 186 67 110 245 85 88 179 247 196 252 199 250 45 35 11 148 231 218 29 69 247 222 54 52 154 78 142 85 99 184 220 22 233 5 58 65 78 144 83 164 20 233 5 58 65 78 150 174 93 175 240 20 233 10 255 0 15 78 52 210 120 25 157 94 227 125 219 116 253 234 29 109 48 139 184 143 255 0 71 73 126 231 77 127 134 59 207 236 64 233 46 198 207 203 79 30 240 85 218 168 232 171 153 14 135 77 160 183 254 174 3 107 68 210 118 104 62 21 98 127 200 221 126 221 95 122 134 84 213 221 95 184 222 120 84 91 140 177 144 83 164 20 233 5 121 203 87 253 191 192 62 183 159 184 45 147 195 72 175 143 252 140 117 180 187 191 99 192 117 175 92 171 190 175 233 221 81 151 113 143 204 171 247 5 183 86 36 54 203 117 23 183 231 199 247 10 243 247 10 243 247 25 249 251 234 229 218 255 0 2 221 56 227 110 223 90 173 254 224 172 145 245 45 110 251 252 35 58 127 50 142 177 2 61 175 63 113 159 159 184 207 207 220 98 99 160 177 186 158 147 26 171 229 184 116 54 11 111 72 62 127 228 198 148 116 95 166 198 151 93 194 171 110 186 182 113 167 232 98 138 238 221 179 93 221 139 189 41 157 226 196 207 244 247 139 133 77 22 182 58 98 160 142 147 51 61 140 55 158 98 249 209 69 154 182 75 179 44 115 222 92 171 62 29 194 171 86 186 61 154 110 226 93 109 248 96 95 95 176 232 110 214 84 21 53 109 82 103 203 245 16 174 231 251 181 25 245 79 129 97 187 245 16 168 136 169 217 218 34 42 182 183 97 226 29 90 169 174 189 146 85 120 23 31 168 164 169 50 58 79 111 26 140 247 151 33 133 105 48 122 70 135 214 164 247 157 178 63 240 51 223 223 238 51 243 247 29 22 214 205 56 98 99 240 218 41 118 188 79 229 7 85 71 181 81 230 103 241 62 107 124 133 90 118 141 86 197 69 78 209 242 168 17 227 231 238 45 85 207 112 219 225 89 99 241 113 20 82 106 172 136 191 113 159 159 184 218 44 233 222 44 105 24 98 88 224 127 113 137 111 47 135 137 139 116 124 213 17 13 26 193 127 118 163 250 139 86 120 153 144 220 57 31 193 194 142 177 243 24 153 226 52 106 170 203 108 133 154 248 85 70 26 172 219 250 226 45 209 242 211 143 244 111 25 133 16 81 12 241 29 90 127 113 188 245 226 52 93 40 184 108 213 251 234 218 172 240 221 129 10 175 42 138 188 190 45 54 173 82 117 220 171 34 33 248 109 38 178 233 54 12 190 249 145 2 24 24 216 187 214 183 243 13 187 91 233 229 240 202 205 138 118 170 63 33 141 20 254 35 75 168 179 231 236 58 91 214 247 240 167 104 176 33 249 46 45 71 136 187 79 233 44 136 85 240 175 215 135 92 238 97 143 216 85 93 125 106 185 140 134 67 255 196 0 40 16 0 1 3 3 2 5 5 1 1 0 0 0 0 0 0 0 1 0 17 33 49 65 97 81 113 16 32 64 129 161 145 177 193 225 240 48 209 255 218 0 8 1 1 0 1 63 33 68 166 41 134 176 214 26 195 88 107 13 97 172 53 134 176 214 26 195 88 107 13 97 163 66 158 4 206 3 27 131 160 199 143 30 60 120 241 227 199 143 30 52 104 208 154 20 238 119 125 0 0 0 0 1 0 1 0 44 208 167 115 187 252 14 253 2 34 34 34 34 0 32 1 26 20 238 119 127 129 223 160 204 204 204 204 196 68 0 3 66 157 206 239 240 59 244 24 153 153 153 153 153 136 144 104 83 185 221 244 0 192 196 0 0 4 0 0 51 66 159 206 239 160 2 4 36 0 68 64 68 65 154 20 254 119 127 212 25 25 16 24 0 9 135 138 17 154 20 254 119 125 0 48 2 34 34 34 34 0 204 208 167 243 187 135 64 0 8 0 2 40 32 8 204 208 167 99 185 135 64 12 204 204 196 204 204 204 204 208 167 99 224 58 0 102 102 102 102 102 102 103 102 133 63 31 1 118 29 1 153 153 153 153 153 153 219 154 21 47 224 46 195 155 255 0 255 0 203 78 83 184 191 199 255 0 255 0 253 204 52 42 95 212 53 217 28 185 153 128 123 64 16 207 84 216 150 94 196 77 106 176 209 240 33 194 45 71 96 160 133 195 185 204 204 204 131 66 175 93 198 187 33 22 132 25 226 56 161 215 222 70 249 94 74 122 135 97 170 57 220 141 209 18 201 47 78 226 2 27 113 59 142 136 203 113 100 75 179 188 30 196 39 182 129 242 169 59 243 229 12 1 140 113 73 228 0 17 161 87 6 220 215 100 40 52 140 5 233 65 234 34 66 103 64 191 42 91 35 229 194 81 201 204 156 240 240 44 73 176 2 246 56 38 102 16 241 40 238 4 45 0 47 179 144 239 205 10 159 126 227 93 144 164 214 178 82 151 93 6 29 97 169 215 129 137 99 82 33 187 66 13 19 195 1 163 20 64 33 109 41 53 21 240 134 51 139 255 0 57 35 4 232 26 120 160 36 34 87 46 114 250 159 8 2 27 64 235 129 51 41 165 211 136 102 99 54 53 16 135 65 211 137 17 220 70 180 164 41 51 71 0 136 215 6 170 246 32 2 58 176 231 142 226 233 125 131 186 106 2 27 105 123 181 25 67 50 4 17 70 152 1 240 188 161 28 240 24 133 206 8 61 109 165 16 195 0 44 74 238 111 68 60 39 245 103 60 3 61 117 18 131 186 56 41 217 153 76 61 229 225 68 26 21 28 4 109 89 184 187 97 17 140 205 143 244 80 18 196 189 65 254 4 3 140 24 114 116 212 50 87 78 201 236 128 57 0 21 239 9 204 168 35 31 159 186 120 0 193 247 83 148 67 23 13 164 223 45 121 137 86 195 85 3 29 250 110 124 58 104 8 24 222 12 76 4 199 176 4 34 87 57 111 217 9 190 81 87 155 54 26 163 146 72 145 221 5 209 128 114 24 16 62 86 255 0 63 105 132 43 4 215 209 61 2 124 83 112 128 15 72 241 225 85 202 170 48 9 37 130 121 246 0 69 174 138 151 80 23 204 35 64 152 205 193 251 91 188 253 172 104 189 176 148 213 209 230 231 141 50 7 113 161 66 56 25 99 247 95 102 67 255 0 186 248 104 38 223 214 74 166 70 150 227 230 16 22 32 184 67 153 151 7 0 199 203 32 241 95 63 104 176 152 38 154 58 61 104 36 120 158 52 0 115 252 159 211 227 177 70 171 42 212 227 49 169 146 6 209 232 140 201 86 71 67 116 118 191 0 165 183 87 129 150 91 100 30 34 215 225 213 85 57 58 45 154 237 3 82 108 17 141 72 11 2 90 7 162 74 93 147 110 130 87 225 254 252 0 64 225 18 92 163 2 128 5 28 163 40 200 202 52 162 40 204 163 70 81 148 19 131 130 188 128 13 238 130 211 166 165 142 177 215 255 218 0 12 3 1 0 2 0 3 0 0 0 16 184 195 12 32 195 0 63 176 253 228 28 121 104 26 247 207 191 255 0 254 60 127 167 210 195 76 59 241 245 29 243 207 60 223 54 147 127 52 185 235 132 14 193 4 16 65 5 208 109 120 254 81 159 254 124 228 235 227 208 146 168 3 122 38 39 111 77 108 51 187 64 95 41 142 128 6 0 79 159 178 98 114 242 233 220 89 43 142 59 165 5 36 94 149 144 223 255 196 0 35 17 1 0 2 2 2 2 1 5 1 0 0 0 0 0 0 0 1 0 17 33 49 16 48 65 113 81 32 97 129 161 240 241 255 218 0 8 1 3 1 1 63 16 148 150 75 37 37 146 201 100 184 235 165 215 75 174 151 93 46 186 93 116 186 228 204 82 167 233 117 9 238 98 244 204 195 248 251 74 80 207 207 152 195 27 3 150 27 111 79 207 159 80 55 66 127 218 150 129 115 17 7 79 226 55 106 209 221 75 34 35 79 38 76 70 188 13 224 130 29 37 43 94 248 42 39 204 212 100 224 109 4 17 28 226 68 208 213 112 201 85 97 175 124 104 234 43 204 243 153 160 34 203 242 230 255 0 92 156 248 249 160 162 49 80 22 198 141 107 41 63 255 196 0 39 17 0 2 1 2 5 4 3 0 3 0 0 0 0 0 0 0 1 17 0 33 49 16 65 97 113 161 81 129 145 225 32 177 240 193 209 241 255 218 0 8 1 2 1 1 63 16 181 149 69 77 47 15 115 75 195 220 210 240 247 52 188 61 205 47 15 115 75 195 220 253 7 185 249 15 115 141 243 56 113 190 103 14 55 204 225 198 142 56 227 143 3 135 6 56 227 142 56 225 49 206 12 113 199 28 113 194 99 156 60 74 183 107 144 142 193 170 42 35 192 113 41 184 165 149 192 151 7 114 125 77 136 161 158 231 56 88 107 46 85 46 223 200 172 48 192 57 216 236 10 150 175 0 48 197 13 29 63 101 136 63 88 16 129 3 93 148 104 40 21 12 247 140 12 67 91 217 235 177 214 29 238 6 131 36 221 125 29 169 214 38 113 6 1 161 165 166 183 5 46 130 232 165 42 18 70 117 36 65 65 51 106 32 65 235 4 221 9 200 144 64 0 54 216 237 83 210 35 140 172 69 136 211 1 145 149 81 61 4 109 76 93 176 69 33 25 113 44 82 92 121 131 205 146 57 58 195 84 40 201 7 221 211 153 80 149 246 219 0 234 19 78 8 101 8 119 15 18 247 136 7 103 248 96 106 228 49 70 65 86 116 96 75 213 149 243 232 53 135 128 231 159 238 45 66 60 193 56 5 174 153 212 217 139 66 81 80 128 8 202 216 6 200 8 69 244 2 237 150 84 160 164 148 144 100 4 51 72 94 12 34 200 128 7 118 68 249 159 236 71 255 196 0 41 16 1 0 2 1 3 4 2 2 2 3 1 1 0 0 0 0 1 0 17 33 49 65 113 16 81 97 161 129 193 32 145 48 177 209 240 241 64 225 255 218 0 8 1 1 0 1 63 16 140 2 39 254 4 68 68 68 68 68 68 68 245 162 224 64 133 100 209 220 157 251 227 115 249 224 193 130 6 8 24 48 96 193 3 4 9 14 94 180 222 200 156 174 47 238 120 220 234 136 151 235 51 30 184 25 167 164 198 231 64 143 68 191 90 110 68 78 87 23 247 56 220 233 51 88 107 13 97 175 224 102 102 189 110 203 209 17 141 235 77 216 137 202 226 254 231 27 159 200 34 102 34 34 51 114 223 164 198 172 158 180 221 136 156 174 47 213 110 55 63 144 232 204 204 136 136 137 144 152 18 201 235 77 248 137 202 226 254 231 141 207 225 12 8 204 204 195 172 102 57 200 244 195 245 166 230 68 229 113 127 115 198 225 32 198 70 33 210 16 215 214 98 106 147 71 89 136 196 109 210 31 173 55 50 39 43 139 251 158 55 32 104 252 96 34 102 16 95 164 205 50 94 255 0 0 8 230 211 250 211 119 34 114 56 191 185 227 115 71 81 153 78 145 8 148 146 146 106 147 71 72 148 145 61 99 159 173 59 89 78 79 23 246 124 110 105 144 252 51 179 53 244 152 210 78 89 105 147 87 73 142 115 48 216 126 180 236 71 57 60 95 217 241 185 166 123 78 126 46 238 234 218 115 161 251 156 227 233 221 232 103 235 77 232 65 126 94 255 0 103 199 105 124 211 230 159 55 78 249 167 94 233 243 79 154 122 117 79 154 60 211 101 176 115 131 214 155 216 130 253 183 219 241 219 241 17 17 30 79 207 17 17 25 96 55 131 9 61 105 113 177 23 237 190 223 142 211 31 60 15 60 30 153 135 128 157 216 63 66 188 67 158 25 200 244 204 231 131 25 83 243 207 214 150 59 9 126 251 239 248 237 126 233 222 59 198 203 169 45 112 162 175 108 75 76 45 21 227 23 7 151 245 20 110 216 132 108 11 46 43 136 181 51 73 205 160 191 238 15 164 123 78 241 218 59 247 77 134 249 34 249 99 235 75 199 106 95 186 251 254 37 162 226 102 13 32 134 128 139 173 119 143 236 155 231 236 180 253 73 156 183 223 137 103 152 91 74 242 163 153 249 138 89 144 109 95 181 224 162 105 197 90 86 118 77 207 12 163 0 92 95 207 168 188 158 161 199 26 135 252 38 60 55 204 23 247 81 246 81 237 127 166 39 179 173 16 105 30 81 152 244 66 245 165 251 183 47 221 125 223 17 156 142 48 106 178 30 226 6 236 0 155 210 223 66 39 146 58 138 63 84 150 153 253 126 233 151 133 109 213 204 198 37 201 21 84 14 212 194 15 80 192 41 236 182 107 91 44 112 236 220 185 86 107 1 131 161 156 58 110 203 70 244 191 245 160 58 170 185 247 95 103 196 162 52 14 131 108 26 212 166 221 224 2 109 173 140 175 212 163 225 130 213 19 25 20 16 105 40 190 211 95 88 212 222 29 104 30 32 81 137 171 168 214 179 82 149 130 110 70 190 58 201 29 182 19 91 111 188 206 66 178 109 135 162 0 184 1 181 139 243 168 146 248 92 37 185 40 255 0 176 144 53 132 81 229 7 111 250 136 74 7 89 218 88 55 81 121 42 38 211 153 4 158 18 55 49 78 72 44 195 40 165 55 97 162 136 161 145 15 216 139 161 22 215 101 97 234 238 7 39 72 86 203 61 219 80 208 226 198 1 228 185 3 0 189 195 65 151 132 99 77 10 184 170 28 182 229 136 245 202 42 34 210 124 181 91 20 202 82 84 250 135 57 34 158 230 4 105 117 48 235 73 218 52 106 3 129 101 43 229 160 53 151 51 230 174 209 45 152 176 57 113 202 255 0 142 209 82 152 10 196 119 58 109 30 49 45 86 170 242 204 173 140 67 45 29 87 187 235 212 87 48 106 209 213 89 136 196 208 196 209 196 194 98 104 98 101 49 8 202 105 52 16 84 214 151 220 204 204 222 70 119 62 93 140 43 39 82 14 182 4 163 98 247 76 247 139 152 1 96 182 86 95 133 30 234 9 30 5 220 101 253 16 49 137 167 137 163 137 128 196 196 70 158 32 228 148 66 52 96 150 12 214 204 213 154 145 3 21 141 213 17 155 0 186 208 218 155 183 77 6 81 80 160 88 9 217 51 29 3 90 114 151 4 225 61 193 184 11 18 104 98 105 226 99 49 60 16 73 74 8 70 141 38 182 102 185 115 94 93 121 140 64 173 61 87 251 188 73 41 71 64 65 68 123 12 65 172 6 241 22 157 187 90 124 195 213 141 53 197 207 186 128 19 39 46 140 12 213 255 0 113 222 104 98 104 226 25 98 160 133 105 53 243 53 166 180 52 1 149 90 8 109 125 31 245 102 59 197 213 88 65 15 102 22 203 226 238 58 19 46 104 50 3 38 193 233 22 7 32 31 145 253 75 245 104 15 47 248 9 167 137 167 136 16 124 166 92 159 28 197 21 79 12 38 252 121 50 230 255 0 85 128 57 174 204 195 0 47 103 250 34 15 140 240 62 38 188 215 206 37 29 153 13 147 36 210 44 134 192 221 133 91 184 184 43 165 173 80 211 23 182 46 103 31 0 246 0 127 146 99 49 52 177 4 194 161 204 194 230 106 230 101 115 53 179 45 28 203 239 51 95 51 91 48 153 76 235 79 241 231 105 140 168 221 199 125 165 145 126 78 144 162 210 139 207 255 0 96 179 9 134 180 148 169 195 203 30 221 199 152 219 80 174 215 78 235 114 22 93 123 74 247 152 156 251 152 178 153 117 157 244 87 39 220 194 230 107 103 220 214 206 209 35 190 90 111 182 196 122 52 222 97 180 4 239 171 189 233 26 237 111 24 71 187 171 215 16 103 86 140 29 211 116 54 90 238 166 216 2 15 152 43 204 160 229 214 101 102 111 12 189 172 181 148 107 171 196 189 172 202 203 9 154 153 100 1 192 175 220 45 110 142 118 135 1 216 240 117 0 255 217 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:30'!
leftLogoJpg
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 50 29 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 34 239 187 191 34 32 105 100 61 34 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 34 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 34 97 100 111 98 101 58 110 115 58 109 101 116 97 47 34 32 120 58 120 109 112 116 107 61 34 65 100 111 98 101 32 88 77 80 32 67 111 114 101 32 52 46 49 45 99 48 51 52 32 52 54 46 50 55 50 57 55 54 44 32 83 97 116 32 74 97 110 32 50 55 32 50 48 48 55 32 50 50 58 51 55 58 51 55 32 32 32 32 32 32 32 32 34 62 10 32 32 32 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 34 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 34 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 120 97 112 61 34 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 34 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 60 47 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 55 45 48 53 45 50 56 84 49 50 58 52 48 58 48 50 90 60 47 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 55 45 48 53 45 50 57 84 49 51 58 49 54 58 51 57 90 60 47 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 100 99 61 34 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 34 62 10 32 32 32 32 32 32 32 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 106 112 101 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 34 119 34 63 62 255 219 0 67 0 4 3 3 3 3 3 4 3 3 4 5 4 3 4 5 7 5 4 4 5 7 8 6 6 7 6 6 8 10 8 8 8 8 8 8 10 8 10 10 11 10 10 8 13 13 14 14 13 13 18 18 18 18 18 20 20 20 20 20 20 20 20 20 20 255 219 0 67 1 5 5 5 8 7 8 15 10 10 15 18 15 12 15 18 22 21 21 21 21 22 22 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 255 194 0 17 8 0 219 0 133 3 1 17 0 2 17 1 3 17 1 255 196 0 27 0 1 0 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 5 6 7 1 3 2 4 255 196 0 26 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 6 2 5 3 4 255 218 0 12 3 1 0 2 16 3 16 0 0 1 223 193 242 124 156 0 0 0 0 3 212 241 33 124 185 31 231 79 15 131 128 1 40 0 0 46 250 219 15 248 37 79 41 16 0 0 0 0 3 64 221 245 85 205 72 159 38 0 0 0 0 0 26 6 239 170 158 103 152 191 40 0 0 0 0 0 104 27 190 170 153 158 98 188 160 0 0 0 0 1 160 110 250 170 102 100 87 149 0 0 0 0 0 11 254 239 170 174 102 69 121 80 0 0 0 0 0 208 55 125 85 51 50 43 202 128 0 0 0 0 6 129 187 234 169 153 145 94 84 0 0 0 0 0 52 13 223 85 76 204 138 242 160 0 0 0 0 1 160 110 250 170 102 100 87 149 0 0 0 0 0 13 3 119 213 83 51 34 188 168 0 0 0 0 0 104 27 190 170 153 153 21 229 64 0 0 0 0 3 64 221 245 84 204 200 175 42 0 0 0 0 0 26 6 239 170 166 102 69 121 80 0 0 0 0 0 208 55 125 85 51 50 43 202 128 0 0 0 0 6 129 187 234 169 153 145 94 84 0 0 0 0 0 52 13 223 85 76 204 138 242 160 0 0 0 0 1 160 110 250 170 102 100 87 149 0 0 0 0 0 13 3 119 213 83 51 34 188 168 0 0 0 0 0 104 27 190 170 153 153 21 229 64 0 0 0 0 3 64 221 245 84 204 200 175 42 0 0 0 0 0 26 6 239 170 166 102 69 121 80 0 0 0 0 0 208 55 125 85 51 50 43 202 128 0 0 0 0 6 129 187 234 169 153 145 94 84 0 0 0 0 0 52 13 223 85 207 22 71 126 23 66 14 133 28 249 144 0 0 93 181 183 240 129 10 0 15 115 234 128 8 3 255 196 0 33 16 0 1 3 5 0 3 1 1 0 0 0 0 0 0 0 0 0 2 3 4 18 20 48 50 51 1 16 19 17 49 255 218 0 8 1 1 0 1 5 2 247 90 79 162 79 162 79 162 74 210 125 18 86 146 180 149 164 173 37 105 43 73 90 74 211 233 107 252 30 150 134 213 230 114 203 183 139 183 203 183 203 183 203 183 203 183 203 183 203 183 203 183 203 183 203 183 203 183 203 183 253 72 127 226 140 235 214 126 249 215 172 254 153 220 214 127 76 238 107 63 166 117 235 63 166 119 53 159 211 59 154 207 233 157 122 207 233 157 205 103 244 206 230 179 250 103 94 179 250 103 94 179 250 103 115 89 253 51 185 172 254 153 220 214 127 76 238 107 63 166 117 235 63 166 119 53 159 211 59 154 207 233 157 205 103 244 206 230 179 250 103 94 179 250 103 94 179 250 103 115 89 140 62 226 236 230 22 114 203 57 101 156 178 202 89 101 44 179 150 90 72 45 31 45 31 45 31 45 31 45 31 45 31 45 31 60 255 0 40 73 66 74 18 80 146 132 148 36 161 37 9 60 33 63 148 36 161 37 9 40 73 66 74 18 80 147 255 196 0 20 17 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 128 255 218 0 8 1 3 1 1 63 1 110 127 255 196 0 42 17 0 0 4 6 2 0 5 5 1 0 0 0 0 0 0 0 0 5 21 64 3 4 51 82 129 177 1 97 2 18 49 81 209 16 19 33 34 35 161 255 218 0 8 1 2 1 1 63 1 103 50 103 224 133 207 151 143 219 145 201 188 94 135 38 115 30 250 10 83 23 127 156 5 41 139 180 20 166 46 208 82 152 187 65 70 98 237 5 25 139 180 20 102 46 208 81 152 187 65 70 98 237 5 25 139 180 20 102 46 208 81 152 187 95 73 249 175 179 224 252 122 243 232 196 223 159 237 134 38 245 177 242 196 222 182 24 155 214 195 19 122 216 98 111 91 12 77 235 97 137 189 108 49 55 173 134 38 245 176 196 222 182 24 155 214 199 203 19 122 216 249 98 111 91 12 77 235 97 137 189 108 49 55 173 134 38 245 176 196 222 182 24 155 214 195 19 122 216 98 111 91 31 44 77 235 97 140 252 140 72 209 60 222 31 96 149 27 160 149 27 160 149 27 160 149 27 160 149 27 160 149 27 160 149 27 161 201 108 127 96 157 49 110 130 116 197 186 9 211 22 232 39 76 91 160 157 49 110 130 116 197 186 9 211 22 233 151 255 196 0 43 16 0 2 2 1 3 3 2 4 7 0 0 0 0 0 0 0 0 1 2 49 209 64 115 146 33 51 145 16 17 3 18 19 65 32 34 67 97 114 161 193 255 218 0 8 1 1 0 6 63 2 252 22 89 101 150 89 101 150 89 101 151 233 251 159 43 252 242 251 165 209 29 33 15 98 215 20 90 227 28 22 184 199 5 174 49 193 107 140 112 90 227 28 22 184 199 5 174 49 193 107 140 112 90 227 28 22 184 199 5 174 49 193 107 140 113 232 231 250 146 233 12 232 25 5 246 249 22 129 144 219 90 6 67 109 104 25 13 181 160 100 54 214 129 144 219 90 6 67 109 104 25 13 181 160 100 54 214 129 144 219 90 6 67 109 104 25 13 181 160 100 54 214 129 144 219 90 6 67 109 104 25 13 181 160 100 54 214 129 144 219 90 6 67 109 104 25 13 181 160 100 54 214 129 144 219 90 6 67 109 104 25 9 124 47 134 231 31 166 186 251 199 253 104 236 191 48 201 217 126 99 147 178 252 199 39 101 249 142 78 211 243 28 157 175 238 57 59 79 204 114 117 143 179 254 81 201 75 148 114 82 229 28 148 185 71 37 46 81 201 75 148 114 82 229 28 148 185 71 62 148 81 69 20 81 69 20 81 69 20 81 69 31 255 196 0 35 16 0 1 4 2 2 2 2 3 0 0 0 0 0 0 0 0 1 17 64 97 240 0 33 48 49 16 65 32 81 145 161 209 255 218 0 8 1 1 0 1 63 33 240 72 29 225 7 190 116 150 91 109 182 221 17 178 232 98 104 35 238 33 11 189 226 178 143 208 16 73 252 174 19 146 64 96 127 30 82 4 8 16 32 64 129 2 4 12 16 37 2 228 138 71 246 193 166 4 119 187 73 233 73 44 117 124 177 85 242 197 87 203 15 214 202 249 98 171 229 138 175 150 58 190 88 170 249 98 171 229 142 175 150 58 190 88 170 249 98 171 229 138 175 150 42 190 88 234 249 98 171 229 138 175 150 42 190 88 170 249 99 171 229 142 175 150 41 28 33 32 13 239 91 31 35 175 255 0 239 9 35 196 238 150 131 244 21 56 4 8 16 32 64 193 1 82 94 16 0 0 4 173 50 22 66 200 89 11 33 100 44 133 159 255 218 0 12 3 1 0 2 0 3 0 0 0 16 2 0 0 0 0 36 128 112 201 37 36 146 72 34 219 109 182 219 109 192 219 109 182 219 109 177 219 109 182 219 109 182 27 109 182 219 109 182 194 109 182 219 109 182 220 77 182 219 109 182 219 1 182 219 109 182 219 96 54 219 109 182 219 108 38 219 109 182 219 109 128 219 109 182 219 109 176 155 109 182 219 109 182 19 109 182 219 109 182 194 109 182 219 109 182 216 77 182 219 109 182 219 9 182 219 109 182 219 96 54 219 109 182 219 108 38 219 109 182 219 109 132 219 109 182 219 109 176 155 109 182 219 109 182 19 109 182 219 109 182 194 109 182 219 109 182 216 77 182 219 109 182 219 9 182 219 109 182 219 97 54 219 109 182 219 108 44 159 184 100 146 73 9 124 154 69 36 146 79 255 196 0 26 17 0 3 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 17 64 0 32 16 80 255 218 0 8 1 3 1 1 63 16 141 246 243 207 60 243 207 63 9 132 253 51 9 132 194 97 48 152 76 38 19 9 132 194 97 48 152 76 38 19 9 132 194 96 24 140 178 225 101 150 89 101 150 89 101 23 255 196 0 37 17 0 1 2 6 2 2 2 3 0 0 0 0 0 0 0 0 1 0 240 17 49 64 113 177 209 33 129 65 225 16 97 32 48 193 255 218 0 8 1 2 1 1 63 16 253 80 80 80 252 225 182 4 252 1 245 30 121 235 184 240 143 60 0 29 237 16 124 122 209 57 161 48 52 78 13 19 3 68 224 209 56 52 78 13 19 131 68 224 209 56 52 78 13 19 131 79 142 157 109 214 168 77 0 241 14 77 12 171 115 66 151 110 77 12 139 114 104 101 219 147 67 34 220 154 0 164 219 147 67 46 220 154 25 54 228 208 203 183 38 134 85 185 52 50 173 205 10 85 185 161 74 183 38 134 69 185 52 50 237 201 161 151 110 77 12 139 114 104 101 91 147 67 42 220 154 25 86 228 208 202 183 52 41 118 228 208 137 64 132 3 155 159 164 241 58 79 19 164 241 244 158 62 147 199 210 120 250 77 31 72 115 1 31 99 250 66 112 236 156 59 39 14 201 195 178 112 236 156 59 39 14 212 95 255 196 0 37 16 0 1 3 4 1 4 2 3 0 0 0 0 0 0 0 0 1 0 81 97 17 64 161 240 33 16 48 49 65 32 113 129 145 177 255 218 0 8 1 1 0 1 63 16 233 229 212 94 88 84 37 1 66 81 148 37 25 70 81 148 101 25 70 81 148 110 128 22 208 29 24 152 116 246 174 164 53 16 246 0 164 213 23 200 19 73 67 208 52 43 250 66 161 146 72 164 136 21 51 196 158 235 199 14 28 60 120 241 227 199 129 30 86 24 168 33 229 3 143 192 45 244 207 96 85 80 185 217 64 181 240 170 16 38 130 195 25 104 94 193 132 180 47 96 192 91 23 177 198 193 236 56 75 98 246 28 37 180 123 14 50 216 189 135 9 109 30 195 128 182 15 97 198 91 7 176 226 45 139 216 112 22 197 236 56 75 98 246 28 37 181 123 14 18 216 189 135 25 109 94 195 128 182 15 97 192 91 87 176 224 45 171 216 112 22 197 236 56 203 98 246 28 101 181 123 14 18 15 136 9 32 79 131 198 17 234 159 11 185 209 242 120 167 160 230 71 211 118 12 167 134 7 223 96 241 227 199 143 2 60 0 92 133 20 37 9 66 80 148 37 9 66 80 151 220 175 239 96 136 136 136 191 255 217 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:30'!
leftLogoPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 133 0 0 0 219 8 6 0 0 0 67 94 82 187 0 0 0 4 115 66 73 84 8 8 8 8 124 8 100 136 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 53 47 50 56 47 48 55 109 245 38 235 0 0 0 24 116 69 88 116 83 111 102 116 119 97 114 101 0 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 79 179 31 78 0 0 4 144 112 114 86 87 120 156 237 91 81 118 155 48 16 148 8 52 177 27 26 238 146 51 228 42 249 238 117 124 153 30 160 143 187 244 6 117 1 219 32 237 206 10 146 29 127 180 197 142 98 192 196 122 179 179 51 187 194 228 231 239 31 191 194 91 248 126 30 31 253 240 60 247 125 63 109 245 231 83 127 126 239 207 175 253 184 51 60 78 125 255 222 247 195 110 56 157 95 79 253 107 24 254 98 31 251 248 39 6 229 177 207 255 119 207 127 28 158 135 112 136 213 39 135 115 254 186 138 95 158 31 159 31 191 126 114 60 123 241 55 213 183 174 117 60 189 243 87 113 252 152 203 207 229 249 177 109 55 254 216 190 12 31 243 52 124 224 203 240 153 79 31 221 246 206 127 136 11 150 237 200 121 248 99 125 69 52 161 217 134 188 155 70 59 30 115 243 191 224 207 225 149 145 19 241 199 4 245 86 228 215 237 49 106 44 252 11 200 2 242 52 76 215 23 14 255 221 21 253 58 231 75 174 92 182 253 248 1 108 180 43 211 132 133 127 214 255 45 2 9 250 4 185 140 198 45 90 206 249 235 220 255 0 232 60 25 210 224 80 240 55 97 230 211 122 21 25 63 31 155 34 224 157 191 138 45 128 108 224 23 199 198 95 110 252 17 107 91 120 66 238 142 201 49 63 255 134 177 33 197 43 246 201 252 75 157 231 110 151 190 119 139 6 161 254 107 160 240 21 186 31 163 254 223 144 228 89 223 137 33 121 191 109 123 231 31 252 95 226 4 78 0 241 179 252 95 240 156 58 95 155 214 1 145 11 151 72 248 241 151 165 158 112 15 35 225 198 31 115 109 119 70 14 88 142 72 224 191 19 248 45 205 235 48 113 248 159 179 59 173 120 50 7 16 247 156 250 47 25 182 75 1 58 139 197 191 228 190 232 3 137 83 58 231 175 234 104 224 182 125 32 59 195 139 255 161 78 144 103 90 55 125 128 218 255 213 81 3 44 250 128 136 144 27 127 108 179 62 175 93 169 5 82 5 206 249 15 33 199 47 125 206 202 1 90 253 59 226 250 95 240 129 92 5 222 249 131 90 255 202 253 114 95 224 198 15 251 191 82 45 200 115 131 160 127 205 118 186 123 231 254 175 106 90 209 209 108 170 5 115 36 252 250 55 42 156 81 11 100 13 244 235 95 87 56 93 229 64 143 192 243 127 75 225 150 6 178 51 120 252 43 135 3 43 33 185 239 142 191 141 95 219 0 84 192 189 248 159 115 64 123 62 211 255 131 194 95 138 196 29 252 31 240 175 107 1 240 7 146 255 95 250 159 28 116 177 222 203 172 240 243 63 34 82 215 128 243 46 200 92 253 248 215 255 151 250 15 125 79 50 158 231 62 189 254 43 253 167 93 177 228 158 229 255 85 176 253 15 231 129 136 135 27 255 22 255 55 188 129 224 255 72 255 89 10 0 71 200 142 186 243 191 150 252 119 224 74 103 139 122 68 150 255 227 14 7 102 251 29 240 71 163 195 129 217 206 191 254 111 224 55 178 93 159 67 224 191 208 229 202 108 215 231 80 248 239 96 12 108 69 36 63 126 254 147 222 206 232 124 50 221 139 245 129 159 127 165 246 12 63 132 157 104 130 196 63 200 1 224 1 224 74 8 141 127 148 245 41 90 67 9 12 253 103 26 55 175 116 224 111 67 8 250 71 178 6 254 127 55 253 219 189 158 217 245 46 142 72 224 95 167 191 205 189 210 9 133 255 194 247 59 38 247 212 250 143 149 95 224 158 169 127 244 253 206 10 247 75 52 252 252 227 204 95 225 158 168 255 85 173 99 69 48 235 127 145 239 114 71 68 224 191 188 202 41 112 79 91 255 89 125 223 10 247 227 43 145 255 13 171 221 156 251 214 175 127 185 254 43 115 175 84 66 90 255 233 222 223 238 255 197 202 216 203 127 72 250 159 82 30 88 29 129 27 63 250 254 207 224 190 227 251 127 29 244 253 31 38 247 232 44 47 254 233 251 55 251 126 143 156 123 125 125 192 237 255 65 247 191 134 211 225 243 88 252 67 196 89 166 39 10 225 245 127 117 144 254 183 221 3 40 250 31 239 63 40 119 56 173 116 70 106 255 23 34 68 41 77 65 200 159 169 127 163 239 51 87 196 249 213 112 10 255 154 111 184 131 50 133 195 191 172 247 176 14 220 73 255 185 206 205 173 59 225 63 38 235 63 168 130 242 125 0 44 253 151 28 16 200 129 174 255 130 3 118 234 202 72 234 152 52 254 49 226 149 234 79 186 254 187 177 215 203 248 167 245 127 6 247 235 49 160 240 63 244 127 90 239 184 215 131 87 199 72 252 11 84 233 54 170 122 203 97 34 255 160 191 67 247 1 228 145 224 241 175 50 28 71 69 156 206 226 31 223 237 40 35 161 243 195 207 191 52 54 136 27 30 225 240 175 174 249 41 143 47 85 72 63 255 11 221 50 233 183 236 251 249 143 77 60 138 241 208 196 102 26 224 189 236 253 198 251 255 79 67 253 57 132 170 169 228 107 61 141 120 152 246 231 99 233 246 52 194 193 49 255 62 246 177 143 125 236 99 31 251 248 255 198 31 182 16 202 11 223 151 167 216 0 0 0 72 109 107 66 70 250 222 202 254 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 41 164 51 161 0 0 55 189 109 107 84 83 120 156 237 125 89 119 219 198 178 46 78 246 118 28 217 178 29 39 103 229 60 156 23 173 117 207 93 247 41 217 152 9 60 138 162 40 41 161 36 134 164 60 228 197 11 4 137 88 39 242 176 101 89 217 217 90 252 239 183 170 186 27 67 179 1 2 224 32 41 129 100 11 36 198 198 87 213 95 13 93 13 28 255 212 190 190 121 49 24 158 223 248 179 23 131 227 243 27 99 214 29 236 165 22 131 159 79 206 111 198 126 232 249 45 125 246 170 183 23 221 232 179 215 108 241 242 168 19 221 24 150 53 59 60 26 69 55 166 225 207 6 251 195 232 166 101 206 6 195 179 115 216 161 125 0 167 136 232 103 214 239 245 174 111 218 125 248 179 183 59 250 116 163 125 165 141 181 80 123 163 181 181 64 251 164 157 107 225 236 232 228 24 214 111 195 250 247 176 254 16 214 95 106 19 109 71 235 193 214 247 218 116 54 232 156 142 241 164 187 39 116 238 93 104 179 53 245 102 237 206 209 249 141 61 107 31 67 227 167 176 128 213 193 172 61 220 167 157 134 93 188 135 246 240 144 190 181 123 108 241 19 45 246 78 248 9 246 187 244 125 48 162 125 187 109 250 214 29 208 226 132 173 28 246 97 223 112 214 30 177 141 35 118 246 209 144 93 228 152 157 143 45 142 118 177 149 39 216 42 125 214 57 53 176 57 157 83 19 79 211 57 181 104 209 133 149 38 44 76 182 176 112 49 43 129 205 179 57 108 6 218 7 237 51 172 155 104 83 109 178 44 66 198 253 71 72 104 207 16 112 137 180 171 101 180 199 136 236 218 250 99 44 137 142 177 94 253 73 208 89 82 127 100 140 170 104 208 45 99 180 205 49 218 5 124 46 1 137 54 252 253 12 104 189 229 88 125 197 177 74 48 44 66 7 219 157 130 199 181 25 62 180 125 33 62 158 157 193 71 207 224 99 153 89 132 38 75 246 49 147 33 100 50 132 108 134 144 205 16 178 103 195 254 47 76 170 195 33 124 8 199 176 226 148 221 198 112 120 74 43 170 96 248 152 99 56 2 237 250 23 232 219 103 216 190 72 207 44 83 165 104 197 64 26 62 135 210 28 135 21 160 12 61 6 37 173 95 27 152 166 95 14 204 167 28 204 61 80 184 11 248 61 215 126 5 184 2 237 163 246 86 251 131 3 186 149 82 202 119 240 249 131 246 161 16 76 131 247 90 195 42 77 251 134 110 171 187 173 94 208 109 29 157 33 73 124 128 72 70 65 233 158 107 122 165 177 180 60 147 97 105 25 147 202 216 21 119 232 214 132 65 231 133 12 185 233 138 28 10 189 200 92 154 53 201 174 28 100 117 1 250 25 250 233 57 238 149 1 200 118 24 64 198 88 210 173 136 67 164 51 140 194 162 142 138 106 177 88 183 136 16 83 56 33 155 34 78 164 84 107 0 106 94 183 226 142 90 183 131 14 96 235 152 58 232 251 66 53 3 159 121 165 122 182 90 163 186 30 61 251 146 99 244 18 108 193 149 18 157 150 164 98 146 211 81 228 151 225 161 25 124 204 91 199 103 216 111 51 246 31 182 231 72 255 113 140 215 91 242 233 67 208 24 64 78 210 166 61 178 155 72 249 127 148 162 123 142 151 97 134 74 196 36 194 111 133 213 85 202 118 25 100 1 199 204 154 216 165 109 103 253 78 9 23 52 157 128 1 137 166 166 58 146 125 34 255 43 64 243 162 18 146 145 93 194 114 70 194 114 162 63 81 18 200 152 219 56 144 228 147 172 30 71 132 111 40 188 17 36 55 230 150 136 15 136 44 243 75 196 135 65 101 136 31 102 131 139 42 240 146 205 88 24 78 144 58 87 198 119 202 61 19 60 24 1 246 221 85 3 60 0 92 205 233 148 97 38 27 141 98 204 234 56 200 106 82 52 157 66 7 57 52 171 247 241 216 61 118 76 6 29 195 176 28 118 198 180 52 53 198 138 103 70 25 232 182 98 232 208 130 252 65 182 180 78 108 150 13 205 40 68 168 153 251 40 211 145 77 143 123 41 20 148 148 68 203 50 85 104 185 12 45 151 161 229 178 174 204 8 16 63 140 35 169 43 163 141 25 28 86 192 241 97 236 173 4 218 111 11 114 36 30 67 209 103 40 146 139 150 66 81 95 22 69 155 161 200 84 76 9 163 19 48 28 205 2 28 29 157 167 1 124 158 7 240 57 146 92 241 92 174 121 174 157 7 38 91 147 2 19 156 206 106 74 57 130 158 14 42 169 253 86 165 23 151 210 202 114 222 179 90 45 169 51 163 161 30 175 156 255 200 192 80 31 22 64 14 210 150 134 217 158 197 234 217 161 206 252 150 248 47 155 174 74 109 41 221 233 149 89 132 59 144 174 50 106 166 171 242 81 250 90 137 82 135 18 123 99 112 193 139 187 245 93 197 201 220 16 78 35 232 199 231 16 158 220 87 156 172 149 227 180 21 227 244 1 60 146 171 13 38 134 139 120 204 15 237 154 65 26 55 9 58 131 70 103 208 232 12 26 157 65 163 151 132 230 169 82 133 248 104 76 117 245 201 114 189 190 249 209 151 34 50 114 24 66 14 67 200 89 138 178 15 41 122 189 94 16 189 222 213 17 6 142 18 88 108 130 201 97 48 57 12 166 128 193 20 48 152 2 165 239 223 197 112 147 134 91 70 200 53 10 101 186 4 247 107 71 59 230 159 166 218 101 25 87 172 138 235 96 56 211 50 131 13 186 50 200 175 220 229 212 142 3 119 103 61 6 149 199 156 127 54 214 144 159 24 41 198 238 144 18 76 111 121 162 233 45 177 85 22 59 244 26 41 109 137 17 16 73 83 207 56 178 44 110 154 115 100 149 157 145 116 177 108 70 60 88 43 118 229 161 18 61 178 23 67 148 175 104 114 254 45 84 245 72 204 90 231 210 86 18 163 215 72 38 173 77 207 210 126 125 146 73 66 79 149 50 73 222 180 2 158 15 51 110 254 251 213 142 185 151 28 200 146 76 227 6 186 105 12 22 226 152 6 235 75 14 214 41 14 25 112 136 30 197 225 57 250 86 152 110 91 228 93 5 117 139 19 48 154 89 4 147 37 133 150 34 20 18 169 54 82 232 185 192 210 40 145 206 192 181 228 97 113 176 76 143 197 62 20 233 236 82 192 70 202 231 186 44 242 177 113 73 233 196 133 24 62 79 97 136 25 35 44 246 24 146 159 26 112 175 172 216 70 4 202 4 91 9 72 49 147 85 48 52 19 6 12 84 147 131 26 154 82 126 109 194 115 68 204 112 47 136 48 65 117 25 172 30 199 213 99 192 134 30 3 54 228 192 134 158 28 175 227 135 129 248 144 233 224 108 83 252 65 36 152 250 3 30 147 14 6 34 197 57 156 79 215 169 68 33 146 116 27 129 223 154 148 130 95 74 209 197 232 23 142 187 230 228 74 108 238 247 217 12 123 112 144 8 123 90 90 180 36 164 25 138 74 164 201 136 35 192 164 232 3 166 248 101 225 125 20 195 123 69 57 21 44 70 249 84 198 255 17 131 218 162 216 194 8 166 37 240 45 227 255 56 18 99 100 153 21 249 118 72 149 114 249 224 186 118 53 112 5 112 70 20 231 72 8 64 115 49 83 124 171 206 33 243 114 140 114 252 219 170 201 191 165 204 20 79 237 69 129 84 35 192 225 180 199 25 250 181 85 244 43 224 148 121 194 225 113 156 195 3 57 88 102 139 46 88 22 106 192 0 29 14 56 53 243 239 8 180 17 41 41 89 68 56 125 128 242 61 124 154 87 87 67 251 30 182 158 3 228 11 199 146 178 227 228 181 179 207 69 177 95 5 31 32 171 168 94 221 196 193 60 50 255 165 66 6 212 112 23 214 94 193 247 239 225 19 58 234 24 25 46 28 228 88 45 102 171 245 155 86 136 153 48 243 123 96 228 47 224 191 232 186 233 61 85 225 12 133 45 185 46 102 80 61 177 80 193 193 44 111 98 74 1 69 253 20 249 111 222 182 160 231 137 91 134 108 89 14 82 97 174 15 226 194 131 115 52 216 235 41 31 14 203 187 233 149 170 205 36 239 147 211 95 192 128 12 24 144 222 156 163 206 93 207 116 181 89 6 208 52 128 79 56 128 47 201 163 153 242 161 73 210 65 105 64 163 92 246 70 170 219 139 227 234 114 9 28 28 98 172 168 141 177 207 67 46 211 82 195 146 74 36 227 49 243 100 160 141 114 21 226 195 224 52 101 182 117 102 77 36 37 45 143 113 185 65 35 211 83 233 41 75 0 173 16 97 49 102 100 137 113 95 167 60 192 234 152 210 82 141 25 81 207 206 235 251 213 96 172 18 148 71 220 123 140 178 222 99 20 148 0 177 76 184 185 108 2 72 173 162 166 10 65 22 149 167 163 160 120 176 77 174 144 20 124 57 224 30 246 7 237 157 196 151 104 130 222 107 17 22 101 161 185 86 97 104 56 54 195 208 205 98 24 84 128 208 85 234 161 210 169 97 67 191 117 188 26 161 133 89 194 52 185 26 210 210 162 37 235 189 46 239 190 229 65 19 10 199 6 73 138 195 21 75 213 105 165 50 73 181 117 209 203 123 215 196 183 243 88 141 237 197 131 230 113 172 34 13 154 35 193 18 94 236 131 197 62 48 255 218 155 114 255 26 63 244 5 134 67 17 250 13 4 71 178 164 71 57 76 69 93 96 23 67 24 21 162 99 59 19 92 11 237 171 18 93 23 218 107 194 80 85 140 160 142 255 56 166 150 10 211 208 83 7 44 62 207 174 249 188 168 195 119 89 166 136 194 18 49 70 222 78 194 20 49 102 46 101 199 243 65 76 162 233 127 2 140 1 57 148 197 234 233 212 245 125 42 88 20 22 243 165 114 111 21 170 176 32 62 84 170 39 174 239 242 245 93 182 62 134 146 172 117 139 27 235 22 211 80 1 41 41 232 33 11 13 171 117 246 215 132 103 177 117 201 90 232 82 117 131 85 124 73 174 153 99 229 96 168 20 73 43 173 75 94 98 34 175 66 38 91 129 201 85 145 34 230 156 185 32 103 0 213 123 50 212 159 201 1 23 110 249 3 14 162 165 117 106 148 183 181 202 204 163 41 19 210 88 89 23 39 11 32 168 138 34 21 81 46 109 102 122 138 92 240 33 179 209 85 112 122 148 224 4 113 224 1 185 57 191 23 35 166 52 48 229 166 30 9 200 140 197 58 23 42 13 140 49 85 145 161 177 81 200 182 99 15 230 45 21 73 99 218 97 58 87 122 47 195 230 214 29 115 48 202 143 2 198 177 138 229 86 47 10 20 142 224 162 168 239 80 184 206 135 243 174 243 34 232 158 199 54 247 130 102 125 84 29 102 80 143 16 46 175 122 84 79 158 26 103 8 148 222 180 80 190 50 153 88 217 18 43 149 79 120 52 131 120 176 96 222 129 41 219 129 79 97 253 21 37 188 22 77 63 93 69 7 118 202 39 96 37 12 253 197 70 67 148 167 74 238 244 138 186 175 208 65 172 205 63 167 92 225 218 117 112 174 146 210 82 42 161 239 101 7 187 34 165 213 80 143 31 74 5 190 161 154 2 85 254 160 156 198 73 134 185 184 23 147 206 99 51 117 133 27 108 57 204 44 187 213 180 245 73 28 57 127 160 80 230 45 0 207 167 72 20 235 236 234 10 226 138 236 180 167 156 34 135 121 144 20 226 102 149 17 152 60 173 101 254 205 112 62 8 92 132 224 211 20 130 255 162 36 206 14 101 42 42 99 72 137 193 10 147 93 99 28 237 197 161 116 237 241 1 140 149 75 24 33 74 66 132 45 69 65 58 21 249 208 10 241 65 12 191 244 185 51 137 183 200 6 100 83 222 165 60 114 184 72 10 223 113 41 188 160 17 175 144 170 95 63 209 224 3 50 48 230 136 119 18 130 169 78 39 108 42 85 89 197 86 178 73 86 177 37 111 138 82 109 243 92 82 201 3 181 120 142 200 226 169 117 88 18 151 112 241 164 237 91 159 11 39 147 204 36 105 165 134 202 188 236 72 25 250 251 179 110 175 115 125 211 77 196 242 80 139 226 39 13 92 66 160 41 2 166 40 158 159 129 107 207 148 107 185 16 186 12 134 46 99 132 46 187 251 238 62 233 110 119 208 161 93 6 3 182 13 155 1 139 87 180 56 136 91 241 28 218 16 198 41 255 9 23 248 85 106 84 229 83 76 119 33 111 3 90 151 80 251 13 186 170 24 32 232 30 188 128 123 59 217 163 235 31 28 193 231 131 62 62 230 164 203 158 98 162 211 207 44 181 201 16 155 248 35 78 112 219 107 220 166 47 127 30 163 230 41 196 38 252 73 201 233 41 151 211 0 144 9 225 110 49 196 253 21 186 8 162 112 25 19 89 196 103 131 168 246 57 43 177 79 61 137 6 76 162 65 35 209 58 18 101 105 219 43 34 188 75 129 151 36 81 245 62 103 37 246 169 39 81 139 73 212 48 26 145 86 17 233 87 92 164 67 66 228 60 85 145 207 68 116 66 40 189 35 171 119 150 187 165 158 200 116 38 50 61 211 160 45 222 32 254 12 157 20 87 136 11 167 183 156 229 110 169 215 36 147 53 201 108 148 168 138 18 61 142 121 225 156 6 202 178 28 191 21 243 55 67 111 94 149 210 91 150 234 253 86 35 183 42 114 123 148 225 115 12 35 210 41 133 52 71 139 109 103 5 219 234 73 206 102 146 179 27 201 85 145 220 19 46 185 125 254 196 139 143 84 237 148 150 223 19 46 35 213 30 103 11 247 168 39 75 159 201 210 111 100 89 69 150 219 92 150 248 108 146 177 214 161 59 126 75 25 40 145 106 142 226 103 151 100 183 159 45 216 94 79 138 6 183 203 184 236 24 169 134 119 59 102 230 155 149 249 102 103 190 141 198 146 93 79 28 141 128 244 44 153 194 28 241 193 67 177 254 44 103 125 189 187 113 216 205 56 141 78 214 113 11 251 228 81 133 169 39 212 69 60 111 42 214 159 229 172 175 39 173 22 147 86 171 145 86 29 105 117 9 145 73 140 135 144 74 178 254 44 103 125 61 105 121 76 90 94 35 173 42 210 18 17 206 128 108 46 155 6 46 123 202 201 22 217 83 78 182 212 147 217 132 201 108 210 200 172 78 15 123 73 85 169 211 185 30 150 172 63 203 89 95 79 90 83 38 173 105 35 173 58 113 77 63 25 205 139 253 141 71 177 165 74 111 59 43 216 86 79 114 17 147 28 222 223 1 37 176 235 8 240 235 148 0 63 195 94 3 42 213 127 77 213 6 172 72 35 17 163 165 196 206 215 245 177 153 198 78 255 193 73 4 80 36 155 144 128 149 100 188 174 139 172 64 1 106 1 252 92 2 56 5 173 88 151 7 241 15 73 35 198 186 25 4 121 247 63 137 96 115 118 163 47 31 89 8 243 138 47 116 91 80 11 93 222 167 106 25 26 71 163 210 143 3 170 23 132 163 82 64 187 170 182 153 186 21 102 219 166 255 96 122 98 171 49 246 91 198 56 187 213 142 193 49 166 118 4 223 50 91 93 177 209 13 166 161 110 100 55 182 156 252 19 27 114 139 100 241 221 191 230 223 150 82 252 149 44 84 45 128 158 114 128 112 203 152 250 204 21 205 178 148 169 73 169 114 186 110 121 216 126 181 202 233 186 233 7 173 60 149 3 74 119 229 99 221 162 67 91 5 135 26 114 139 74 245 152 59 221 252 219 82 136 103 92 33 152 43 16 147 231 34 107 149 111 142 83 38 68 215 241 127 110 179 85 130 91 215 69 110 27 94 172 233 248 64 53 157 87 218 41 159 35 254 235 98 82 50 125 61 112 252 28 50 105 41 141 197 18 231 185 109 214 142 185 58 225 239 69 0 9 74 45 106 85 25 128 202 157 231 182 0 218 74 177 54 134 235 152 140 77 128 177 85 173 241 91 182 107 72 190 157 21 223 237 120 226 133 146 253 247 226 173 110 104 78 13 87 121 35 211 104 50 14 39 243 152 222 78 19 110 75 28 143 184 56 82 79 98 134 109 11 140 39 220 148 235 186 217 27 78 172 143 167 123 186 108 95 18 235 227 186 178 118 166 172 15 30 216 146 54 182 82 241 18 30 158 215 243 225 95 73 227 121 167 155 127 219 138 192 140 231 188 201 204 161 154 252 246 240 200 183 36 101 149 57 207 109 83 214 144 222 195 112 45 81 150 82 197 124 203 135 134 231 169 152 109 226 111 158 138 141 157 177 53 54 114 84 204 117 231 117 55 81 177 201 20 127 149 32 160 90 123 101 3 178 59 221 252 219 82 131 199 177 26 124 228 229 118 248 122 157 119 139 201 114 222 227 51 211 27 231 200 38 105 176 25 20 56 234 178 175 8 70 39 77 53 185 129 155 218 149 184 103 109 95 69 90 116 191 219 185 190 217 239 166 42 7 166 164 10 71 84 212 140 137 152 54 252 189 166 39 202 48 21 248 134 148 3 85 224 93 92 160 207 246 39 86 224 143 103 221 239 15 175 111 58 123 251 248 231 39 82 156 125 45 162 169 220 168 52 199 244 0 177 35 173 51 235 236 189 128 173 255 87 187 209 90 180 213 213 12 248 213 53 83 251 30 62 135 176 6 63 225 186 9 61 197 197 131 117 45 216 162 211 175 67 123 182 224 175 1 91 240 27 220 82 234 170 91 73 235 181 145 246 7 42 45 191 226 127 104 122 102 207 71 169 61 95 210 172 35 184 47 190 239 23 216 34 105 239 228 217 133 187 228 250 95 196 103 254 27 236 109 105 142 212 142 33 117 36 236 52 114 59 204 204 158 143 233 1 146 23 220 111 142 59 32 223 251 161 246 127 8 69 254 43 29 57 164 201 102 19 202 78 170 142 212 147 95 233 110 240 72 60 234 84 27 107 255 203 100 196 143 123 0 215 193 180 194 39 104 113 246 106 109 154 76 116 69 53 62 67 170 187 189 202 69 119 75 204 26 156 195 86 222 243 89 70 79 142 224 186 172 124 254 156 63 56 154 29 245 119 78 60 217 54 61 73 201 80 212 142 94 50 159 46 150 100 75 146 204 19 184 222 4 67 55 122 80 3 77 77 38 44 46 64 135 213 45 124 146 72 60 126 107 221 123 58 238 83 124 132 149 57 98 155 158 110 249 73 251 45 119 127 249 10 137 118 117 248 227 178 2 26 55 79 235 152 44 197 103 41 29 59 166 26 187 43 254 24 233 115 178 214 226 90 134 116 20 155 20 150 233 233 74 237 153 64 203 85 218 243 60 150 45 211 130 203 220 86 203 247 249 148 158 85 240 59 207 78 32 171 76 230 174 188 149 213 91 232 89 145 132 213 33 245 149 226 51 164 250 204 220 25 158 81 202 25 223 139 4 18 209 186 20 167 206 247 60 185 29 50 10 255 15 206 241 27 156 165 75 189 119 74 209 239 37 239 197 167 208 174 11 232 245 236 129 104 239 64 38 31 72 47 47 97 93 90 219 207 96 255 19 54 93 148 95 245 113 138 135 119 82 76 76 196 93 129 179 31 114 206 238 178 25 108 13 59 151 102 103 189 97 231 134 157 27 118 110 216 121 3 236 60 160 234 184 95 27 118 46 205 206 78 195 206 13 59 55 236 220 176 243 26 217 121 43 102 231 207 116 61 236 73 13 67 151 101 104 183 97 232 134 161 27 134 110 24 122 3 12 157 202 72 55 12 93 154 161 141 134 161 27 134 110 24 186 97 232 53 50 244 35 206 208 191 144 94 253 2 215 248 85 51 27 142 46 205 209 118 195 209 13 71 55 28 221 112 244 6 188 232 20 71 55 12 93 154 161 173 134 161 27 134 110 24 186 97 232 165 25 90 33 201 63 89 229 157 113 71 56 187 169 188 107 56 187 225 236 134 179 213 156 157 72 103 25 206 190 127 149 119 119 133 157 155 202 187 134 157 27 118 110 216 121 19 236 124 127 42 239 238 10 59 55 149 119 13 59 55 236 220 176 243 58 217 249 126 86 222 221 21 134 110 42 239 26 134 110 24 186 97 232 77 48 244 253 170 188 187 43 12 221 84 222 53 12 221 48 116 195 208 235 100 232 251 90 121 119 87 56 186 169 188 107 56 186 225 232 134 163 55 225 69 223 175 202 187 187 194 208 77 229 93 195 208 13 67 55 12 189 60 67 119 96 47 148 127 138 7 164 113 66 174 127 53 216 57 128 158 227 107 54 252 78 224 46 189 149 176 115 49 99 201 136 187 82 70 120 25 166 120 154 185 178 90 91 145 245 77 5 79 138 163 22 85 114 167 247 101 143 98 77 250 160 87 128 195 188 61 177 160 37 206 70 180 77 104 208 78 70 135 170 106 219 51 174 109 201 91 15 222 100 246 186 143 218 23 72 186 176 110 237 251 15 173 181 38 221 147 35 194 251 164 123 79 185 238 165 25 91 246 70 191 226 218 135 117 197 224 181 220 139 154 53 75 146 95 190 47 42 87 253 54 21 107 141 39 186 74 79 212 148 174 208 120 162 119 221 19 53 36 221 91 15 63 111 39 124 10 12 157 106 231 18 12 141 239 69 63 167 254 124 247 25 90 102 221 134 161 27 134 110 24 186 97 232 187 147 43 120 146 240 169 54 41 228 232 103 153 222 191 67 200 179 87 21 94 100 162 184 33 221 215 57 109 75 31 241 3 254 214 224 236 49 196 112 58 108 245 137 123 167 196 217 54 233 138 224 108 140 236 2 248 141 128 167 69 220 133 123 123 240 61 130 254 56 129 253 179 156 253 223 112 165 54 160 21 17 150 76 55 223 0 106 151 164 159 168 205 191 195 247 171 24 105 100 135 127 199 152 61 160 43 239 224 223 204 89 191 210 38 37 115 2 235 145 229 34 236 211 45 120 160 5 146 85 249 2 80 114 164 125 194 5 154 78 58 90 67 75 182 51 115 67 151 139 242 29 110 169 35 178 209 104 201 91 240 107 195 254 66 63 44 248 52 38 13 153 196 125 203 35 47 32 34 77 66 203 190 92 148 239 172 204 194 52 81 126 158 23 169 210 150 58 186 247 40 115 54 177 173 186 222 153 164 83 30 232 26 244 110 210 49 228 27 100 160 250 122 87 228 197 216 27 245 98 92 73 178 139 61 12 185 125 101 173 126 158 189 171 111 245 215 163 133 106 189 201 106 224 54 244 146 9 248 183 159 169 149 59 169 251 101 186 247 101 122 222 122 13 157 155 128 126 57 160 59 168 113 62 197 42 200 121 19 144 150 28 191 120 49 55 33 39 34 27 78 224 63 122 55 254 70 108 225 122 100 144 197 175 26 246 223 193 93 94 198 94 47 215 94 237 31 114 15 168 237 167 88 128 50 162 59 166 94 206 172 143 15 216 27 25 62 192 237 19 56 139 78 190 140 206 229 136 50 116 72 102 155 144 205 115 104 195 60 18 111 8 233 15 128 223 251 152 7 230 99 167 80 66 171 204 81 235 209 133 106 242 172 166 43 91 16 31 9 206 250 84 91 35 144 225 109 216 30 145 62 48 207 196 0 28 28 69 111 53 111 181 183 126 13 251 161 12 47 41 50 121 195 121 247 13 96 43 94 67 174 150 236 115 233 184 183 92 30 243 71 254 141 152 203 41 188 106 114 244 88 99 47 33 204 63 246 105 78 139 47 225 12 227 92 237 205 187 94 250 40 213 213 182 169 207 50 125 47 115 165 39 169 253 203 95 37 255 158 166 185 185 130 162 123 74 142 42 127 79 249 87 202 187 167 226 171 60 85 92 101 145 86 61 83 94 169 140 70 201 104 136 43 102 245 169 232 206 202 29 241 84 217 194 197 90 187 5 123 34 135 189 131 191 178 6 25 133 123 166 229 34 87 208 167 247 156 199 86 174 88 74 239 45 223 229 38 108 184 138 91 171 177 243 99 216 254 153 242 130 59 233 115 45 205 208 70 204 208 118 195 208 13 67 55 12 221 48 244 95 146 161 243 248 181 170 15 189 71 114 190 38 57 172 38 170 154 198 81 149 117 231 162 170 237 68 178 116 182 15 218 57 197 33 159 102 7 125 0 237 160 63 186 190 121 213 219 195 151 213 190 102 139 89 178 206 116 28 182 22 63 204 36 125 32 45 92 249 57 49 223 191 202 115 62 22 186 186 210 179 174 203 7 153 215 205 106 218 253 40 245 154 232 29 222 186 139 90 30 200 132 50 58 1 247 39 112 36 195 164 186 181 108 22 17 117 62 200 140 72 211 56 19 85 182 77 37 253 126 144 59 170 171 202 179 61 4 28 63 210 152 20 162 250 71 204 141 170 241 191 250 57 199 173 212 248 25 230 11 38 27 207 222 169 228 85 77 230 207 181 67 210 239 127 104 67 26 139 254 76 215 70 158 192 140 195 106 24 110 18 51 156 121 231 24 14 125 201 249 251 46 147 1 250 154 70 165 170 231 155 182 225 136 11 218 55 30 137 146 90 170 174 29 120 4 199 49 38 186 173 236 84 25 93 201 106 223 3 184 26 62 219 116 154 226 152 46 177 40 27 151 101 53 4 117 162 156 136 234 89 116 208 24 100 12 140 104 34 26 31 77 70 200 116 138 114 144 73 110 55 202 89 87 223 87 225 184 8 253 175 121 38 81 60 101 118 135 123 68 187 208 138 143 56 206 84 107 204 8 101 96 82 175 13 168 135 135 176 180 105 4 59 29 111 58 52 74 84 174 254 232 62 73 98 49 166 89 169 252 61 30 161 100 50 73 190 215 233 5 6 108 139 40 238 176 227 88 95 248 148 119 41 214 95 15 246 9 118 197 24 63 165 138 16 172 100 64 102 221 17 91 151 200 130 35 238 22 141 22 219 164 243 38 157 31 117 222 166 241 17 135 188 30 68 23 165 227 192 54 159 172 34 74 34 34 228 195 141 224 254 13 33 41 238 92 196 94 151 74 43 242 5 180 48 107 71 190 205 61 250 159 176 12 180 139 140 127 245 5 234 216 6 164 94 44 205 69 154 128 242 20 54 107 121 77 112 0 51 143 120 204 133 251 116 201 14 69 124 244 210 166 190 24 145 38 24 36 113 135 234 126 176 90 19 99 42 143 246 8 230 124 221 245 104 194 127 146 188 19 15 39 145 101 126 133 143 156 119 203 59 195 124 221 141 191 33 77 40 146 102 177 38 108 107 191 104 248 164 155 119 43 208 2 159 207 199 65 185 187 177 111 107 18 15 227 92 157 49 105 1 234 137 75 113 209 152 52 32 162 72 201 36 111 24 173 225 102 114 174 255 230 119 93 149 11 158 43 143 188 77 30 200 151 96 177 228 183 226 189 119 72 154 151 181 234 174 179 182 215 252 203 217 94 21 138 197 184 127 173 29 192 25 62 83 164 116 78 156 177 10 75 156 30 237 208 227 209 14 235 206 73 225 63 41 7 154 190 251 116 63 18 118 246 115 92 125 244 13 180 241 7 138 112 242 127 221 141 248 183 139 164 150 149 250 67 94 177 118 73 53 213 239 227 121 183 217 181 213 37 29 146 252 48 198 195 42 53 22 241 177 57 13 243 17 95 235 79 216 223 100 4 203 160 190 157 93 187 20 223 97 133 159 73 255 29 94 167 229 147 205 107 205 245 52 81 27 248 231 194 63 31 203 50 146 120 6 103 124 79 179 36 216 150 157 184 246 176 46 243 101 237 143 125 135 237 207 119 228 89 36 247 254 134 198 129 62 209 108 232 171 146 243 71 190 45 56 199 42 184 179 232 252 42 239 200 217 136 135 179 72 107 228 124 207 9 141 81 96 230 80 244 255 93 242 49 119 146 45 181 245 109 74 154 163 83 157 239 152 242 108 33 233 148 69 62 110 200 109 46 254 117 104 46 151 168 28 70 207 118 74 254 49 198 194 155 241 113 3 186 235 55 128 157 184 235 114 82 252 86 121 228 103 190 148 103 14 228 101 106 215 197 63 121 178 148 249 135 205 59 204 86 136 139 231 94 28 82 139 63 220 131 121 134 217 218 235 230 237 37 183 53 211 112 211 53 250 114 149 196 226 153 134 134 116 196 162 153 134 24 159 86 157 9 32 207 127 252 179 206 53 204 62 143 165 153 107 184 56 3 173 158 53 161 102 97 241 124 184 19 58 63 122 24 117 198 215 27 38 254 107 50 241 234 102 228 213 153 45 117 55 152 120 126 222 233 159 151 139 155 121 223 171 225 226 47 161 125 23 228 251 79 64 143 196 172 181 244 186 58 209 119 68 227 55 44 211 17 242 60 191 159 170 178 102 51 184 117 224 220 219 157 193 189 174 89 107 105 252 178 124 23 198 91 230 99 38 236 27 34 2 183 164 39 62 108 81 191 255 163 224 40 108 17 44 75 200 247 57 245 42 118 7 151 164 235 168 167 59 75 74 125 66 99 58 45 178 171 62 73 221 165 81 93 63 35 245 49 141 241 249 25 169 227 255 136 246 221 204 104 223 186 42 128 22 163 122 187 186 128 182 253 35 181 159 141 14 139 170 56 49 95 178 79 54 235 138 248 235 173 198 158 178 134 246 227 154 238 35 125 247 117 244 3 179 111 83 242 44 34 242 177 48 71 58 165 35 132 126 4 196 10 56 151 223 165 218 56 157 252 50 198 33 62 108 193 241 195 172 126 252 157 48 15 83 150 89 246 177 150 241 4 214 53 143 177 10 206 248 115 60 4 17 206 250 187 163 235 155 246 94 239 252 38 138 198 173 137 99 249 179 110 246 91 63 150 244 87 148 251 124 147 60 31 34 246 177 163 57 31 251 44 119 203 160 115 58 190 209 103 221 81 251 28 23 251 93 90 12 143 207 111 76 248 54 58 191 49 102 221 65 135 118 25 12 216 182 67 182 120 133 139 217 232 85 251 250 134 93 248 1 152 31 132 231 92 123 15 183 243 211 245 205 203 62 236 227 233 179 67 190 28 13 127 129 243 233 240 225 8 238 98 116 212 57 191 105 69 19 59 162 231 77 140 94 117 87 115 162 217 254 171 254 245 77 247 152 218 190 215 27 224 162 223 163 111 253 93 2 185 119 130 77 239 211 38 56 73 127 196 191 3 18 198 108 183 223 99 139 33 222 244 238 238 30 125 219 237 208 98 8 167 153 194 158 29 60 224 0 79 170 207 126 236 255 124 126 227 184 176 28 178 175 167 108 209 199 35 14 186 71 120 154 31 135 184 79 0 203 125 246 117 132 27 127 28 182 9 216 94 159 16 61 193 198 29 12 123 184 174 55 60 195 69 135 45 122 67 146 192 222 240 24 15 219 223 27 226 205 156 188 30 226 183 222 144 190 29 142 142 241 36 135 35 70 2 29 162 39 84 201 223 105 73 197 89 179 87 93 106 226 171 99 106 255 104 64 167 131 35 113 241 170 179 75 39 239 190 130 19 104 179 147 99 251 250 6 254 156 223 184 51 90 68 108 97 176 133 46 45 96 217 197 253 65 125 156 25 45 128 142 247 79 246 112 57 218 237 209 229 250 47 233 226 216 80 216 120 124 2 7 28 159 116 232 106 179 254 193 9 25 178 190 22 144 139 189 3 116 126 116 220 199 187 238 31 245 216 2 119 253 31 160 12 131 138 102 25 129 136 199 49 248 60 13 171 115 138 241 169 196 128 149 163 4 84 130 235 81 135 243 168 211 57 16 210 245 134 199 0 247 81 143 193 253 26 176 239 237 190 134 206 247 211 1 174 56 27 144 22 244 120 191 121 9 135 141 169 7 7 208 247 17 202 94 143 110 234 120 72 251 29 239 209 105 58 71 36 146 189 30 118 210 125 60 229 222 79 184 126 191 135 215 154 205 94 28 193 61 191 96 59 205 102 115 215 211 249 245 48 194 100 79 75 197 217 7 44 103 59 201 92 81 103 87 52 138 175 120 116 124 16 175 120 117 218 165 58 125 182 72 87 237 27 186 57 163 14 102 152 172 131 185 30 235 96 94 182 127 133 190 143 129 240 104 23 111 165 220 169 77 221 98 167 246 28 118 106 163 165 60 117 107 58 241 103 252 179 239 59 147 138 151 209 179 23 153 140 149 23 25 91 118 32 46 226 78 156 72 124 30 27 134 39 62 79 244 32 185 199 242 2 123 152 40 6 105 110 117 81 205 93 107 118 48 232 92 223 28 156 190 194 219 59 56 125 77 139 33 124 179 92 88 190 102 75 102 26 92 250 129 35 58 96 174 15 58 116 205 131 206 79 184 73 215 241 63 124 59 68 106 233 188 192 11 157 14 137 234 79 135 187 212 113 251 157 61 184 236 0 136 193 159 189 24 28 51 194 223 75 45 6 63 3 61 142 253 208 243 91 115 176 31 117 64 127 44 107 118 120 52 2 105 27 254 108 176 63 140 110 90 230 108 48 60 195 179 183 15 246 176 25 248 3 172 9 247 220 78 219 175 49 217 175 54 197 187 96 225 227 49 155 113 156 169 191 164 124 63 218 77 136 130 133 173 106 239 18 95 183 119 161 205 214 212 155 181 59 71 231 55 246 172 125 124 140 228 220 62 134 213 193 172 61 220 167 157 134 68 69 109 102 180 218 237 30 91 252 68 139 189 19 126 2 102 245 218 3 50 18 237 46 225 211 238 146 185 107 159 176 149 67 224 104 43 156 181 153 157 108 143 216 217 71 67 118 145 99 118 62 182 56 218 197 86 158 96 171 128 18 78 13 108 78 231 212 196 211 116 78 45 90 116 13 180 175 157 174 201 22 22 46 102 37 176 121 54 135 205 64 240 131 134 115 213 150 68 200 184 255 8 9 237 17 217 147 37 180 199 136 236 218 250 99 44 137 142 177 94 253 73 208 89 82 127 100 140 170 104 208 45 99 180 205 49 218 5 124 216 51 245 47 105 164 243 109 252 108 82 134 85 130 97 17 58 216 238 20 60 174 205 240 161 237 11 241 241 236 12 62 122 6 31 203 204 34 52 89 178 143 153 12 33 147 33 100 51 132 108 134 144 61 27 246 127 97 82 29 162 9 13 199 176 226 148 221 198 112 120 74 43 170 96 248 152 99 136 241 211 191 52 54 99 102 145 158 89 166 74 209 138 129 52 124 14 165 57 14 43 64 25 122 12 74 90 191 54 48 77 191 28 152 79 57 152 123 20 184 179 201 85 24 6 225 36 138 63 226 224 46 81 74 150 134 252 80 8 166 193 123 173 97 149 166 125 67 183 213 221 86 47 232 182 142 206 144 36 62 64 36 163 160 116 207 53 189 210 88 90 158 201 176 180 140 73 101 236 138 59 116 107 194 160 243 66 134 220 116 69 14 133 94 100 46 205 154 100 87 14 178 186 0 253 12 253 148 101 141 210 0 217 14 3 200 24 75 186 21 113 136 116 134 81 88 212 81 81 45 22 235 22 17 98 10 39 100 83 196 137 148 106 13 64 205 235 86 220 81 235 118 208 1 101 159 176 131 190 47 84 51 240 153 87 170 103 171 53 170 235 209 179 47 57 70 24 85 95 41 209 105 73 42 38 57 29 69 126 25 30 154 193 199 188 117 124 134 253 54 99 255 97 123 142 244 31 199 120 177 26 183 144 178 170 23 146 54 237 197 233 156 63 74 209 61 199 203 48 67 37 98 18 225 183 194 234 42 101 187 12 178 128 99 102 77 236 210 182 179 126 167 132 11 154 78 192 128 68 83 83 29 201 62 27 229 197 113 203 74 72 70 118 9 203 25 9 203 137 254 68 73 32 99 110 227 64 146 79 178 122 28 17 190 161 240 70 144 220 152 91 34 62 32 178 204 47 17 31 6 149 33 126 152 13 46 170 192 75 54 99 97 56 65 234 92 25 223 41 247 76 240 96 4 216 119 87 13 240 0 112 53 167 83 134 153 108 52 138 49 171 227 32 171 73 209 116 10 29 228 208 172 222 199 99 247 216 49 25 116 12 195 114 216 25 211 210 212 24 43 158 25 101 160 219 138 161 187 164 244 218 135 184 154 188 90 108 150 13 205 40 68 168 153 251 40 211 145 77 143 123 41 20 148 148 68 203 50 85 104 185 12 45 151 161 229 178 174 204 8 16 63 140 35 169 43 163 141 25 28 86 192 241 97 236 173 4 218 111 11 114 36 30 67 209 103 40 146 139 150 66 81 95 22 69 155 161 200 84 76 9 163 19 48 28 205 2 28 29 157 167 1 124 158 7 240 57 146 92 241 92 174 121 174 157 7 38 91 147 2 19 156 206 106 74 57 162 135 83 133 218 111 85 122 113 41 173 44 231 61 171 213 146 58 51 26 234 241 202 249 143 12 12 245 97 1 228 32 109 105 152 237 89 172 158 29 234 204 111 137 255 178 233 170 212 150 210 157 94 153 69 184 3 233 42 163 102 186 42 31 165 175 149 40 117 40 177 199 6 192 239 35 78 230 134 112 26 209 112 255 199 123 139 147 181 114 156 182 98 156 62 80 217 230 230 18 195 69 60 230 135 118 205 32 141 155 4 157 65 163 51 104 116 6 141 206 160 209 75 66 243 84 169 66 124 52 166 186 250 100 185 94 223 252 232 75 17 25 57 12 33 135 33 228 44 69 217 135 188 8 161 56 122 189 171 35 12 28 37 176 216 4 147 195 96 114 24 76 1 131 41 96 48 5 74 223 191 75 101 178 56 220 50 66 174 81 40 211 37 184 95 108 114 27 126 194 2 131 18 174 88 21 215 193 112 166 101 6 27 116 101 144 95 185 203 169 29 7 238 206 122 12 42 143 57 255 108 172 33 63 49 82 140 221 33 47 125 78 30 69 38 99 135 94 35 165 45 49 2 34 105 234 25 71 150 197 77 115 142 172 178 51 146 46 150 205 136 7 107 197 174 60 84 162 71 38 85 226 249 138 38 231 223 66 85 143 196 172 117 46 109 37 49 122 141 100 210 218 244 44 237 215 39 153 36 244 84 41 147 228 77 43 224 249 48 227 230 191 95 237 152 123 201 129 44 201 52 110 160 155 198 96 33 142 105 176 190 228 96 157 226 144 65 252 144 59 17 158 95 242 210 254 69 222 85 80 183 56 1 163 153 69 48 89 82 104 41 66 33 145 106 35 133 158 11 44 141 18 233 12 92 75 30 22 7 203 244 88 236 67 145 206 46 5 108 164 124 174 203 34 31 27 151 148 78 92 136 225 243 20 134 31 168 164 118 135 74 123 47 104 250 204 60 207 21 35 26 122 165 33 197 76 86 193 208 76 24 48 80 77 14 106 104 74 249 181 9 207 17 49 195 189 32 194 4 213 101 176 122 28 87 143 1 27 122 12 216 144 3 27 122 114 188 142 31 6 226 67 166 131 179 77 241 7 145 96 234 15 120 76 138 117 172 44 197 57 156 79 215 169 68 33 146 116 27 129 223 154 148 130 95 74 209 197 232 23 142 187 230 228 74 108 238 247 217 12 123 112 144 8 123 90 90 180 36 164 25 138 74 164 201 136 35 192 164 232 3 166 248 101 225 125 20 195 203 38 97 189 167 50 250 18 254 143 24 212 22 197 22 70 48 45 129 111 25 255 199 145 24 35 203 172 200 183 67 170 148 203 7 215 181 171 129 43 128 51 162 56 71 66 0 154 139 153 226 91 117 14 153 151 99 148 227 223 86 77 254 45 101 166 120 106 47 10 164 26 1 14 167 61 206 208 175 173 162 95 1 167 204 19 14 143 227 28 30 200 193 50 91 116 193 178 80 3 6 232 112 192 169 153 127 71 160 141 72 73 201 34 194 233 243 89 30 243 234 138 115 76 251 176 254 95 139 199 146 178 227 228 181 179 207 69 177 95 5 31 32 171 168 94 221 196 193 60 50 255 165 66 134 158 4 250 158 230 239 124 79 207 4 61 167 200 112 225 32 199 106 49 91 173 223 180 66 204 132 153 79 158 100 205 186 110 122 79 85 56 67 97 75 174 139 25 84 79 44 84 112 48 203 155 152 82 64 81 63 69 254 155 183 45 232 121 226 150 33 91 150 131 84 152 235 131 184 240 128 166 243 172 167 124 56 44 239 166 87 170 54 147 188 79 78 127 1 3 50 96 64 122 115 142 58 119 61 211 213 102 25 64 211 0 62 225 0 190 100 243 177 249 208 100 250 217 232 95 197 65 118 153 236 141 84 183 23 199 213 229 18 56 56 196 88 81 27 99 159 135 92 166 165 134 37 149 72 198 99 230 201 64 27 229 42 196 135 193 105 202 108 235 204 154 72 74 90 30 227 114 131 70 166 167 210 83 150 0 90 33 194 98 204 200 18 227 190 78 121 128 213 49 165 165 26 51 162 158 157 215 247 171 193 88 37 40 143 184 247 24 101 189 199 40 40 1 98 153 112 115 217 4 144 90 69 77 21 130 44 42 79 71 65 241 96 155 92 33 41 248 114 192 61 236 15 218 59 137 47 217 131 16 112 150 20 6 56 231 42 12 13 199 102 24 186 89 12 131 10 16 186 74 61 84 58 53 108 232 183 142 87 35 180 48 75 152 38 87 67 90 90 180 100 189 215 229 221 183 60 104 66 225 216 32 73 113 184 98 169 58 173 84 38 169 182 46 122 121 239 154 248 118 30 171 177 189 120 208 60 142 85 164 65 115 36 88 194 139 125 176 216 7 230 95 123 83 238 95 227 135 190 192 112 40 66 191 129 224 72 150 244 40 135 169 168 11 236 210 51 83 21 136 142 237 76 112 45 180 175 74 116 93 104 175 9 67 85 49 130 58 254 227 152 90 42 76 67 79 29 176 248 60 187 230 243 162 14 223 101 153 34 10 75 196 24 121 59 9 83 196 152 185 148 29 207 7 49 137 166 217 163 137 233 65 37 133 234 233 212 245 125 42 88 20 22 243 165 114 111 21 170 176 32 62 84 170 39 174 239 242 245 93 182 62 134 146 172 117 139 27 235 22 211 80 1 41 41 232 33 11 13 171 117 246 215 132 103 177 117 201 90 232 82 117 131 85 124 73 174 153 99 229 96 168 20 73 43 173 75 94 98 34 175 66 38 91 129 201 85 145 34 230 156 185 32 248 196 198 247 90 242 126 20 225 150 63 224 32 90 90 167 70 121 91 171 204 60 154 50 33 141 149 117 113 178 0 130 170 40 82 17 229 210 102 166 167 200 5 31 50 27 93 5 167 71 9 78 169 119 146 23 34 166 52 48 229 166 30 9 200 140 197 58 23 42 13 140 49 85 145 161 177 81 200 182 99 15 230 45 123 12 3 61 202 65 46 189 151 97 115 235 142 57 24 229 71 1 227 88 197 114 171 23 5 10 71 112 81 212 119 40 92 231 195 121 215 121 17 116 207 99 155 123 65 179 62 170 14 51 168 71 8 151 87 61 170 39 79 141 51 4 74 111 90 40 95 153 76 172 108 137 149 202 39 60 154 65 60 88 48 239 192 148 237 192 236 81 89 23 37 166 159 174 162 3 59 229 19 176 18 134 254 98 163 33 202 83 37 119 122 69 221 87 232 96 159 61 243 131 70 92 215 172 131 115 149 148 150 82 9 125 47 59 216 21 41 173 134 122 252 80 42 240 13 213 20 168 242 7 229 52 78 50 204 197 189 152 116 30 155 169 43 220 96 203 97 102 217 173 166 173 79 226 200 249 3 133 50 111 233 197 129 159 22 102 204 140 213 21 196 21 217 105 79 57 69 14 243 32 41 196 205 42 35 48 121 90 203 252 155 225 124 16 184 8 193 167 41 4 255 69 73 156 29 202 84 84 198 144 18 131 21 38 187 198 56 218 139 67 233 218 227 3 24 43 151 48 66 148 132 8 91 138 130 116 42 242 161 21 226 131 24 126 233 115 103 18 111 145 13 200 166 188 75 121 228 112 145 20 190 227 82 96 143 126 10 169 250 245 19 127 13 217 185 198 30 88 31 19 76 117 58 97 83 169 202 42 182 146 77 178 138 45 121 83 148 106 155 231 146 74 30 168 197 115 68 22 79 173 195 146 184 132 139 39 109 223 250 92 56 153 100 38 73 43 53 84 230 101 71 202 208 223 159 117 123 157 235 155 212 83 168 30 242 167 80 181 41 52 250 20 7 76 81 60 63 3 215 158 41 215 214 123 246 84 200 158 61 5 139 131 184 21 207 161 13 97 156 242 159 112 129 95 165 70 85 62 197 116 23 242 54 92 240 103 236 188 140 7 8 186 7 47 224 222 240 161 69 112 253 131 35 248 124 208 199 199 156 116 217 83 76 116 250 153 165 54 25 98 19 127 196 9 110 123 141 219 244 229 207 99 212 60 133 216 132 63 41 57 61 229 114 26 240 167 142 177 55 86 125 38 20 146 119 131 69 124 54 136 106 159 179 18 251 212 147 104 192 36 26 52 18 173 35 81 241 252 90 246 6 118 142 151 36 81 245 62 103 37 246 169 39 81 139 73 212 48 26 145 86 17 233 221 120 164 95 55 157 18 99 13 226 207 208 73 113 133 184 112 122 203 89 238 150 122 77 50 89 147 204 70 137 170 40 209 227 152 23 206 105 160 44 203 241 91 49 127 199 111 144 148 228 150 222 178 84 239 183 26 185 85 145 219 163 12 159 99 24 145 78 41 164 57 90 108 59 43 216 86 79 114 54 147 156 221 72 174 138 228 158 112 201 237 243 39 94 124 164 106 167 180 252 158 112 25 169 246 56 91 184 71 61 89 250 76 150 126 35 203 42 178 220 230 178 100 79 252 236 208 29 167 223 32 190 205 229 52 191 253 108 193 246 122 82 52 184 93 198 101 199 72 53 188 219 49 51 223 172 204 55 59 243 109 52 150 236 122 226 104 176 247 215 39 83 152 35 62 120 40 214 159 229 172 175 119 55 14 187 25 167 209 201 58 110 97 159 60 170 48 245 132 186 136 231 77 197 250 179 156 245 245 164 213 98 210 106 53 210 170 35 173 46 123 55 72 140 135 144 74 178 254 44 103 125 61 105 121 76 90 94 35 173 42 210 18 17 206 128 108 46 155 6 46 123 202 201 22 217 83 78 182 212 147 217 132 201 108 210 200 172 78 15 123 169 177 7 155 203 61 44 89 127 150 179 190 158 180 166 76 90 211 70 90 117 226 154 126 50 154 23 251 27 143 98 75 149 222 118 86 176 173 158 228 34 38 57 188 191 3 74 96 215 17 224 215 41 1 126 134 189 6 84 170 255 154 170 13 88 145 70 34 70 75 137 157 175 235 99 51 141 157 254 131 147 8 160 72 54 33 1 43 201 120 93 23 89 129 2 212 2 248 185 4 112 10 90 177 46 15 226 31 146 70 140 117 51 8 242 238 127 18 193 230 236 70 95 62 178 16 230 21 95 232 182 160 22 186 188 79 213 50 52 142 70 165 31 7 84 47 136 175 109 78 128 118 85 109 51 117 43 204 182 77 255 193 244 196 86 99 236 183 140 113 118 171 29 131 99 76 237 8 190 101 182 186 98 163 27 76 67 221 200 110 108 57 249 39 54 228 22 201 226 187 127 205 191 45 165 248 43 89 168 90 0 61 229 0 225 150 49 245 153 43 154 101 41 83 147 82 229 116 221 242 176 253 106 149 211 117 211 15 90 121 42 7 148 238 202 199 186 69 135 182 10 14 53 228 22 149 234 49 119 186 249 183 165 16 207 184 66 48 87 32 38 207 69 214 42 223 28 167 76 8 127 119 71 94 179 85 130 91 215 69 110 27 94 172 233 248 64 53 157 87 218 41 159 35 254 235 98 82 50 125 61 112 252 28 50 105 41 141 197 18 231 185 109 214 142 185 58 225 239 69 0 9 74 45 106 85 25 128 202 157 231 182 0 218 74 177 246 71 122 57 222 101 10 24 91 213 26 191 101 187 134 228 219 89 241 221 142 39 94 40 217 127 47 222 234 134 230 212 112 149 55 50 141 38 227 112 50 143 233 237 52 225 182 196 241 136 139 35 245 36 102 216 182 192 120 178 183 28 229 89 31 79 247 116 217 190 36 214 199 117 101 237 76 89 31 60 176 37 109 108 165 226 37 60 60 175 231 195 191 146 198 243 78 55 255 182 21 129 25 207 121 147 153 67 53 249 237 225 145 111 73 202 42 115 158 219 166 172 33 189 135 225 90 162 44 165 138 249 150 15 13 207 83 49 219 196 223 60 21 27 59 99 107 108 228 168 152 120 189 152 90 197 38 83 252 85 130 128 106 237 149 13 200 238 116 243 111 75 13 30 199 106 240 145 151 219 225 235 117 222 45 38 203 121 143 207 76 111 156 35 155 164 193 102 80 224 168 203 190 34 24 157 52 213 228 6 110 106 87 226 158 181 125 21 105 209 253 110 231 250 38 245 182 222 39 36 214 55 218 17 21 53 103 222 170 30 87 210 78 227 249 57 129 118 85 227 157 188 45 218 234 210 251 119 241 93 187 248 206 102 124 107 177 25 191 147 23 159 215 226 193 186 22 189 82 19 127 29 218 179 5 127 13 216 130 223 102 210 219 137 147 183 191 143 180 63 80 61 115 222 218 254 40 181 231 75 154 95 116 165 189 205 125 147 239 163 212 83 10 119 201 201 79 222 223 139 111 177 183 52 71 106 71 242 22 251 226 118 60 166 71 69 94 112 15 89 245 198 250 212 91 223 165 35 135 52 173 108 66 121 72 213 145 121 111 121 127 68 71 226 81 167 218 88 251 95 38 163 248 189 213 17 37 16 62 73 239 35 126 12 120 125 166 124 55 86 243 12 169 194 246 42 247 174 182 196 252 192 57 108 229 61 151 121 71 242 147 148 12 69 149 232 37 243 222 98 73 182 36 201 60 129 235 77 232 85 174 248 72 6 154 132 76 88 92 104 147 156 22 62 73 36 30 191 159 238 61 29 247 41 62 34 251 142 236 109 122 142 37 190 39 59 111 127 249 10 137 118 117 248 131 177 2 26 33 79 235 152 44 197 103 41 29 59 166 106 186 43 254 192 232 115 178 203 226 90 134 116 20 155 254 149 233 211 74 237 193 119 101 171 180 231 121 44 91 166 5 151 185 173 150 239 243 41 61 149 224 119 158 135 64 254 152 204 93 121 43 171 183 208 179 34 9 171 67 234 43 197 103 72 245 153 185 51 60 163 228 50 190 1 9 36 2 252 21 16 235 44 106 135 140 194 122 222 207 253 56 197 184 59 41 206 157 101 222 165 190 152 157 183 56 59 255 66 122 245 11 92 227 215 134 161 75 51 180 213 48 116 195 208 13 67 55 12 189 70 134 126 52 207 208 154 217 112 116 105 142 182 27 142 110 56 186 225 232 134 163 215 200 209 34 199 49 160 122 229 198 131 46 207 206 78 195 206 13 59 55 236 220 176 243 6 114 28 3 144 53 94 15 123 82 195 208 101 25 218 109 24 186 97 232 134 161 27 134 94 35 67 127 195 25 122 8 231 22 15 241 98 251 83 229 128 198 94 225 216 112 118 89 206 54 27 206 110 56 187 225 236 134 179 55 224 85 167 56 187 97 232 210 12 109 52 12 221 48 116 195 208 13 67 47 205 208 10 73 222 219 202 59 227 142 176 115 83 121 215 176 115 195 206 13 59 171 217 57 145 206 50 236 124 63 43 239 238 10 67 55 149 119 13 67 55 12 221 48 244 58 25 250 190 86 222 221 21 142 110 42 239 26 142 110 56 186 225 232 117 114 244 253 171 188 187 43 236 220 84 222 53 236 220 176 115 195 206 155 200 113 220 175 202 187 187 194 208 77 229 93 195 208 13 67 55 12 189 78 134 254 179 84 222 221 21 206 110 42 239 26 206 110 56 187 225 236 77 120 213 247 171 242 238 174 48 116 83 121 215 48 116 195 208 13 67 47 207 208 29 216 11 229 159 226 129 248 177 207 140 161 147 231 208 191 201 236 85 157 173 3 232 73 190 102 195 239 4 238 218 91 9 91 23 51 152 44 129 64 242 109 151 97 142 167 153 43 231 105 111 75 193 154 226 152 69 117 221 233 125 217 131 89 147 30 41 143 75 166 247 157 183 46 22 160 231 108 68 247 132 62 237 100 116 165 170 238 137 17 17 206 125 247 82 215 92 41 247 181 110 93 67 143 195 92 147 182 121 247 88 219 158 114 109 75 51 182 236 141 126 197 245 13 115 6 224 181 220 139 58 99 75 146 95 190 47 42 71 244 77 149 113 227 137 174 210 19 53 165 43 52 158 232 93 247 68 13 73 247 214 195 207 219 9 159 2 67 167 218 185 4 67 227 123 209 207 169 63 223 125 134 150 89 183 97 232 134 161 27 134 110 24 250 238 228 10 158 36 124 170 77 10 57 250 89 166 247 239 16 242 236 85 133 23 169 184 237 81 102 214 159 216 86 157 169 77 122 177 155 7 189 9 98 26 64 20 89 217 132 95 61 102 106 92 135 251 96 139 4 98 30 113 123 68 49 31 242 181 204 212 249 28 97 111 148 35 92 137 35 22 247 95 185 125 101 251 84 158 54 213 239 83 235 209 67 181 222 212 209 192 237 204 153 150 203 87 57 220 11 136 200 254 163 151 208 130 95 27 246 175 175 133 85 243 85 206 202 52 179 201 87 229 121 168 42 109 169 163 123 207 168 255 94 16 187 100 206 166 253 128 191 53 52 112 172 249 160 5 33 252 69 207 115 74 30 171 77 150 82 104 32 102 182 80 255 34 98 71 166 51 184 55 242 37 234 237 4 246 207 106 224 127 195 149 218 128 85 68 72 50 22 121 3 152 93 18 147 160 45 255 29 190 95 197 56 163 118 253 59 70 236 1 93 121 7 255 102 206 250 149 54 41 153 149 90 143 36 23 97 159 110 193 3 45 144 52 238 11 64 201 145 246 9 23 216 121 226 212 140 150 108 131 38 79 192 191 253 76 56 236 164 122 183 120 145 208 46 241 246 7 216 214 139 121 251 83 13 189 64 102 177 97 123 68 209 138 65 204 100 0 166 246 92 36 227 113 189 8 136 193 144 187 38 240 31 253 28 127 35 122 241 53 236 247 1 153 128 188 158 55 220 234 188 1 244 197 43 142 213 108 242 92 58 238 45 247 88 231 143 252 27 220 151 35 73 79 190 106 114 244 88 99 47 56 203 63 246 105 78 139 47 225 12 227 220 168 34 239 122 233 163 84 87 219 6 121 76 73 95 202 93 233 73 106 255 242 87 201 191 167 105 110 28 82 116 79 201 81 229 239 41 255 74 121 247 84 124 149 167 138 171 44 210 170 103 202 43 149 209 40 25 13 113 197 172 62 21 221 89 185 35 158 42 91 184 88 107 183 96 79 228 195 119 240 87 214 32 163 112 207 180 92 228 186 130 244 158 243 216 202 213 16 233 189 229 187 52 54 96 3 242 248 181 26 75 127 7 44 120 25 199 199 220 19 215 254 33 123 243 181 109 186 5 44 140 236 59 38 95 145 249 146 62 72 212 200 120 149 184 29 53 65 39 187 143 220 237 83 76 62 33 219 46 103 161 214 195 221 207 161 13 243 72 188 33 204 177 47 188 143 99 154 249 126 22 74 104 149 57 106 61 90 81 77 158 213 116 229 81 234 117 129 59 188 221 23 181 236 57 202 213 38 159 37 164 40 55 160 172 163 47 69 26 168 39 65 38 51 73 249 6 26 227 156 74 58 241 32 55 187 167 138 8 31 2 194 31 41 55 129 120 255 81 152 7 170 31 131 108 165 242 40 168 13 147 141 199 153 42 121 85 147 249 22 172 65 59 112 77 154 180 26 22 152 198 44 96 221 57 22 216 78 152 159 206 246 65 59 167 126 243 105 118 208 7 208 14 250 163 235 155 87 189 61 124 13 227 107 182 152 37 235 76 199 97 107 241 195 76 178 23 100 165 86 126 78 204 100 173 242 156 143 133 45 91 233 89 215 163 223 42 221 172 166 221 207 181 67 186 215 127 64 12 133 25 247 207 116 101 212 25 100 203 213 104 251 36 214 118 243 206 105 59 198 29 243 247 93 198 122 125 77 209 103 117 91 185 13 71 92 208 190 113 196 41 181 84 61 66 242 8 142 99 90 121 91 150 181 140 174 84 211 190 47 211 179 54 106 217 81 147 236 168 193 117 231 123 202 220 77 52 87 17 23 139 108 201 237 196 197 235 145 72 22 191 170 118 45 229 51 215 238 233 217 204 132 25 103 38 156 38 51 209 100 38 154 204 68 147 153 248 75 102 38 84 220 154 101 231 7 112 118 156 183 56 141 249 248 107 30 161 138 57 140 59 60 179 177 11 231 248 136 249 237 90 227 170 62 240 171 73 30 85 64 236 28 194 210 166 81 132 52 59 59 52 134 85 174 2 230 62 217 199 197 152 46 146 202 35 106 209 123 62 90 206 42 59 234 100 240 35 170 50 210 73 30 17 161 30 209 184 77 50 182 168 147 36 48 174 191 93 59 185 174 72 92 133 99 22 253 191 199 163 136 12 251 228 123 29 188 13 216 22 17 71 218 241 136 137 136 188 239 146 95 178 30 188 19 236 138 49 222 18 223 161 101 199 116 246 58 149 118 89 180 205 191 28 218 42 20 139 113 255 90 59 128 51 124 166 168 241 156 198 39 119 226 115 172 198 23 215 99 95 220 186 115 82 248 79 178 208 233 187 23 118 250 146 60 129 128 70 151 63 199 21 49 223 64 27 127 32 246 204 255 117 55 98 79 22 73 173 88 234 79 73 110 34 98 94 94 226 14 72 204 35 75 237 194 189 186 100 85 34 30 255 218 212 3 35 202 45 27 84 85 224 80 117 1 86 196 162 247 228 209 30 129 38 231 145 215 37 241 119 169 59 79 75 59 191 142 64 142 195 242 206 48 63 186 239 111 36 31 82 44 205 69 154 48 224 90 142 185 158 85 244 125 100 96 139 42 105 24 3 155 116 126 143 52 1 71 155 28 210 4 236 225 17 233 194 132 124 17 155 216 32 162 222 31 110 68 19 190 137 251 55 222 121 86 142 114 94 235 11 104 97 86 146 223 230 30 253 79 88 6 218 69 102 60 227 11 228 185 141 104 66 145 52 139 53 97 91 251 69 195 25 241 239 86 160 5 62 159 255 134 12 224 198 57 86 147 236 48 206 141 27 19 31 32 99 184 52 250 52 38 46 136 104 60 202 164 172 44 122 254 155 201 198 252 155 223 117 85 13 120 174 60 242 54 165 159 47 193 172 228 31 242 58 165 75 170 169 126 31 207 125 204 174 173 46 245 144 172 57 70 19 88 71 203 98 11 54 167 97 62 182 104 253 9 189 47 25 193 50 168 111 103 215 46 229 253 26 84 141 23 81 46 132 101 161 125 234 133 173 57 191 75 212 141 254 185 240 207 199 178 140 36 158 193 25 223 211 44 9 182 101 39 174 142 174 203 130 217 104 196 190 195 209 200 119 196 117 201 189 191 161 156 213 39 154 123 127 85 114 254 200 183 5 231 88 133 39 93 116 126 21 95 59 27 225 220 69 90 35 231 117 78 104 36 23 199 212 68 255 223 37 171 183 147 108 169 173 111 83 210 28 172 27 71 11 27 82 150 77 39 95 235 123 218 50 230 213 28 22 96 99 144 199 206 230 54 160 173 157 146 197 70 159 108 51 86 55 160 187 126 3 216 137 187 46 39 197 111 149 71 126 230 75 185 118 54 111 12 115 93 252 147 39 203 172 22 124 169 237 81 43 63 195 190 159 226 17 200 244 186 58 92 19 81 36 197 120 61 228 126 150 159 170 204 101 21 219 58 200 250 118 43 182 215 53 2 153 198 47 155 179 15 227 45 243 26 130 181 73 130 111 44 105 126 219 22 245 227 63 10 142 138 40 123 234 151 144 239 115 154 249 192 238 224 146 172 19 90 133 157 37 165 62 33 159 186 69 62 150 79 82 119 41 150 242 51 82 31 83 180 237 103 164 142 255 35 218 119 51 113 247 186 42 1 22 163 122 187 186 128 51 78 62 82 251 89 76 38 106 191 68 205 103 159 172 42 142 6 48 251 250 145 106 72 207 105 164 96 39 115 247 117 244 195 163 12 75 64 51 55 28 242 190 125 138 179 18 15 36 32 86 192 217 69 46 213 200 232 100 15 116 62 251 35 160 248 45 171 31 127 39 204 195 20 71 203 25 146 101 42 245 214 85 139 89 5 103 217 91 100 179 196 179 115 110 196 115 228 78 168 13 232 137 212 169 191 220 244 204 240 236 108 168 230 29 129 183 53 55 124 117 179 235 234 204 251 44 51 55 220 144 142 88 52 55 28 115 28 213 102 151 206 207 208 106 230 135 55 243 195 133 174 171 231 226 170 185 88 60 181 235 144 122 237 135 134 135 27 30 46 201 195 155 158 127 47 215 66 221 5 30 150 173 209 159 151 133 189 134 133 235 179 240 172 191 59 186 190 105 239 245 206 111 162 104 220 154 56 150 63 235 102 191 245 99 158 254 138 178 158 111 146 185 209 177 215 28 205 121 205 103 185 91 6 157 211 241 141 62 235 142 218 231 184 216 239 210 98 120 124 126 99 194 183 209 249 141 49 235 14 58 180 203 96 192 182 29 178 197 43 92 204 70 175 218 215 55 236 194 15 224 86 240 166 207 181 247 179 227 225 79 215 55 47 251 176 143 167 207 14 249 114 52 252 5 206 167 195 135 35 184 139 209 81 231 252 166 21 77 236 136 230 90 143 94 117 87 115 162 217 254 171 254 245 77 247 152 218 190 215 27 224 162 223 163 111 253 93 216 29 190 156 96 211 251 180 9 78 210 31 241 239 128 132 49 219 237 247 216 98 136 55 189 187 187 71 223 118 59 180 24 194 105 166 176 103 7 15 56 192 147 234 179 31 251 63 159 223 56 46 44 135 236 235 41 91 244 241 136 131 238 17 158 230 199 33 238 19 192 114 159 125 29 225 198 31 135 109 2 182 215 39 68 79 176 113 7 195 30 174 235 13 207 112 209 97 139 222 144 36 176 55 60 198 195 246 247 134 120 51 39 175 135 248 173 55 164 111 135 163 99 60 201 225 136 5 196 29 162 58 84 180 223 105 73 69 113 179 87 93 106 226 171 99 106 255 104 64 167 131 35 113 241 170 179 75 39 239 190 130 19 104 179 147 99 251 250 6 254 156 223 184 51 90 68 108 97 176 133 46 45 96 217 197 253 65 125 156 25 45 128 132 246 79 246 112 57 218 237 209 229 250 47 233 226 216 80 216 120 124 2 7 28 159 116 232 106 179 254 193 9 37 117 250 90 64 100 189 3 36 118 116 220 199 187 238 31 245 216 2 119 253 31 160 94 143 18 128 22 13 191 96 104 141 147 2 34 74 199 216 52 216 205 30 41 131 41 217 22 13 141 155 52 60 62 166 225 114 151 220 16 7 58 75 111 120 12 112 247 94 3 232 189 221 215 208 235 126 58 192 203 156 13 24 254 188 32 176 173 177 199 227 98 25 42 75 155 194 145 61 186 159 99 38 169 227 61 210 151 206 17 73 99 175 135 253 115 31 79 186 247 19 110 222 239 193 101 142 142 15 226 21 175 78 187 52 161 136 45 210 211 139 12 221 156 145 166 27 38 211 116 215 99 154 238 101 21 61 244 125 180 169 163 93 104 255 172 220 169 77 221 98 167 246 28 118 106 163 165 60 117 107 58 241 103 252 179 239 59 147 138 151 209 179 23 153 140 149 23 25 91 118 32 46 226 78 156 72 124 30 27 134 39 62 79 244 32 185 71 248 121 113 4 218 242 130 97 60 155 229 10 236 33 216 213 0 56 151 61 243 195 168 33 170 197 215 50 248 181 182 128 255 167 160 86 59 201 53 51 215 51 216 245 244 138 215 155 29 12 58 215 55 7 167 175 16 206 131 211 215 180 24 194 55 203 133 229 107 182 100 54 193 165 31 56 162 3 190 248 65 135 46 118 208 249 9 55 233 58 254 135 111 135 200 41 157 23 120 161 211 33 113 252 233 112 151 122 236 255 7 207 157 46 151 18 18 244 39 0 0 0 190 109 107 66 83 120 156 93 78 203 14 130 48 16 236 205 223 240 19 0 131 224 17 202 195 134 173 26 168 17 188 129 177 9 87 77 154 152 205 254 187 45 32 7 231 50 147 153 157 205 200 42 53 88 212 124 68 159 90 224 26 61 234 102 186 137 76 99 16 238 233 40 148 70 63 10 168 206 27 141 142 155 235 104 15 210 210 182 244 2 130 14 12 66 210 25 76 171 114 176 241 181 6 71 112 146 111 100 27 6 172 103 31 246 100 47 182 101 62 201 102 10 57 216 18 207 93 147 87 206 200 65 26 20 178 92 141 246 92 76 155 102 250 91 120 105 237 108 207 163 163 19 253 131 84 115 31 49 246 72 9 251 81 137 108 196 72 31 130 216 167 69 135 209 208 255 116 31 236 246 171 14 227 144 40 83 137 65 90 240 5 167 166 95 89 32 237 4 88 0 0 10 181 109 107 66 84 250 206 202 254 0 127 87 186 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 157 141 145 219 56 12 70 83 72 26 73 33 41 36 141 164 144 20 146 70 82 72 110 144 155 119 243 238 11 72 201 89 175 29 219 120 51 158 213 234 135 164 8 18 162 0 144 250 249 115 24 134 97 24 134 97 24 134 97 24 134 97 120 73 190 127 255 254 219 239 199 143 31 255 29 187 39 85 142 123 151 225 217 249 240 225 195 111 191 175 95 191 254 170 247 218 190 103 253 87 57 170 12 195 251 129 188 207 226 246 240 150 254 185 187 182 142 213 111 39 127 174 71 87 13 123 62 126 252 216 214 213 74 254 238 255 108 127 250 244 233 215 223 111 223 190 253 252 242 229 203 127 250 162 246 23 181 175 242 41 42 47 206 229 24 231 145 78 253 92 174 218 207 177 218 111 249 147 118 157 91 105 90 95 213 177 97 207 74 206 157 254 47 58 249 127 254 252 249 215 54 245 79 255 45 185 148 12 144 57 50 98 63 231 84 254 200 20 153 215 254 108 23 244 107 206 37 63 183 19 218 2 229 27 246 236 228 95 50 242 248 175 232 228 207 49 228 66 127 181 12 145 115 181 21 247 89 228 199 53 224 62 190 58 134 62 0 202 99 61 49 236 217 201 255 172 254 79 249 119 239 12 232 121 228 94 127 171 45 32 215 218 182 44 253 204 88 201 223 122 0 232 251 149 158 117 195 208 115 77 249 35 215 146 85 93 235 62 72 95 247 152 192 121 248 89 146 199 118 186 33 219 137 245 140 229 95 109 196 105 12 255 82 117 226 254 115 180 31 93 205 88 156 109 31 167 95 103 251 41 89 89 222 41 15 250 109 230 93 215 121 44 151 178 172 109 218 32 122 134 49 201 234 154 97 24 134 97 24 134 97 120 69 24 199 223 147 71 176 215 167 255 243 111 47 239 89 242 221 250 30 92 234 107 186 54 245 174 120 132 203 232 237 106 7 207 230 103 72 157 240 150 246 190 187 150 247 243 157 252 207 216 241 143 124 134 121 158 247 117 190 196 46 189 149 252 255 134 254 243 22 92 254 244 179 97 207 195 166 142 77 38 253 119 233 219 195 23 228 107 233 35 157 207 144 250 36 63 206 93 249 3 77 231 111 164 140 92 143 253 200 190 44 219 47 237 223 218 165 151 242 183 31 226 81 219 64 202 223 126 54 31 115 63 41 125 137 206 44 185 32 27 108 190 236 231 156 244 11 216 103 88 32 35 236 118 5 231 81 231 180 15 147 246 103 183 29 218 12 247 66 158 153 22 242 238 236 217 153 94 202 223 117 244 168 227 129 174 255 3 117 104 189 224 190 109 63 142 125 123 93 140 208 46 126 200 125 208 118 95 247 255 74 59 235 120 231 111 204 103 74 246 235 244 89 93 146 222 179 235 127 64 182 233 3 46 236 171 41 153 225 111 113 127 67 150 252 191 147 63 125 223 62 64 199 251 88 159 192 206 223 152 242 39 45 252 0 228 211 201 255 40 189 87 145 63 207 246 250 155 178 177 188 139 244 197 219 23 231 250 222 233 6 244 137 219 9 186 197 186 24 118 254 198 148 191 207 235 228 79 156 202 153 244 82 254 156 215 249 195 254 118 236 91 75 63 91 65 125 165 63 45 253 119 246 237 229 181 212 109 209 213 145 253 125 60 71 200 99 229 75 132 149 191 49 125 136 188 167 117 229 241 120 230 76 122 222 166 30 30 85 254 195 48 12 195 48 12 195 80 99 91 236 155 252 60 62 191 103 92 61 246 128 25 99 191 31 182 125 241 179 77 190 139 11 189 21 127 195 252 195 103 103 103 211 234 252 224 214 9 232 14 199 132 231 220 192 244 45 66 94 235 243 107 95 103 63 204 242 160 175 70 63 156 163 179 171 32 255 149 221 215 118 48 124 124 216 142 208 27 216 127 61 199 167 72 191 80 198 238 219 103 231 115 236 183 227 47 199 104 31 216 145 241 73 13 199 116 253 220 126 23 215 123 145 242 231 250 110 94 167 125 129 182 239 90 230 248 15 186 121 68 158 235 151 243 207 236 183 243 53 232 136 233 255 231 88 201 127 165 255 87 118 240 244 165 167 79 29 27 41 237 34 251 177 99 48 206 28 203 118 89 224 147 216 197 11 12 255 231 90 242 239 124 126 224 185 95 37 47 207 5 44 206 244 127 112 92 128 203 201 185 121 206 176 231 90 242 47 208 201 233 59 47 120 134 23 214 225 206 115 245 252 95 233 6 183 57 63 255 29 171 80 204 220 175 53 221 187 92 237 91 189 227 121 124 222 217 2 24 195 231 245 196 141 56 157 212 207 221 248 159 103 0 228 251 191 203 202 177 76 123 228 63 12 195 48 12 195 48 12 231 24 95 224 107 51 190 192 231 134 62 180 146 227 248 2 159 27 219 220 198 23 248 122 228 26 171 201 248 2 95 131 157 252 199 23 248 252 92 83 254 227 11 124 60 174 41 255 98 124 129 143 197 202 231 55 190 192 97 24 134 97 24 134 97 120 110 46 181 149 116 235 134 28 97 127 18 63 108 196 247 94 67 227 149 223 17 118 107 173 172 216 189 35 174 224 253 220 126 101 251 144 238 41 255 180 51 60 51 94 215 7 219 27 182 185 194 107 240 172 100 108 249 99 127 193 38 183 106 75 43 155 156 229 111 127 34 101 242 250 60 46 227 202 158 96 155 193 234 94 40 51 122 204 242 207 246 232 117 10 159 193 166 108 219 43 54 187 250 223 118 180 238 155 60 153 134 215 16 195 175 135 13 190 107 55 93 255 47 108 211 99 27 91 96 253 79 218 246 249 208 110 125 189 215 231 242 154 132 171 239 11 145 71 202 223 235 142 177 6 154 215 196 122 116 144 17 184 94 118 223 228 50 41 127 63 59 87 109 198 114 245 53 157 252 29 111 228 99 246 31 179 159 254 73 122 236 63 250 190 152 143 145 79 238 247 122 120 247 140 123 185 38 216 199 33 251 133 101 185 122 46 254 169 252 187 253 157 252 211 23 212 197 34 209 175 209 237 164 127 244 13 185 221 49 252 20 214 243 228 193 241 71 103 215 255 237 123 43 210 143 3 183 146 127 215 30 108 251 119 60 1 253 61 125 71 221 189 236 218 70 198 168 144 94 250 41 31 245 157 129 182 236 122 73 29 112 228 71 191 149 252 11 175 227 75 236 0 172 214 156 206 123 205 123 217 201 223 101 200 239 11 251 154 71 149 127 145 49 50 233 199 219 173 175 207 113 175 167 153 105 117 109 102 23 151 147 62 191 46 191 213 254 221 125 172 174 205 235 242 156 174 126 158 97 236 63 12 195 48 12 195 48 12 176 154 91 117 180 191 155 43 240 55 248 83 118 113 172 195 239 236 230 214 173 246 121 206 133 231 10 29 189 63 222 130 145 127 143 125 24 182 161 229 156 26 88 249 231 119 237 197 182 145 218 118 204 63 223 229 176 223 169 240 247 68 240 255 129 143 249 90 219 147 240 45 113 47 150 63 223 179 241 61 191 234 60 17 203 204 126 182 140 155 135 35 253 223 217 230 173 255 217 230 187 62 182 211 217 70 107 255 140 219 34 113 254 248 122 176 1 114 173 191 81 232 111 9 57 198 196 114 166 44 248 136 238 173 167 110 205 89 91 59 28 237 167 111 230 58 1 41 127 64 15 184 45 96 215 167 45 216 55 139 252 40 123 206 27 177 223 175 155 83 210 237 167 221 250 187 64 175 194 181 229 223 245 159 75 228 239 57 31 232 238 252 214 160 191 201 184 147 127 62 15 58 159 110 193 51 233 21 231 10 95 91 255 95 42 127 235 109 116 176 99 109 236 195 67 62 228 113 164 255 83 254 180 141 76 147 248 16 199 8 60 178 63 231 18 60 110 162 143 209 175 110 33 255 194 62 61 247 231 221 60 242 188 54 199 127 59 249 227 199 171 244 115 252 247 232 254 220 97 24 134 97 24 134 97 24 134 123 224 120 203 140 153 92 197 127 222 138 221 251 234 112 29 120 231 182 63 48 215 139 188 23 35 255 53 158 223 224 248 122 230 199 209 143 153 131 99 191 93 166 179 178 161 120 14 94 250 234 108 135 242 188 160 149 15 208 199 40 19 215 102 249 177 255 58 126 31 159 166 203 211 217 163 94 1 108 160 105 15 197 110 231 53 26 57 175 179 169 23 158 87 199 207 126 183 92 59 20 219 63 118 254 110 142 151 237 187 246 231 146 54 101 204 114 165 223 209 253 191 243 85 98 83 126 118 249 167 254 163 94 185 247 85 12 79 55 79 40 233 124 59 43 249 83 207 233 71 244 252 52 124 63 216 102 237 31 180 255 208 247 182 42 63 199 114 142 151 247 87 126 207 50 207 111 197 78 254 150 217 159 202 127 165 255 83 254 57 255 215 126 100 142 97 171 231 152 231 242 238 214 135 220 201 223 109 20 72 139 54 246 236 109 192 88 255 91 255 221 74 254 133 253 144 126 206 115 46 227 18 218 3 121 156 209 255 144 109 131 52 217 182 79 220 237 239 21 124 66 30 255 173 100 252 158 242 247 248 47 231 248 217 7 152 254 193 98 53 254 219 201 191 200 121 254 221 248 239 85 228 63 12 195 48 12 195 48 12 195 48 12 195 48 12 195 48 12 195 48 12 195 48 188 46 196 80 22 151 126 15 4 31 254 42 214 206 49 64 71 92 226 159 191 228 220 75 202 240 222 16 223 114 75 88 255 152 181 115 50 127 226 177 40 223 165 242 231 186 142 74 235 236 183 22 186 56 148 142 140 39 62 226 146 88 64 226 150 188 14 206 81 172 251 81 253 26 98 163 224 218 113 244 142 157 242 119 120 137 11 236 98 247 41 147 191 235 238 184 95 202 75 124 149 143 145 118 206 23 32 222 220 49 231 142 213 77 188 54 16 107 8 101 159 101 45 50 199 155 239 250 53 249 159 57 151 243 29 63 75 94 142 69 186 164 126 137 57 242 207 177 81 239 177 174 89 174 215 70 185 56 150 235 127 17 15 78 63 229 126 59 58 61 74 60 151 239 219 223 254 161 45 236 116 0 241 186 196 146 121 78 65 222 27 199 233 103 187 254 67 254 142 9 92 225 251 78 253 226 88 202 75 234 151 115 41 39 233 94 75 255 103 92 126 226 231 50 125 155 54 237 125 212 179 191 183 225 239 41 185 30 220 110 93 79 187 251 114 222 29 94 27 204 247 179 106 135 126 134 34 183 238 123 31 112 230 185 226 249 50 57 119 128 54 148 28 213 47 208 46 28 159 122 45 118 237 58 251 43 253 199 255 163 243 178 77 123 222 87 151 30 253 143 251 74 89 185 175 90 247 173 202 234 181 162 96 37 183 140 13 237 210 164 108 57 143 133 188 18 231 149 237 158 182 153 28 213 175 207 35 79 207 85 122 43 232 193 85 255 63 59 238 253 19 249 115 142 231 220 100 154 126 30 118 241 224 78 183 155 135 68 157 231 55 42 46 89 231 171 27 43 118 58 211 121 101 59 244 248 56 203 125 166 126 233 255 221 124 133 183 178 43 195 145 222 133 78 254 57 127 163 224 221 192 125 149 123 66 198 158 35 116 6 175 233 152 215 120 238 144 227 213 173 115 143 88 201 191 107 175 140 83 172 31 86 237 155 252 47 213 231 187 117 74 61 111 234 12 71 253 191 240 60 139 213 187 76 39 255 163 178 243 76 172 242 58 15 228 68 93 178 54 220 106 172 102 157 153 242 103 76 152 235 4 122 157 47 175 43 216 189 91 123 142 153 223 29 186 114 240 221 67 244 77 174 89 215 113 166 126 225 232 91 187 28 123 143 121 139 188 163 174 242 205 121 26 9 99 5 200 122 65 191 167 222 244 187 244 145 222 59 211 238 119 239 132 171 177 128 199 57 151 172 19 122 201 115 122 87 191 148 251 72 174 156 243 236 243 86 135 97 120 51 255 0 160 130 250 32 224 191 37 163 0 0 1 187 109 107 66 84 250 206 202 254 0 127 109 95 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 209 49 106 195 80 20 69 65 111 203 43 247 74 178 0 85 193 69 8 65 173 28 69 165 144 83 255 95 156 121 48 188 246 194 217 247 247 187 145 241 223 205 222 196 208 254 175 171 217 155 208 159 97 253 223 110 246 38 6 246 223 182 223 195 118 254 179 55 49 176 255 186 174 135 159 243 159 189 137 129 253 159 207 207 171 217 155 24 216 127 89 150 171 217 155 24 216 127 223 191 15 95 231 63 123 19 3 251 63 62 238 87 179 55 161 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 63 250 163 127 157 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 233 223 166 127 155 254 109 250 183 253 1 102 195 245 54 168 72 0 206 0 0 3 30 109 107 66 84 250 206 202 254 0 127 126 217 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 218 137 114 154 80 20 198 241 190 86 251 226 237 139 52 221 140 75 167 213 128 226 2 184 224 5 78 207 229 162 128 154 218 106 90 38 204 255 78 126 115 8 152 68 231 227 46 64 68 106 45 207 243 114 43 211 175 92 210 125 38 225 106 35 190 63 147 225 176 175 251 23 146 203 55 121 255 241 157 122 139 14 184 150 255 114 17 203 116 26 200 104 52 208 236 231 178 151 79 228 223 33 215 242 95 45 215 199 252 233 255 221 115 45 255 40 220 138 231 77 101 48 120 44 242 207 228 43 249 119 200 181 252 227 104 215 200 159 254 223 45 127 178 254 179 227 191 93 255 49 255 119 207 121 254 154 189 24 253 38 213 252 77 49 255 207 166 75 205 127 168 71 232 255 93 83 181 76 179 221 107 181 118 186 157 136 49 137 142 255 137 76 198 115 53 149 196 204 245 216 35 249 119 72 179 255 167 103 249 219 235 63 223 91 200 247 209 88 247 199 228 223 49 98 135 252 82 158 53 199 2 155 255 58 78 52 255 185 60 60 60 136 201 3 221 223 35 255 14 57 203 63 175 214 2 198 232 252 191 138 36 8 22 242 244 100 251 255 74 245 201 191 67 46 230 111 183 149 49 153 172 215 91 25 143 199 210 123 252 172 187 67 61 248 131 252 59 164 154 252 79 242 207 92 254 81 180 22 223 247 203 251 255 27 61 52 147 15 69 254 232 2 155 169 93 239 217 107 62 183 254 171 229 175 75 193 56 222 232 216 239 23 215 127 238 250 96 35 59 227 105 157 42 91 131 210 188 147 53 47 204 158 173 237 190 191 131 229 29 34 113 235 250 93 153 111 121 10 212 242 183 207 255 38 147 73 241 12 160 223 239 201 112 212 147 159 227 161 244 7 95 138 125 104 211 232 183 108 191 253 29 151 125 92 142 1 54 255 236 56 6 88 118 254 119 107 192 160 152 7 156 89 113 77 224 61 5 197 189 97 207 243 208 154 201 93 92 238 135 236 141 84 3 128 179 79 114 217 110 183 58 14 132 18 134 75 21 22 207 132 162 112 47 225 42 113 219 81 84 172 19 168 109 84 107 117 115 189 216 242 166 44 203 196 164 155 210 86 210 52 149 84 79 149 163 52 167 182 85 11 233 205 181 145 245 51 249 187 93 137 212 215 138 199 215 209 94 119 171 93 243 53 218 217 121 225 214 254 206 254 228 197 25 94 171 218 61 63 215 175 141 156 174 1 171 99 135 181 130 235 255 213 253 226 195 207 80 255 111 125 1 23 251 247 206 237 106 220 19 174 255 93 57 57 55 178 155 171 251 53 237 213 215 253 254 239 87 101 104 115 143 74 27 57 156 27 245 103 2 135 207 125 252 55 129 75 243 198 95 182 151 250 28 55 127 254 59 91 219 239 255 78 111 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 224 223 250 5 53 42 42 144 67 194 135 176 0 0 14 215 109 107 66 84 250 206 202 254 0 127 146 129 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 157 141 145 28 41 12 133 29 136 19 113 32 14 196 137 56 16 7 226 68 28 200 94 233 234 62 215 187 103 73 64 207 207 254 88 175 106 106 103 187 105 16 18 8 208 131 158 151 151 193 96 48 24 12 6 131 193 96 48 24 12 6 131 193 224 63 252 250 245 235 229 231 207 159 127 124 226 58 247 170 231 226 115 165 172 0 101 248 247 193 255 81 233 249 138 254 51 124 255 254 253 229 211 167 79 127 124 226 58 247 50 124 249 242 229 223 207 46 190 125 251 246 59 239 176 55 101 4 244 251 71 70 212 251 180 158 149 158 79 245 191 2 54 209 254 174 246 95 245 81 250 118 149 166 147 215 237 223 249 157 93 84 242 172 228 4 93 26 189 94 165 203 174 103 237 188 123 62 112 106 231 171 122 235 236 31 229 107 223 117 185 180 111 123 30 154 15 121 5 170 254 175 121 101 245 142 251 159 63 127 254 247 123 232 45 210 253 248 241 227 247 189 120 134 186 168 47 11 68 58 189 30 233 51 68 254 158 38 242 136 188 185 23 101 171 94 72 23 215 245 121 234 160 105 35 47 79 71 29 244 122 252 141 207 170 255 199 223 175 95 191 254 126 238 10 58 251 115 77 101 209 242 35 77 148 207 51 89 159 35 61 247 50 251 187 12 81 158 219 8 155 199 223 208 153 166 137 239 140 91 92 115 61 69 26 157 243 56 180 125 69 62 164 71 23 200 169 233 84 238 248 160 11 218 178 202 29 215 84 31 170 103 45 159 241 125 215 254 250 204 21 172 252 127 86 102 214 255 233 127 157 188 129 204 254 234 111 168 83 86 119 236 28 122 86 125 209 46 226 131 47 208 62 168 126 129 60 86 114 118 186 64 62 202 33 63 247 21 85 157 253 249 144 207 203 223 25 255 239 49 23 184 197 254 232 60 250 35 245 238 228 165 254 149 253 125 29 226 192 182 216 61 254 70 91 32 127 254 247 126 134 172 244 81 218 139 66 243 161 78 153 46 240 183 46 43 237 145 185 94 101 127 100 212 231 189 252 76 111 43 91 92 197 45 246 167 29 107 187 239 228 13 100 246 87 127 135 239 205 250 40 125 221 253 143 234 54 238 113 221 253 36 190 35 179 63 122 208 54 150 233 66 211 169 205 105 23 200 239 246 199 63 242 76 252 229 25 205 55 174 33 227 51 236 79 95 81 125 208 159 1 117 245 239 234 111 25 223 28 154 30 153 233 91 250 61 158 165 15 116 107 165 200 139 251 248 77 192 255 145 198 239 33 39 125 47 3 245 198 135 100 186 208 114 50 249 201 95 199 67 250 135 255 239 178 168 252 58 151 169 244 233 186 29 12 6 131 193 96 48 24 12 58 56 247 151 221 127 205 242 111 193 61 184 132 43 56 45 243 52 125 197 219 158 194 99 229 196 165 88 207 100 113 129 123 98 85 254 234 217 21 159 214 113 152 143 194 169 206 174 232 184 226 109 239 33 171 198 182 171 103 42 206 170 242 31 85 92 122 183 252 91 249 180 71 65 229 214 61 19 94 167 43 114 117 241 252 123 181 235 76 86 229 213 252 254 9 231 85 165 63 41 255 86 62 173 210 147 243 134 206 41 250 30 5 231 120 144 133 124 156 3 89 233 172 210 129 198 21 187 103 30 105 127 244 227 156 92 197 121 105 220 94 99 230 85 250 211 242 111 225 211 42 61 17 163 11 192 179 194 243 33 243 202 254 196 237 84 22 149 179 211 89 165 3 181 63 114 102 242 103 254 255 202 30 154 19 251 87 156 151 115 214 202 189 86 28 217 110 249 212 245 42 159 86 217 31 238 88 249 35 229 20 61 255 204 70 200 220 253 127 170 3 207 171 146 127 151 43 91 161 26 171 224 70 244 126 197 121 5 72 171 92 76 151 126 183 252 91 249 180 206 79 210 135 163 140 104 15 244 53 158 221 181 191 142 25 158 246 84 7 167 246 191 21 234 111 224 26 148 119 175 124 83 102 23 174 251 220 193 211 159 148 127 43 159 214 233 41 179 183 206 59 25 23 180 236 204 70 1 229 22 179 180 59 58 120 13 251 235 216 201 199 247 226 41 47 136 79 83 206 11 121 178 235 85 250 147 242 111 225 211 50 222 206 101 3 202 41 86 101 51 39 119 174 148 231 145 103 71 103 153 142 61 239 74 254 174 94 131 193 96 48 24 12 6 131 193 10 196 190 136 249 156 130 117 32 107 152 85 44 170 75 19 115 219 29 254 231 30 216 145 53 128 110 30 89 230 174 44 247 6 231 98 88 119 123 12 127 5 226 31 172 191 119 214 38 221 250 245 153 251 25 51 174 81 215 148 129 248 78 172 240 81 101 118 215 31 9 143 93 7 168 175 198 183 186 246 175 103 99 72 175 250 203 158 231 25 238 105 189 157 247 138 123 238 151 244 204 65 166 51 158 233 244 73 127 243 56 134 199 104 179 242 119 242 202 100 204 210 117 215 119 203 200 244 184 131 85 28 73 247 228 87 231 113 148 131 240 56 173 238 213 215 231 73 163 62 7 157 43 151 163 241 64 229 236 148 15 112 153 244 28 81 197 159 225 243 200 71 99 254 90 151 170 252 157 242 92 198 170 204 234 250 142 188 196 27 85 198 19 172 236 223 157 183 4 93 204 210 249 47 248 58 237 255 232 202 207 51 100 231 59 201 171 58 103 66 57 200 82 157 141 200 244 239 124 71 87 126 149 151 238 215 119 25 171 50 171 235 59 242 102 122 60 65 199 143 145 223 138 103 236 236 95 233 127 231 108 17 249 250 167 203 23 121 208 253 142 207 210 254 158 197 226 179 242 61 175 157 179 132 85 153 213 245 29 121 51 61 158 32 27 255 149 91 244 54 95 237 251 185 218 255 51 93 85 253 95 203 238 236 239 28 244 170 255 107 222 93 255 175 230 127 93 255 215 178 171 50 171 235 59 242 222 106 255 128 142 45 62 134 225 159 116 124 233 248 43 151 105 53 254 171 220 110 255 128 158 225 171 206 159 103 186 90 205 89 124 60 245 49 78 121 197 172 124 69 55 254 107 250 170 204 234 250 142 188 247 176 63 245 174 214 255 122 47 107 155 220 215 62 228 60 154 207 255 61 141 206 145 125 78 159 205 229 187 24 129 206 133 249 158 1 25 252 62 229 117 229 87 121 173 100 172 202 172 174 175 210 100 122 28 12 6 131 193 96 48 24 12 42 232 220 92 63 87 56 192 71 163 146 203 215 31 31 1 207 226 2 89 187 251 30 204 213 58 130 253 210 207 68 21 103 171 246 99 190 103 60 139 11 204 246 50 43 178 184 128 238 217 213 253 255 39 235 87 181 21 177 54 189 158 113 110 216 159 123 158 7 114 232 117 231 34 119 184 60 210 84 107 244 206 46 153 30 244 92 160 114 164 149 190 110 229 27 79 224 251 239 213 62 85 236 143 152 19 126 99 135 35 84 63 163 241 43 174 235 158 121 246 239 123 188 81 249 194 44 143 44 94 157 113 70 29 47 88 197 251 118 56 186 46 214 169 103 19 225 215 51 125 237 200 184 226 2 79 80 249 127 236 143 12 126 110 37 227 104 85 7 222 71 52 14 167 231 248 40 95 251 133 115 110 124 87 125 84 103 38 120 94 99 235 244 147 44 70 237 253 133 182 199 249 21 176 195 209 173 184 14 242 171 244 181 43 227 138 11 60 193 202 255 35 43 125 47 227 85 119 56 66 206 82 104 95 207 202 239 228 209 124 187 51 51 33 15 109 150 114 92 55 85 57 140 109 234 223 40 123 197 209 157 112 157 153 190 118 101 220 229 2 119 208 233 91 251 172 250 120 175 235 14 71 168 239 181 204 250 191 142 223 93 255 223 177 63 103 59 245 44 231 110 223 210 189 3 218 111 119 56 186 93 174 179 210 215 149 254 175 207 223 98 127 247 255 200 238 227 63 250 199 79 86 233 188 61 249 184 90 217 95 243 206 198 255 29 251 163 35 191 118 101 252 63 225 232 118 185 206 78 95 87 198 255 157 179 142 21 170 245 191 114 222 89 76 128 235 218 111 59 142 16 249 176 159 206 49 179 103 178 57 112 86 94 149 71 181 126 62 153 91 95 225 232 118 184 78 79 183 83 247 29 25 159 21 51 24 12 6 131 193 96 48 24 188 127 192 231 232 218 239 81 184 146 183 190 91 227 30 239 190 215 216 192 9 118 101 127 79 92 20 107 94 56 0 214 148 143 168 3 118 60 1 235 90 98 122 186 175 178 219 7 92 1 142 225 20 26 79 236 112 165 142 175 5 98 22 190 110 36 126 22 240 125 172 190 14 199 111 232 122 149 51 24 241 209 152 13 109 75 227 11 232 171 227 118 85 198 206 254 93 94 187 105 180 78 186 15 222 229 184 87 29 65 246 187 35 180 247 120 142 235 148 171 233 2 145 230 106 223 202 116 196 245 236 28 11 113 11 141 179 58 7 163 191 207 69 61 208 13 122 37 214 133 223 113 249 41 67 99 241 213 89 1 181 69 197 209 237 164 113 153 180 174 202 121 82 71 253 45 161 43 117 12 40 15 75 92 15 251 104 172 80 211 17 39 165 220 42 94 216 161 178 191 94 175 236 175 241 113 218 61 109 18 61 121 124 75 243 242 248 118 197 171 101 252 137 219 92 253 152 114 200 138 157 52 1 181 159 199 31 61 142 155 241 123 87 234 184 250 221 49 210 251 251 4 157 59 61 221 183 229 242 120 28 218 235 19 112 251 59 111 64 62 250 155 148 200 152 233 6 84 92 212 142 253 43 30 67 177 147 6 61 42 239 153 201 171 124 152 191 71 240 74 29 79 184 67 202 229 3 87 93 249 150 21 120 142 49 46 179 153 239 181 160 15 57 95 69 159 208 177 169 226 13 189 253 86 253 113 199 254 1 245 127 202 227 41 118 210 40 231 168 227 160 202 145 125 207 236 191 91 71 229 4 241 249 29 119 168 156 159 238 199 186 2 29 219 244 227 123 45 226 131 111 244 189 28 220 83 29 100 215 149 95 203 158 239 206 215 131 202 254 248 50 229 212 29 59 105 84 38 159 119 42 223 206 119 250 135 183 153 147 58 6 212 6 186 167 199 199 103 215 173 182 147 83 254 79 161 227 7 115 204 236 222 106 143 221 234 186 239 37 90 141 91 126 95 203 175 100 233 214 174 183 164 241 178 43 157 156 214 241 244 185 204 119 93 217 255 55 24 12 6 131 193 96 48 248 187 160 235 24 93 207 220 107 30 217 237 73 140 117 144 190 43 101 167 76 93 171 18 239 206 214 130 239 1 111 65 94 143 231 176 238 59 61 71 82 161 179 63 156 0 233 118 236 175 177 22 214 59 60 247 22 244 121 130 183 32 111 22 143 36 78 238 49 27 231 180 136 61 58 223 165 80 238 86 227 21 1 158 117 159 163 60 180 199 32 60 38 171 252 191 234 51 75 171 121 19 67 169 184 24 47 23 249 52 150 163 28 114 199 41 105 61 181 254 42 47 124 206 142 94 144 93 203 81 185 78 208 157 49 113 142 71 185 8 141 165 119 62 195 185 123 229 149 225 11 60 70 170 245 243 243 141 206 193 86 254 159 114 178 50 189 110 217 222 108 111 255 216 141 216 167 199 124 177 109 182 111 155 182 2 39 226 113 98 236 173 237 162 211 139 203 238 114 157 96 101 127 236 234 101 102 177 255 21 143 232 54 10 48 7 168 108 122 146 159 115 65 222 95 178 188 171 24 176 238 15 210 120 55 177 214 236 183 163 42 238 85 125 141 238 173 82 174 37 243 25 43 189 184 191 67 174 19 172 252 191 219 95 231 9 183 218 159 126 73 92 253 81 246 215 126 177 107 127 252 6 121 169 207 35 95 183 255 106 111 7 126 68 121 85 229 15 192 174 94 170 250 158 96 53 255 163 158 112 140 186 7 229 22 251 107 185 238 135 111 181 63 58 164 28 213 203 174 253 201 67 199 14 181 185 238 119 217 201 7 127 174 252 159 203 235 62 63 211 75 118 207 229 58 65 182 254 243 125 69 58 183 200 206 95 171 110 28 43 123 209 254 117 255 195 61 236 175 243 191 234 220 114 160 179 155 247 113 205 147 190 204 179 93 62 62 255 203 100 209 125 24 43 189 248 252 207 229 26 124 76 188 133 245 226 224 245 48 246 255 187 49 252 254 96 48 24 12 238 133 108 253 183 138 101 128 183 244 174 249 142 103 58 133 174 215 186 241 182 138 157 158 96 87 215 247 44 51 203 79 227 63 171 189 145 1 93 151 190 5 92 57 251 80 129 248 215 238 126 205 91 176 163 107 79 255 8 251 87 249 105 236 71 99 21 126 198 41 227 8 29 196 45 60 158 14 119 166 188 46 253 143 51 113 204 125 149 15 227 158 127 39 118 170 117 240 119 36 86 177 146 172 110 26 147 209 118 225 242 40 178 114 178 186 194 255 184 174 53 142 239 50 169 189 136 83 59 87 184 139 202 255 107 140 95 207 75 209 207 148 243 173 56 66 47 7 221 193 157 104 249 232 69 207 213 160 31 151 39 139 57 234 119 63 127 75 59 210 120 58 242 120 27 240 186 5 60 150 236 124 64 182 15 219 99 179 196 207 189 174 21 135 167 249 86 250 224 121 226 198 21 7 187 99 127 247 255 64 219 150 142 83 30 119 205 56 66 7 28 149 242 113 174 195 238 255 93 251 163 23 61 143 233 50 7 244 108 143 66 211 101 54 86 125 101 246 247 185 136 158 173 171 242 82 253 40 183 216 233 195 203 225 222 9 86 254 223 101 202 246 90 84 28 161 235 132 52 221 251 31 239 97 127 100 162 173 101 50 7 222 146 253 43 110 241 89 246 207 230 127 248 66 245 151 186 143 2 159 84 113 132 174 83 252 127 215 255 3 187 254 14 223 148 233 60 155 195 239 248 127 173 91 38 207 61 252 127 102 255 142 91 124 134 255 247 15 245 247 115 176 122 238 80 231 41 25 71 232 229 232 217 193 170 125 123 90 215 133 206 51 171 179 153 110 55 197 106 254 23 112 251 87 243 191 206 119 102 229 116 246 239 184 69 191 119 207 249 223 91 199 189 215 59 131 247 133 177 255 96 108 63 24 12 6 131 193 96 48 24 12 6 131 193 96 48 24 12 6 131 193 96 240 247 225 17 123 209 217 251 244 145 193 126 19 255 172 246 189 179 199 210 223 105 17 96 111 76 246 121 132 62 117 111 169 195 223 105 92 113 137 236 75 243 124 125 255 8 239 0 210 15 251 55 158 201 83 118 117 57 205 71 247 237 241 169 236 175 191 99 194 190 35 246 217 233 62 183 44 207 106 111 240 173 242 119 123 245 213 134 250 30 16 135 214 27 221 178 135 76 251 4 249 61 171 109 87 232 234 242 200 50 117 95 164 246 141 172 255 56 216 175 150 229 233 159 106 111 158 63 187 218 27 178 107 127 222 203 68 250 248 223 223 177 161 246 127 109 188 134 253 253 119 7 212 62 244 195 14 236 35 174 160 125 169 219 203 22 215 245 183 69 58 172 236 79 219 161 79 59 60 255 172 255 115 157 252 121 151 155 238 161 212 125 155 1 218 155 190 107 137 125 126 250 140 238 177 213 124 181 77 146 134 239 39 56 25 67 84 23 254 174 161 172 111 43 168 91 87 158 250 130 204 246 140 189 248 134 85 153 228 169 239 239 81 153 245 253 114 39 246 247 189 238 92 231 127 173 39 231 146 116 156 84 89 184 207 119 244 138 204 122 46 68 243 165 61 168 220 87 124 211 201 126 113 61 95 161 190 0 121 170 190 77 187 220 241 231 217 217 1 205 199 247 150 175 228 199 143 107 254 1 116 167 239 98 83 61 50 230 251 124 165 210 177 207 121 180 78 218 95 125 79 175 238 101 215 249 148 230 145 189 219 143 246 224 253 240 116 76 224 156 83 54 159 113 96 67 255 237 204 106 28 102 253 180 51 150 35 203 233 220 176 179 63 122 213 49 11 255 233 237 72 237 175 254 93 247 154 147 231 137 253 245 92 34 237 87 203 204 222 93 229 243 172 202 254 252 79 59 190 50 39 64 190 236 227 64 126 116 71 27 206 252 58 186 171 252 170 231 123 229 221 117 129 202 254 234 55 1 109 49 139 21 232 153 81 93 223 80 87 157 31 86 231 27 50 251 83 174 142 229 122 93 207 165 122 159 210 115 31 157 253 145 201 219 215 51 208 197 93 118 231 22 145 238 170 220 221 120 119 210 158 244 221 58 218 151 62 218 121 138 193 96 240 161 241 15 136 36 106 162 235 119 189 22 0 0 1 24 109 107 66 84 250 206 202 254 0 127 153 93 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 209 49 10 2 81 12 69 81 183 165 27 119 37 46 96 42 177 17 101 218 209 248 203 225 107 157 128 57 129 67 218 7 55 206 151 99 76 14 17 65 15 115 123 253 123 209 191 55 253 123 211 191 55 253 123 211 191 55 253 123 211 191 55 253 123 211 191 55 253 123 27 189 79 179 234 77 36 246 143 120 12 247 253 175 222 68 98 255 101 89 102 213 155 72 236 127 187 93 103 213 155 72 236 191 174 235 240 220 255 234 77 36 246 223 182 247 176 237 127 245 38 18 251 255 184 234 77 164 246 127 205 170 55 161 63 105 253 191 174 122 19 250 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 240 31 62 90 61 106 52 255 190 32 236 0 0 4 121 109 107 66 84 250 206 202 254 0 127 162 54 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 154 137 109 235 48 16 5 93 72 26 73 33 41 36 141 164 144 20 146 70 82 136 63 54 248 99 60 108 72 217 177 100 248 154 7 12 116 144 226 177 203 67 34 181 223 43 165 148 82 74 41 165 148 82 74 253 215 247 247 247 254 235 235 107 74 133 223 131 178 30 151 76 251 18 233 95 83 85 159 221 110 55 229 243 243 115 255 250 250 250 115 126 203 117 167 30 85 214 45 85 190 127 121 121 57 216 99 235 244 175 173 244 255 251 251 251 47 74 117 172 122 63 163 255 105 251 207 224 255 153 62 62 62 126 218 0 115 1 109 163 174 43 140 118 193 117 133 213 145 248 21 206 189 89 154 117 204 56 179 180 250 179 117 78 25 210 63 164 87 80 62 202 49 74 115 164 138 87 105 86 255 231 252 145 253 95 117 75 240 69 31 255 137 207 184 136 47 114 156 204 249 163 194 136 95 226 154 103 75 149 87 93 215 177 158 153 205 69 89 30 242 99 108 202 243 44 91 166 159 84 156 89 27 72 187 84 190 207 224 255 14 182 155 249 255 237 237 237 240 142 136 125 120 166 247 199 76 35 125 65 155 32 188 210 226 156 246 71 252 158 86 29 203 55 188 151 145 94 247 125 62 147 105 210 158 186 178 45 231 28 248 232 254 159 105 230 255 236 59 125 158 76 74 248 176 236 88 237 38 199 84 202 80 247 51 253 84 222 35 175 244 223 168 29 103 255 174 240 74 31 31 214 249 108 14 32 30 101 228 253 39 239 61 138 214 248 63 133 205 152 111 233 231 249 110 128 237 177 97 246 235 236 155 244 189 124 55 24 141 21 249 62 154 253 63 199 144 244 85 150 37 203 59 171 239 18 143 162 173 252 143 47 241 109 246 181 158 78 127 47 232 227 73 142 181 217 247 102 243 81 214 131 252 122 123 200 241 60 211 100 204 233 54 233 100 153 110 249 59 232 175 218 202 255 165 178 81 190 3 150 109 251 123 123 247 53 237 36 253 192 251 4 105 209 166 120 230 20 255 103 60 198 36 242 34 205 94 190 37 61 234 252 175 148 82 74 41 165 158 83 151 218 231 205 116 239 101 47 249 214 148 235 32 151 176 97 125 27 205 190 107 250 247 212 95 181 246 121 181 63 172 57 212 154 201 108 205 122 141 210 255 125 109 35 191 243 71 223 252 75 107 33 172 155 244 243 107 40 203 57 234 71 252 227 49 187 191 148 222 232 122 150 215 44 173 81 191 38 238 108 205 105 86 230 191 138 253 178 220 251 35 95 214 60 242 156 246 194 51 185 206 158 109 36 247 94 57 103 13 151 123 57 38 176 119 179 38 188 219 58 203 153 235 137 117 143 245 102 214 154 250 186 82 133 247 58 214 189 76 43 109 87 199 244 25 144 87 94 163 30 167 196 122 37 247 73 151 189 238 165 50 159 163 238 151 108 111 163 254 207 90 27 182 102 63 190 107 52 246 87 188 220 199 45 232 35 172 243 173 9 63 86 47 236 151 99 94 255 183 33 247 33 16 123 25 117 204 181 202 180 85 166 217 243 26 217 183 255 19 65 156 209 253 145 255 71 101 62 71 125 254 63 197 255 25 127 246 254 144 118 226 156 189 25 142 248 51 255 201 88 19 126 106 189 250 156 151 123 2 248 122 84 167 244 65 183 79 94 207 242 202 176 209 62 19 247 179 63 115 157 121 143 202 124 174 182 240 127 223 71 41 159 80 166 60 47 49 214 49 126 50 150 209 158 215 134 159 82 47 194 24 55 248 143 0 27 211 190 16 115 109 247 127 31 115 114 143 242 152 255 249 127 34 243 40 245 251 221 255 179 50 159 171 99 254 207 185 29 59 244 126 146 117 45 245 241 41 125 131 191 136 203 60 182 85 248 49 187 103 24 182 228 253 58 231 97 198 112 226 98 231 180 53 123 157 248 51 247 40 143 149 131 127 107 241 33 109 39 109 202 158 217 200 255 163 50 159 243 46 200 126 91 214 41 125 71 223 206 186 98 143 209 88 69 220 76 175 231 215 253 217 251 193 154 112 194 150 234 149 97 212 131 185 164 251 55 231 242 209 55 24 207 247 231 70 121 245 48 218 64 223 139 76 27 19 63 243 158 149 185 247 181 75 104 105 189 64 61 190 244 191 82 74 41 165 148 82 74 41 165 148 82 74 93 77 59 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 145 59 228 31 135 151 142 106 217 59 142 156 0 0 1 83 109 107 66 84 250 206 202 254 0 127 165 133 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 214 225 105 131 96 20 134 81 7 113 17 7 113 16 23 113 16 7 113 17 7 177 188 129 11 183 166 33 255 138 9 231 129 67 155 79 251 235 77 108 206 83 146 36 73 146 36 73 146 36 73 146 36 73 146 36 73 146 36 73 31 209 113 28 231 190 239 79 231 57 203 181 119 247 191 186 79 247 111 93 215 115 28 199 115 154 166 199 207 236 24 253 44 247 212 189 117 22 203 178 60 94 199 48 12 127 190 135 116 239 178 99 149 125 179 97 118 173 205 251 61 181 127 213 55 191 254 141 238 95 182 235 123 86 57 235 159 229 122 157 125 251 198 217 191 186 94 211 253 203 115 190 239 95 255 215 231 121 126 218 63 215 236 255 125 101 219 122 238 215 239 219 182 253 250 204 247 231 191 253 191 175 250 30 215 247 171 247 64 174 213 119 251 156 69 213 159 29 215 107 146 36 73 146 36 73 146 36 73 250 247 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 248 64 63 10 249 172 184 82 218 42 102 0 0 18 12 109 107 66 84 250 206 202 254 0 127 177 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 157 105 144 92 213 117 199 101 108 99 176 236 176 26 97 194 14 14 18 154 85 74 21 149 114 42 159 242 33 206 23 151 63 132 196 85 169 114 170 28 59 24 44 192 17 14 96 59 132 176 56 11 49 241 2 4 48 32 36 33 36 129 4 18 66 66 251 50 154 233 233 153 222 167 151 233 153 222 247 158 222 247 238 215 175 95 255 115 238 125 221 51 18 38 17 174 122 240 170 186 110 171 126 165 81 79 75 58 53 191 119 206 93 223 125 0 100 0 10 216 171 219 197 202 171 219 70 71 150 80 169 212 176 180 148 69 52 26 166 79 229 209 133 7 31 184 255 68 48 32 0 109 168 215 0 41 87 62 236 191 137 90 173 134 84 42 133 72 36 66 111 150 233 26 112 235 30 179 224 211 243 95 44 22 145 205 102 17 143 199 33 119 69 254 15 26 23 242 223 110 183 145 78 167 17 14 135 69 254 15 32 23 242 159 207 231 169 253 95 66 44 22 67 7 5 145 255 3 198 133 252 183 90 45 36 147 73 132 66 33 158 255 194 255 96 113 33 255 213 106 21 153 76 134 250 255 81 145 255 3 200 133 252 215 235 117 222 254 247 251 255 29 184 116 143 89 240 233 249 103 227 63 214 255 103 237 127 23 37 145 255 3 198 133 252 151 203 101 36 18 9 209 255 31 80 46 228 191 82 169 160 80 40 240 62 160 104 255 7 143 143 211 254 179 185 159 64 32 32 250 255 3 200 199 169 255 108 14 128 229 191 130 162 240 63 96 124 156 252 103 125 63 145 255 131 201 199 241 159 203 229 248 53 32 242 127 240 80 253 43 43 254 187 43 254 229 78 3 213 106 153 106 127 28 225 136 159 222 44 138 241 255 128 177 188 254 223 61 223 127 23 18 100 165 130 106 173 128 116 150 252 199 22 233 83 89 122 95 248 31 36 250 181 255 119 253 55 85 255 141 60 18 233 8 247 223 69 78 248 31 48 254 223 252 239 212 80 174 22 144 205 103 16 75 132 33 117 51 162 254 15 24 231 237 255 58 167 255 215 5 107 255 155 104 181 37 36 83 75 8 69 194 244 158 232 255 15 26 170 251 15 239 255 83 232 235 14 100 89 70 161 88 69 38 91 66 44 158 132 164 20 40 255 133 255 65 226 220 87 151 95 0 202 57 254 21 26 255 41 136 199 115 8 133 227 148 251 85 145 255 3 198 133 252 87 42 109 100 50 21 68 99 9 180 187 121 250 142 83 247 152 5 26 250 239 126 148 127 153 127 221 247 159 74 21 17 141 179 245 223 60 125 199 174 123 204 2 109 253 179 126 31 83 207 156 43 138 188 60 38 108 183 59 40 150 234 72 165 115 8 71 3 189 241 159 67 247 152 5 218 251 95 30 247 81 221 239 247 7 89 254 55 91 10 249 207 32 24 97 227 255 12 178 141 147 186 199 44 248 36 253 175 52 8 204 127 181 214 66 48 28 64 52 177 136 90 59 136 76 109 66 247 152 5 218 250 255 221 62 192 138 255 82 185 138 92 97 9 14 247 52 226 25 59 162 217 211 186 199 44 208 208 255 135 94 203 250 187 189 246 191 92 130 199 235 132 221 101 128 55 48 13 135 247 3 221 99 22 104 233 95 233 181 249 231 191 20 122 171 209 104 33 153 78 97 206 101 195 209 19 239 193 100 59 137 51 134 125 186 199 44 208 210 191 204 231 122 207 157 3 236 80 247 191 94 107 35 155 41 194 187 184 128 211 19 39 112 240 240 187 48 204 30 199 156 199 168 123 204 2 45 253 183 207 243 207 220 55 27 50 242 185 50 130 161 8 166 103 140 56 126 242 24 222 222 187 11 139 62 15 36 169 169 123 204 2 13 253 43 45 117 188 79 121 47 181 186 228 190 195 215 123 194 209 16 108 46 43 142 156 60 138 3 7 223 135 115 206 139 46 155 22 160 118 65 239 152 5 26 250 103 82 169 253 103 211 62 229 82 3 133 98 13 225 72 12 14 143 29 39 38 142 225 172 113 18 78 151 7 74 91 117 223 42 75 186 199 44 208 208 63 213 125 185 221 66 163 214 68 138 242 222 31 8 193 98 179 194 56 59 141 169 233 73 170 3 145 94 135 144 149 9 42 18 74 67 247 152 5 26 250 39 165 141 90 157 223 227 17 12 6 97 178 204 226 204 217 211 176 57 236 252 190 79 213 61 243 78 5 64 46 211 231 211 186 199 44 208 14 54 244 171 85 170 72 167 147 112 185 237 148 247 83 112 121 156 252 158 127 117 18 8 170 123 133 185 143 35 104 123 83 247 152 5 218 209 33 181 181 90 3 241 68 24 102 203 52 236 78 51 26 173 234 242 28 16 175 251 109 114 47 69 224 51 111 199 254 215 190 175 123 204 2 13 253 179 177 126 189 169 250 183 25 224 246 58 72 123 111 63 160 196 252 203 232 86 226 176 79 188 138 253 175 222 131 253 47 223 173 123 204 2 237 96 243 124 44 255 19 169 40 28 46 19 230 220 86 52 165 6 58 82 127 43 72 11 243 166 131 120 111 235 102 188 253 226 221 56 244 202 183 116 143 89 160 29 44 207 217 58 207 82 54 137 5 191 27 179 230 105 164 150 210 43 219 2 165 18 242 81 3 246 109 189 23 239 191 254 109 28 121 237 155 186 199 44 208 214 127 167 211 229 107 124 129 240 2 239 255 179 241 63 111 251 217 178 64 183 138 86 222 130 51 251 30 193 225 109 223 198 241 45 34 255 7 9 230 152 205 249 179 125 254 145 120 0 38 187 25 110 143 87 221 19 192 167 132 169 47 40 45 194 53 245 44 14 191 241 29 156 216 34 218 255 65 66 205 113 160 209 172 32 185 20 133 213 105 193 140 197 140 150 212 237 237 11 104 208 117 16 71 212 181 29 71 222 248 30 78 188 254 183 186 199 44 208 208 191 172 250 151 218 117 100 242 113 204 205 219 49 53 107 64 190 92 235 237 13 97 243 195 121 20 35 199 113 114 247 67 56 185 237 187 186 199 44 208 208 127 47 255 249 89 143 165 20 230 3 14 24 44 83 8 197 146 106 250 243 57 0 26 15 20 92 48 29 122 6 167 118 220 171 123 204 2 237 253 43 157 22 202 53 234 3 198 220 48 57 141 176 123 60 104 247 251 0 236 51 173 44 188 147 219 113 122 231 3 186 199 44 248 4 252 119 91 168 54 151 16 73 249 224 240 216 96 52 91 32 73 124 105 80 253 76 167 129 144 253 0 78 237 126 80 247 152 5 26 251 231 211 125 13 212 59 57 234 3 36 225 116 207 193 98 177 32 159 45 169 253 131 142 218 15 200 132 167 48 117 240 97 221 99 22 104 235 191 219 243 223 80 242 40 148 178 88 88 88 128 205 106 70 50 146 224 215 134 186 246 47 163 154 119 194 120 244 81 221 99 22 104 232 191 183 247 191 139 22 181 247 21 84 235 37 126 214 171 221 102 129 215 229 86 107 3 255 12 53 6 157 16 76 167 31 215 61 102 129 246 254 217 62 64 185 91 71 163 85 231 103 189 57 29 115 48 207 154 208 106 246 247 6 179 125 98 113 184 140 207 234 30 179 64 67 255 114 223 191 76 77 65 11 77 169 197 159 247 51 239 246 194 104 152 230 123 64 20 190 63 180 65 36 144 246 239 210 61 102 193 39 225 95 225 235 190 236 188 143 108 174 0 159 47 0 163 113 22 161 72 16 29 170 253 10 216 124 80 10 168 24 116 143 89 160 161 255 254 248 79 81 212 37 31 106 15 138 165 26 34 225 4 102 103 205 124 47 144 172 180 248 121 64 236 252 55 116 22 116 143 89 160 161 255 222 66 79 167 211 89 190 21 176 82 109 34 17 95 130 201 100 193 140 201 216 219 15 36 171 107 65 212 7 212 59 102 129 150 254 201 107 111 179 7 115 223 150 169 210 215 37 36 19 25 216 108 14 156 157 154 68 190 88 80 239 11 237 82 31 176 19 211 61 102 129 150 254 219 203 247 128 244 253 179 123 190 99 209 20 204 102 43 38 167 166 81 40 150 249 62 49 62 17 32 252 15 20 231 251 167 158 62 121 46 149 235 8 4 66 212 255 51 194 98 181 163 209 148 123 115 0 244 57 57 160 123 204 2 45 253 203 189 9 62 213 191 212 238 34 151 47 195 235 245 192 96 152 164 223 23 249 30 65 117 63 24 141 1 27 86 221 99 22 104 232 191 211 155 0 38 255 212 11 68 179 213 225 231 189 56 93 86 24 166 207 32 20 138 172 236 5 98 247 0 20 142 234 30 179 64 75 255 43 227 127 153 234 0 235 251 177 179 222 236 118 35 141 255 38 248 217 239 203 247 1 116 115 40 135 182 232 30 179 64 67 255 253 227 127 187 29 72 114 139 143 253 216 125 223 54 219 20 172 214 9 180 91 210 138 127 37 142 136 237 73 221 99 22 104 232 191 63 255 195 86 128 218 18 239 251 249 253 126 114 63 73 53 192 64 181 95 94 217 11 44 133 176 104 16 235 255 131 4 91 215 161 94 31 215 219 104 43 252 89 143 193 197 5 204 76 158 70 50 22 228 235 66 252 76 64 54 68 40 7 96 62 240 215 186 199 44 208 210 127 141 251 231 179 123 13 25 169 68 18 11 110 23 102 39 39 145 95 74 242 117 97 182 55 8 52 46 144 211 179 48 237 251 134 238 49 11 180 244 175 158 253 34 41 108 222 183 133 88 36 14 135 197 10 139 209 140 70 189 202 215 4 21 80 191 31 57 228 124 59 48 189 231 46 221 99 22 104 233 95 189 215 147 154 126 148 138 117 4 253 33 24 13 51 112 216 92 232 116 21 238 159 185 7 22 17 54 63 73 254 215 235 30 179 64 67 255 189 185 29 169 1 228 51 85 248 60 126 76 157 53 96 97 49 200 191 37 243 250 192 238 7 156 198 252 196 15 48 187 103 173 238 49 11 62 1 255 85 5 217 68 17 30 199 60 166 167 140 136 167 151 32 47 251 143 83 223 111 31 230 142 252 21 236 239 172 211 61 102 129 198 254 89 247 190 36 35 29 89 130 195 108 135 105 214 136 74 179 74 111 179 95 18 247 95 143 188 140 185 253 127 9 239 222 97 221 99 22 104 232 95 81 187 128 141 114 19 177 96 20 150 153 89 88 45 38 190 27 172 205 198 126 220 127 8 165 249 167 225 124 231 235 8 236 17 249 63 72 240 238 95 71 65 181 92 129 223 59 15 211 244 36 252 190 121 26 238 177 190 159 220 219 247 231 65 196 248 247 240 190 55 140 228 129 91 117 143 89 160 161 127 102 184 81 67 42 29 131 219 101 131 213 100 64 58 21 227 251 192 58 93 153 198 254 37 170 15 6 4 103 238 198 252 129 27 144 56 184 70 247 152 5 218 193 142 118 171 214 43 136 167 130 176 207 77 195 56 61 129 98 33 167 238 247 224 175 50 242 233 119 48 115 244 235 112 31 89 131 212 201 171 117 143 89 160 29 45 74 244 114 163 130 104 154 252 59 141 48 83 254 43 82 91 61 235 181 231 63 17 127 27 147 199 254 28 115 39 110 69 244 204 245 186 199 44 208 14 190 223 167 86 69 40 30 132 195 101 193 188 199 181 124 246 143 76 215 65 7 21 180 100 43 98 161 167 224 157 253 38 60 199 70 116 143 89 160 29 172 157 111 52 37 68 147 41 216 93 78 204 59 93 232 52 90 189 71 64 41 104 117 107 234 252 15 140 40 166 158 195 226 212 223 232 30 179 64 59 248 249 95 29 32 91 168 195 23 140 241 249 159 192 252 2 138 153 164 122 79 88 111 103 16 248 253 31 65 52 147 91 117 143 89 160 173 127 222 6 84 219 200 231 235 136 132 226 176 206 154 176 224 178 35 151 77 114 255 77 182 74 44 247 206 2 194 162 238 49 11 180 67 233 61 251 143 181 3 252 185 15 249 34 162 97 26 11 82 59 96 54 207 242 179 0 37 185 221 123 68 148 186 22 164 119 204 2 237 56 247 197 206 1 108 82 95 160 80 96 247 128 199 248 222 95 179 217 140 120 60 202 207 135 66 239 62 80 189 99 22 104 239 159 221 223 163 210 123 238 87 145 198 125 137 20 156 78 39 28 14 27 252 1 47 42 213 60 175 1 122 199 44 208 214 191 250 220 87 229 188 103 255 181 90 109 148 203 85 100 179 89 204 207 207 243 182 128 61 255 167 84 206 234 30 179 64 75 255 203 7 125 158 247 234 246 206 5 46 149 42 252 26 240 251 23 97 179 155 224 246 136 231 255 14 18 231 250 239 215 255 115 95 172 45 96 231 195 179 251 0 130 65 63 111 11 244 142 89 160 29 231 62 239 89 109 7 86 158 1 218 255 157 181 5 213 106 29 149 74 5 177 88 12 54 155 133 95 7 81 182 63 152 253 125 254 124 16 118 78 108 158 175 21 3 31 160 211 222 140 82 229 46 52 90 215 82 29 249 2 148 206 231 168 160 92 68 23 212 42 40 173 85 144 235 159 65 187 250 121 180 202 68 233 82 52 242 151 160 150 253 34 106 233 47 162 154 252 18 202 177 63 32 46 71 41 124 25 138 161 203 81 12 92 129 130 239 42 20 188 87 33 239 185 6 89 231 26 44 57 8 219 181 72 153 191 138 196 236 87 17 55 94 143 132 225 70 196 206 222 140 200 169 155 16 58 113 35 194 199 111 70 232 232 45 8 28 190 5 190 131 183 194 247 222 237 88 220 247 71 240 190 67 236 189 19 158 183 215 193 181 107 61 156 59 214 99 238 141 33 56 183 13 97 238 245 97 56 94 29 133 237 183 35 176 255 118 35 172 47 109 132 249 133 13 48 61 191 17 179 47 108 196 204 243 27 48 253 235 13 152 250 229 24 206 62 59 134 137 95 140 227 204 127 141 225 244 51 163 56 245 31 163 56 249 239 99 56 254 243 17 28 123 122 20 199 158 26 199 209 39 199 113 232 137 81 28 124 124 12 239 255 203 56 14 60 54 134 247 254 121 28 251 126 54 134 183 31 29 195 91 63 33 30 25 197 206 31 15 97 215 67 235 241 214 67 35 120 235 71 67 216 125 255 16 118 222 191 30 111 108 26 198 214 77 227 120 121 211 31 227 249 31 254 25 118 255 252 239 16 155 220 69 63 207 52 255 185 179 253 217 236 222 29 182 102 159 46 100 224 12 184 17 72 44 34 85 10 161 33 199 233 253 40 57 97 207 113 10 16 62 62 134 103 180 225 249 63 235 127 223 191 162 172 124 205 174 3 246 156 32 118 13 120 189 94 216 237 86 44 250 125 252 204 32 126 7 1 219 39 206 14 13 68 140 216 75 95 254 3 234 210 58 72 157 213 220 127 183 253 153 158 251 85 104 215 46 226 254 155 197 139 185 251 122 110 53 170 75 171 85 247 241 47 161 20 37 239 145 203 80 8 94 134 188 255 114 228 22 174 64 214 123 37 114 238 175 32 227 252 10 210 246 107 144 178 173 225 238 147 166 235 184 251 168 225 6 238 62 58 113 11 194 39 111 66 240 24 113 228 102 238 222 127 232 54 44 190 255 181 101 247 243 123 214 17 119 170 238 119 14 113 247 246 173 235 85 247 91 70 184 123 235 75 163 203 238 103 159 219 128 153 223 140 115 239 134 95 141 99 242 191 71 201 251 232 71 186 63 241 111 163 220 253 209 39 199 112 228 137 49 124 240 248 8 121 31 237 121 31 197 126 242 254 238 79 70 176 247 209 17 238 125 247 163 196 195 99 216 181 121 24 187 254 113 72 117 255 224 122 238 254 205 7 70 176 229 190 81 188 248 131 141 248 205 189 127 138 61 207 220 131 130 235 8 185 207 144 144 28 63 151 75 234 178 121 122 133 187 119 45 122 225 139 68 144 88 202 161 214 146 249 58 158 210 63 227 133 211 129 220 105 242 103 62 174 60 247 241 163 253 127 212 245 192 218 131 74 165 134 100 50 13 159 63 8 235 156 27 46 175 15 133 74 89 125 110 8 155 49 234 228 123 215 218 78 250 191 254 2 213 230 151 233 239 125 14 138 180 10 82 229 179 80 170 23 163 93 94 133 86 113 21 234 249 139 41 239 47 233 229 253 106 84 18 95 238 229 253 21 40 6 175 68 209 127 21 119 159 159 191 146 242 254 106 100 93 215 112 247 73 203 181 4 229 252 204 117 72 76 255 33 229 3 249 63 123 3 194 167 41 239 79 49 247 148 243 71 111 37 255 183 113 247 60 239 247 127 13 11 239 222 65 254 215 194 179 123 45 92 59 215 170 121 191 157 156 83 222 219 94 39 94 37 239 61 247 150 23 199 150 221 27 127 61 134 105 242 110 248 213 70 202 251 13 228 127 156 187 63 245 159 35 220 187 234 126 100 217 253 17 202 247 195 255 58 66 140 146 127 53 239 251 238 247 81 190 191 75 206 185 255 71 135 201 253 8 118 83 206 239 218 60 138 93 63 162 175 31 164 235 224 129 33 236 184 127 24 219 55 141 226 149 251 54 226 151 247 220 133 29 79 127 7 74 194 66 63 226 156 90 111 187 234 205 91 204 191 63 18 224 207 106 60 126 230 24 108 108 29 103 209 137 112 196 135 72 116 17 209 62 17 63 253 217 143 112 52 176 204 239 227 159 189 88 61 144 36 153 247 11 83 233 28 253 63 17 88 157 11 240 80 255 48 153 77 244 246 11 19 93 54 87 56 131 142 242 93 84 27 55 161 37 93 2 185 185 138 215 251 78 249 82 242 127 17 154 249 85 228 254 98 84 51 151 246 220 175 230 238 89 222 51 247 121 255 149 220 125 102 158 112 50 174 226 53 63 105 189 6 113 211 26 94 243 153 251 248 84 223 253 13 170 251 19 55 115 247 254 195 183 242 154 191 112 128 216 119 59 121 191 29 243 123 239 128 251 173 59 184 251 185 29 107 121 222 59 182 81 157 223 58 12 235 150 97 238 222 252 210 136 234 254 127 198 169 230 143 171 121 207 220 83 189 63 215 61 203 251 143 114 127 244 169 17 238 158 229 61 115 127 168 151 251 125 247 239 60 50 194 217 251 48 185 255 241 157 188 230 239 164 188 223 201 188 223 63 130 157 84 239 223 220 116 39 182 253 112 8 175 223 63 142 231 190 191 1 47 110 254 6 28 135 94 162 31 109 154 255 108 89 91 205 236 179 125 251 139 190 0 166 12 70 254 220 62 54 87 147 33 15 177 184 159 250 237 145 243 96 239 179 231 124 44 101 51 72 101 115 156 223 215 127 255 197 234 64 173 42 33 157 170 195 237 141 96 198 102 130 211 103 71 163 83 225 247 140 240 179 2 48 71 60 134 90 253 46 52 27 151 67 162 186 223 40 126 22 114 233 18 94 247 107 185 207 163 190 244 5 84 83 151 114 247 165 216 234 229 246 158 215 124 31 171 249 151 35 237 190 12 75 115 87 18 87 35 109 37 239 166 107 16 51 174 33 40 255 13 215 145 251 235 16 153 184 158 220 223 136 208 113 230 254 102 248 63 80 219 123 255 1 170 251 251 111 131 247 221 219 224 217 115 59 60 228 222 189 235 14 238 222 177 125 29 230 122 53 223 254 26 185 127 101 24 150 151 134 200 251 48 76 47 140 96 246 249 81 114 63 74 238 71 49 69 245 126 242 23 253 246 126 244 67 53 191 239 126 88 117 255 196 16 121 31 230 254 15 62 166 178 255 103 35 216 247 211 209 101 239 123 254 105 132 160 58 191 121 29 213 252 181 84 231 213 124 223 185 105 4 59 238 27 194 182 251 238 196 107 196 43 247 141 225 217 239 141 227 213 159 222 141 118 116 150 106 107 149 251 98 238 43 212 212 46 248 82 176 89 188 112 59 131 72 196 51 40 228 202 40 230 75 124 15 71 91 170 163 90 41 112 42 149 18 239 191 149 43 13 26 215 75 40 150 21 20 43 242 42 250 103 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 2 129 64 32 16 8 4 159 30 255 11 35 86 51 79 80 240 225 92 0 0 7 92 109 107 66 84 250 206 202 254 0 127 179 74 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 157 135 114 226 72 16 134 159 235 158 252 158 227 194 250 54 24 16 96 19 4 34 8 17 21 250 166 103 36 33 28 182 103 29 80 109 243 83 245 237 96 160 182 198 254 233 233 254 39 72 68 5 149 143 157 97 83 194 207 115 226 247 10 211 156 63 147 219 127 139 162 124 90 52 223 123 219 163 104 153 247 62 218 238 255 187 127 255 250 143 112 34 167 59 115 168 127 185 179 254 252 36 165 234 59 112 249 7 204 223 220 186 255 166 189 246 247 238 255 7 232 127 17 223 41 189 174 49 191 126 40 73 221 219 121 243 189 28 237 213 219 15 224 181 113 252 217 32 217 28 31 78 79 62 252 65 125 1 215 231 165 100 248 66 146 44 232 72 231 220 144 158 63 135 135 190 199 19 253 243 60 167 52 219 149 236 41 203 50 202 204 87 160 38 43 208 182 213 90 178 55 183 231 156 206 99 122 250 236 59 112 58 22 180 223 239 41 73 98 138 227 149 33 166 77 188 55 156 40 94 31 221 243 205 198 176 69 219 74 203 172 223 220 18 37 37 213 119 32 191 208 127 187 221 211 122 189 161 40 138 40 12 195 146 57 133 211 5 77 39 17 77 167 51 195 20 180 198 248 93 56 191 239 244 47 26 117 29 215 246 169 249 49 73 118 86 239 241 120 76 253 126 143 186 221 123 10 250 247 244 56 10 168 219 251 102 95 3 109 210 255 41 65 16 252 148 102 77 87 20 89 29 251 77 253 39 147 208 126 182 40 61 192 33 157 152 54 52 112 59 47 137 84 182 133 101 246 106 219 110 255 42 150 239 160 10 248 198 92 79 165 127 154 219 60 195 99 126 16 116 173 246 252 59 255 249 229 15 160 132 102 157 127 161 127 225 244 231 252 63 26 141 232 190 243 213 188 28 155 55 135 173 247 25 124 178 254 220 152 47 64 154 166 101 237 183 52 57 96 100 94 229 122 177 211 122 159 193 39 234 111 31 185 205 245 105 122 164 109 114 180 181 254 221 221 29 165 69 100 94 255 209 122 159 193 7 234 223 120 184 250 143 107 188 131 157 239 99 253 87 203 196 232 191 164 65 159 227 159 125 194 125 235 125 6 159 161 127 94 214 247 151 250 39 155 35 141 71 11 195 140 142 233 2 250 43 227 50 254 11 114 243 63 169 249 33 163 236 100 242 255 106 75 243 217 202 250 191 220 248 133 130 190 183 222 103 240 153 250 187 177 128 242 194 232 159 83 188 222 209 108 22 89 255 87 208 194 140 14 119 173 247 25 92 79 255 100 115 176 115 188 189 94 199 206 23 32 254 117 33 233 207 235 59 77 253 115 250 214 122 159 193 245 244 231 252 207 227 63 207 53 35 254 245 33 233 207 254 175 210 31 249 95 31 62 245 31 175 255 185 249 127 196 191 54 124 243 127 165 63 226 95 23 62 241 63 159 47 172 254 153 93 243 68 252 107 194 39 255 243 248 95 213 127 25 125 109 189 207 224 122 250 31 246 153 173 255 58 157 31 182 254 67 252 235 66 210 127 185 216 216 253 63 240 127 58 145 244 223 109 79 118 253 159 243 127 90 204 80 255 41 67 210 63 154 175 109 254 31 14 251 132 249 63 125 72 250 243 254 15 206 255 152 255 215 137 164 255 83 255 159 210 127 173 247 25 92 79 127 246 255 85 254 55 217 0 241 175 12 73 255 167 254 31 249 95 23 146 254 149 255 231 115 63 240 255 250 144 244 135 255 215 141 164 63 252 191 110 36 253 121 239 39 252 191 94 36 253 121 255 95 229 255 145 255 245 225 227 255 220 249 95 248 127 141 72 250 243 254 191 197 98 69 131 65 96 243 63 226 95 23 146 254 60 255 55 30 79 173 255 67 253 175 15 73 127 246 255 188 255 135 245 199 252 159 62 126 181 254 135 254 186 240 137 255 106 255 15 199 63 246 127 233 66 210 159 215 255 121 253 143 235 63 196 191 62 124 252 95 85 255 243 254 95 204 255 232 66 210 159 231 127 154 245 63 244 215 133 164 191 61 255 111 234 127 94 255 65 253 175 15 73 127 246 255 56 255 175 23 73 127 222 255 135 243 255 122 241 137 127 156 255 215 139 79 253 143 243 255 122 145 244 111 158 255 231 250 239 72 95 90 239 51 184 158 254 56 255 175 155 95 205 255 168 255 117 33 233 15 255 175 27 223 250 15 254 95 39 146 254 184 254 159 110 124 242 63 215 127 240 255 58 241 25 255 57 255 99 253 87 39 146 254 236 255 43 253 145 255 245 225 19 255 205 243 159 136 127 93 60 215 63 111 232 159 214 245 31 223 243 13 254 95 31 175 234 223 188 254 63 251 255 65 167 244 255 216 255 167 9 73 255 56 118 243 255 28 255 46 255 255 219 122 159 193 245 244 231 251 63 90 255 31 252 40 243 63 226 95 19 146 254 238 254 143 243 90 255 28 231 255 84 225 51 254 91 255 55 236 34 254 21 34 233 191 90 197 181 254 200 255 250 240 137 127 235 255 7 29 196 191 66 124 235 191 179 255 71 252 107 66 244 255 235 141 187 254 127 255 30 254 95 33 62 241 95 205 255 184 235 127 96 255 159 38 224 255 111 27 159 250 143 245 239 246 190 195 255 43 4 254 255 182 129 255 191 109 124 234 127 228 127 189 136 245 95 181 254 95 223 255 15 241 175 137 151 245 79 107 253 249 250 207 124 13 40 222 255 5 255 175 143 75 253 179 103 250 111 147 19 205 194 37 245 122 238 254 191 216 255 171 11 73 255 229 34 161 201 152 247 255 225 250 207 26 145 244 63 29 201 198 127 167 131 243 31 26 145 244 159 133 43 10 167 11 122 120 120 32 236 255 212 135 164 255 110 155 218 107 0 114 254 199 249 79 125 72 250 175 150 91 27 255 85 254 135 254 186 240 169 255 167 19 190 255 147 243 255 184 254 171 46 124 226 159 199 255 193 96 128 251 127 40 68 210 63 217 28 107 255 15 255 167 15 73 255 69 180 129 255 87 12 252 255 109 3 255 127 219 72 250 239 119 153 173 255 130 32 64 253 167 16 248 255 219 198 199 255 115 253 119 246 255 24 255 53 33 233 191 94 237 108 253 87 233 143 245 127 93 248 228 255 202 255 185 251 63 33 254 53 33 233 31 205 99 90 68 113 29 255 216 255 173 11 73 255 204 60 29 143 102 118 254 23 251 191 244 33 233 31 78 151 214 255 33 254 117 34 233 127 60 20 52 122 12 27 254 15 241 175 9 73 127 222 255 199 251 127 81 255 235 196 199 255 243 250 127 21 255 216 255 175 11 73 255 77 124 168 231 255 220 252 47 226 95 19 62 241 255 248 48 181 250 167 197 12 250 43 67 210 159 231 255 248 26 208 236 255 144 255 245 33 233 127 216 231 52 232 143 108 252 159 242 16 250 43 67 210 159 247 255 240 25 64 196 191 78 36 253 121 255 127 21 255 124 255 119 232 175 11 73 255 120 189 175 247 255 34 254 245 113 169 255 243 243 223 188 255 215 205 255 187 253 63 25 252 191 42 94 214 191 121 255 63 183 254 239 244 231 241 31 250 107 66 210 159 227 159 253 255 112 200 254 127 106 222 249 167 245 62 131 235 233 207 251 255 216 255 179 254 68 17 244 87 134 164 63 239 255 225 250 159 199 255 83 62 193 248 175 12 73 255 179 255 15 16 255 10 145 244 231 249 255 126 240 104 239 255 150 81 136 248 87 134 79 253 207 235 255 238 254 127 17 244 87 134 79 253 127 246 255 115 51 6 252 221 122 159 193 245 244 231 249 63 183 254 223 131 255 87 136 79 253 207 241 255 248 56 132 254 10 241 169 255 221 249 207 174 205 255 41 253 213 122 159 193 245 244 231 243 255 195 193 216 206 255 160 254 215 135 164 63 159 255 105 198 63 234 63 93 72 250 243 254 255 135 225 164 158 255 69 252 235 66 210 159 231 255 221 245 223 238 161 191 66 158 235 79 212 188 254 255 54 57 251 127 204 255 170 227 127 237 222 137 215 197 63 142 139 0 0 5 119 109 107 66 84 250 206 202 254 0 127 201 148 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 157 235 114 226 70 16 133 243 90 121 242 60 71 46 155 221 236 46 70 128 49 32 16 247 59 130 14 61 99 201 12 139 124 252 43 85 57 123 166 252 85 185 236 159 95 181 166 207 168 37 153 221 172 203 229 242 250 219 249 250 115 177 242 120 182 197 124 99 227 113 97 157 78 251 250 247 153 93 236 171 253 246 233 215 123 126 185 254 83 252 255 72 214 35 255 243 217 186 246 127 177 169 29 237 111 249 231 1 250 95 46 182 150 231 19 203 178 39 83 253 211 145 172 71 254 87 203 157 141 70 227 218 191 234 159 138 100 53 213 255 100 50 13 254 75 155 168 254 185 128 254 125 255 247 235 127 213 255 149 246 69 254 121 72 214 35 255 251 93 25 250 191 86 235 91 232 255 84 255 84 64 255 179 233 202 134 195 92 249 143 147 100 61 242 191 221 28 173 40 102 97 255 63 93 198 234 255 184 128 254 139 201 34 236 255 189 94 199 188 254 207 246 143 252 243 144 172 71 254 55 235 67 216 255 219 237 150 233 250 79 71 178 62 146 255 79 246 89 254 121 72 86 83 254 175 246 255 235 110 160 250 231 2 250 191 207 255 218 255 169 72 214 123 249 255 233 233 187 242 63 31 208 191 242 63 53 201 82 254 255 233 128 254 39 227 185 242 63 47 201 122 228 127 189 218 215 249 95 251 63 29 208 191 231 63 223 255 149 255 41 73 86 211 252 223 116 58 183 110 55 11 251 191 234 159 10 232 223 207 255 6 131 81 200 127 234 255 233 72 86 83 254 247 249 31 247 175 243 63 58 160 255 251 254 95 254 169 72 22 154 255 241 250 215 252 23 21 208 191 223 255 247 251 127 222 255 169 254 233 72 86 83 254 171 250 127 159 255 213 249 15 21 208 191 159 255 220 246 255 242 79 69 178 154 242 191 247 255 126 255 71 253 63 29 208 191 231 127 239 255 252 252 79 207 255 209 1 253 251 252 159 247 127 154 255 163 36 89 239 205 255 85 254 181 255 83 145 172 166 254 95 207 255 211 146 44 244 252 191 247 127 7 251 36 255 60 64 255 122 254 159 154 100 125 100 255 87 255 79 69 178 148 255 127 58 160 255 170 255 83 254 167 4 250 247 243 95 229 127 90 146 213 180 255 123 255 167 252 79 73 178 222 123 255 143 238 255 82 146 172 166 252 95 249 215 254 79 7 244 95 229 127 157 255 81 146 172 232 255 124 227 255 84 247 127 89 39 222 255 87 253 83 209 236 255 82 6 255 117 254 239 182 94 243 191 230 255 136 128 254 151 203 120 254 239 245 31 247 255 191 228 159 7 232 127 189 222 198 252 159 125 179 184 255 171 254 137 128 254 87 171 77 204 255 175 254 207 122 254 143 9 232 223 175 255 33 255 245 170 251 127 170 127 34 160 255 249 124 89 251 215 254 79 7 244 239 245 31 242 127 183 58 255 87 253 19 1 253 87 253 223 91 254 87 253 19 1 253 47 22 171 248 254 255 206 119 229 127 62 160 127 175 255 234 252 39 190 255 67 243 127 68 124 200 191 242 63 45 208 191 247 127 238 255 169 253 213 148 255 233 248 144 127 229 127 90 160 127 229 127 106 160 127 239 255 181 255 211 2 253 215 247 255 235 239 255 169 254 137 104 240 127 170 253 251 251 159 253 29 80 62 255 165 252 79 199 157 255 242 7 255 155 245 209 198 249 204 218 237 248 253 95 205 255 82 1 253 207 166 107 27 14 124 254 79 239 127 38 4 250 63 30 44 212 127 171 165 231 63 8 129 254 199 249 220 242 209 212 158 159 159 77 243 159 116 64 255 219 205 41 188 3 208 247 127 61 255 73 7 244 63 159 109 66 253 87 251 191 252 83 1 253 123 255 63 26 250 247 159 98 254 215 251 95 169 128 254 189 254 253 250 223 237 118 245 253 15 62 160 255 245 234 80 231 127 229 63 58 160 255 105 177 82 254 231 5 250 87 254 167 6 250 87 254 167 6 250 223 109 203 208 255 101 89 166 254 143 15 232 95 249 159 26 232 223 243 191 247 127 111 249 95 215 127 34 160 255 197 124 27 250 191 202 191 238 255 83 1 253 251 254 95 229 191 248 253 39 213 63 17 208 127 49 89 218 180 88 214 245 175 249 111 42 160 255 242 250 235 224 101 28 206 127 53 255 69 7 244 159 143 102 33 255 169 254 41 129 254 15 251 139 189 244 243 155 252 167 250 39 2 250 247 249 63 159 255 85 255 79 9 244 95 221 255 175 234 95 243 255 84 64 255 171 229 190 62 255 139 231 191 170 127 34 160 127 175 255 254 243 40 248 63 93 198 242 207 5 244 239 231 127 254 14 104 207 127 218 255 233 128 254 247 187 179 117 59 47 161 254 143 231 92 254 185 128 254 125 254 199 159 1 84 253 83 2 253 251 252 127 85 255 254 253 119 249 167 2 250 95 46 118 245 252 175 234 159 142 59 255 63 62 255 237 243 191 241 252 63 206 255 148 202 255 76 52 248 191 253 254 95 188 255 31 253 251 245 95 254 137 128 254 189 254 61 255 247 122 158 255 71 215 255 252 41 255 60 64 255 62 255 231 249 223 253 155 21 242 207 5 244 239 243 63 222 255 251 245 255 120 30 234 250 207 5 244 255 150 255 51 83 253 211 1 253 251 249 127 39 235 135 239 191 149 150 171 254 185 128 254 189 255 247 251 255 241 251 127 133 252 115 1 253 167 249 127 114 189 6 252 33 255 60 64 255 126 254 23 239 255 183 149 255 249 128 254 189 255 247 250 239 247 123 242 207 7 244 239 253 127 124 254 211 231 255 10 59 217 239 242 207 3 244 239 207 255 247 186 131 112 254 163 254 95 8 33 132 16 66 8 33 132 16 66 8 33 132 16 66 8 33 132 16 66 8 33 132 16 66 8 33 132 16 226 63 231 95 226 42 173 19 45 238 180 190 0 0 1 138 109 107 66 84 250 206 202 254 0 127 208 164 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 209 49 74 196 80 0 69 81 183 229 202 93 201 148 162 153 74 210 25 196 110 252 198 98 96 200 2 242 193 123 138 195 107 31 220 241 114 121 30 7 79 99 12 26 142 237 245 111 209 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 211 191 77 255 54 253 219 244 111 27 63 227 245 104 246 39 78 237 127 219 141 71 179 63 113 98 255 247 235 219 88 150 63 203 125 103 127 226 196 254 235 186 238 62 30 119 246 39 78 236 191 125 126 143 109 219 118 95 247 157 253 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 254 171 95 190 177 255 211 247 165 9 185 0 0 42 23 109 107 66 84 250 206 202 254 0 127 212 240 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 120 156 237 125 43 184 236 40 214 246 146 72 44 18 137 196 34 145 72 36 22 25 137 196 34 35 145 88 36 18 25 137 141 140 140 140 141 44 153 127 81 251 156 238 158 158 233 249 212 255 212 136 90 115 233 62 85 123 215 9 176 46 239 187 46 84 230 231 125 54 158 0 218 179 145 45 198 215 70 96 135 163 195 2 112 93 197 5 107 0 223 133 126 195 243 98 29 224 129 10 16 1 182 10 27 208 158 36 193 119 221 147 217 177 132 193 241 205 124 115 252 241 67 111 0 149 155 221 65 43 213 113 51 182 190 108 79 21 20 224 120 157 64 225 40 233 48 240 97 185 175 43 63 247 9 18 160 220 84 44 164 95 141 3 175 55 129 184 115 92 157 219 222 207 152 94 66 108 49 41 252 67 17 243 149 210 15 15 43 212 107 219 40 238 70 121 78 34 56 245 150 100 80 67 204 95 57 22 200 210 62 79 6 48 38 108 171 52 184 143 73 109 43 254 238 235 110 144 119 238 219 71 23 143 114 197 176 248 141 153 224 1 60 81 170 131 113 9 15 209 20 9 43 175 151 178 133 72 147 125 12 250 161 174 193 101 161 183 29 127 113 143 185 174 126 126 130 91 41 46 163 53 99 131 137 54 44 214 250 184 197 192 193 130 109 14 158 29 4 117 79 160 248 239 168 57 112 92 248 211 253 60 47 27 15 47 63 188 252 183 184 78 196 58 18 158 147 77 194 155 5 112 41 182 21 32 21 246 196 156 45 28 213 30 50 112 192 39 15 135 117 75 113 96 2 190 180 205 95 183 224 218 230 192 31 213 47 184 153 251 54 252 52 29 60 126 0 133 11 180 30 55 55 83 234 27 129 199 225 78 221 213 66 81 215 225 214 237 243 235 167 168 148 117 77 224 247 123 143 142 251 53 200 37 46 66 166 78 201 138 11 24 107 58 24 9 107 155 78 192 188 109 129 57 216 15 252 231 2 42 167 117 129 85 197 124 50 168 134 217 37 59 209 239 17 129 155 171 29 184 93 70 225 97 215 146 41 207 11 170 82 69 37 72 87 99 48 77 103 3 198 62 187 248 41 47 116 105 104 147 102 152 245 213 9 209 184 88 134 62 202 202 28 168 18 203 69 203 197 242 227 41 21 150 212 60 15 44 233 54 246 115 52 197 225 192 127 214 53 155 122 224 98 240 63 164 162 74 31 240 224 246 92 27 60 25 79 28 77 37 79 35 40 55 228 54 224 58 167 22 61 9 157 170 234 253 211 139 7 89 65 163 247 194 131 72 13 182 171 8 144 76 160 115 54 155 206 3 77 131 88 234 200 249 66 99 88 157 38 199 152 74 189 19 116 4 101 187 46 202 246 18 252 168 207 9 51 46 24 106 101 40 148 207 63 212 60 63 157 45 49 233 36 112 157 79 1 61 0 253 127 120 20 26 18 140 11 255 218 253 9 31 93 60 74 116 194 161 183 86 103 155 154 96 124 73 44 60 228 184 149 125 224 70 243 14 81 106 93 208 111 37 91 80 97 209 253 1 136 54 253 24 88 18 89 191 205 60 225 23 170 63 16 168 89 111 104 0 128 70 158 23 252 48 54 55 225 129 173 31 54 74 70 241 151 71 91 240 133 5 119 118 41 154 207 55 63 44 28 228 64 119 142 10 141 6 110 77 224 199 166 221 19 109 204 5 202 107 62 63 245 232 201 76 218 106 239 15 179 21 61 128 221 15 218 37 119 131 90 136 105 122 70 84 120 6 129 16 244 132 36 17 129 175 107 80 246 56 155 69 183 144 109 242 248 9 106 65 79 153 241 212 215 250 222 128 171 158 28 62 126 254 146 134 229 220 224 216 134 145 186 6 233 66 57 250 181 226 9 134 11 214 164 2 56 85 173 171 75 28 14 67 195 118 180 106 98 235 15 76 11 232 229 231 67 188 2 239 128 121 175 5 161 11 231 30 141 59 164 109 23 106 11 80 46 212 5 32 151 248 227 239 68 107 241 21 194 234 119 254 161 85 255 69 194 194 128 51 244 220 168 193 148 145 149 146 56 120 235 85 192 133 74 202 252 185 115 18 143 163 18 137 158 92 132 179 8 14 232 201 159 142 43 59 6 125 7 4 115 173 24 70 16 227 29 81 40 30 75 73 173 238 247 166 88 221 155 132 198 168 10 185 49 11 203 250 254 43 75 143 250 168 232 100 88 140 31 93 59 74 196 163 142 239 99 8 136 120 36 157 167 68 209 215 183 222 15 16 158 162 19 88 96 105 215 30 32 236 168 235 209 16 64 108 204 143 251 114 110 176 109 36 129 168 198 94 215 57 206 132 239 122 66 71 207 158 160 81 61 21 198 110 102 16 228 107 132 68 234 246 172 101 59 10 60 168 253 248 22 97 211 252 62 44 181 226 162 158 155 106 198 239 107 135 48 66 159 91 112 40 245 226 36 191 29 0 186 135 199 160 145 219 246 204 112 253 52 12 110 203 25 203 113 96 148 88 198 147 249 9 250 118 207 181 246 232 24 217 46 120 245 72 110 140 251 141 111 114 159 74 190 128 207 53 172 241 193 224 255 72 224 28 117 169 137 241 234 235 135 151 143 11 102 224 167 22 12 237 215 215 97 236 24 149 134 137 91 90 23 25 58 62 60 199 77 64 74 163 57 243 2 253 2 172 226 36 211 113 93 21 1 161 0 125 61 72 133 22 12 107 4 208 254 51 198 202 24 186 227 175 249 233 178 186 116 191 81 147 61 127 130 1 44 9 55 198 199 6 181 223 187 253 236 234 231 115 13 196 62 144 227 162 51 248 182 239 222 220 54 91 166 209 103 149 168 151 12 82 76 141 216 141 170 168 249 17 173 63 23 183 40 12 141 38 119 221 46 55 67 35 126 66 123 8 130 93 175 211 10 215 226 151 85 212 87 2 178 12 55 153 210 49 127 106 107 126 130 101 148 99 71 187 191 114 22 203 199 249 31 208 227 68 216 46 27 18 61 244 203 75 180 220 238 235 8 197 64 221 87 221 199 177 77 18 3 251 48 229 128 144 3 227 251 237 232 228 188 48 206 92 6 218 242 120 127 144 243 174 118 207 113 223 78 90 162 11 62 35 4 198 13 131 132 140 224 66 69 151 9 153 165 41 149 130 186 38 121 216 65 125 116 229 63 66 251 234 11 89 236 109 40 194 87 73 112 225 129 201 177 242 128 241 11 184 124 189 50 151 43 232 253 224 92 50 183 246 32 237 222 41 144 108 220 56 183 214 116 108 24 5 28 193 64 90 46 66 189 128 163 239 24 4 149 101 241 133 139 141 131 82 83 223 244 129 198 131 109 62 100 152 73 129 233 254 108 254 244 242 39 78 13 97 134 100 196 162 71 51 185 37 141 134 188 35 171 41 63 232 188 207 36 5 1 115 31 28 223 9 3 95 53 61 19 178 237 89 28 199 66 82 35 45 107 34 113 71 80 45 208 101 18 254 34 231 102 173 193 8 194 225 37 214 169 45 207 147 51 30 55 234 208 228 204 200 56 212 77 57 153 25 129 207 138 25 138 44 27 172 232 228 95 42 110 59 72 130 193 250 198 69 22 66 198 177 134 29 214 99 108 191 126 248 206 238 177 231 13 203 157 91 131 142 47 115 97 159 103 184 73 21 23 69 8 50 229 44 122 3 210 49 218 23 116 129 27 58 146 107 76 198 211 231 206 193 6 161 205 237 28 200 153 8 15 229 163 139 71 41 230 28 212 123 18 55 202 111 240 203 197 110 100 168 248 164 232 183 240 225 149 123 64 114 245 80 152 62 16 198 107 194 119 140 107 215 189 190 161 11 35 184 15 107 88 23 102 121 145 18 214 69 199 247 154 200 65 169 205 66 194 57 194 117 77 16 176 219 222 52 80 61 185 95 4 211 108 146 144 198 103 87 143 174 216 135 221 78 149 20 213 35 150 95 110 153 135 71 239 164 112 3 112 11 44 90 133 30 18 255 85 117 155 54 200 147 247 195 86 166 155 211 176 184 229 48 69 75 145 55 42 124 183 253 24 93 175 123 157 252 55 53 70 92 233 212 182 187 250 122 81 216 21 160 122 33 225 130 199 7 9 117 21 72 128 62 238 255 243 166 117 112 154 178 218 246 245 84 217 163 187 111 51 80 41 136 248 180 91 224 94 213 54 227 214 218 243 227 96 32 45 154 100 38 18 225 42 61 182 37 196 192 202 102 89 146 60 191 94 146 131 216 183 96 95 54 157 168 223 200 124 104 29 184 204 235 5 51 216 161 62 128 132 50 32 25 80 186 16 250 113 255 215 55 7 21 207 142 179 11 253 213 14 252 44 78 115 190 106 187 70 153 61 66 181 138 252 96 11 168 237 129 179 149 67 167 242 246 4 105 142 85 146 41 1 82 233 144 143 64 76 197 223 6 210 174 132 139 255 137 29 2 183 199 167 109 98 60 50 19 70 72 147 82 113 176 178 28 195 185 70 189 30 229 227 248 247 88 28 186 105 141 228 142 178 245 79 109 172 71 65 253 221 16 183 244 210 125 58 182 42 26 190 203 19 117 12 196 102 5 216 58 29 64 202 171 82 72 153 46 3 242 217 239 138 176 54 194 241 188 177 195 54 142 106 144 229 1 167 99 230 71 79 112 79 45 13 16 250 173 54 29 72 23 210 253 250 220 202 127 75 157 201 74 230 219 85 192 206 236 22 58 186 74 199 131 190 157 138 253 201 118 60 103 122 142 227 140 232 4 241 32 241 255 8 49 70 42 113 109 153 45 59 147 13 73 242 141 20 0 55 13 63 3 222 30 226 79 236 40 89 114 13 217 100 101 199 10 207 201 70 6 202 23 13 229 153 9 210 250 209 165 255 150 114 197 216 72 150 16 31 203 193 97 236 199 199 219 161 232 165 62 24 198 16 0 44 161 149 184 175 51 255 139 27 68 236 90 8 139 185 69 241 202 198 174 1 210 113 113 240 236 216 55 112 27 129 63 184 131 200 140 222 75 172 6 144 247 197 37 14 200 167 36 129 59 15 226 188 63 30 253 81 172 114 24 141 54 179 112 80 3 55 96 188 97 153 134 184 233 94 61 132 7 132 253 201 82 231 182 95 23 134 245 153 179 41 109 163 132 199 62 192 68 51 35 30 194 163 12 188 95 39 13 231 73 254 194 29 201 173 117 15 205 139 67 193 202 45 82 141 110 16 101 227 175 132 179 178 207 243 31 115 115 149 192 238 76 207 204 60 200 173 47 19 181 224 27 82 41 124 76 116 95 49 187 233 242 193 60 117 245 125 69 10 68 200 122 108 194 241 36 20 72 211 17 14 43 239 78 8 29 95 21 50 236 191 115 7 99 1 219 175 45 242 114 72 145 86 46 160 25 179 165 136 244 26 255 206 212 214 143 39 128 145 239 140 153 133 40 125 11 224 111 9 178 237 58 93 232 172 167 219 54 167 70 104 108 119 177 134 188 64 140 210 122 198 123 54 186 80 95 153 63 12 1 182 13 69 235 27 210 221 24 208 104 179 162 246 223 185 163 131 195 118 162 230 75 171 12 47 251 66 233 34 77 210 254 178 104 59 192 215 241 241 250 23 231 4 208 177 161 111 191 235 41 103 82 2 109 32 195 36 172 53 191 44 32 148 69 131 120 252 40 63 170 58 19 182 103 192 85 235 181 133 23 70 188 52 158 153 234 192 32 9 232 224 22 8 243 181 223 185 195 69 52 140 129 6 33 150 179 113 63 16 108 228 152 7 144 245 65 174 245 14 136 159 22 89 118 180 238 115 58 109 82 30 170 40 71 7 255 176 90 223 121 218 71 113 132 43 119 48 17 41 78 122 251 246 231 225 117 136 89 244 45 197 38 149 167 143 232 192 34 162 89 16 9 61 39 73 134 253 206 29 131 56 240 183 232 24 123 187 153 109 136 27 76 47 126 132 185 143 25 131 194 33 254 143 199 251 255 46 227 66 239 174 224 216 209 204 65 61 168 158 248 231 188 177 89 153 203 12 124 122 4 244 240 58 102 137 27 35 194 172 127 111 104 185 50 88 106 129 248 199 188 73 124 49 214 216 105 51 19 65 40 124 249 167 118 16 102 49 197 3 19 165 214 13 78 75 128 136 154 76 192 205 171 26 218 46 159 235 211 235 63 210 114 217 93 195 113 66 83 160 94 35 111 22 242 254 46 108 128 37 4 122 2 226 226 129 139 13 175 196 247 89 210 227 126 105 136 228 148 131 80 174 0 136 113 16 30 235 117 38 55 40 132 5 28 249 85 59 66 2 161 146 108 32 122 70 235 120 215 142 6 179 129 162 139 77 155 247 203 242 11 44 124 80 102 12 86 245 214 160 246 107 130 145 39 155 78 186 244 98 204 148 47 161 36 69 78 149 185 170 10 72 3 65 215 105 222 251 81 11 61 130 117 45 31 47 84 230 81 65 68 57 147 163 168 210 103 213 236 87 237 240 224 37 89 90 239 174 92 128 159 218 97 212 165 164 227 53 144 79 173 106 114 168 15 203 209 241 169 248 117 34 57 227 214 66 216 122 112 131 204 172 214 118 108 165 173 108 61 11 131 16 143 30 21 201 184 89 236 232 199 121 159 21 220 190 53 116 3 253 133 166 210 17 11 215 109 69 131 129 122 158 43 252 170 29 239 77 27 177 190 139 62 168 76 191 107 199 61 139 114 114 12 52 141 3 249 236 234 167 252 20 47 103 253 15 154 69 192 114 18 254 192 126 80 134 24 166 110 66 223 91 160 174 92 103 91 21 123 161 171 135 146 103 26 163 227 89 219 3 118 82 159 87 39 27 134 135 10 123 70 101 176 109 49 239 222 1 140 123 11 2 221 119 190 7 3 76 255 213 59 144 29 55 168 38 36 145 231 254 120 250 99 218 248 195 208 48 159 11 129 142 158 110 221 246 137 243 237 38 17 250 218 117 197 64 53 115 67 232 20 67 213 177 109 156 241 31 56 72 24 131 227 101 102 241 239 185 198 116 12 146 206 60 80 74 90 255 244 142 176 64 131 143 239 144 249 200 220 255 232 29 161 187 22 52 157 75 124 174 143 35 96 14 23 125 23 97 159 107 17 82 78 226 255 160 39 151 126 73 85 33 194 107 242 87 1 128 129 76 140 155 90 215 245 68 152 4 78 75 149 193 165 5 247 204 161 85 227 6 12 163 156 207 196 247 253 221 59 180 154 103 204 18 239 76 126 97 40 93 229 175 222 33 66 106 118 232 40 209 102 242 199 245 31 163 191 185 244 92 183 243 66 229 5 125 146 65 117 72 247 82 161 164 160 17 6 206 2 0 213 103 235 247 152 238 26 77 31 238 11 168 60 55 135 12 79 139 183 58 200 237 202 91 247 109 54 117 237 118 246 142 221 199 59 51 142 230 181 61 200 252 238 119 29 233 167 119 140 110 30 232 251 175 255 248 250 143 151 4 164 164 51 112 75 254 206 77 162 164 182 165 131 168 171 123 243 46 0 116 11 174 34 161 3 243 110 116 154 26 63 19 224 235 141 100 105 241 176 98 204 67 54 179 243 61 176 202 69 9 179 25 160 30 173 30 213 14 133 44 128 165 27 209 174 79 200 10 178 156 245 48 185 104 254 118 135 203 71 23 143 146 59 30 61 186 239 245 77 86 37 165 19 246 247 155 202 170 136 114 252 167 0 192 228 194 52 157 72 24 13 29 56 114 228 217 212 6 75 236 141 128 201 120 186 237 65 28 244 58 202 50 13 218 17 101 192 46 169 172 1 215 221 159 48 78 60 103 157 235 228 131 248 153 39 136 166 202 238 205 54 163 233 135 37 193 195 71 204 49 214 214 183 109 125 238 161 94 106 174 110 237 210 189 211 83 253 48 12 67 122 1 139 199 237 76 88 134 51 253 156 200 85 131 246 132 77 59 94 5 226 254 94 21 126 88 99 176 189 142 128 1 97 1 26 232 118 3 71 72 5 117 34 225 231 13 49 138 243 107 78 215 75 253 84 130 63 44 136 217 231 114 131 61 238 220 142 134 88 125 54 67 66 16 87 54 219 187 0 144 70 223 23 168 92 238 51 150 109 123 52 33 93 57 255 225 187 173 215 220 74 52 110 233 20 216 19 53 74 211 115 132 119 130 220 94 12 170 68 159 247 104 168 15 130 141 244 140 122 246 130 187 182 163 223 253 56 255 149 224 28 80 235 148 93 151 122 157 23 240 243 186 49 182 27 120 165 226 126 23 0 252 181 74 56 35 99 190 37 129 207 190 19 174 183 99 70 123 100 243 151 27 221 223 3 29 186 189 111 29 247 136 64 119 197 48 137 81 115 80 175 227 185 18 154 95 21 204 129 206 32 63 8 51 121 66 50 196 144 123 124 190 255 5 53 179 167 184 135 125 203 62 120 123 113 40 97 191 178 219 209 130 97 161 63 5 128 142 208 254 81 147 37 242 167 204 108 193 172 246 52 244 130 164 207 130 120 109 87 73 215 134 128 71 237 175 166 67 232 26 210 244 236 49 18 234 18 146 8 219 18 107 215 81 214 253 140 51 105 74 104 27 220 44 199 255 128 250 227 250 137 26 75 186 154 82 136 247 197 196 240 162 21 196 194 200 246 200 79 1 96 250 200 231 133 202 178 187 134 143 60 33 243 141 91 16 158 184 78 119 217 244 182 97 196 220 248 182 162 90 128 142 192 120 137 92 82 116 118 154 1 210 94 90 74 237 221 97 92 40 1 202 30 200 90 153 80 69 150 143 235 255 238 32 49 138 154 222 163 5 161 104 142 224 247 157 236 121 6 48 247 83 0 144 76 33 200 121 14 205 81 3 80 15 204 158 16 237 35 82 64 211 177 38 52 175 97 159 57 16 2 39 50 201 1 158 196 139 224 182 73 21 172 69 199 56 88 201 248 73 114 213 196 10 52 168 19 150 42 121 158 253 98 31 207 127 139 203 188 211 26 47 35 137 13 120 176 221 209 220 59 198 50 82 126 23 0 170 139 1 245 226 25 214 225 79 55 207 237 162 104 239 147 213 152 85 142 243 94 8 167 107 4 244 13 187 154 165 227 167 40 228 190 160 44 165 136 159 50 24 135 252 215 41 207 67 7 247 58 40 217 144 59 151 28 81 51 62 189 254 52 225 41 250 37 136 249 212 98 54 238 23 66 56 1 253 92 160 20 31 179 0 112 181 245 154 201 236 171 101 60 234 186 237 83 233 185 16 144 130 216 236 218 43 211 106 115 240 196 112 140 132 184 8 223 37 60 38 25 116 123 51 63 140 163 8 172 124 78 6 41 112 55 17 98 153 212 2 127 238 227 233 63 212 97 164 105 228 68 19 181 87 108 8 127 146 22 1 161 189 240 136 88 151 159 2 192 90 218 62 59 117 248 157 41 164 107 111 3 41 35 87 225 200 205 83 154 110 174 99 82 189 120 244 148 123 91 192 115 88 118 49 164 172 57 53 137 17 95 172 26 172 48 75 233 24 245 193 24 138 17 182 213 153 55 218 62 158 0 84 112 161 53 135 139 184 217 180 164 108 26 51 165 83 252 34 216 157 234 76 238 189 136 88 144 234 133 231 157 171 91 225 53 109 246 161 248 14 12 186 191 81 0 61 34 117 125 246 145 198 112 207 152 42 120 141 98 246 213 137 186 238 227 151 227 35 105 77 43 179 249 64 187 90 33 144 9 254 183 207 174 126 106 224 210 89 148 221 172 21 24 145 161 180 210 36 30 63 53 138 149 160 109 6 116 234 117 136 93 32 135 37 142 64 142 247 221 133 58 14 52 104 56 219 131 184 152 161 187 116 117 236 23 51 192 59 250 10 206 145 79 164 49 65 47 114 139 191 4 190 153 5 10 27 198 17 207 82 42 53 192 199 251 255 203 236 105 220 38 106 35 4 89 30 50 58 186 36 90 8 40 97 173 100 230 64 223 62 39 122 10 158 20 6 132 215 76 16 172 175 179 172 219 2 23 235 135 182 169 189 54 90 144 209 192 56 124 96 27 198 54 221 34 2 229 140 88 1 49 223 95 128 15 122 5 39 16 13 238 70 45 169 247 187 209 143 251 63 176 250 88 94 2 242 11 65 58 63 49 8 162 7 59 216 204 104 47 75 24 158 86 66 39 245 7 12 252 118 79 110 18 31 25 207 4 70 83 242 130 188 201 12 245 6 198 164 234 176 239 204 222 81 123 61 107 104 55 153 192 23 77 229 175 192 119 88 81 249 112 252 92 118 239 205 147 206 79 47 255 182 46 197 246 218 241 185 10 244 141 78 51 183 205 72 75 82 240 201 108 138 75 150 34 155 113 29 15 242 148 30 137 94 87 220 4 179 104 129 188 49 119 116 249 30 227 160 11 104 64 7 2 167 172 209 51 240 101 18 31 54 254 78 124 150 146 23 182 193 169 139 73 59 121 238 143 243 63 31 3 56 116 91 6 131 91 233 33 145 11 250 165 181 36 44 31 206 174 76 173 183 101 150 34 143 5 122 166 229 37 73 222 134 65 234 107 220 204 23 17 82 228 108 33 51 117 250 56 224 218 129 121 19 223 235 63 19 95 158 87 197 233 189 41 131 65 98 67 210 245 233 245 79 249 33 114 122 191 132 97 162 164 53 83 177 205 110 214 151 163 179 136 17 35 194 20 60 253 52 51 121 143 220 54 34 170 21 160 210 82 253 234 209 244 223 131 67 129 130 81 4 229 191 38 62 184 91 143 188 35 10 66 0 72 205 199 189 223 123 118 161 101 224 5 215 107 79 195 215 84 201 108 113 40 143 85 72 3 240 205 181 104 143 15 12 187 221 148 56 16 186 44 64 116 176 181 246 200 195 213 130 76 219 123 112 8 180 25 149 252 31 137 47 216 42 203 76 34 141 20 100 95 121 12 31 239 127 159 107 44 52 238 11 71 204 150 253 209 98 68 62 44 193 207 46 111 107 18 34 253 68 59 134 124 55 150 91 46 21 28 181 68 214 67 237 23 65 156 159 17 228 35 137 105 199 230 233 108 255 252 175 137 207 159 161 73 214 172 208 22 242 8 226 243 222 31 68 191 113 189 93 43 222 24 101 69 9 149 242 150 95 171 45 45 160 153 131 166 11 218 176 99 169 28 155 179 232 231 128 94 248 191 165 76 244 18 152 113 177 49 126 17 235 16 67 144 223 67 147 255 148 248 158 67 147 57 161 142 8 103 78 141 17 228 243 253 255 251 26 147 245 72 200 4 56 66 22 107 104 234 231 171 74 193 142 35 90 164 45 96 250 86 129 111 167 153 77 203 97 32 57 114 24 17 23 36 0 19 238 213 186 20 3 90 45 188 104 243 107 104 242 31 10 31 63 67 147 36 183 9 251 94 150 241 116 196 143 247 191 57 100 40 145 56 22 80 221 133 93 218 182 154 163 215 119 91 18 162 1 119 108 24 233 207 59 181 140 100 149 212 110 151 215 134 244 111 206 75 171 232 141 100 249 12 72 26 166 222 132 40 68 250 175 133 175 159 161 73 110 252 73 204 32 77 239 227 252 95 40 0 249 129 188 14 25 240 26 156 146 24 238 240 53 41 54 18 72 47 246 245 204 89 205 49 135 184 32 177 81 82 230 140 107 31 44 110 203 214 251 88 72 189 173 6 202 137 240 14 145 131 202 203 63 20 62 255 24 154 100 102 147 4 1 231 38 54 179 127 252 252 189 94 69 127 21 74 150 109 139 18 20 170 233 116 222 200 123 165 67 151 181 155 189 204 67 172 2 99 96 189 238 217 48 202 133 118 30 53 29 195 194 120 60 228 131 243 92 57 89 2 183 221 255 99 225 251 215 208 228 125 49 218 48 54 34 215 180 33 214 143 243 159 235 57 234 100 108 58 39 150 12 251 49 72 34 193 60 72 78 182 2 38 93 11 196 53 207 246 143 54 182 57 199 33 22 73 237 49 59 34 144 201 30 248 238 89 120 65 207 215 75 45 151 121 245 127 109 124 104 127 31 154 12 100 28 13 162 34 93 240 207 215 255 219 235 185 8 85 185 46 97 107 171 103 98 98 119 50 52 172 141 166 253 152 131 192 106 45 185 32 81 14 170 204 194 0 79 100 150 45 214 4 214 193 58 78 138 20 9 100 71 167 151 203 165 77 217 254 165 241 229 248 247 161 73 9 86 248 71 61 179 87 248 127 33 1 114 54 233 155 119 209 72 51 243 177 24 187 22 251 210 112 34 241 29 215 219 139 23 12 1 185 161 130 163 35 103 54 42 120 165 57 31 240 174 132 239 107 123 72 144 174 60 87 144 168 246 8 237 220 66 22 81 223 141 79 231 191 15 77 86 4 17 249 133 123 75 104 245 159 94 60 204 70 127 21 137 87 13 29 60 228 181 76 192 134 199 253 58 119 36 124 176 111 89 128 156 45 81 93 60 19 202 171 205 218 33 225 33 229 158 185 251 240 70 207 30 113 64 16 125 51 102 161 82 248 37 29 187 152 141 111 21 196 191 15 77 142 163 208 6 114 175 68 245 242 241 254 15 43 203 78 124 236 89 205 89 252 153 142 54 253 106 27 151 114 3 49 209 49 21 107 52 248 250 105 39 88 201 25 252 102 131 92 58 220 101 174 222 188 247 32 220 126 185 80 57 154 229 210 49 237 223 141 143 179 10 246 31 134 38 55 142 56 81 161 97 112 101 245 199 241 239 134 232 246 136 53 32 57 111 115 166 77 218 121 151 9 245 75 4 45 209 219 117 138 164 117 22 57 230 220 7 66 100 120 55 72 135 86 153 190 214 216 38 166 95 15 168 175 157 33 67 242 163 108 1 24 103 76 14 32 255 48 52 137 177 127 183 121 83 247 2 165 125 124 254 113 217 179 222 107 208 240 236 1 217 250 204 98 174 115 58 1 102 186 39 47 208 252 130 192 14 29 227 188 179 64 33 254 93 37 185 131 220 122 35 215 61 196 74 164 115 199 96 51 151 127 87 32 101 122 60 141 80 73 71 242 15 67 147 130 174 251 48 168 64 232 52 237 199 251 191 11 3 213 222 30 251 53 184 2 53 103 181 149 120 255 99 142 237 84 191 71 244 220 251 85 25 244 35 175 82 212 27 67 67 198 63 116 100 120 199 28 244 134 248 76 96 140 198 129 56 167 245 235 233 100 103 115 84 226 63 15 77 54 125 44 12 2 95 157 154 147 32 31 150 92 130 107 217 172 4 222 248 158 108 116 206 132 108 175 115 160 139 58 109 34 50 215 227 53 183 98 1 101 92 93 8 92 242 12 203 155 220 228 123 120 97 223 76 111 185 139 81 211 127 108 80 119 75 55 141 236 233 63 15 77 238 165 137 0 94 97 44 213 31 95 254 108 98 40 212 192 49 135 63 241 191 235 131 6 237 243 14 207 51 147 29 132 221 140 94 55 162 219 246 58 240 16 133 203 222 131 195 195 94 186 117 115 172 207 154 113 66 185 56 42 193 141 232 104 128 71 120 140 31 176 89 254 15 67 147 109 53 2 131 77 126 237 123 83 31 103 192 57 110 232 145 82 88 150 29 67 125 91 249 171 139 23 159 104 7 79 206 116 67 155 151 49 35 87 51 232 7 42 154 251 58 59 189 38 95 24 135 71 20 219 219 130 180 38 156 72 124 137 221 208 224 193 232 53 130 76 145 137 255 60 52 201 131 239 242 92 98 5 166 251 199 251 191 134 17 151 68 63 93 102 77 123 86 54 42 130 83 228 60 135 155 217 219 101 153 141 48 44 160 33 171 216 13 65 180 203 216 190 188 231 246 133 228 161 246 140 75 184 8 159 109 164 156 109 157 193 198 223 141 195 114 139 157 189 79 247 111 67 147 173 164 154 252 188 50 137 10 8 31 247 127 214 225 35 131 195 112 39 36 180 70 144 203 191 64 33 210 123 48 158 23 86 132 17 166 89 87 169 216 194 111 101 173 44 169 138 39 170 139 72 39 186 191 247 96 231 114 253 49 206 226 218 232 21 131 35 154 205 191 15 77 82 83 150 26 221 16 19 89 186 143 223 127 146 90 66 29 208 104 196 124 150 120 178 183 72 243 64 13 54 219 89 122 105 87 31 108 132 119 81 19 193 12 17 28 225 125 130 121 113 15 23 115 224 173 236 179 33 96 171 179 31 126 121 35 162 45 79 24 221 11 213 145 170 246 183 161 73 162 88 149 247 144 109 214 203 17 20 127 188 254 7 241 168 204 121 207 241 129 209 245 159 124 239 252 42 48 111 64 162 129 27 93 219 147 137 94 40 96 80 15 17 202 113 237 171 194 131 118 182 173 101 102 183 1 233 207 118 238 39 154 79 65 61 66 128 251 30 140 131 221 130 112 228 239 67 147 74 35 10 188 168 16 12 214 158 158 143 167 255 113 149 230 53 177 13 82 209 195 238 23 186 128 235 129 119 86 38 237 133 41 12 212 169 131 217 110 64 112 111 239 141 231 178 93 221 204 123 51 172 118 182 58 11 250 14 24 199 250 181 134 222 195 89 145 232 205 102 42 97 87 239 210 95 135 38 39 10 74 107 48 110 165 137 162 175 68 184 120 232 143 251 127 11 148 92 47 72 147 220 204 201 68 12 225 117 3 206 113 15 90 150 92 218 140 71 43 229 149 181 88 11 127 236 90 165 84 62 122 39 17 55 249 81 135 129 113 17 155 132 185 142 190 185 201 140 237 2 35 75 226 82 46 242 47 67 147 187 7 86 214 220 103 199 81 215 200 172 168 229 233 227 243 31 92 11 226 16 236 96 184 183 63 100 220 219 23 49 121 179 148 229 117 77 219 54 198 181 56 90 88 93 56 195 248 94 112 133 170 119 81 235 22 69 190 231 13 38 8 239 140 135 173 49 22 102 114 19 82 154 3 193 75 105 251 241 231 208 36 16 71 164 22 206 19 211 240 212 221 156 157 143 219 199 1 208 149 24 30 140 175 240 104 51 39 129 192 174 194 248 148 183 147 6 199 123 188 28 20 1 177 154 30 30 59 59 214 126 70 160 246 75 238 51 55 208 107 154 20 150 204 117 60 8 112 246 181 100 202 142 229 232 136 43 67 168 127 25 154 164 8 153 12 141 82 225 15 145 247 77 122 185 198 143 231 191 55 27 41 110 0 210 128 8 169 230 4 246 212 32 108 69 3 14 71 29 27 121 205 108 189 135 58 18 204 145 255 73 141 222 237 146 111 31 177 66 236 60 65 92 142 140 154 92 54 143 100 240 232 253 70 166 224 113 31 224 207 161 201 133 81 137 91 226 181 49 60 107 168 238 221 78 195 62 222 255 151 83 37 124 235 130 206 208 149 239 115 1 84 117 198 108 101 193 245 146 98 154 65 125 65 184 235 230 237 22 158 205 180 254 49 227 253 27 48 192 65 123 31 201 75 249 147 202 152 27 20 211 186 188 116 106 209 7 242 199 208 100 22 76 73 61 114 158 9 17 15 162 80 82 103 243 251 199 243 95 76 98 184 82 179 163 233 13 197 158 235 16 108 63 171 226 144 148 158 41 33 176 214 91 171 137 70 194 230 8 111 214 231 11 119 105 38 2 107 94 148 67 86 40 116 64 112 252 87 50 211 247 178 14 243 123 104 210 120 129 72 151 71 82 110 178 4 205 137 140 101 17 4 67 98 250 120 5 212 137 176 129 170 233 54 71 193 179 169 247 29 145 172 141 81 133 214 100 50 55 92 204 216 171 100 156 83 145 27 201 61 92 187 70 2 167 102 42 188 48 233 145 29 3 219 163 0 220 14 79 80 3 144 250 199 53 40 114 132 90 223 153 19 120 81 145 16 90 22 62 8 165 126 71 160 65 101 30 78 45 245 227 249 255 106 89 244 220 55 151 210 190 110 59 250 110 63 211 185 34 80 183 175 120 210 125 22 135 183 149 26 22 16 29 47 224 78 228 246 24 0 222 87 58 221 138 38 180 151 215 190 134 217 58 120 34 12 234 173 165 209 131 16 59 134 196 82 231 20 237 142 148 185 23 12 129 174 99 228 155 133 209 153 245 177 241 220 21 253 252 253 23 69 108 109 71 194 167 97 61 143 11 23 104 8 242 22 194 168 66 71 95 230 117 133 179 215 89 110 90 236 171 173 70 89 115 32 244 85 233 181 34 21 122 77 27 38 203 58 203 221 71 110 184 1 207 117 237 46 245 68 88 137 26 131 201 53 88 110 20 28 154 193 161 246 2 155 59 222 125 182 212 171 37 88 79 63 189 126 50 38 249 221 216 28 238 184 7 70 114 106 106 162 17 24 162 29 133 56 136 155 11 121 65 202 198 228 23 42 177 87 16 9 17 161 179 19 137 128 169 210 16 73 144 210 17 152 247 4 147 57 47 185 167 117 130 98 41 245 129 90 179 108 24 58 235 12 115 225 188 14 185 32 56 178 8 53 192 192 74 245 154 62 126 255 105 180 129 156 129 144 208 243 152 73 60 144 107 157 237 14 194 182 13 136 217 164 227 94 162 83 215 120 154 91 139 232 7 178 214 115 14 128 173 71 68 23 184 225 22 192 227 40 134 0 43 137 151 34 69 163 185 179 72 110 214 134 65 95 155 225 92 70 176 11 90 249 189 217 25 37 210 204 27 139 146 196 210 63 222 255 52 96 181 4 172 172 119 157 215 30 95 123 217 55 161 28 28 18 185 16 34 244 221 48 171 89 237 6 241 174 64 147 102 125 152 165 182 201 255 231 197 80 69 106 175 109 200 218 118 58 239 81 200 30 29 136 191 4 239 210 222 114 78 190 175 91 119 204 244 157 122 224 42 246 177 138 53 28 8 139 99 63 162 106 31 159 255 229 24 148 172 148 102 157 55 181 181 151 63 75 95 209 26 80 157 209 39 44 32 115 90 40 111 84 13 124 145 234 195 147 92 45 37 234 232 148 146 251 104 132 146 236 121 131 193 248 197 243 202 92 9 99 75 47 23 9 203 167 89 71 212 187 218 144 254 134 141 18 209 122 38 99 34 12 42 199 40 44 223 209 127 220 255 183 121 237 69 159 113 40 154 121 7 152 91 245 188 178 28 113 96 229 97 160 55 88 196 188 221 224 126 16 255 193 254 164 190 82 174 165 208 47 230 201 123 104 146 104 133 241 204 34 166 103 248 195 26 17 61 119 8 152 142 247 221 160 251 213 151 136 138 132 63 250 211 233 255 204 182 145 117 18 78 29 104 123 220 103 23 15 243 250 63 116 113 170 158 136 109 237 44 229 162 117 162 91 247 89 194 243 218 111 116 255 6 161 43 244 128 20 33 171 104 102 218 231 46 50 93 236 221 185 63 135 38 149 156 119 65 225 82 136 180 190 70 195 196 190 235 182 190 17 85 101 173 130 171 7 37 253 157 100 207 203 108 2 27 179 105 248 129 139 218 254 113 254 151 77 115 38 231 54 153 88 155 119 22 45 38 206 30 22 89 237 190 133 51 40 165 173 153 71 57 145 172 123 99 215 129 204 214 172 199 191 15 77 230 221 59 163 162 173 233 28 118 222 240 250 128 110 129 34 151 206 8 1 237 98 181 29 185 41 4 189 60 131 215 190 205 220 241 135 101 95 240 49 182 21 29 252 156 112 232 232 247 231 125 247 171 49 49 244 221 70 35 145 223 89 88 131 129 112 21 164 113 20 26 93 151 220 115 142 127 31 154 44 91 194 37 42 38 28 161 6 177 64 131 29 68 188 102 243 195 210 185 65 135 217 153 102 115 148 12 189 203 44 168 131 222 62 191 254 51 89 207 28 212 149 23 8 59 231 58 35 104 69 76 172 215 157 91 1 82 79 100 139 202 17 94 71 233 154 65 141 203 169 102 223 126 89 33 253 203 208 228 69 229 234 24 241 8 110 23 183 14 244 252 48 175 126 197 224 47 171 65 14 221 242 129 10 150 75 229 109 247 130 1 177 16 62 94 255 221 87 89 162 113 134 34 181 1 18 19 165 226 60 24 8 209 134 70 138 178 206 235 42 99 7 185 189 58 26 120 219 119 132 124 164 205 158 119 173 151 37 253 101 104 82 103 176 229 216 250 1 230 220 230 100 191 57 231 180 252 204 149 170 203 195 118 158 51 192 118 13 68 103 153 141 104 231 62 62 63 255 242 51 233 137 104 159 89 68 107 144 103 67 227 40 3 202 185 16 194 131 170 212 149 141 244 215 83 201 1 183 134 172 212 156 124 232 13 17 50 81 193 252 57 52 169 40 241 189 63 79 71 20 149 81 51 52 133 13 102 235 99 99 179 182 80 111 112 3 84 128 89 97 131 150 87 40 163 62 31 199 255 64 173 116 227 88 52 136 96 240 76 71 166 217 158 112 149 8 139 201 132 227 97 239 227 154 197 176 108 30 92 164 91 57 130 99 251 50 54 243 226 85 14 127 12 77 54 102 44 186 138 242 188 203 0 39 155 23 164 17 133 6 158 67 208 214 241 52 248 105 60 68 247 110 4 178 239 161 35 248 120 252 151 208 179 13 72 122 53 231 190 15 91 170 10 178 95 169 207 193 183 232 27 180 81 116 156 193 109 137 118 78 203 67 95 204 241 96 160 135 120 232 209 252 226 126 13 77 98 8 13 115 0 22 215 20 80 69 120 187 134 199 216 135 59 226 192 247 99 87 193 23 140 42 110 92 2 152 214 63 153 255 143 215 191 118 131 58 79 8 245 177 51 64 102 190 31 131 194 210 82 207 38 198 101 219 242 245 243 29 21 239 199 109 5 150 91 109 217 156 67 7 132 135 234 53 102 23 40 252 12 77 214 228 214 217 78 105 3 191 142 89 88 208 120 208 168 19 165 230 213 61 167 52 10 121 196 72 24 79 145 60 228 158 48 124 154 143 231 127 28 19 51 244 165 204 16 8 204 91 255 246 66 9 58 127 100 49 145 34 90 217 79 36 43 75 120 247 105 204 146 61 239 115 152 229 74 184 254 128 212 103 166 136 200 12 5 126 223 105 91 82 122 39 134 24 188 154 7 198 71 21 158 35 175 118 145 151 125 218 62 165 63 87 126 112 31 175 115 207 160 63 158 255 107 179 222 65 247 215 75 195 114 197 181 196 197 206 107 64 150 73 240 124 62 94 120 240 115 184 63 253 92 213 240 96 44 68 27 232 228 245 204 146 1 169 140 176 142 251 53 175 7 233 157 87 3 23 143 219 252 201 94 163 19 232 248 231 119 11 128 68 211 25 181 77 7 136 225 22 248 88 102 95 56 60 37 124 30 0 19 56 95 236 153 137 112 18 80 243 49 134 133 227 238 132 87 254 192 108 109 223 131 152 147 138 102 63 52 158 253 188 187 58 189 242 204 129 15 147 95 163 212 148 118 32 251 143 29 251 77 224 59 107 158 58 112 205 214 127 178 31 14 226 28 141 95 214 249 225 115 106 216 142 113 119 93 36 70 135 163 125 28 255 162 21 187 121 171 13 215 215 251 44 98 24 39 213 232 176 78 135 206 254 61 212 111 185 246 214 244 212 48 44 10 245 168 199 255 186 187 226 126 150 198 77 139 30 131 196 251 10 89 149 82 180 137 165 52 226 54 43 33 143 148 125 64 126 117 135 106 176 99 116 157 67 212 250 224 245 80 46 197 89 40 253 120 255 215 142 143 160 189 215 122 181 63 55 18 48 198 87 88 70 220 163 190 111 27 3 140 27 189 183 175 139 51 122 14 139 129 138 128 48 8 127 176 22 174 16 193 99 56 168 82 163 234 71 177 162 103 31 155 48 224 246 19 12 2 166 84 151 85 235 26 248 242 132 189 187 4 139 157 119 173 34 47 52 179 222 214 143 143 247 191 190 238 67 190 81 96 91 5 123 79 179 147 4 186 99 200 110 175 93 149 3 182 43 149 123 219 123 173 231 188 222 213 206 11 78 17 33 129 51 149 129 60 174 222 199 86 237 130 236 121 120 233 44 33 67 10 230 153 98 178 46 160 234 8 108 102 214 215 229 193 248 39 14 132 210 193 92 32 215 159 206 207 237 227 235 103 117 44 16 206 188 183 184 154 119 45 47 22 244 223 51 219 165 249 186 241 237 78 176 237 226 88 40 155 99 13 131 142 211 226 111 245 77 17 68 240 145 115 202 25 162 97 183 35 252 35 48 123 99 13 193 200 192 240 37 181 117 68 87 67 66 1 19 165 90 128 65 233 205 90 54 187 44 216 143 231 251 120 253 11 40 90 37 135 177 181 216 231 119 128 209 192 225 138 72 98 6 104 84 98 50 249 254 60 36 247 198 42 99 192 188 230 8 110 107 247 179 148 95 247 215 144 149 240 171 208 247 191 35 123 68 43 66 16 60 153 33 226 199 252 83 47 188 103 255 3 195 143 96 248 57 148 173 46 94 7 93 159 143 195 159 153 198 67 237 204 43 62 153 236 51 239 131 43 149 5 253 53 198 235 93 164 6 113 157 135 132 196 112 166 106 39 10 114 175 57 181 188 70 68 200 172 41 126 58 12 227 232 19 186 159 151 57 71 109 220 236 147 120 50 146 165 249 45 63 115 6 150 114 97 71 34 121 118 85 179 129 112 97 59 82 15 15 2 171 231 227 248 247 196 131 156 23 32 204 65 159 92 38 23 250 185 147 10 255 63 141 35 196 7 236 110 9 219 237 48 218 101 101 141 189 180 147 100 126 111 146 113 229 182 173 175 33 0 33 199 178 80 94 72 41 62 190 111 181 235 200 145 46 174 196 188 8 145 212 182 61 72 121 187 25 55 180 83 180 45 77 2 189 10 225 63 222 255 244 56 121 163 99 182 206 17 153 223 167 113 19 132 124 220 35 8 222 53 34 249 50 208 145 11 135 108 181 109 35 151 253 85 137 209 202 14 187 236 253 101 252 206 164 206 86 134 206 200 98 23 77 144 20 131 164 205 152 5 247 106 65 204 99 55 6 190 90 31 10 228 93 62 11 52 189 103 98 246 10 196 21 253 241 245 115 9 50 87 82 115 21 75 103 3 237 54 222 8 230 231 13 39 115 56 113 31 27 122 241 84 84 91 148 82 155 91 119 196 0 205 41 73 139 151 57 248 53 120 165 142 220 87 106 253 218 13 35 148 33 110 78 43 122 80 146 196 218 148 19 226 9 193 75 16 103 226 178 193 222 84 69 140 44 7 194 1 193 249 199 235 63 179 165 123 233 94 82 127 168 68 221 165 61 180 4 82 165 117 94 122 195 174 99 175 146 167 179 204 7 165 38 68 14 188 4 137 39 105 55 52 248 83 21 203 74 189 28 223 148 143 237 38 72 165 230 85 169 27 71 224 187 28 91 17 251 130 225 99 114 8 195 205 166 129 138 60 250 146 139 161 30 215 191 126 30 254 137 52 125 218 133 24 158 237 104 162 176 206 59 175 252 242 108 112 65 90 240 180 37 146 88 212 90 22 59 116 174 81 63 132 19 177 247 247 29 14 158 243 121 153 239 107 49 43 198 179 117 54 194 29 91 171 169 204 214 232 134 12 225 68 245 153 99 52 191 198 156 218 243 208 221 42 100 132 149 66 35 33 125 222 255 101 62 199 115 97 109 104 161 185 255 234 71 51 99 94 231 30 230 151 56 117 57 243 188 181 149 27 226 184 136 223 130 207 85 233 121 135 135 66 59 102 11 34 89 144 105 61 214 68 167 11 61 202 226 28 130 193 52 145 237 138 38 161 142 146 222 215 124 190 67 253 147 210 51 187 196 247 154 103 93 216 126 252 254 155 87 103 106 6 104 83 73 88 85 14 147 145 34 49 65 53 70 30 127 114 52 6 215 18 123 252 225 220 235 65 228 151 233 108 106 159 119 184 84 240 206 225 150 221 116 54 60 29 239 47 78 193 160 32 141 92 251 164 245 243 171 82 165 116 199 251 14 152 97 124 12 198 105 168 204 205 62 137 84 46 154 87 111 62 62 255 120 140 149 207 175 188 89 188 230 200 123 231 183 183 0 109 44 7 74 178 123 103 103 125 201 118 126 41 234 93 15 23 209 230 115 33 63 119 248 232 247 88 155 137 129 230 232 152 30 71 151 70 176 165 108 33 55 142 134 85 156 214 124 67 110 225 22 102 239 179 133 58 46 64 109 113 37 174 193 232 135 148 177 127 220 255 211 82 6 23 117 63 7 46 150 143 58 175 232 97 66 235 188 214 186 204 204 15 69 35 71 28 131 103 39 121 88 171 68 229 255 117 135 83 87 186 228 153 199 138 68 41 140 152 50 49 215 209 181 25 137 86 181 136 97 103 87 172 224 80 142 179 178 113 141 189 231 171 207 200 146 207 11 3 205 22 115 148 31 63 127 194 182 149 64 229 103 34 41 170 237 170 231 169 115 92 214 84 242 226 244 123 222 1 234 171 102 51 103 247 137 111 2 209 254 207 29 94 16 119 58 94 235 188 34 0 149 221 123 185 24 170 100 35 179 21 24 33 207 134 116 224 125 169 44 110 198 121 87 70 75 118 8 143 194 132 88 148 18 52 150 131 124 60 251 141 66 43 4 160 232 174 194 56 136 105 61 143 45 59 180 8 179 88 9 53 28 108 61 47 120 108 234 243 142 119 149 150 229 247 29 110 179 93 236 32 10 25 224 43 83 219 211 188 44 123 213 158 0 175 47 208 148 226 86 0 161 251 187 43 60 60 13 216 204 8 164 174 192 111 32 30 159 226 222 231 232 212 135 101 78 112 249 94 79 255 254 22 188 217 249 142 79 118 11 113 82 182 32 163 19 119 72 1 70 51 251 221 129 223 61 111 253 143 59 252 96 126 107 146 82 207 3 119 67 223 207 237 178 148 117 194 166 227 25 107 161 106 69 152 19 124 251 137 113 207 169 142 212 20 4 130 75 86 44 207 11 224 207 42 63 222 255 254 120 107 225 220 125 81 144 120 193 85 185 233 19 6 156 47 77 219 252 222 3 196 194 225 129 61 157 11 164 213 176 112 253 190 202 230 61 231 138 144 8 30 206 94 120 250 66 22 203 143 247 23 222 218 75 120 171 167 211 64 240 91 144 242 206 73 153 190 212 89 66 93 22 84 170 166 226 158 144 7 153 143 231 255 250 209 75 113 5 201 46 2 225 189 128 80 214 219 119 27 255 188 195 211 65 71 92 244 154 87 194 207 139 129 216 226 57 249 227 14 207 50 83 30 179 151 229 65 92 232 147 89 92 156 223 121 61 199 168 240 71 106 247 190 204 233 199 245 213 162 194 77 238 64 26 226 140 116 212 130 182 132 118 3 68 127 190 252 131 14 122 206 43 178 217 204 66 14 196 186 92 183 159 172 252 188 195 213 172 133 247 217 235 54 203 219 107 153 54 76 254 184 202 166 218 82 223 95 114 253 110 157 108 124 85 65 207 175 16 60 17 10 162 185 203 124 166 178 33 130 184 59 186 18 193 56 153 95 49 220 103 233 115 222 141 249 198 67 159 135 255 191 228 32 11 62 234 86 66 137 126 230 44 182 185 174 25 160 203 152 95 255 38 102 153 228 213 106 112 241 47 87 217 212 141 202 119 97 0 249 79 32 188 154 176 72 12 18 51 201 219 251 254 190 1 73 96 152 200 242 117 216 249 21 187 245 184 49 234 205 164 201 251 183 8 200 207 247 255 127 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 149 175 124 229 43 95 249 202 87 190 242 21 128 255 7 221 154 25 153 119 41 166 247 0 0 50 19 105 84 88 116 88 77 76 58 99 111 109 46 97 100 111 98 101 46 120 109 112 0 0 0 0 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 34 239 187 191 34 32 105 100 61 34 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 34 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 34 97 100 111 98 101 58 110 115 58 109 101 116 97 47 34 32 120 58 120 109 112 116 107 61 34 65 100 111 98 101 32 88 77 80 32 67 111 114 101 32 52 46 49 45 99 48 51 52 32 52 54 46 50 55 50 57 55 54 44 32 83 97 116 32 74 97 110 32 50 55 32 50 48 48 55 32 50 50 58 51 55 58 51 55 32 32 32 32 32 32 32 32 34 62 10 32 32 32 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 34 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 34 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 120 97 112 61 34 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 34 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 60 47 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 55 45 48 53 45 50 56 84 49 50 58 52 48 58 48 50 90 60 47 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 55 45 48 53 45 50 56 84 49 50 58 52 51 58 50 54 90 60 47 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 100 99 61 34 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 34 62 10 32 32 32 32 32 32 32 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 112 110 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 34 119 34 63 62 235 251 133 18 0 0 11 59 73 68 65 84 120 156 237 157 91 114 220 186 17 134 127 92 72 202 145 85 62 117 94 83 149 188 101 29 217 66 86 154 37 100 31 89 132 203 23 105 198 36 1 116 30 64 82 51 162 100 128 199 182 116 130 254 63 215 20 169 209 204 152 18 91 125 249 1 52 140 36 17 24 0 56 3 136 200 56 0 3 32 22 34 128 49 64 126 77 2 176 60 39 235 115 23 199 63 128 252 241 183 254 20 126 224 210 1 188 253 245 255 40 207 253 252 246 241 212 35 27 131 91 158 182 79 94 154 182 199 163 145 224 194 88 120 124 253 227 175 193 111 166 110 58 60 222 233 71 131 184 246 18 113 121 56 192 120 72 90 190 255 3 63 156 249 131 239 251 179 28 223 246 250 127 13 70 226 26 62 112 237 75 46 253 162 1 128 25 64 88 158 240 0 186 139 23 252 218 139 36 175 139 127 54 168 60 19 40 5 171 237 88 108 214 179 229 21 79 67 13 249 127 230 121 163 120 66 74 9 73 214 36 84 96 96 158 120 18 1 196 240 248 22 199 124 135 144 255 48 127 206 209 3 227 242 193 171 7 240 249 176 252 127 243 44 136 105 66 140 1 41 229 55 173 113 84 68 96 76 2 76 248 169 23 197 227 145 35 126 250 231 250 235 60 225 242 5 153 57 140 8 33 32 132 25 49 174 222 98 90 202 85 1 76 186 184 56 242 250 252 252 223 189 191 72 12 150 179 108 16 34 64 140 128 136 96 28 71 196 56 99 154 190 33 198 8 235 128 174 243 24 199 17 206 246 63 253 162 200 17 190 159 207 137 124 95 73 49 102 159 63 248 71 93 194 45 113 10 187 68 51 165 132 113 28 241 183 191 255 21 6 1 99 248 130 193 91 0 55 249 35 242 199 227 209 192 218 57 230 95 197 203 223 207 127 68 111 117 125 43 63 154 232 239 194 199 59 108 63 247 83 163 50 57 111 176 54 191 209 32 64 240 128 255 252 247 95 63 120 17 228 207 140 223 25 194 202 98 136 214 218 156 83 196 9 130 0 131 111 175 118 113 228 109 240 207 62 107 144 147 10 36 132 16 48 12 239 96 45 96 32 0 166 215 188 62 242 6 236 131 209 42 91 155 0 32 193 187 30 49 8 62 126 252 132 32 1 194 74 163 121 158 136 87 17 57 217 72 88 227 199 60 207 0 12 222 223 254 6 111 6 92 39 56 164 69 46 60 69 90 52 135 107 188 239 16 163 160 235 58 76 129 161 67 3 246 234 84 30 135 207 141 56 24 177 136 49 160 235 44 198 233 1 222 27 134 15 5 60 147 104 46 118 34 75 29 110 12 100 9 43 6 130 176 41 160 164 85 138 170 135 181 22 41 45 227 28 48 240 47 20 44 164 29 138 70 241 84 38 149 23 133 13 210 10 69 163 72 41 193 90 11 155 101 205 60 108 78 154 230 144 167 16 230 20 42 168 202 41 68 132 57 133 34 138 70 97 140 185 242 22 244 20 237 83 21 62 156 115 0 128 136 72 79 161 128 170 68 51 165 4 99 12 28 28 18 197 171 230 41 26 197 205 205 13 140 49 8 33 64 32 176 156 185 221 60 197 59 124 62 159 17 99 132 247 158 229 168 18 138 70 49 12 3 186 174 131 136 32 72 96 162 169 128 98 214 120 62 159 17 83 132 115 14 222 120 36 184 215 184 46 242 134 28 202 41 0 42 154 26 56 84 125 0 185 44 37 109 83 165 83 120 159 163 76 66 130 99 248 104 158 42 79 17 99 132 49 6 22 150 163 164 10 168 206 41 98 140 203 202 115 230 20 173 83 173 83 56 231 104 16 74 160 78 65 118 20 117 138 211 233 132 36 212 41 52 113 120 236 131 33 164 125 14 85 31 6 134 58 133 2 170 116 138 190 239 243 66 99 9 212 41 20 80 53 29 111 28 115 55 27 111 56 193 70 3 69 163 232 186 14 93 151 219 35 114 130 141 14 138 70 113 127 127 143 148 18 186 174 227 4 27 37 20 239 242 251 247 239 97 140 193 52 77 72 203 63 210 54 197 36 225 225 225 225 202 83 8 189 69 243 28 202 41 34 34 7 196 20 112 168 250 96 57 170 131 162 81 196 24 209 117 29 156 203 211 251 169 104 182 207 225 101 131 28 16 107 31 246 167 32 59 170 198 62 46 97 162 217 62 85 99 31 236 79 161 139 98 44 184 244 20 9 9 1 243 47 189 32 242 246 28 74 52 45 44 186 171 109 162 72 139 84 247 167 88 123 84 176 250 104 159 170 68 211 57 151 171 16 36 86 31 10 56 228 41 168 83 232 128 58 5 217 81 85 146 94 110 41 68 157 162 125 170 117 138 181 239 21 117 138 246 57 164 104 178 143 166 14 152 83 144 29 207 24 69 186 58 223 196 171 101 189 7 61 69 251 188 236 41 150 13 97 182 197 197 198 44 58 5 167 227 181 78 89 167 176 66 157 66 25 204 41 200 14 234 20 100 7 117 10 178 131 58 5 217 193 156 130 236 56 52 201 6 160 78 161 129 170 117 31 107 62 193 249 20 58 40 26 197 150 96 46 125 52 217 201 166 125 170 228 201 24 227 150 112 114 233 96 251 84 87 31 107 78 65 157 162 125 170 60 133 115 110 235 207 77 157 162 125 168 83 144 29 85 19 119 99 140 185 109 34 117 10 21 148 171 15 155 23 255 152 37 193 164 167 104 159 23 140 226 49 100 204 243 12 103 59 174 251 80 196 19 163 216 55 57 235 251 1 34 130 24 179 204 45 76 52 155 167 24 62 166 105 66 140 17 214 90 86 30 74 40 26 197 237 237 45 156 115 220 88 78 17 69 163 248 252 249 51 68 4 195 48 0 96 162 169 129 106 79 49 207 51 19 77 37 28 202 41 216 134 89 7 85 205 85 115 245 145 71 71 217 134 185 125 138 70 49 207 51 188 247 240 222 67 32 244 22 10 40 222 97 239 253 227 238 64 48 28 37 85 192 161 156 130 232 160 106 107 7 234 20 186 160 78 65 118 28 242 20 2 161 78 161 128 162 81 140 227 120 181 5 37 105 159 42 157 98 173 62 0 32 49 124 52 79 209 40 66 8 219 52 255 252 6 86 33 173 83 188 195 125 223 111 11 130 184 177 156 14 138 70 113 58 157 54 195 176 224 156 10 13 20 141 226 195 135 59 140 227 152 149 77 110 23 165 130 162 81 124 252 248 9 125 223 35 132 176 108 65 73 153 187 117 42 60 197 7 140 227 200 166 37 138 176 251 47 151 135 228 227 183 111 103 116 189 195 227 164 94 86 31 173 83 213 222 104 59 231 10 49 21 28 222 130 146 50 119 251 84 239 247 177 66 79 209 62 85 225 99 77 50 35 34 61 133 2 170 86 157 167 148 96 140 129 131 163 162 169 128 162 81 220 220 220 192 24 179 13 157 115 236 163 125 138 119 248 124 62 35 198 8 239 61 53 10 37 20 141 98 24 134 109 154 127 144 192 68 83 1 197 172 241 124 62 35 166 60 74 234 141 71 98 35 180 230 57 148 83 0 148 185 53 112 168 250 0 192 62 154 10 168 210 41 214 206 120 9 137 125 52 21 80 229 41 214 137 187 28 58 215 65 117 78 17 99 132 64 152 83 40 160 90 167 112 206 209 32 148 64 157 130 236 40 234 20 167 211 9 73 168 83 104 226 240 216 7 67 72 251 28 170 62 12 12 117 10 5 84 233 20 125 223 195 90 139 32 129 58 133 2 170 166 227 141 227 136 16 2 188 225 4 27 13 84 45 48 238 186 220 180 157 19 108 116 80 52 138 251 251 123 164 148 208 117 29 39 216 40 161 170 105 137 49 6 211 52 113 129 177 18 138 73 194 195 195 195 149 167 16 122 139 230 57 148 83 68 68 14 136 41 224 80 245 193 114 84 7 85 59 24 119 93 183 53 45 161 162 217 62 135 151 13 114 64 172 125 170 140 34 165 196 181 164 138 56 180 47 41 192 29 140 53 80 53 246 97 173 221 122 115 51 167 104 159 98 44 184 244 20 9 9 1 243 47 189 32 242 246 28 74 52 45 44 58 116 175 113 93 228 13 169 238 79 177 246 168 96 245 209 62 85 137 166 115 142 59 24 43 226 144 167 160 78 161 3 234 20 100 71 85 73 186 174 35 5 168 83 104 160 90 167 96 115 85 61 28 82 52 217 71 83 7 204 41 200 142 103 140 34 93 157 111 226 213 178 222 131 158 162 125 94 246 20 38 27 199 182 184 216 152 69 167 224 116 188 214 41 235 20 86 168 83 40 131 57 5 217 65 157 130 236 160 78 65 118 80 167 32 59 152 83 144 29 135 38 217 0 212 41 52 80 181 238 99 205 39 56 159 66 7 69 163 216 18 204 165 143 38 59 217 180 79 149 60 25 99 220 18 78 46 29 108 159 234 234 99 205 41 168 83 180 79 149 167 112 206 109 253 185 169 83 180 15 117 10 178 163 106 226 110 140 49 183 77 164 78 161 130 114 245 97 243 226 31 179 36 152 244 20 237 243 130 81 60 134 140 121 158 225 108 199 117 31 138 120 98 20 251 38 103 125 63 64 68 16 99 150 185 133 137 102 243 20 195 199 52 77 136 49 194 90 203 202 67 9 69 163 184 189 189 133 115 142 27 203 41 162 104 20 159 63 127 134 136 96 24 6 0 76 52 53 80 237 41 230 121 102 162 169 132 67 57 5 219 48 235 160 170 185 106 174 62 242 232 40 219 48 183 79 209 40 230 121 134 247 30 222 123 8 132 222 66 1 197 59 236 189 127 220 29 8 134 163 164 10 56 148 83 16 29 84 109 237 64 157 66 23 212 41 200 142 67 158 66 32 212 41 20 80 52 138 113 28 175 182 160 36 237 83 165 83 172 213 7 0 36 134 143 230 41 26 69 8 97 155 230 159 223 192 42 164 117 138 119 184 239 251 109 65 16 55 150 211 65 209 40 78 167 211 102 24 22 156 83 161 129 162 81 124 248 112 135 113 28 179 178 201 237 162 84 80 52 138 143 31 63 161 239 123 132 16 150 45 40 41 115 183 78 133 167 248 128 113 28 217 180 68 17 135 114 10 162 131 67 213 7 64 153 91 3 85 203 6 215 70 104 148 185 117 80 213 201 102 158 243 190 97 81 24 66 52 80 165 104 222 222 222 194 24 3 111 232 37 52 80 52 138 97 24 240 229 203 23 136 8 230 196 157 6 53 80 85 125 220 221 221 193 24 131 206 114 167 65 13 20 141 226 230 230 6 95 191 126 205 51 186 217 239 74 5 135 114 10 246 187 210 129 253 238 151 200 213 199 52 77 0 18 4 194 249 20 10 120 193 83 88 64 44 0 139 24 227 214 239 10 72 156 77 161 128 170 62 154 211 52 229 54 71 18 57 32 166 128 234 156 2 0 117 10 37 28 214 41 56 74 218 62 69 163 56 159 207 184 187 187 3 0 116 182 99 248 80 192 33 79 17 17 233 41 20 112 40 167 160 78 161 131 170 234 99 158 103 24 99 22 157 130 179 185 91 167 106 62 133 115 110 107 216 206 117 31 237 83 181 66 236 90 192 34 173 83 85 125 244 125 159 67 8 12 7 197 20 80 181 234 252 116 58 193 57 135 136 200 100 83 1 207 24 197 245 83 227 248 13 253 224 243 154 82 116 16 244 0 203 210 166 169 218 218 225 234 107 26 68 243 84 85 31 214 218 173 36 229 20 255 246 121 166 164 72 249 97 12 0 89 54 169 117 0 44 132 155 192 168 224 194 83 36 192 4 0 17 64 132 152 8 49 9 206 121 204 115 194 208 223 34 4 129 161 78 209 60 246 234 84 246 55 60 132 25 206 25 204 243 140 222 247 175 120 105 228 173 176 16 224 241 225 0 116 203 35 39 148 93 215 1 16 220 63 124 66 144 145 163 164 10 216 187 6 89 158 22 15 192 34 196 9 206 27 252 254 251 111 240 198 51 124 40 224 249 59 44 64 246 20 22 222 123 140 227 25 247 15 95 150 173 162 24 66 90 199 111 178 195 211 168 176 124 157 82 202 13 219 93 15 3 15 193 13 114 93 66 189 162 85 60 112 6 96 1 227 0 152 124 92 13 68 178 62 145 247 171 181 16 120 24 252 5 255 252 199 191 49 120 139 92 190 174 37 106 54 149 214 142 235 102 222 47 125 63 135 211 183 186 190 149 31 13 233 105 249 140 124 52 34 95 37 255 7 30 2 11 131 188 52 80 18 16 35 48 78 103 156 78 39 196 56 99 154 190 229 134 104 14 232 58 159 59 220 88 134 147 183 229 251 6 177 78 121 120 137 167 138 53 0 248 75 139 203 103 139 181 24 192 123 96 154 13 134 97 64 8 230 162 159 102 46 95 253 59 1 204 34 118 145 55 226 231 255 238 255 7 128 87 244 218 203 19 216 123 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:31'!
leftPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 12 0 0 0 2 8 2 0 0 1 148 26 154 86 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 53 73 68 65 84 120 156 99 249 249 243 39 27 27 27 203 255 255 255 89 110 220 184 161 174 174 206 192 192 192 242 246 237 91 33 33 33 6 36 192 2 84 247 229 203 151 215 175 95 67 148 96 5 0 44 107 21 6 205 166 58 130 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:31'!
leftTopLinkJpg
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 50 29 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 34 239 187 191 34 32 105 100 61 34 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 34 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 34 97 100 111 98 101 58 110 115 58 109 101 116 97 47 34 32 120 58 120 109 112 116 107 61 34 65 100 111 98 101 32 88 77 80 32 67 111 114 101 32 52 46 49 45 99 48 51 52 32 52 54 46 50 55 50 57 55 54 44 32 83 97 116 32 74 97 110 32 50 55 32 50 48 48 55 32 50 50 58 51 55 58 51 55 32 32 32 32 32 32 32 32 34 62 10 32 32 32 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 34 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 34 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 120 97 112 61 34 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 34 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 60 47 120 97 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 55 45 48 53 45 50 57 84 48 55 58 51 53 58 49 48 90 60 47 120 97 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 32 32 32 32 32 32 32 60 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 55 45 48 53 45 50 57 84 49 48 58 49 50 58 48 51 90 60 47 120 97 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 32 32 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 114 100 102 58 97 98 111 117 116 61 34 34 10 32 32 32 32 32 32 32 32 32 32 32 32 120 109 108 110 115 58 100 99 61 34 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 34 62 10 32 32 32 32 32 32 32 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 106 112 101 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 32 32 32 32 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 32 32 32 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 32 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 34 119 34 63 62 255 219 0 67 0 4 3 3 3 3 3 4 3 3 4 5 4 3 4 5 7 5 4 4 5 7 8 6 6 7 6 6 8 10 8 8 8 8 8 8 10 8 10 10 11 10 10 8 13 13 14 14 13 13 18 18 18 18 18 20 20 20 20 20 20 20 20 20 20 255 219 0 67 1 5 5 5 8 7 8 15 10 10 15 18 15 12 15 18 22 21 21 21 21 22 22 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 255 194 0 17 8 0 33 0 133 3 1 17 0 2 17 1 3 17 1 255 196 0 26 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 6 7 8 2 5 255 196 0 26 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 4 5 3 2 6 255 218 0 12 3 1 0 2 16 3 16 0 0 1 239 199 47 193 151 31 155 200 0 0 0 0 0 239 221 141 252 131 155 143 19 147 192 0 0 0 0 0 244 159 119 167 199 249 121 48 248 188 104 33 65 10 66 212 138 66 212 143 76 126 135 163 154 207 241 249 222 113 1 72 10 66 144 164 0 173 214 207 79 128 0 0 0 0 0 31 255 196 0 32 16 0 1 4 3 0 2 3 0 0 0 0 0 0 0 0 0 0 4 5 18 22 2 3 19 6 50 1 49 64 255 218 0 8 1 1 0 1 5 2 60 141 213 193 18 219 11 217 97 123 44 47 101 133 236 176 189 150 23 178 194 246 88 94 203 11 217 97 123 44 47 101 133 236 176 189 150 23 178 194 246 101 245 229 24 201 119 51 153 204 230 115 57 156 206 103 51 153 204 230 115 57 156 204 253 124 163 28 190 87 67 97 13 132 54 16 216 67 97 13 132 54 16 216 67 97 13 132 54 16 216 67 97 13 132 54 25 250 172 108 76 187 58 250 2 190 128 175 160 43 232 10 250 2 190 128 175 160 43 232 10 250 2 190 128 175 160 43 232 10 250 2 190 128 175 160 252 95 255 196 0 30 17 0 3 1 1 0 2 3 1 0 0 0 0 0 0 0 0 0 2 19 17 1 3 16 4 33 64 50 255 218 0 8 1 3 1 1 63 1 60 207 222 116 179 22 98 204 89 139 49 102 44 197 152 179 22 98 204 89 139 49 102 44 222 190 71 245 248 124 252 251 48 195 12 48 195 12 48 195 12 48 195 61 117 116 153 50 100 201 147 38 76 153 50 100 201 147 39 207 197 255 196 0 32 17 0 2 3 1 0 2 3 1 1 0 0 0 0 0 0 0 0 17 2 3 20 81 4 16 1 50 129 33 64 255 218 0 8 1 2 1 1 63 1 60 171 165 25 127 13 54 116 211 103 77 54 116 211 103 77 54 116 211 103 77 54 116 211 103 77 54 116 211 103 77 54 116 211 103 77 54 116 211 103 77 54 119 215 153 247 252 16 132 33 8 66 16 132 33 8 94 188 223 191 224 198 49 140 99 24 198 49 140 99 245 111 143 241 103 203 49 196 199 19 28 76 113 49 196 199 19 28 76 113 49 196 197 19 28 76 113 49 196 197 19 28 127 197 255 196 0 44 16 0 0 4 6 1 1 6 7 0 0 0 0 0 0 0 0 0 2 3 162 49 50 52 145 209 210 1 17 16 18 19 64 81 178 4 33 34 36 65 100 113 255 218 0 8 1 1 0 6 63 2 4 75 225 22 240 211 229 30 13 207 29 210 243 243 239 27 215 142 125 5 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 212 84 177 61 69 75 19 215 177 46 127 92 190 227 121 20 122 115 207 31 108 95 113 132 198 184 152 215 19 26 226 99 92 76 107 137 141 113 49 174 38 53 196 198 184 152 215 19 26 226 99 92 76 107 137 141 113 49 175 216 85 86 241 120 49 73 220 250 122 126 63 189 125 68 87 185 112 34 187 112 34 187 112 34 189 203 129 21 219 129 21 219 129 21 238 92 8 174 220 8 175 114 224 69 118 224 69 123 151 2 43 183 2 43 183 2 43 183 2 43 220 184 242 95 255 196 0 28 16 0 2 2 3 1 1 0 0 0 0 0 0 0 0 0 0 0 241 1 17 16 49 64 65 33 255 218 0 8 1 1 0 1 63 33 61 60 62 188 23 115 181 14 11 44 178 203 44 178 203 44 178 195 44 179 227 132 48 0 0 220 73 49 30 51 66 192 48 12 3 0 192 48 12 3 0 192 48 12 3 0 192 48 12 6 202 40 52 148 166 42 83 62 48 10 98 108 113 138 98 108 113 138 99 136 83 28 98 152 155 19 99 199 138 255 218 0 12 3 1 0 2 0 3 0 0 0 16 15 109 182 219 109 150 210 182 219 109 182 219 108 28 150 75 44 50 195 66 91 45 150 89 109 152 0 0 0 0 0 1 255 196 0 29 17 1 1 1 1 0 1 5 0 0 0 0 0 0 0 0 0 0 17 1 97 16 64 81 129 161 209 255 218 0 8 1 3 1 1 63 16 79 231 179 171 171 171 171 171 171 171 171 171 171 171 171 171 171 175 140 125 63 83 19 19 19 19 19 19 19 19 19 19 19 19 19 19 197 62 43 90 214 181 173 107 90 214 181 175 198 122 66 16 132 33 8 66 16 132 35 209 159 255 196 0 29 17 0 2 1 4 3 0 0 0 0 0 0 0 0 0 0 0 1 17 64 0 33 49 240 80 81 193 255 218 0 8 1 2 1 1 63 16 160 112 104 47 76 25 36 146 73 36 146 5 154 201 130 0 0 236 214 76 31 251 172 142 151 3 247 127 159 15 255 196 0 33 16 0 2 0 6 2 3 1 0 0 0 0 0 0 0 0 0 0 1 17 49 97 113 193 240 33 177 64 65 145 16 255 218 0 8 1 1 0 1 63 16 110 8 127 238 96 171 143 162 132 35 14 10 208 212 134 164 53 33 169 13 72 107 67 82 26 208 212 134 180 53 33 230 109 76 26 144 214 133 162 179 141 189 103 106 44 69 136 181 22 34 196 90 139 17 106 36 146 45 69 136 181 18 73 22 175 199 9 28 26 114 70 147 55 140 143 120 236 214 50 109 25 30 177 216 183 142 205 227 34 222 59 55 140 156 59 31 77 227 35 222 59 55 140 156 59 31 77 227 34 182 185 134 120 191 182 22 237 197 70 45 239 192 227 209 167 30 157 56 245 226 211 143 78 141 56 185 120 63 255 217 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'jm 8/1/2010 13:05'!
logoJpg
	"currenlty just a background, override with a real logo in your style class"
	"'/home/me/logojpg.jpg' asFilename contentsAsMethod"
^#(255 216 255 224 0 16 74 70 73 70 0 1 1 1 0 72 0 72 0 0 255 225 2 91 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 0 60 63 120 112 97 99 107 101 116 32 98 101 103 105 110 61 39 239 187 191 39 32 105 100 61 39 87 53 77 48 77 112 67 101 104 105 72 122 114 101 83 122 78 84 99 122 107 99 57 100 39 63 62 10 60 120 58 120 109 112 109 101 116 97 32 120 109 108 110 115 58 120 61 39 97 100 111 98 101 58 110 115 58 109 101 116 97 47 39 62 10 60 114 100 102 58 82 68 70 32 120 109 108 110 115 58 114 100 102 61 39 104 116 116 112 58 47 47 119 119 119 46 119 51 46 111 114 103 47 49 57 57 57 47 48 50 47 50 50 45 114 100 102 45 115 121 110 116 97 120 45 110 115 35 39 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 120 109 112 61 39 104 116 116 112 58 47 47 110 115 46 97 100 111 98 101 46 99 111 109 47 120 97 112 47 49 46 48 47 39 62 10 32 32 60 120 109 112 58 67 114 101 97 116 111 114 84 111 111 108 62 65 100 111 98 101 32 70 105 114 101 119 111 114 107 115 32 67 83 51 60 47 120 109 112 58 67 114 101 97 116 111 114 84 111 111 108 62 10 32 32 60 120 109 112 58 67 114 101 97 116 101 68 97 116 101 62 50 48 48 55 45 48 53 45 50 55 84 50 51 58 48 55 58 52 57 90 60 47 120 109 112 58 67 114 101 97 116 101 68 97 116 101 62 10 32 32 60 120 109 112 58 77 111 100 105 102 121 68 97 116 101 62 50 48 48 55 45 48 53 45 50 56 84 49 50 58 51 52 58 51 53 90 60 47 120 109 112 58 77 111 100 105 102 121 68 97 116 101 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 32 60 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 32 120 109 108 110 115 58 100 99 61 39 104 116 116 112 58 47 47 112 117 114 108 46 111 114 103 47 100 99 47 101 108 101 109 101 110 116 115 47 49 46 49 47 39 62 10 32 32 60 100 99 58 102 111 114 109 97 116 62 105 109 97 103 101 47 106 112 101 103 60 47 100 99 58 102 111 114 109 97 116 62 10 32 60 47 114 100 102 58 68 101 115 99 114 105 112 116 105 111 110 62 10 10 60 47 114 100 102 58 82 68 70 62 10 60 47 120 58 120 109 112 109 101 116 97 62 10 60 63 120 112 97 99 107 101 116 32 101 110 100 61 39 114 39 63 62 10 255 219 0 67 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 3 3 3 3 3 3 3 3 4 3 3 3 3 3 3 4 4 4 4 5 4 4 4 5 5 6 6 5 5 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 255 219 0 67 1 2 2 2 3 3 3 5 4 4 5 7 6 5 6 7 8 8 8 8 8 8 8 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 255 192 0 17 8 0 219 2 157 3 1 17 0 2 17 1 3 17 1 255 196 0 29 0 1 1 0 3 1 1 1 1 1 0 0 0 0 0 0 0 0 1 2 7 8 9 3 4 6 5 255 196 0 71 16 1 0 0 2 7 5 3 7 8 8 4 7 0 0 0 0 0 4 5 1 2 3 6 21 23 84 7 149 161 209 212 17 85 148 33 49 54 86 113 114 180 18 65 83 97 145 193 210 211 19 20 69 81 115 129 164 213 53 70 177 240 34 35 38 68 116 132 181 255 196 0 29 1 1 1 0 2 3 1 1 1 0 0 0 0 0 0 0 0 0 1 2 3 4 8 9 7 6 5 255 196 0 63 17 1 0 1 1 4 5 8 7 7 3 5 1 1 0 0 0 0 1 17 2 3 6 23 18 84 146 147 211 4 7 19 33 49 81 83 225 54 65 113 163 179 209 226 5 34 38 82 97 114 177 50 99 210 68 161 162 193 240 22 145 255 218 0 12 3 1 0 2 17 3 17 0 63 0 247 167 24 151 234 42 129 140 75 245 21 64 198 37 250 138 160 99 18 253 69 80 49 137 126 162 170 68 72 99 18 253 69 82 59 3 24 151 234 42 168 99 18 253 69 80 49 137 126 162 170 86 3 24 151 234 42 168 99 18 253 69 82 148 12 98 95 168 170 9 140 75 245 85 0 197 229 255 0 60 77 64 49 137 118 162 160 180 149 198 37 250 139 63 180 67 24 151 234 42 129 140 75 245 21 65 49 121 118 162 207 237 59 5 198 37 250 139 63 181 58 132 197 224 117 53 21 35 177 113 137 126 162 168 180 161 140 75 245 21 66 98 76 98 95 168 170 45 36 197 229 223 79 80 40 152 196 191 85 80 69 198 37 250 138 162 86 12 98 95 168 179 251 69 49 137 126 162 170 86 4 197 229 218 139 63 181 67 24 151 234 170 1 140 75 245 85 0 197 229 255 0 79 80 209 153 12 94 95 244 245 24 246 200 98 242 255 0 167 168 200 49 121 118 162 207 237 78 162 147 83 23 151 253 61 67 214 24 188 191 233 234 29 117 161 49 67 24 150 234 42 41 215 38 47 3 169 168 6 47 47 250 122 137 29 97 140 75 245 85 20 92 98 95 168 170 6 49 47 212 85 74 194 210 83 23 151 234 42 118 170 24 188 191 233 234 37 96 49 121 127 211 212 94 206 178 149 49 137 126 170 162 118 134 47 47 250 122 138 38 47 46 212 89 253 169 88 39 170 23 24 151 234 170 40 98 242 253 69 79 180 12 98 95 170 168 149 130 96 197 229 255 0 79 81 69 198 37 250 138 160 99 18 253 69 80 76 102 95 168 169 246 157 132 117 174 49 47 212 85 8 131 24 151 234 42 164 246 39 89 140 75 245 21 86 97 83 24 151 106 42 36 126 132 118 152 196 191 85 81 69 198 37 250 139 63 180 167 80 152 196 191 85 80 12 94 95 244 245 3 215 67 23 151 253 61 68 245 134 49 47 213 84 73 158 240 198 37 250 170 140 166 40 24 188 191 81 83 177 43 5 43 6 47 47 243 254 177 81 105 68 172 46 49 47 212 85 74 66 166 47 47 212 84 251 73 234 12 94 95 244 245 9 143 88 184 196 191 81 85 82 176 99 18 253 69 84 158 197 92 94 95 168 168 126 163 28 94 95 168 169 246 149 234 12 94 95 244 245 10 64 99 18 253 69 67 169 61 102 45 1 168 168 171 53 126 138 145 208 118 158 74 182 213 41 59 23 173 250 168 166 175 103 109 20 249 4 100 0 56 131 48 111 86 182 7 117 74 122 87 72 51 99 21 235 179 187 186 225 180 233 201 152 55 171 91 3 186 165 61 41 155 24 175 93 157 221 215 12 211 147 48 111 86 182 7 117 74 122 83 54 49 94 187 59 187 174 25 167 38 96 222 205 116 14 235 148 244 172 115 99 21 235 179 187 186 225 154 114 102 13 234 214 192 238 169 79 74 185 177 138 245 233 221 221 112 215 164 147 48 111 86 182 7 117 74 122 86 89 179 139 53 217 221 221 112 211 78 76 193 189 154 232 29 215 41 233 83 54 113 102 189 59 187 174 25 167 38 96 222 205 116 14 235 148 244 172 115 99 21 235 179 187 186 225 154 114 102 13 236 215 64 238 185 79 74 185 175 138 245 217 221 221 112 205 57 92 194 189 122 216 13 215 41 233 73 231 99 21 235 179 187 186 225 154 114 153 131 123 53 208 59 174 83 210 174 108 226 189 122 118 46 184 102 156 153 131 122 181 176 59 170 83 210 153 179 139 53 233 221 221 112 205 57 92 194 189 122 216 13 215 41 233 88 230 198 43 215 103 119 117 195 52 229 51 10 245 235 160 119 92 167 165 92 215 197 122 236 238 238 184 102 156 166 96 222 189 116 22 235 149 116 166 107 226 189 118 119 119 92 53 155 114 102 13 235 215 65 110 185 87 74 185 177 138 245 217 221 221 112 211 78 76 193 189 122 232 45 215 42 233 83 53 241 94 187 59 187 174 25 167 38 96 222 189 116 22 235 149 116 166 107 226 189 118 119 119 92 51 74 76 193 189 122 232 45 215 42 233 76 215 197 122 236 238 238 184 102 148 174 96 222 205 116 14 235 148 244 169 155 24 175 93 157 221 215 13 122 75 73 152 55 175 93 5 186 229 93 41 155 24 175 93 157 221 215 13 38 212 201 152 55 175 93 5 187 37 93 43 44 218 197 122 236 238 238 184 105 89 51 6 245 235 160 183 100 171 165 92 218 197 154 236 238 238 120 101 100 204 27 215 174 130 221 146 174 148 205 172 89 174 206 238 231 134 134 96 222 189 116 22 235 149 116 169 155 24 175 93 157 221 215 13 107 38 96 222 173 116 30 236 149 116 166 108 98 189 118 119 119 60 52 51 6 245 107 160 247 100 171 165 51 99 21 235 179 187 185 225 173 100 204 27 215 174 130 221 114 174 149 115 107 22 107 179 187 185 225 149 147 48 111 94 186 11 117 202 186 83 54 177 102 187 59 187 158 25 89 51 6 245 235 160 183 92 171 165 51 107 22 107 179 187 185 225 174 148 153 131 122 245 208 91 174 85 210 153 181 139 53 217 221 220 240 210 178 102 13 235 215 65 110 185 87 74 102 214 44 215 103 119 115 195 43 38 96 222 189 116 22 235 149 116 166 108 226 189 118 119 119 60 52 92 193 189 154 232 29 215 41 233 83 54 49 94 187 59 187 174 27 45 57 51 10 245 235 160 119 92 167 165 51 99 21 235 179 187 186 225 154 114 153 131 122 245 208 91 178 85 210 174 109 98 205 118 119 119 60 52 172 153 131 122 245 208 91 174 85 210 153 179 138 245 217 221 220 240 202 201 152 55 175 93 5 186 229 93 41 155 88 179 94 157 221 215 13 116 164 204 27 215 174 130 221 114 174 148 205 172 89 174 206 238 231 134 149 147 48 111 94 186 11 117 202 186 82 121 217 197 147 254 182 119 119 60 52 51 6 245 235 160 183 92 171 165 51 107 22 107 179 187 185 225 173 100 204 27 215 174 130 221 114 174 149 115 107 22 107 190 238 231 132 86 76 193 189 122 232 45 215 42 233 76 219 197 154 239 186 185 225 21 147 48 111 94 186 11 117 202 186 83 54 241 102 187 238 174 120 69 100 204 27 215 174 130 221 114 174 148 205 188 89 174 251 187 158 18 25 131 122 245 208 91 174 85 210 166 109 98 205 118 119 119 60 48 204 27 215 174 130 221 146 174 149 99 157 172 89 174 251 187 158 16 102 13 235 215 65 110 185 87 74 199 54 177 102 187 238 238 120 75 89 51 6 245 235 160 183 92 171 165 101 155 120 179 93 247 119 60 36 51 6 245 235 160 183 92 171 165 76 218 197 154 239 187 185 225 134 96 222 189 116 22 235 149 116 166 109 98 205 118 119 119 60 48 204 27 215 174 130 221 114 174 148 205 172 89 174 206 238 231 134 181 147 48 111 94 186 11 117 202 186 83 54 177 102 187 59 187 158 26 25 131 122 245 208 91 174 85 210 153 179 138 245 217 221 220 240 214 178 102 13 235 215 65 110 185 87 74 185 181 139 53 223 119 115 194 67 48 111 94 186 11 117 202 186 85 205 204 89 174 206 238 231 132 25 131 122 245 208 91 174 85 210 176 205 172 89 174 251 187 158 16 102 13 235 215 65 110 185 87 74 185 179 139 53 223 119 115 194 90 201 152 55 175 93 5 186 229 93 42 102 198 43 215 103 119 115 195 93 57 51 6 245 235 160 183 92 171 165 92 218 197 154 236 238 238 120 105 89 51 6 245 235 160 183 92 171 165 51 107 22 107 179 187 185 225 149 149 204 43 215 174 129 221 114 158 148 142 118 113 100 127 173 157 221 207 13 116 165 51 6 245 235 160 183 92 171 165 51 103 21 235 179 187 185 225 177 51 6 245 235 160 183 92 171 165 51 107 22 107 179 187 185 225 173 100 204 27 215 174 130 221 114 174 148 205 156 89 174 206 238 235 134 86 76 193 189 122 232 45 215 42 233 76 218 197 154 236 238 238 120 101 100 204 27 215 174 130 221 114 174 149 115 111 22 107 179 187 185 225 21 147 48 111 94 186 11 117 202 186 84 205 172 89 174 206 238 231 134 86 76 193 189 122 232 45 215 42 233 83 54 49 94 187 59 187 158 25 89 51 6 245 235 160 183 92 171 165 92 218 197 154 236 238 238 120 101 100 204 27 215 174 130 221 114 174 148 205 172 89 174 206 238 231 134 177 106 96 204 27 215 174 130 221 114 174 148 205 172 89 174 206 238 231 134 149 147 48 111 94 186 11 117 202 186 83 54 177 102 187 59 187 158 26 233 74 230 21 235 215 64 238 185 79 74 102 214 44 215 103 119 115 195 34 212 166 96 222 189 116 22 235 149 116 171 155 120 179 93 247 119 60 36 172 174 97 94 189 116 14 235 148 244 166 109 226 205 119 221 220 240 138 202 102 13 235 215 65 110 185 87 74 79 59 120 179 93 247 87 60 34 178 153 131 122 245 176 91 174 83 210 153 183 139 53 223 117 115 194 43 44 179 10 245 235 160 119 92 167 165 76 219 197 154 239 186 185 225 21 148 167 104 55 174 159 251 232 45 215 42 233 86 121 220 197 147 254 182 119 87 60 36 126 184 61 164 222 88 123 122 45 98 171 194 76 108 190 79 201 166 26 189 133 132 37 30 122 41 166 181 75 72 43 59 58 106 215 236 162 154 40 166 181 21 234 209 219 219 77 74 221 148 63 167 246 79 61 24 143 147 95 197 190 81 121 103 148 221 250 236 91 177 98 207 174 43 54 109 93 217 177 49 106 149 136 153 210 179 21 172 216 181 72 101 22 168 222 215 66 251 89 206 33 169 138 134 166 218 188 61 133 165 22 81 144 177 52 85 162 38 22 154 212 255 0 203 166 218 139 58 213 234 86 169 94 143 45 91 74 149 187 41 242 213 167 178 154 41 162 142 209 97 92 89 200 49 7 37 155 254 73 110 102 44 205 45 88 181 72 183 98 125 85 136 153 234 181 219 102 98 102 39 247 69 168 141 150 102 173 179 97 111 103 17 103 86 210 206 158 218 41 163 181 250 134 79 176 60 235 121 182 227 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 103 159 235 249 184 113 90 252 146 98 41 73 235 255 0 221 161 89 41 2 84 160 84 160 84 160 84 160 181 146 98 36 43 42 21 148 164 31 127 150 148 90 4 165 32 90 201 49 19 218 21 146 144 36 20 10 148 129 107 37 2 178 80 236 163 247 80 149 80 170 80 42 80 42 180 10 165 5 172 168 128 15 233 46 157 228 183 186 211 184 73 157 74 148 219 66 86 166 152 89 172 53 90 42 211 90 218 14 215 201 105 86 173 21 168 236 237 171 90 138 181 232 242 209 219 242 123 41 166 138 41 165 251 28 13 138 175 62 192 251 82 199 42 138 205 220 198 141 229 152 167 222 177 61 126 190 170 217 152 139 81 217 90 104 214 34 212 164 215 212 236 89 53 189 157 75 111 208 195 219 85 183 129 138 177 169 25 1 107 86 181 21 170 215 177 181 163 229 84 166 138 212 121 253 191 63 159 231 119 171 146 242 155 174 85 115 102 246 238 212 90 177 106 34 108 204 117 196 196 197 98 98 99 182 27 236 219 210 135 245 110 75 39 157 111 54 220 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 93 179 187 123 74 247 102 231 218 90 218 90 90 218 86 178 143 134 249 118 149 169 173 79 232 236 35 107 84 178 169 219 91 205 86 165 78 202 180 124 212 81 228 163 200 238 199 51 247 214 239 48 183 38 155 115 51 73 188 136 175 95 85 155 203 81 17 236 136 138 68 122 163 169 182 196 199 255 0 141 201 71 217 254 254 183 211 25 188 237 121 182 227 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 234 141 156 250 45 115 191 137 54 248 231 117 121 158 175 255 0 43 201 105 223 123 241 173 178 187 245 251 127 233 186 188 254 111 153 244 246 216 135 157 175 54 218 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 70 206 189 22 185 159 196 155 124 115 186 188 206 207 225 62 77 237 189 248 214 217 221 207 111 254 245 55 103 111 99 233 237 175 58 222 109 184 224 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 58 167 103 126 139 92 191 126 109 241 212 187 171 204 236 254 21 228 190 219 223 141 109 178 195 117 81 230 161 244 246 86 158 118 60 219 105 0 0 34 104 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 80 33 78 192 0 0 0 0 0 0 0 0 168 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 170 118 121 232 173 203 247 166 223 29 75 186 188 206 207 225 78 77 251 175 126 45 182 219 182 232 167 205 71 243 125 54 211 55 157 207 55 92 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 83 179 175 69 174 87 241 102 223 30 238 167 51 179 248 87 146 254 235 223 139 109 182 238 27 173 245 6 111 58 222 109 184 233 219 231 163 231 163 253 208 178 71 98 160 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 58 167 103 94 138 220 191 126 109 241 244 187 171 204 215 86 22 228 223 186 247 226 219 109 177 216 221 111 166 82 89 188 235 121 188 227 190 116 81 90 139 94 218 59 62 69 106 158 90 59 60 191 42 138 124 157 159 203 181 148 210 99 245 34 122 191 79 251 234 175 234 250 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 84 236 235 209 91 151 239 205 190 62 151 117 57 157 244 83 147 126 235 223 139 109 182 199 99 117 81 231 167 249 62 160 205 231 99 205 183 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 84 236 239 209 91 151 239 205 190 62 151 117 57 157 143 194 156 155 247 94 252 91 109 177 253 45 214 250 131 55 157 111 54 220 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 83 179 175 69 110 95 191 54 248 250 93 213 230 114 63 10 242 111 221 123 241 109 182 216 236 110 174 218 31 78 142 198 111 59 30 110 56 224 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 58 171 103 94 138 220 207 226 77 126 58 151 117 185 157 244 83 146 251 111 126 53 182 219 63 210 220 244 249 233 125 57 155 206 231 155 110 56 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 14 169 217 223 162 215 47 223 155 124 115 186 220 206 250 41 201 125 183 191 26 219 117 134 233 171 243 190 155 29 140 158 118 188 220 113 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 78 206 252 151 86 229 255 0 18 109 79 245 212 187 173 204 239 162 156 151 219 123 241 173 182 216 236 110 170 60 212 62 155 29 140 222 118 60 220 113 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 78 207 61 21 185 126 244 219 227 169 119 91 153 223 69 57 47 182 247 227 91 109 177 216 221 84 209 218 250 109 97 155 206 199 155 142 56 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 31 120 66 118 127 32 80 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 94 206 253 21 185 94 252 219 227 233 119 87 153 191 69 185 55 182 247 226 219 111 179 253 45 210 250 109 165 121 214 243 117 199 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 213 91 59 244 86 229 123 211 111 143 165 221 110 103 125 20 228 190 219 223 141 109 190 207 244 183 83 233 150 149 231 91 205 215 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 84 236 239 209 91 149 239 205 191 250 20 187 173 204 239 162 156 151 219 123 241 173 183 216 254 150 233 173 243 62 156 175 59 94 109 184 224 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 58 167 103 94 138 220 191 126 109 241 244 187 173 204 239 162 188 151 219 123 241 109 182 216 236 110 170 60 212 62 153 105 155 206 199 155 174 56 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 222 1 64 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 83 179 207 69 110 95 189 54 248 234 93 214 230 119 209 78 75 237 189 248 214 219 44 55 85 30 106 31 77 164 54 60 236 121 184 227 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 223 49 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 170 118 121 232 173 203 247 166 223 29 75 186 220 206 250 41 201 125 183 191 26 219 109 142 198 234 163 205 67 233 204 222 118 60 219 113 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 78 206 189 22 185 127 196 155 124 125 46 235 115 59 232 167 37 246 222 252 107 109 182 59 27 170 143 53 15 167 51 121 216 243 109 199 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 213 59 58 244 86 229 251 243 111 143 165 221 94 103 125 21 228 190 219 223 141 109 186 207 99 117 254 255 0 107 233 236 158 117 188 219 113 192 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 117 78 206 189 21 185 126 252 219 227 233 119 87 153 223 69 57 47 182 247 227 91 110 179 216 221 84 125 212 62 158 201 197 121 91 180 15 86 237 188 100 179 170 116 147 41 113 54 173 255 0 40 107 232 165 114 178 255 0 250 185 107 227 37 189 74 229 38 39 213 163 106 14 142 87 42 239 255 0 171 214 158 50 93 212 174 81 226 109 95 254 80 116 114 185 85 127 187 130 183 140 151 245 11 148 88 155 87 141 168 58 57 50 170 255 0 119 5 111 25 47 234 12 162 196 222 4 109 65 209 74 229 77 254 238 31 235 32 127 61 99 154 44 77 224 70 212 29 28 190 153 77 127 59 150 143 21 7 249 204 178 127 18 248 54 118 147 163 92 165 191 93 209 83 197 194 126 98 228 254 37 240 108 237 121 29 27 44 163 191 125 213 99 226 161 255 0 26 228 246 36 240 172 237 121 29 26 229 21 249 238 219 15 23 15 248 217 100 246 37 240 172 237 121 47 71 44 178 138 252 247 116 55 138 135 252 70 78 226 95 10 198 215 145 209 201 148 55 231 187 161 252 92 63 226 92 154 196 190 29 141 175 35 162 147 40 111 199 111 248 124 53 31 95 235 86 31 137 114 111 18 120 118 54 190 147 163 149 202 11 243 160 132 241 86 31 136 201 188 73 225 216 218 250 78 142 76 161 191 61 223 11 226 236 63 18 228 214 36 240 236 109 125 39 71 38 80 223 158 239 133 241 118 31 136 201 172 73 225 216 218 250 78 142 82 157 144 223 154 63 103 67 86 250 168 139 135 251 235 80 153 53 137 60 59 27 95 73 209 75 28 162 191 95 60 178 195 197 195 125 213 217 100 206 36 252 150 54 190 147 163 149 202 43 243 221 176 254 46 27 241 177 201 156 73 225 216 218 250 83 163 99 148 151 235 186 172 124 92 47 230 25 55 137 60 59 27 95 73 209 178 202 43 245 221 144 254 46 27 241 153 55 137 60 59 27 95 74 244 82 153 71 126 123 178 195 197 195 126 51 38 241 39 135 99 107 233 58 41 90 118 71 126 104 253 153 97 79 178 46 27 239 174 100 222 37 240 236 109 121 38 132 177 202 59 247 221 54 94 46 23 243 12 155 196 190 29 141 175 36 209 150 57 75 127 59 154 167 139 131 252 211 38 241 47 135 99 107 201 41 43 148 183 243 185 236 252 92 39 230 153 55 137 124 59 27 94 69 37 50 150 253 247 69 159 139 132 252 212 201 172 75 225 216 218 242 93 27 93 204 178 142 253 247 85 149 30 216 168 111 186 208 201 172 75 225 216 218 242 79 189 220 206 141 144 223 154 127 103 67 209 237 138 176 252 70 77 98 95 14 198 215 146 232 75 233 70 199 175 190 142 14 143 108 85 159 220 100 214 37 240 236 109 121 26 18 185 57 125 180 176 84 123 98 170 46 78 98 95 14 198 215 147 46 142 76 157 190 250 72 47 19 83 147 28 157 196 190 21 141 175 38 58 18 153 61 125 244 112 126 38 205 114 115 18 248 86 54 188 141 9 92 156 190 250 72 47 21 80 201 172 75 225 216 218 242 52 36 201 235 237 164 129 241 86 102 77 98 95 14 198 215 145 161 41 147 215 223 69 7 226 172 215 38 241 47 135 99 107 200 208 148 201 251 241 161 132 241 86 92 204 154 196 159 146 198 215 210 104 73 147 247 227 65 9 226 172 121 178 201 156 73 249 44 109 125 38 132 166 80 95 142 239 133 241 86 60 211 38 113 39 228 177 181 244 154 18 153 67 126 123 186 27 197 88 126 35 38 113 39 228 187 218 250 77 9 76 162 191 61 221 13 226 172 63 17 147 88 151 242 88 218 159 241 93 11 76 114 142 252 247 93 149 62 200 168 95 204 50 103 18 126 75 189 175 164 209 181 220 153 73 126 187 170 199 197 194 254 97 147 88 147 195 177 181 244 165 45 119 25 73 126 187 170 199 197 194 254 99 28 155 196 190 29 141 175 34 150 187 140 164 191 125 209 101 226 225 127 48 201 172 75 225 216 218 242 79 189 220 199 41 47 223 116 217 248 184 79 204 50 107 18 248 118 54 188 143 189 220 185 75 127 59 158 207 197 194 126 105 147 184 151 194 177 181 228 104 218 238 254 62 108 41 217 61 253 163 246 37 20 251 34 224 190 251 100 201 220 75 225 88 218 242 52 109 119 127 31 54 57 81 127 251 135 250 200 31 207 50 119 18 248 86 54 188 141 27 93 223 199 205 142 85 95 239 87 235 123 63 92 151 245 9 147 184 151 194 179 181 228 148 181 221 252 124 215 42 111 247 103 248 5 106 62 170 99 37 253 66 100 246 37 240 108 237 121 20 181 221 252 124 204 168 191 221 193 91 198 64 117 9 148 24 155 193 179 180 186 54 187 191 143 155 26 118 87 127 252 159 244 237 165 63 251 146 239 39 245 38 79 226 95 6 206 215 145 163 107 187 248 249 177 202 205 160 122 181 109 236 253 114 89 213 46 79 98 95 6 206 215 147 31 189 221 252 124 210 157 150 237 2 143 53 218 182 167 217 27 44 251 226 140 157 196 190 13 157 175 35 175 187 248 249 176 203 13 161 122 171 21 227 101 61 97 147 216 151 193 179 181 228 125 238 239 227 230 199 44 182 135 234 148 95 142 148 117 204 178 123 18 248 86 118 188 153 82 215 229 159 246 249 153 99 180 79 84 99 60 116 155 174 50 119 18 248 86 54 188 152 253 239 203 63 237 243 50 199 104 158 168 198 248 233 55 92 100 238 37 240 172 109 121 31 123 242 255 0 31 52 203 45 162 122 161 29 227 164 221 114 228 238 37 240 172 109 121 45 45 126 95 227 230 85 217 142 209 107 86 171 86 155 161 27 82 138 107 81 69 53 235 71 73 187 42 209 77 62 122 126 76 117 52 246 81 245 81 77 63 83 27 124 206 98 107 54 102 98 234 205 169 136 236 139 81 89 253 34 180 138 207 235 49 29 243 9 26 95 150 127 219 230 253 121 83 127 253 95 173 227 37 253 67 129 149 24 175 81 181 188 186 226 50 209 147 42 175 247 112 86 241 146 254 161 114 159 21 234 51 188 186 226 26 50 101 85 254 238 10 222 50 95 212 25 79 138 245 25 222 93 113 23 66 83 42 175 247 112 83 227 37 253 65 148 248 175 81 157 229 215 16 209 147 42 175 247 159 0 167 198 203 250 133 202 108 89 168 206 242 235 136 104 73 78 202 175 245 20 118 211 32 173 217 255 0 153 47 234 19 41 241 94 163 59 203 174 33 163 47 133 59 51 191 20 86 249 52 200 45 187 127 119 233 225 63 215 244 203 28 211 98 205 70 119 151 92 68 209 151 222 141 149 95 234 104 237 162 65 79 103 215 25 47 163 253 98 12 166 197 122 148 239 46 120 171 161 61 204 178 162 255 0 247 5 62 54 93 212 46 82 226 205 74 119 183 60 83 70 83 42 47 255 0 112 83 227 101 253 67 28 167 197 122 148 239 46 120 134 132 153 83 127 187 130 159 27 46 234 23 41 177 102 163 59 203 158 33 161 107 185 114 162 255 0 247 5 111 25 47 234 12 166 197 154 140 239 46 120 134 132 166 84 223 238 224 167 198 203 186 132 202 124 87 168 206 242 231 136 104 75 26 219 42 191 245 106 214 166 139 189 94 189 52 81 77 52 85 171 27 46 237 167 178 143 53 29 177 52 81 219 79 215 77 13 151 124 210 98 187 86 226 204 242 61 24 153 136 172 222 93 76 69 125 115 163 121 51 72 237 154 68 207 116 76 245 26 50 252 212 108 203 104 148 255 0 148 99 40 246 199 73 126 232 231 245 114 79 17 255 0 103 106 215 248 26 50 250 101 118 208 253 85 136 241 242 126 181 50 75 18 119 92 237 253 41 163 61 204 43 108 199 104 148 127 148 162 235 123 35 164 223 124 117 11 28 202 98 63 237 109 79 248 20 151 206 141 153 237 27 212 200 255 0 31 34 254 226 185 37 136 255 0 179 183 107 252 10 90 238 50 211 104 254 165 204 124 124 139 251 138 228 158 35 254 206 213 175 240 41 107 185 141 59 53 218 71 169 51 26 125 147 9 7 247 35 36 177 23 246 118 173 112 215 70 123 147 45 246 145 234 68 207 120 93 255 0 238 102 73 98 47 236 237 90 225 154 51 220 232 75 151 44 153 201 228 23 62 2 113 3 107 45 152 88 214 154 83 111 5 109 105 15 107 94 203 229 198 124 187 63 149 94 18 214 218 198 159 149 82 154 43 127 195 94 159 63 151 178 158 218 40 236 135 55 223 97 114 159 177 190 195 184 228 92 163 71 164 177 54 235 163 215 31 122 221 171 81 219 17 234 158 230 219 184 109 231 237 41 10 215 216 116 14 154 207 143 53 12 58 7 77 103 199 152 24 116 14 154 207 143 48 48 232 29 53 159 30 96 97 208 58 107 62 60 192 195 160 116 214 124 121 129 135 64 233 172 248 243 103 72 12 58 7 77 103 199 153 72 12 58 7 77 103 199 155 0 195 160 116 214 124 121 129 135 64 233 172 248 243 3 14 129 211 89 241 230 6 29 3 166 179 227 204 12 58 7 77 103 199 154 80 48 232 29 53 159 30 101 32 48 232 29 53 159 30 101 32 48 232 29 53 159 30 106 194 178 97 208 58 107 62 60 194 178 97 208 58 107 62 60 198 102 29 3 166 179 227 205 41 1 135 64 233 172 248 243 41 1 135 64 233 172 248 243 41 1 135 64 233 172 248 243 41 1 135 64 233 172 248 243 80 195 160 116 214 124 121 172 118 134 29 3 166 179 227 205 22 178 97 208 58 107 62 60 210 16 195 160 116 214 124 121 168 97 208 58 107 62 60 210 22 123 76 58 7 77 103 199 153 105 12 58 7 77 103 199 155 26 200 97 208 58 107 62 60 217 71 96 97 208 58 107 62 60 212 48 232 29 53 159 30 96 97 208 58 107 62 60 210 123 22 178 97 208 58 107 62 60 216 214 74 201 135 64 233 172 248 243 102 73 135 64 233 172 248 243 16 195 160 116 214 124 121 139 83 14 129 211 89 241 230 49 180 97 208 58 107 62 60 197 48 232 29 53 159 30 96 97 208 58 107 62 60 210 144 182 140 58 7 77 103 199 153 72 32 195 160 116 214 124 121 147 216 134 29 3 166 179 227 204 142 192 195 160 116 214 124 121 168 97 208 58 107 62 60 192 195 160 116 214 124 121 129 135 64 233 172 248 243 3 14 129 211 89 241 230 177 218 24 116 14 154 207 143 54 84 128 195 160 116 214 124 121 148 128 195 160 116 214 124 121 176 12 58 7 77 103 199 155 58 64 97 208 58 107 62 60 216 218 12 58 7 77 103 199 154 45 76 58 7 77 103 199 152 86 76 58 7 77 103 199 152 134 29 3 166 179 227 204 88 237 48 232 29 53 159 30 105 72 67 14 129 211 89 241 230 161 135 64 233 172 248 243 90 203 10 201 135 64 233 172 248 243 36 172 152 116 14 154 207 143 52 101 104 195 160 116 214 124 121 138 97 208 58 107 62 60 197 158 211 14 129 211 89 241 230 33 135 64 233 172 248 243 95 89 108 195 160 116 214 124 121 177 160 97 208 58 107 62 60 212 48 232 29 53 159 30 96 97 208 58 107 62 60 192 195 160 116 214 124 121 129 135 64 233 172 248 243 3 14 129 211 89 241 230 6 29 3 166 179 227 204 12 58 7 77 103 199 155 57 236 88 48 232 29 53 159 30 108 16 195 160 116 214 124 121 164 134 29 3 166 179 227 205 141 101 157 32 195 160 116 214 124 121 179 41 15 244 229 144 48 150 113 117 107 84 176 169 86 159 223 71 111 54 201 96 254 185 170 59 7 255 217 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:32'!
menuBgPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 183 0 0 0 60 8 3 0 0 1 100 192 235 32 0 0 0 90 80 76 84 69 255 0 0 204 204 204 236 236 236 237 237 237 238 238 238 239 239 239 240 248 225 244 249 233 246 251 238 240 240 240 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 251 241 250 252 244 248 248 248 249 249 249 250 250 250 251 251 251 251 253 248 252 253 249 252 252 252 253 253 253 254 254 252 254 254 254 255 255 255 245 142 141 1 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 4 31 73 68 65 84 120 156 213 90 123 115 219 32 12 23 143 44 175 110 187 181 223 255 3 102 255 236 174 235 123 115 60 144 16 8 140 219 114 13 187 162 139 9 8 89 254 69 128 144 112 172 134 61 84 200 30 86 248 59 216 85 249 85 105 199 175 179 79 43 252 23 123 166 138 62 103 252 107 171 67 77 103 252 163 213 245 7 219 249 80 231 223 84 225 95 10 191 178 103 68 78 240 211 143 112 56 9 57 193 215 137 191 129 186 161 87 224 28 110 191 125 109 16 223 220 192 75 131 184 126 91 70 138 111 27 132 127 174 153 178 78 7 176 207 13 226 198 99 111 176 35 88 227 238 105 16 223 66 203 143 117 218 155 196 55 160 90 196 1 90 108 179 54 181 215 196 91 116 183 77 130 211 234 122 170 146 106 19 135 54 113 231 31 112 177 106 56 47 220 77 104 250 94 94 200 30 204 159 247 107 215 141 203 3 231 140 35 231 157 212 172 230 192 115 21 95 199 182 175 195 204 245 192 142 146 220 34 190 23 20 124 198 178 241 133 129 201 151 19 62 110 226 54 119 24 110 76 92 227 166 235 37 86 188 129 235 30 249 221 213 158 96 69 188 9 121 68 145 19 179 8 108 40 231 216 229 12 238 127 142 253 226 188 127 235 60 120 47 145 195 195 159 35 103 64 233 189 125 3 242 25 194 130 105 166 36 70 152 54 110 186 56 131 157 217 88 201 128 209 132 194 196 102 202 218 113 44 140 24 33 28 19 26 137 94 6 33 178 13 91 76 187 242 78 122 79 61 149 43 120 222 118 84 238 62 189 148 31 208 209 53 120 174 102 178 79 56 69 105 110 134 153 90 155 190 176 152 229 165 67 241 42 162 176 57 251 118 223 121 142 203 191 109 123 124 183 110 220 209 131 83 134 217 183 200 45 75 23 55 87 28 99 114 132 120 51 21 192 94 31 249 86 132 146 23 199 141 155 196 134 28 13 208 128 102 3 148 170 113 252 38 146 45 29 24 13 62 120 45 84 90 125 127 116 184 53 97 215 69 48 172 179 106 10 149 53 64 188 86 68 93 105 213 213 221 21 108 102 185 79 122 187 243 222 34 204 158 219 188 24 0 222 122 104 172 104 31 181 250 246 91 55 123 219 107 68 216 69 119 31 181 66 183 140 17 202 168 73 135 232 42 219 34 107 155 106 206 243 59 39 90 253 111 31 220 115 30 215 188 190 205 230 148 71 72 139 126 99 235 57 231 69 200 62 116 196 109 76 46 158 46 206 146 48 93 50 80 75 154 12 8 246 162 191 49 10 110 162 78 155 67 215 72 162 163 110 213 81 183 163 231 109 55 221 253 130 43 5 187 167 93 39 221 123 255 233 58 150 101 102 26 124 40 84 120 236 100 125 167 142 135 80 69 122 34 200 78 133 247 158 68 89 229 77 88 161 18 38 193 94 234 174 229 74 31 39 220 128 237 180 112 95 34 58 169 120 183 215 99 211 204 169 254 63 255 29 129 96 229 195 184 83 104 210 39 152 237 68 2 119 159 224 170 19 81 140 140 52 22 110 135 246 1 112 146 111 222 146 253 76 228 99 205 35 220 195 145 237 29 178 139 16 241 136 60 82 100 144 188 112 56 103 9 145 17 231 45 89 56 68 178 134 211 157 41 46 54 177 0 77 82 75 143 20 169 106 72 127 132 34 148 247 246 254 13 120 152 66 219 132 118 126 93 251 15 22 128 23 114 125 59 36 1 216 137 223 212 237 218 192 162 204 11 170 130 44 221 79 189 65 148 31 2 252 12 108 210 35 117 204 54 124 29 84 122 40 223 237 113 127 103 243 196 111 147 162 192 44 42 204 27 41 74 148 162 50 114 52 73 54 126 197 203 100 122 88 198 84 85 44 52 216 174 167 5 253 72 228 105 197 185 173 36 153 193 114 34 155 228 229 185 43 166 192 176 150 228 86 21 139 99 101 88 102 201 249 161 110 124 172 48 119 37 10 248 188 36 226 147 158 7 99 23 39 113 140 87 63 54 82 80 178 23 130 106 46 70 55 187 167 58 79 84 118 112 149 247 172 43 23 51 101 208 101 9 254 221 195 136 212 248 198 239 211 208 88 243 228 20 107 99 225 78 52 24 238 248 194 112 44 220 42 198 91 99 225 70 122 246 127 100 24 11 183 179 246 19 253 73 105 44 220 251 199 253 30 126 193 15 120 28 11 183 242 9 165 127 137 113 24 11 119 162 78 231 85 221 201 246 121 69 210 157 236 80 217 66 74 206 236 11 20 239 103 203 63 225 208 13 203 240 88 190 141 204 123 138 58 100 18 175 41 207 239 89 70 254 66 112 216 117 57 104 252 253 15 41 114 144 154 158 226 131 31 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'layout-general'!
menuElement
	"just for example, override in your own style subclass!! "
 	| menu |
	menu := JoomlaMenu new
		header: 'Main menu';
		addFirstPageWithDescription: 'Introduction';
		addPage: 'Documentation' description: 'Documentation';
		addPage: 'Download' description: 'Download'.
	self app canBeEdited ifTrue:
		[menu addPage: 'Authors' description: 'Authors only'].
	^menu! !

!JoomlaStyle methodsFor: 'layout-general'!
pageFrameWideWith: aWebElement title: aTitleString
	"wide=without right modules. template name: mitra"
	| e |
	self app title: aTitleString. self htmlHeaderElements.
	e := WebElement new.
	e table width: 1 "100%"; cellPadding: 0; cellSpacing: 0.
	e cell add: self joomlaHeaderElement. e newRow.
	e cell add: self joomlaToolbarElement.  e newRow.
	e cell table width: 1; cellPadding: 0; cellSpacing: 0.
	e cell cell width: 4. 
	e cell newCell valign: #top; width: 201; add: self joomlaLeftElement.
	e cell newCell valign: #top; add: (self joomlaCenterWith: aWebElement).
	e cell add: (WebElement newDiv align: #center; 
		add: self joomlaFooterElement; yourself).
	^self app add: e; yourself! !

!JoomlaStyle methodsFor: 'layout-general'!
pageFrameWith: aWebElement title: aTitleString
	"template name: mitra"
	| e |
	self app title: aTitleString. self htmlHeaderElements.
	e := WebElement new.
	e table width: 1 "100%"; cellPadding: 0; cellSpacing: 0.
	e cell add: self joomlaHeaderElement. e newRow.
	e cell add: self joomlaToolbarElement.  e newRow.
	e cell table width: 1; cellPadding: 0; cellSpacing: 0.
	e cell cell width: 4. 
	e cell newCell valign: #top; width: 201; add: self joomlaLeftElement.
	e cell newCell valign: #top; add: (self joomlaCenterWith: aWebElement).
	e cell newCell valign: #top; width: 201 "5"; add: self joomlaRightElement.
	e cell add: (WebElement newDiv align: #center; 
		add: self joomlaFooterElement; yourself).
	^self app add: e; yourself! !

!JoomlaStyle methodsFor: 'layout-general'!
pageFrameWith: aWebElement wide: aWideElement title: aTitleString
	aWebElement add: aWideElement.
	^self pageFrameWith: aWebElement title: aTitleString! !

!JoomlaStyle methodsFor: 'layout-general'!
rightBottomElement
	"just for example, override in your own style subclass!! "
 	| e |
	e := JoomlaModule new.
	^e! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:33'!
rightFooterPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 12 0 0 0 26 8 2 0 0 1 123 159 26 160 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 1 109 73 68 65 84 120 156 189 146 75 143 130 80 12 133 121 84 48 18 23 138 198 13 113 227 194 255 255 131 88 248 74 148 248 0 3 24 21 100 190 203 245 21 113 51 139 153 110 40 189 237 233 233 105 229 114 185 180 90 45 201 243 124 187 221 138 109 219 147 201 68 48 195 48 228 118 187 213 223 44 203 84 72 200 157 207 231 65 16 168 244 193 96 224 186 174 80 108 212 38 215 235 245 94 119 62 159 119 187 221 104 52 146 162 40 248 156 78 39 209 73 202 163 199 189 194 178 172 134 183 88 44 64 105 183 219 158 231 105 108 233 245 122 252 224 45 151 75 90 246 251 125 41 203 242 120 60 18 130 12 236 210 52 21 211 52 141 135 145 190 223 239 95 168 79 251 22 130 183 85 219 43 180 217 108 28 199 1 5 30 250 65 134 195 225 225 112 88 175 215 190 239 119 187 93 162 170 35 195 85 85 21 134 33 84 59 157 142 210 133 23 222 199 227 49 12 40 87 89 164 32 29 136 240 164 92 248 7 18 149 8 49 9 191 223 120 189 15 244 7 33 166 209 99 219 15 195 255 200 83 66 152 181 241 12 89 212 103 36 28 198 125 173 108 58 157 62 43 152 51 138 162 36 73 208 0 65 148 0 162 186 75 28 199 26 6 85 1 96 111 140 189 90 173 184 58 246 75 170 186 66 221 94 47 151 58 82 137 144 10 13 32 137 40 217 223 9 114 95 172 95 95 7 48 179 217 140 109 170 179 252 24 132 75 214 14 173 241 171 218 190 168 210 180 255 78 106 30 194 47 144 244 97 105 251 1 223 47 176 91 251 203 33 187 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:33'!
rightPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 14 0 0 0 2 8 2 0 0 1 144 239 74 107 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 46 73 68 65 84 120 156 99 249 255 255 63 3 3 3 11 144 122 247 238 29 11 132 7 21 96 64 2 55 111 222 84 84 84 68 23 197 4 64 117 162 162 162 60 60 60 0 130 56 23 172 238 202 217 139 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'layout-general'!
rightTopElement
	"just for example, override in your own style subclass!! "
 	| e |
	e := JoomlaModule new.
	^e! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:33'!
rightTopLinkPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 11 0 0 0 33 8 2 0 0 1 247 254 246 183 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 254 73 68 65 84 120 156 189 83 75 14 132 32 12 21 196 168 113 167 27 239 127 52 151 122 2 127 56 15 218 128 48 213 100 54 211 132 216 239 43 175 84 179 239 187 33 41 138 194 157 219 231 56 14 23 176 214 154 243 60 205 182 109 94 239 186 206 92 215 5 85 107 237 114 129 81 215 117 170 69 136 178 44 157 134 10 246 173 235 202 237 128 8 48 246 197 138 228 22 78 83 74 177 54 142 35 107 1 47 166 225 16 54 181 140 46 212 231 174 170 170 242 194 182 109 19 151 0 159 187 150 101 65 21 177 97 23 70 160 189 176 125 15 50 10 77 46 218 24 174 242 18 237 80 197 249 96 155 196 115 188 56 93 33 14 59 137 191 177 250 217 158 231 185 105 154 200 167 239 251 132 255 247 59 201 136 32 65 12 195 99 231 25 216 12 66 126 204 8 196 195 56 5 12 177 69 130 129 22 247 145 203 247 8 11 37 99 208 204 229 37 165 12 235 229 17 131 194 111 24 47 242 167 140 105 154 232 215 162 71 17 222 101 24 6 154 35 146 176 211 97 45 130 124 0 36 26 171 206 103 149 239 16 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:34'!
spacerPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 1 0 0 0 1 1 3 0 0 0 37 219 86 202 0 0 0 3 115 66 73 84 8 8 8 219 225 79 224 0 0 0 6 80 76 84 69 255 255 255 0 0 0 85 194 211 126 0 0 0 2 116 82 78 83 0 0 118 147 205 56 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 22 116 69 88 116 67 114 101 97 116 105 111 110 32 84 105 109 101 0 48 56 47 48 56 47 48 52 239 235 69 241 0 0 0 37 116 69 88 116 83 111 102 116 119 97 114 101 0 77 97 99 114 111 109 101 100 105 97 32 70 105 114 101 119 111 114 107 115 32 77 88 32 50 48 48 52 135 118 172 207 0 0 0 10 73 68 65 84 120 156 99 96 0 0 0 2 0 1 72 175 164 113 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:34'!
subheadBgPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 9 0 0 0 21 8 2 0 0 1 108 224 99 49 0 0 0 9 112 72 89 115 0 0 10 235 0 0 10 235 1 130 139 13 90 0 0 0 162 73 68 65 84 120 156 157 142 57 14 194 64 12 69 93 184 65 74 77 133 132 168 83 112 121 206 65 71 77 65 68 65 88 10 80 134 204 98 147 89 164 56 145 156 2 55 246 243 211 31 15 182 199 3 0 224 106 189 3 102 116 239 123 164 97 25 55 17 209 220 206 144 10 109 146 113 250 52 167 50 149 120 181 169 99 11 182 75 173 79 141 50 117 233 1 52 143 11 136 26 172 153 112 14 9 182 83 166 153 207 151 11 84 219 253 8 16 188 136 5 55 2 75 32 175 26 9 160 102 190 207 70 192 235 10 74 33 139 212 220 17 121 213 177 235 117 183 148 243 246 191 123 11 255 228 160 231 72 58 38 233 126 215 146 109 117 12 175 199 161 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:35'!
topLeftPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 12 0 0 0 33 8 2 0 0 1 21 34 237 206 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 1 115 73 68 65 84 120 156 221 146 203 142 130 64 16 69 65 90 19 195 202 141 232 70 141 11 254 255 147 72 140 137 160 27 5 124 242 240 148 69 64 122 88 204 108 167 19 165 250 214 189 245 234 50 117 93 87 85 101 248 165 105 106 138 162 240 60 207 56 142 51 30 143 229 35 55 40 98 10 199 140 70 163 143 13 22 69 209 102 179 49 175 215 107 189 94 95 46 23 193 92 215 53 28 231 115 36 4 24 22 28 81 227 21 12 97 16 4 164 18 109 89 150 34 130 68 104 137 220 179 72 255 3 131 222 84 192 135 168 73 146 0 205 102 51 113 158 207 231 233 116 186 88 44 178 44 187 94 175 210 80 28 199 97 24 226 80 173 20 162 77 107 200 38 170 166 176 161 182 132 30 52 192 210 162 186 186 56 24 52 215 12 79 135 176 219 237 232 220 247 125 129 30 143 199 241 120 220 110 183 141 16 242 126 191 231 142 132 113 138 240 249 124 194 199 201 189 169 158 40 52 152 231 121 155 90 132 140 245 126 191 247 138 208 58 58 104 160 84 171 155 14 106 41 127 101 253 14 250 62 70 39 213 99 181 35 212 163 175 69 127 108 40 255 180 43 187 211 186 241 49 148 195 225 192 75 205 231 115 222 222 14 14 253 116 58 161 91 173 86 109 34 52 140 87 118 26 6 23 222 130 205 93 46 151 170 97 127 240 117 145 80 67 191 221 110 196 224 142 77 41 118 123 154 11 234 100 50 113 62 47 108 181 210 144 52 178 250 248 255 158 237 192 160 6 25 54 9 198 119 41 195 36 171 222 255 68 210 29 26 36 189 1 144 157 23 59 14 199 48 93 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:35'!
topLinkBacPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 3 0 0 0 33 8 3 0 0 1 92 149 209 38 0 0 0 105 80 76 84 69 40 112 4 44 114 6 45 114 6 44 114 8 47 116 12 51 118 11 52 118 11 50 118 15 53 120 19 59 122 16 56 122 23 59 124 26 62 126 30 65 126 21 66 126 21 73 130 26 80 134 31 66 129 34 68 130 37 72 133 41 75 135 45 87 138 36 94 142 41 79 137 49 81 139 52 85 141 56 101 147 46 109 151 51 225 225 225 226 226 226 234 234 234 243 243 243 244 244 244 251 251 251 255 255 255 182 49 130 82 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 111 73 68 65 84 120 156 45 141 75 14 194 64 12 67 61 51 175 31 40 130 77 47 80 238 127 167 170 98 87 33 117 213 77 11 42 14 16 201 113 18 217 14 3 51 87 222 116 192 141 157 158 129 7 13 45 53 171 251 133 3 137 86 156 68 45 22 113 22 157 40 178 114 36 170 88 155 205 153 167 29 177 85 78 120 121 186 219 58 25 17 81 140 172 8 249 113 220 230 35 209 252 111 129 234 251 74 108 74 214 167 15 203 207 15 177 87 116 3 173 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:35'!
topLinkPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 7 0 0 0 25 8 3 0 0 1 189 87 244 156 0 0 0 150 80 76 84 69 45 114 6 47 116 10 50 117 11 51 119 14 57 121 15 54 120 18 57 122 22 59 124 25 61 126 28 64 126 21 70 129 25 64 128 31 77 133 31 66 129 34 69 131 37 72 131 35 77 135 38 72 133 41 77 136 47 83 136 35 83 138 42 90 140 40 89 141 46 80 138 51 84 141 54 86 142 57 90 144 57 88 144 60 91 145 63 97 144 45 96 145 51 101 148 55 104 149 50 98 148 62 107 151 58 112 153 55 114 156 63 93 147 66 97 149 70 106 153 67 111 155 70 99 151 72 102 153 76 108 157 83 112 159 88 121 160 68 119 160 76 127 165 81 116 162 92 133 168 84 98 93 193 166 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 167 73 68 65 84 120 156 29 140 81 79 131 64 16 132 111 111 191 59 184 37 160 54 152 80 19 255 255 255 226 197 164 188 84 5 219 34 98 87 147 205 76 102 50 251 161 116 92 121 97 224 192 133 71 234 87 158 26 182 157 97 162 61 147 10 185 230 253 76 59 163 29 249 57 76 84 93 248 192 98 48 38 241 104 15 97 166 175 67 79 251 217 130 248 137 144 37 163 81 49 177 255 110 188 141 164 152 200 49 83 66 33 165 68 17 247 210 188 29 151 11 17 21 117 37 89 180 111 252 215 131 111 189 14 162 206 51 167 218 134 254 209 118 229 52 55 183 211 178 56 167 138 213 234 76 115 255 249 197 200 41 175 174 230 188 230 235 14 65 160 37 159 65 226 146 26 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:36'!
topModPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 201 0 0 0 34 8 3 0 0 1 181 156 61 224 0 0 0 219 80 76 84 69 126 177 38 127 178 38 128 180 39 130 181 40 131 182 41 133 184 42 135 185 42 136 187 43 138 189 44 139 190 45 141 191 46 142 193 47 144 195 47 145 196 48 147 197 49 148 199 50 150 201 51 151 202 52 153 203 53 153 204 53 155 205 53 156 206 54 158 208 55 157 208 56 156 203 65 160 206 72 168 213 76 169 212 82 172 215 83 175 215 99 177 216 99 181 219 104 185 221 110 214 235 173 220 238 181 216 216 216 217 217 217 218 218 218 219 219 219 220 220 220 221 221 221 223 223 223 224 224 224 227 227 227 228 228 228 229 229 229 230 230 230 231 231 231 232 232 232 233 233 233 235 235 235 236 236 236 237 237 237 238 238 238 239 239 239 247 251 238 240 240 240 241 241 241 242 242 242 243 243 243 244 244 244 245 245 245 246 246 246 247 247 247 248 248 248 249 249 249 250 250 250 251 251 251 252 254 249 252 252 252 253 253 253 254 254 254 255 255 255 249 11 79 202 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 3 177 73 68 65 84 120 156 221 89 223 111 27 69 16 158 89 207 173 27 90 84 42 37 45 141 106 18 209 240 192 99 121 9 15 188 55 255 122 197 11 72 128 84 26 126 132 164 85 105 42 165 144 144 248 110 239 102 58 251 235 236 138 179 170 75 125 9 230 147 229 243 249 188 247 205 236 236 204 55 123 166 61 118 0 8 2 250 46 232 15 17 133 33 118 63 64 23 30 49 185 111 59 175 128 41 9 166 221 151 0 8 190 214 119 241 52 74 136 8 156 120 79 45 237 149 209 0 253 30 96 102 5 90 130 159 184 235 102 31 125 73 252 79 39 205 133 80 189 192 6 33 222 5 239 36 34 171 211 16 205 1 195 40 180 119 176 181 200 240 110 28 108 81 245 217 143 167 125 134 236 110 85 36 124 220 139 6 89 8 22 57 180 24 180 7 85 158 71 117 49 190 242 89 7 76 1 196 104 123 113 136 208 31 219 39 191 246 24 241 21 30 144 155 62 237 67 242 100 215 169 255 117 47 195 88 215 90 213 111 72 163 67 92 191 33 2 151 50 140 191 9 41 224 147 46 166 66 190 157 207 134 188 40 53 236 33 45 253 119 26 74 254 19 239 140 123 49 245 64 121 34 247 140 26 246 102 237 62 84 108 6 225 144 186 248 20 202 139 79 200 189 222 105 228 251 65 56 60 110 238 216 241 225 77 98 225 242 103 55 24 203 27 171 21 131 73 221 114 127 15 70 162 104 200 87 77 224 158 107 185 39 68 34 75 207 181 220 19 190 138 251 25 171 31 134 85 221 38 64 88 244 200 24 202 82 144 3 175 13 210 254 64 191 49 172 21 58 88 26 127 157 202 153 14 243 166 199 100 138 2 182 191 41 161 244 41 141 204 151 185 120 51 152 171 129 89 242 0 224 221 75 239 5 34 97 112 165 122 177 126 107 57 115 243 111 84 229 243 77 171 36 211 227 237 161 40 0 172 189 117 184 113 131 154 151 219 192 13 225 251 7 244 135 72 109 97 242 251 132 202 117 149 251 253 243 33 56 116 129 108 203 24 214 75 114 107 80 239 119 119 5 31 14 222 127 212 140 236 5 213 86 138 1 179 254 233 67 99 79 73 68 76 103 223 179 28 56 214 164 241 217 8 3 146 156 113 42 44 163 1 73 84 184 99 93 25 210 147 76 2 195 146 240 72 73 100 88 79 82 76 254 15 36 0 97 186 126 217 65 241 29 124 108 236 131 72 4 196 22 127 214 85 201 172 234 251 51 35 144 202 126 122 5 217 129 60 34 9 67 242 4 238 133 187 38 241 1 200 250 149 148 196 72 75 144 36 205 127 244 34 22 36 42 216 7 121 115 131 48 215 243 5 146 19 136 162 165 231 124 113 90 241 66 29 198 217 104 73 138 247 142 148 97 54 63 201 25 102 146 172 164 209 222 249 29 214 114 48 66 99 63 94 51 129 207 79 23 87 175 240 238 253 37 147 92 25 202 23 114 215 154 176 186 220 235 102 18 188 226 70 186 39 237 63 25 19 93 119 80 232 113 60 145 163 209 122 129 36 213 49 109 122 55 92 193 191 113 93 45 145 107 80 144 33 243 185 26 173 209 192 201 203 87 27 150 234 170 218 208 201 170 138 243 163 242 186 173 235 3 63 229 223 141 31 220 46 173 6 251 206 243 202 144 184 70 247 116 174 120 246 215 178 211 241 10 112 254 236 246 23 206 234 10 107 220 152 132 117 245 10 227 180 185 110 179 46 133 41 178 106 133 47 246 65 227 5 26 60 187 110 155 46 135 51 204 17 8 158 64 211 12 42 193 131 162 105 70 225 152 98 194 171 235 9 167 166 33 118 144 82 175 174 39 181 112 8 138 247 68 183 40 171 28 147 84 115 99 158 172 182 39 177 165 136 121 178 218 158 196 160 80 58 133 199 215 104 204 7 33 135 32 229 137 28 165 103 94 216 238 46 242 35 48 104 55 28 56 251 20 255 4 153 107 43 219 223 229 7 102 249 114 187 217 72 151 195 118 35 111 48 98 147 217 238 137 210 39 73 29 105 122 204 54 179 160 181 2 0 242 159 52 226 205 207 158 120 60 184 162 25 92 62 14 211 241 45 143 186 3 247 166 26 180 178 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:36'!
topPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 3 0 0 0 33 8 2 0 0 1 228 41 182 67 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 0 116 73 68 65 84 120 156 173 78 201 13 192 32 12 227 48 172 194 254 219 48 6 240 65 188 104 2 137 104 85 245 215 72 150 157 196 57 48 198 64 239 29 222 123 132 16 22 207 57 209 90 3 7 215 216 19 99 68 173 21 214 90 56 231 22 216 203 204 53 154 49 198 160 148 194 68 21 38 106 222 136 236 183 76 44 186 91 134 215 46 105 191 160 183 20 234 203 57 155 21 72 41 137 218 143 156 67 79 181 191 61 223 124 249 126 81 23 22 6 39 141 45 150 224 96 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!JoomlaStyle methodsFor: 'imgs' stamp: 'mivsek 1/10/2008 16:36'!
topRightPng
^#(137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 14 0 0 0 33 8 2 0 0 1 17 215 61 243 0 0 0 9 112 72 89 115 0 0 11 18 0 0 11 18 1 210 221 126 252 0 0 1 151 73 68 65 84 120 156 237 147 201 138 194 64 16 134 179 148 34 184 33 184 132 224 2 94 124 255 183 241 36 24 34 162 32 26 131 136 251 124 157 238 49 216 198 131 135 185 77 29 122 169 174 229 175 250 171 229 116 58 149 203 101 57 30 143 106 243 125 223 113 28 41 149 74 106 51 183 203 229 34 200 225 112 48 38 24 43 147 243 249 252 107 242 120 60 216 226 56 238 247 251 178 223 239 185 112 218 110 183 202 209 201 4 19 19 87 139 40 119 17 215 117 141 26 36 146 36 137 118 80 250 219 237 214 104 52 196 243 60 227 145 159 116 218 87 29 30 230 68 42 48 19 127 181 90 13 6 3 83 205 110 183 83 155 200 120 60 230 48 155 205 70 163 145 241 34 21 169 155 205 38 230 212 153 71 213 66 132 52 77 109 173 141 229 69 91 108 251 196 248 162 5 41 15 94 38 185 86 119 120 179 217 80 78 183 219 213 111 170 55 176 208 235 245 208 206 231 243 225 112 200 131 170 141 8 116 139 53 12 67 192 82 139 201 6 29 92 112 130 158 122 189 46 207 12 20 90 173 86 175 215 235 253 126 207 145 113 113 50 182 20 97 239 120 139 181 159 107 43 214 126 211 157 111 180 239 170 207 182 211 233 148 13 246 120 102 173 84 42 116 135 21 108 150 131 76 38 19 203 27 102 150 203 37 99 19 4 1 68 229 83 72 183 53 151 52 92 15 30 7 254 2 125 91 44 22 228 105 183 219 102 236 117 143 233 55 20 96 135 79 173 86 115 51 193 129 217 93 175 215 157 78 135 40 118 5 184 65 49 88 137 205 181 213 106 69 81 4 36 53 10 250 43 90 162 127 185 6 3 104 18 42 30 11 89 176 4 120 31 41 47 148 127 211 191 49 253 1 124 109 201 2 220 120 109 78 0 0 0 0 73 69 78 68 174 66 96 130 )! !

!MIMEMap methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
addType: aTypeString andExtension: anExtensionString
	| exts |
	exts := self mimeTypes at: aTypeString ifAbsentPut: [OrderedCollection new].
	(exts includes: anExtensionString) ifFalse: [exts add: anExtensionString].
	self fileExtensions at: anExtensionString ifAbsentPut: [aTypeString].! !

!MIMEMap methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
extensionForType: aString
	"only first one if more than one ext exist for this mime type"
	| exts string |
	string := aString = 'image/pjpeg' ifTrue: ['image/jpeg'] ifFalse: [aString]. "wierd IE problem"
	string := aString = 'image/x-png' ifTrue: ['image/png'] ifFalse: [string]. "wierd IE problem"
	exts := self mimeTypes at: string asLowercase ifAbsent: [#()].
	^exts notEmpty ifTrue: [exts first] ifFalse: [nil]

"MIMEMap new extensionForType: 'image/jpeg'"! !

!MIMEMap methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
extensionsForType: aString
	^self mimeTypes at: aString asLowercase ifAbsent: [#()].

"MIMEMap new extensionsForType: 'image/jpeg'"! !

!MIMEMap methodsFor: 'private' stamp: ' 21/4/07 22:07'!
fileExtensions
	fileExtensions isNil ifTrue: [self initFileExtensions].
	^fileExtensions! !

!MIMEMap methodsFor: 'accessing'!
iconForType: aString
	"a name of icon to represent this content type, from WebStyle imgs-filetype icons"
	aString isNil ifTrue: [^#unknownSmallPng].
	'text/plain' = aString ifTrue: [^#txtSmallPng].
	'text/xml' = aString ifTrue: [^#xmlSmallPng].
	'application/pdf' = aString ifTrue: [^#pdfSmallPng].
	'application/msword' = aString ifTrue: [^#wordSmallPng].
	'application/rtf' = aString ifTrue: [^#wordSmallPng].
	'application/excel' = aString ifTrue: [^#excelSmallPng]. "depreceated!!"
	'application/vnd.ms-excel' = aString ifTrue: [^#excelSmallPng].
	'application/powerpoint' = aString ifTrue: [^#powerpointSmallPng].   "depreceated!!"
	'application/vnd.ms-powerpoint' = aString ifTrue: [^#powerpointSmallPng].
	'application/zip' = aString ifTrue: [^#zipSmallPng].
	('image/*' match: aString) ifTrue: [^#imageSmallPng].
	('audio/*' match: aString) ifTrue: [^#multimediaSmallPng].
	('video/*' match: aString) ifTrue: [^#multimediaSmallPng].
	^#unknownSmallPng

"MIMEMap new iconForType: 'image/jpeg'"! !

!MIMEMap methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initFileExtensions
	fileExtensions := Dictionary new.! !

!MIMEMap methodsFor: 'initialize-release'!
initFromApacheMimeTypes
	"see class method. Only mime types, which have some extension defined, are set!! "
	"MIMEMap allInstances do: [:each | each initFromApacheMimeTypes] "
	| collection |
	self initMimeTypes; initFileExtensions.
	collection := self class arrayFromApacheMimeTypes.
	collection do: [:col | 
		2 to: col size do: [:inx | self addType: col first andExtension: (col at: inx)] ]! !

!MIMEMap methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initMimeTypes
	mimeTypes := Dictionary new.! !

!MIMEMap methodsFor: 'initialize-release'!
initialize
	"MIMEMap allInstances do: [:each | each initialize]"
	self initFromApacheMimeTypes! !

!MIMEMap methodsFor: 'testing'!
isTextType: aTypeString
	"is this content type text based?"
	^self class arrayFromTextMimeTypes includes: aTypeString! !

!MIMEMap methodsFor: 'private' stamp: ' 21/4/07 22:07'!
mimeTypes
	mimeTypes isNil ifTrue: [self initMimeTypes].
	^mimeTypes! !

!MIMEMap methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
removeType: aTypeString andExtension: anExtensionString
	| exts |
	exts := self mimeTypes at: aTypeString ifAbsent: [OrderedCollection new].
	(exts includes: anExtensionString) ifTrue: [exts remove: anExtensionString].
	exts isEmpty ifTrue: [self mimeTypes removeKey: aTypeString ifAbsent: [] ].
	self fileExtensions removeKey: anExtensionString ifAbsent: [].! !

!MIMEMap methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
typeForExtension: aString
	| ext |
	ext := aString asLowercase copyWithout: $. .
	^self fileExtensions at: ext ifAbsent: [nil].

"MIMEMap new typeForExtension: 'jpg'"! !

!MIMEMap class methodsFor: 'accessing'!
apacheMimeTypes
	"from /etc/apache2/mime.types after Apache v2.x is installed. docx, xlsx added manually"
	"Dont forget to initialize all MIMEMaps after any change here!!"
	"MIMEMap allInstances do: [:each | each initialize]"
	"# This file controls what Internet media types are sent to the client for
# given file extension(s).  Sending the correct media type to the client
# is important so they know how to handle the content of the file.
# For more information about Internet media types, please read 
# RFC 2045, 2046, 2047, 2048, and 2077.  The Internet media type
# registry is at <ftp://ftp.iana.org/assignments/media-types/>.

# MIME type			Extension"

	^'application/andrew-inset ez
application/chemtool cht
application/dicom dcm
application/docbook+xml docbook
application/ecmascript ecma
application/flash-video flv
application/illustrator ai
application/javascript
application/mac-binhex40
application/mathematica nb
application/msword doc docx
application/octet-stream bin
application/oda oda
application/ogg ogg
application/pdf pdf
application/pgp pgp
application/pgp-encrypted
application/pgp-encrypted pgp gpg
application/pgp-keys
application/pgp-keys skr pkr
application/pgp-signature
application/pgp-signature sig
application/pkcs7-mime
application/pkcs7-signature p7s
application/postscript ps
application/rtf rtf
application/sdp sdp
application/smil smil smi sml
application/stuffit sit
application/vnd.corel-draw cdr
application/vnd.hp-hpgl hpgl
application/vnd.hp-pcl pcl
application/vnd.lotus-1-2-3 123 wk1 wk3 wk4 wks
application/vnd.mozilla.xul+xml xul
application/vnd.ms-excel xls xlc xll xlm xlw xla xlt xld xlsx xltx
application/vnd.ms-powerpoint ppz ppt pps pot pptx potx ppsx
application/vnd.oasis.opendocument.chart odc
application/vnd.oasis.opendocument.database odb
application/vnd.oasis.opendocument.formula odf
application/vnd.oasis.opendocument.graphics odg
application/vnd.oasis.opendocument.graphics-template otg
application/vnd.oasis.opendocument.image odi
application/vnd.oasis.opendocument.presentation odp
application/vnd.oasis.opendocument.presentation-template otp
application/vnd.oasis.opendocument.spreadsheet ods
application/vnd.oasis.opendocument.spreadsheet-template ots
application/vnd.oasis.opendocument.text odt
application/vnd.oasis.opendocument.text-master odm
application/vnd.oasis.opendocument.text-template ott
application/vnd.oasis.opendocument.text-web oth
application/vnd.palm pdb
application/vnd.rn-realmedia
application/vnd.rn-realmedia rm
application/vnd.rn-realmedia-secure rms
application/vnd.rn-realmedia-vbr rmvb
application/vnd.stardivision.calc sdc
application/vnd.stardivision.chart sds
application/vnd.stardivision.draw sda
application/vnd.stardivision.impress sdd sdp
application/vnd.stardivision.mail smd
application/vnd.stardivision.math smf
application/vnd.stardivision.writer sdw vor sgl
application/vnd.sun.xml.calc sxc
application/vnd.sun.xml.calc.template stc
application/vnd.sun.xml.draw sxd
application/vnd.sun.xml.draw.template std
application/vnd.sun.xml.impress sxi
application/vnd.sun.xml.impress.template sti
application/vnd.sun.xml.math sxm
application/vnd.sun.xml.writer sxw
application/vnd.sun.xml.writer.global sxg
application/vnd.sun.xml.writer.template stw
application/vnd.wordperfect wpd
application/x-abiword abw abw.CRASHED abw.gz zabw
application/x-amipro sam
application/x-anjuta-project prj
application/x-applix-spreadsheet as
application/x-applix-word aw
application/x-arc
application/x-archive a
application/x-arj arj
application/x-asax asax
application/x-ascx ascx
application/x-ashx ashx
application/x-asix asix
application/x-asmx asmx
application/x-asp asp
application/x-awk
application/x-axd axd
application/x-bcpio bcpio
application/x-bittorrent torrent
application/x-blender blender blend BLEND
application/x-bzip bz bz2
application/x-bzip bz2 bz
application/x-bzip-compressed-tar tar.bz tar.bz2
application/x-bzip-compressed-tar tar.bz tar.bz2 tbz tbz2
application/x-cd-image iso
application/x-cgi cgi
application/x-chess-pgn pgn
application/x-chm chm
application/x-class-file
application/x-cmbx cmbx
application/x-compress Z
application/x-compressed-tar tar.gz tar.Z tgz taz
application/x-compressed-tar tar.gz tgz
application/x-config config
application/x-core
application/x-cpio cpio
application/x-cpio-compressed cpio.gz
application/x-csh csh
application/x-cue cue
application/x-dbase dbf
application/x-dbm
application/x-dc-rom dc
application/x-deb deb
application/x-designer ui
application/x-desktop desktop kdelnk
application/x-devhelp devhelp
application/x-dia-diagram dia
application/x-disco disco
application/x-dvi dvi
application/x-e-theme etheme
application/x-egon egon
application/x-executable exe
application/x-font-afm afm
application/x-font-bdf bdf
application/x-font-dos
application/x-font-framemaker
application/x-font-libgrx
application/x-font-linux-psf psf
application/x-font-otf
application/x-font-pcf pcf
application/x-font-pcf pcf.gz
application/x-font-speedo spd
application/x-font-sunos-news
application/x-font-tex
application/x-font-tex-tfm
application/x-font-ttf ttc TTC
application/x-font-ttf ttf
application/x-font-type1 pfa pfb gsf pcf.Z
application/x-font-vfont
application/x-frame
application/x-frontline aop
application/x-gameboy-rom gb
application/x-gdbm
application/x-gdesklets-display display
application/x-genesis-rom gen md
application/x-gettext-translation gmo
application/x-glabels glabels
application/x-glade glade
application/x-gmc-link
application/x-gnome-db-connection connection
application/x-gnome-db-database database
application/x-gnome-stones caves
application/x-gnucash gnucash gnc xac
application/x-gnumeric gnumeric
application/x-graphite gra
application/x-gtar gtar
application/x-gtktalog
application/x-gzip gz
application/x-gzpostscript ps.gz
application/x-hdf hdf
application/x-ica ica
application/x-ipod-firmware
application/x-jamin jam
application/x-jar jar
application/x-java class
application/x-java-archive jar ear war
application/x-java-jnlp-file jnlp
application/x-jbuilder-project jpr jpx
application/x-karbon karbon
application/x-kchart chrt
application/x-kformula kfo
application/x-killustrator kil
application/x-kivio flw
application/x-kontour kon
application/x-kpovmodeler kpm
application/x-kpresenter kpr kpt
application/x-krita kra
application/x-kspread ksp
application/x-kspread-crypt
application/x-ksysv-package
application/x-kugar kud
application/x-kword kwd kwt
application/x-kword-crypt
application/x-lha lha lzh
application/x-lha lzh
application/x-lhz lhz
application/x-linguist ts
application/x-lyx lyx
application/x-lzop lzo
application/x-lzop-compressed-tar tar.lzo tzo
application/x-macbinary
application/x-machine-config
application/x-magicpoint mgp
application/x-master-page master
application/x-matroska mkv
application/x-mdp mdp
application/x-mds mds
application/x-mdsx mdsx
application/x-mergeant mergeant
application/x-mif mif
application/x-mozilla-bookmarks
application/x-mps mps
application/x-ms-dos-executable exe
application/x-mswinurl
application/x-mswrite wri
application/x-msx-rom msx
application/x-n64-rom n64
application/x-nautilus-link
application/x-nes-rom nes
application/x-netcdf cdf nc
application/x-netscape-bookmarks
application/x-object o
application/x-ole-storage
application/x-oleo oleo
application/x-palm-database
application/x-palm-database pdb prc
application/x-par2 PAR2 par2
application/x-pef-executable
application/x-perl pl pm al perl
application/x-php php php3 php4
application/x-pkcs12 p12 pfx
application/x-planner planner mrproject
application/x-planperfect pln
application/x-prjx prjx
application/x-profile
application/x-ptoptimizer-script pto
application/x-pw pw
application/x-python-bytecode pyc pyo
application/x-quattro-pro wb1 wb2 wb3
application/x-quattropro wb1 wb2 wb3
application/x-qw qif
application/x-rar rar
application/x-rar-compressed rar
application/x-rdp rdp
application/x-reject rej
application/x-remoting rem
application/x-resources resources
application/x-resourcesx resx
application/x-rpm rpm
application/x-ruby
application/x-sc
application/x-sc sc
application/x-scribus sla sla.gz scd scd.gz
application/x-shar shar
application/x-shared-library-la la
application/x-sharedlib so
application/x-shellscript sh
application/x-shockwave-flash swf
application/x-siag siag
application/x-slp
application/x-smil kino
application/x-smil smi smil
application/x-sms-rom sms gg
application/x-soap-remoting soap
application/x-streamingmedia ssm
application/x-stuffit
application/x-stuffit bin sit
application/x-sv4cpio sv4cpio
application/x-sv4crc sv4crc
application/x-tar tar
application/x-tarz tar.Z
application/x-tex-gf gf
application/x-tex-pk k
application/x-tgif obj
application/x-theme theme
application/x-toc toc
application/x-toutdoux
application/x-trash   bak old sik
application/x-troff tr roff t
application/x-troff-man man
application/x-troff-man-compressed
application/x-tzo tar.lzo tzo
application/x-ustar ustar
application/x-wais-source src
application/x-web-config
application/x-wpg wpg
application/x-wsdl wsdl
application/x-x509-ca-cert der cer crt cert pem
application/x-xbel xbel
application/x-zerosize
application/x-zoo zoo
application/xhtml+xml xhtml
application/zip zip
audio/ac3 ac3
audio/basic au snd
audio/midi mid midi
audio/mpeg mp3
audio/prs.sid sid psid
audio/vnd.rn-realaudio ra
audio/x-aac aac
audio/x-adpcm
audio/x-aifc
audio/x-aiff aif aiff
audio/x-aiff aiff aif aifc
audio/x-aiffc
audio/x-flac flac
audio/x-m4a m4a
audio/x-mod mod ult uni XM m15 mtm 669
audio/x-mp3-playlist
audio/x-mpeg
audio/x-mpegurl m3u
audio/x-ms-asx
audio/x-pn-realaudio ra ram rm
audio/x-pn-realaudio ram rmm
audio/x-riff
audio/x-s3m s3m
audio/x-scpls pls
audio/x-scpls pls xpl
audio/x-stm stm
audio/x-voc voc
audio/x-wav wav
audio/x-xi xi
audio/x-xm xm
image/bmp bmp
image/cgm cgm
image/dpx
image/fax-g3 g3
image/g3fax
image/gif gif
image/ief ief
image/jpeg jpeg jpg jpe
image/jpeg2000 jp2
image/png png
image/rle rle
image/svg+xml svg
image/tiff tif tiff
image/vnd.djvu djvu djv
image/vnd.dwg dwg
image/vnd.dxf dxf
image/x-3ds 3ds
image/x-applix-graphics ag
image/x-cmu-raster ras
image/x-compressed-xcf xcf.gz xcf.bz2
image/x-dcraw bay BAY bmq BMQ cr2 CR2 crw CRW cs1 CS1 dc2 DC2 dcr DCR fff FFF k25 K25 kdc KDC mos MOS mrw MRW nef NEF orf ORF pef PEF raf RAF rdc RDC srf SRF x3f X3F
image/x-dib
image/x-eps eps epsi epsf
image/x-fits fits
image/x-fpx
image/x-icb icb
image/x-ico ico
image/x-iff iff
image/x-ilbm ilbm
image/x-jng jng
image/x-lwo lwo lwob
image/x-lws lws
image/x-msod msod
image/x-niff
image/x-pcx
image/x-photo-cd pcd
image/x-pict pict pict1 pict2
image/x-portable-anymap pnm
image/x-portable-bitmap pbm
image/x-portable-graymap pgm
image/x-portable-pixmap ppm
image/x-psd psd
image/x-rgb rgb
image/x-sgi sgi
image/x-sun-raster sun
image/x-tga tga
image/x-win-bitmap cur
image/x-wmf wmf
image/x-xbitmap xbm
image/x-xcf xcf
image/x-xfig fig
image/x-xpixmap xpm
image/x-xwindowdump xwd
inode/blockdevice
inode/chardevice
inode/directory
inode/fifo
inode/mount-point
inode/socket
inode/symlink
message/delivery-status
message/disposition-notification
message/external-body
message/news
message/partial
message/rfc822
message/x-gnu-rmail
model/vrml wrl
multipart/alternative
multipart/appledouble
multipart/digest
multipart/encrypted
multipart/mixed
multipart/related
multipart/report
multipart/signed
multipart/x-mixed-replace
text/calendar vcs ics
text/css css CSSL
text/directory vcf vct gcrd
text/enriched
text/html html htm
text/htmlh
text/javascript js
text/mathml mml
text/plain txt asc
text/rdf rdf
text/rfc822-headers
text/richtext rtx
text/rss rss
text/sgml sgml sgm
text/spreadsheet sylk slk
text/tab-separated-values tsv
text/vnd.rn-realtext rt
text/vnd.wap.wml wml
text/x-adasrc adb ads
text/x-authors
text/x-bibtex bib
text/x-boo boo
text/x-c++hdr hh
text/x-c++src cpp cxx cc C c++
text/x-chdr h h++ hp
text/x-comma-separated-values csv
text/x-copying
text/x-credits
text/x-csrc c
text/x-dcl dcl
text/x-dsl dsl
text/x-dsrc d
text/x-dtd dtd
text/x-emacs-lisp el
text/x-fortran f
text/x-gettext-translation po
text/x-gettext-translation-template pot
text/x-gtkrc
text/x-haskell hs
text/x-idl idl
text/x-install
text/x-java java
text/x-js js
text/x-ksysv-log
text/x-literate-haskell lhs
text/x-log log
text/x-makefile
text/x-moc moc
text/x-msil il
text/x-nemerle n
text/x-objcsrc m
text/x-pascal p pas
text/x-patch diff patch
text/x-python py
text/x-readme
text/x-rng rng
text/x-scheme scm
text/x-setext etx
text/x-speech
text/x-sql sql
text/x-suse-ymp ymp
text/x-suse-ymu ymu
text/x-tcl tcl tk
text/x-tex tex ltx sty cls
text/x-texinfo texi texinfo
text/x-texmacs tm ts
text/x-troff-me me
text/x-troff-mm mm
text/x-troff-ms ms
text/x-uil uil
text/x-uri uri url
text/x-vb vb
text/x-xds xds
text/x-xmi xmi
text/x-xsl xsl
text/x-xslfo fo xslfo
text/x-xslt xslt xsl
text/xmcd
text/xml xml
video/3gpp 3gp
video/dv dv dif
video/isivideo
video/mpeg mpeg mpg mp2 mpe vob dat
video/quicktime qt mov moov qtvr
video/vivo
video/vnd.rn-realvideo rv
video/wavelet
video/x-3gpp2 3g2
video/x-anim anim[1-9j]
video/x-avi
video/x-flic fli flc
video/x-mng mng
video/x-ms-asf asf asx
video/x-ms-wmv wmv
video/x-msvideo avi
video/x-nsv nsv NSV
video/x-real-video
video/x-sgi-movie movie
'! !

!MIMEMap class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
arrayFromApacheMimeTypes
	| collection stream |
	collection:= OrderedCollection new.
	stream := ReadStream on: self apacheMimeTypes.
	[stream atEnd] whileFalse:
		[ | col line word |
		col := OrderedCollection new.
		line := (stream upTo: Character cr) readStream.
		[line atEnd] whileFalse: [word := line upToSeparator. word notEmpty ifTrue: [col add: word] ].
		collection add: col].
	^collection

"MIMEMap arrayFromApacheMimeTypes"! !

!MIMEMap class methodsFor: 'accessing'!
arrayFromTextMimeTypes
	"MIMEMap arrayFromTextMimeTypes"
	| collection stream |
	collection:= OrderedCollection new.
	stream := ReadStream on: self textMimeTypes.
	[stream atEnd] whileFalse:
		[ | line word |
		line := (stream upTo: Character cr) readStream.
		word := line upToSeparator. word notEmpty ifTrue: [collection add: word] ].
	^collection! !

!MIMEMap class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default
	^AIDASite default mimeMap! !

!MIMEMap class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!MIMEMap class methodsFor: 'accessing'!
textMimeTypes
	"which content/mime types are text based"
	"warning, not necessary complete!!"

	^'
application/docbook+xml
application/ecmascript
application/javascript
application/x-javascript
application/pkcs7-mime
application/pkcs7-signature
application/postscript
application/rtf
application/vnd.hp-hpgl
application/vnd.hp-pc
application/vnd.mozilla.xul+xml
application/x-cgi
application/x-config
application/x-csh
application/x-gettext-translation
application/x-jar
application/x-java
application/x-machine-config
application/x-perl
application/x-php
application/x-pkcs12
application/x-ruby
application/x-toc
application/x-web-config
application/x-wsdl
application/x-x509-ca-cert
application/xhtml+xml
image/svg+xml
message/delivery-status
message/disposition-notification
message/external-body
message/news
message/partial
message/rfc822
multipart/alternative
multipart/digest
multipart/encrypted
multipart/mixed
multipart/related
multipart/report
multipart/signed
multipart/x-mixed-replace
text/calendar
text/css
text/directory
text/enriched
text/html
text/htmlh
text/mathml
text/javascript
text/plain
text/rdf
text/rfc822-headers
text/richtext
text/rss
text/sgml sgml
text/spreadsheet sylk
text/tab-separated-values
text/vnd.rn-realtext
text/vnd.wap.wml
text/x-adasrc
text/x-authors
text/x-bibtex
text/x-boo
text/x-c++hdr
text/x-c++src
text/x-chdr
text/x-comma-separated-values
text/x-copying
text/x-credits
text/x-csrc
text/x-dcl
text/x-dsl
text/x-dsrc
text/x-dtd
text/x-emacs-lisp
text/x-fortran
text/x-gettext-translation
text/x-gettext-translation-template
text/x-gtkrc
text/x-haskell
text/x-idl
text/x-install
text/x-java
text/x-js
text/x-ksysv-log
text/x-literate-haskell
text/x-log
text/x-makefile
text/x-moc
text/x-msil
text/x-nemerle
text/x-objcsrc
text/x-pascal
text/x-patch
text/x-python
text/x-readme
text/x-rng
text/x-scheme
text/x-setext
text/x-speech
text/x-sql
text/x-suse-ymp
text/x-suse-ymu
text/x-tcl
text/x-tex
text/x-texinfo
text/x-texmacs
text/x-troff-me
text/x-troff-mm
text/x-troff-ms
text/x-uil
text/x-uri
text/x-vb
text/x-xds
text/x-xmi
text/x-xsl
text/x-xslfo
text/x-xslt
text/xmcd
text/xml

'! !

!MemberRole methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isEmployeeRole
	^true! !

!MemberRole methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isMemberRole
	^true! !

!MemberRole methodsFor: 'private' stamp: ' 10/1/08 16:41'!
printString
	^'aMemberRole ', self name! !

!Number methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:59'!
printDotString
	"format and return the number with dots between thousandths:  '3.120.123' "
	| mrds millions thousanths rest text number |
	number := self abs.
	mrds := number // 1000000000.
	millions := (number \\ 1000000000)  // 1000000.
	thousanths := (number \\ 1000000) // 1000.
	rest := (number \\ 1000).
	text := ''.
	mrds > 0 ifTrue: 
		[text := mrds printString, '.', (millions withZeros), '.', 
		(thousanths withZeros), '.', (rest withZeros).
		^text].
	millions > 0 	ifTrue: 
		[text := millions printString, '.', 
		(thousanths withZeros), '.', (rest withZeros).
		^text].
	thousanths > 0 
		ifTrue: 
			[text := thousanths printString, '.', 
			(rest withZeros)]
		ifFalse: [text := rest printString].
	^(self < 0 ifTrue: ['- '] ifFalse: ['']), text

"
-123 printDotString  '- 123'
"! !

!Number methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:59'!
withZeros
	"return three digit number with leading zeros"
	^(self < 100 ifTrue: ['0'] ifFalse: ['']), 
	(self < 10 ifTrue: ['0'] ifFalse: ['']), 
	self printString.! !

!Numberer methodsFor: 'private' stamp: ' 21/4/07 22:07'!
counters
	counters isNil ifTrue: [self initCounters].
	^counters! !

!Numberer methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
currentCounter: aSymbol
	"get curent (last nextCounter) number"
	(self counters includesKey: aSymbol) ifFalse: [self resetCounter: aSymbol].
	^self counters at: aSymbol! !

!Numberer methodsFor: 'accessing'!
decreaseCounter: aSymbol
	"decrease a current number, for instance if you deleted something with last number"
	(self currentCounter: aSymbol) = 0 ifTrue: [^nil].
	^self counters at: aSymbol put: (self currentCounter: aSymbol) - 1! !

!Numberer methodsFor: 'private' stamp: ' 21/4/07 22:07'!
decrementCounter: aSymbol
	"get next number and increment this counter"
	^self counters at: aSymbol put: (((self currentCounter: aSymbol) - 1) max: 0)! !

!Numberer methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initCounters
	counters := Dictionary new! !

!Numberer methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nextCounter: aSymbol
	"get next number and increment this counter"
	^self counters at: aSymbol put: (self peekCounter: aSymbol)! !

!Numberer methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
peekCounter: aSymbol
	"get next number but not increment it"
	(self counters includesKey: aSymbol) ifFalse: [self resetCounter: aSymbol].
	^(self counters at: aSymbol) + 1! !

!Numberer methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
resetCounter: aSymbol
	"put counter to 0, peekCounter will then return 1"
	self counters at: aSymbol put: 0! !

!Numberer methodsFor: 'private' stamp: ' 21/4/07 22:07'!
setCounter: aSymbol to: aNumber
	"use it sparingly!!"
	^self counters at: aSymbol put: aNumber! !

!Object methodsFor: '*Aida' stamp: 'np 3/16/2009 12:40'!
aidaCacheTimeout
	"how many seconds this object is globally cached in site's global cache"
	"nil = global default, set in site's global cache settings"
	^nil! !

!Object methodsFor: '*Aida' stamp: 'np 3/16/2009 12:40'!
aidaCacheView: aSymbol on: aWebSession
	"if true, then this object's view will be globally cached in site's cache"
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:23'!
aidaCanBeLocked
	"can we get an exclusive lock on that object (not already locked)?"
	^false! !

!Object methodsFor: '*Aida' stamp: 'jm 7/29/2010 12:40'!
aidaContentType
	"return 'text/html' as content type for web pages"
	"changed from previous #contentType, which can clash with other projects (already on 
	KomHTTPServer on Squeak/Pharo)"
	^'text/html'! !

!Object methodsFor: '*Aida' stamp: 'np 10/17/2008 17:47'!
aidaDeepCopy
	"Answer a copy of the receiver and copy down all its objects reachable from him"

	| objectDictionary |
	objectDictionary := IdentityDictionary new.
	^self aidaDeepCopyNotIn: objectDictionary.! !

!Object methodsFor: '*Aida' stamp: 'np 10/17/2008 17:47'!
aidaDeepCopyNotIn: aDictionary

	"Answer a copy of the receiver and copy down all its objects reachable from him. If altready in aDictionary, then not copy, return reference to already copied object"

	| class newObject index |

	self isNil ifTrue: [^self].
	(aDictionary includesKey: self) ifTrue:
		[^aDictionary at: self].

	class := self class.
	newObject := self copy.
	aDictionary at: self put: newObject.
	class isVariable
		ifTrue: 
			[class isPointers 
				ifTrue: 
					[index := self basicSize.
					1 to: index do:
						[ :i |  newObject basicAt: i put: 
							((self basicAt: i) aidaDeepCopyNotIn: aDictionary)  ]]
				ifFalse: ["already copied by self copy"] ]

		ifFalse: ["already copied by self copy"].
		
	1 to: class instSize do:
		[ :inx |  newObject 
				instVarAt: inx
				put: ((self instVarAt: inx) aidaDeepCopyNotIn: aDictionary)  
		].
	^newObject! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:23'!
aidaDontCache
	"don't cache web content in a browser. Appropriate header is added to http response"
	^false! !

!Object methodsFor: '*Aida'!
aidaIsAssociation
	"used for Aida/Web translation support, multilingual strings are namelly assocs: #fr->'Bonjour'"
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:24'!
aidaIsLocked
	"is object locked exclusively?"
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:24'!
aidaLock
	"get an exclusive lock on that object. Until unlocked, noon else can get that lock. Return false if already locked, true if successfull"
	^false! !

!Object methodsFor: '*Aida'!
aidaPresenterFor: aRequest on: aSession 
	"find appropriate web application or other presenter to represent itself"
	| ptype presenter |
	ptype := aRequest aidaPresentationType. "#web, #json, #xml"
	ptype = #web ifTrue:
		[presenter := self aidaWebAppFor: aSession.
		presenter notNil ifTrue: [^presenter composeWebPageFor: aRequest]].
	ptype = #json ifTrue:
		[^WebJSONPresenter newFor: self on: aSession].
	^self asWebAppNotFoundFor: aSession! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:24'!
aidaUnlock
	"release an exclusive lock if any"
	^true! !

!Object methodsFor: '*Aida' stamp: 'janko 8/25/2012 15:09'!
aidaWebAppFor: aSession
	"return an instance of appropriate App class for me. 
	If mobile app class exist, return that for request from mobile device"
	| webApp mobileApp|
	aSession isNil ifTrue: [^nil].
	webApp := aSession webAppFor: self.  "if already registered in a session"
	webApp notNil ifTrue: [^webApp].
	aSession isMobile ifTrue: "for mobile devices try to finf mobile App first"
		[mobileApp := WebMobileApplication newFor: self on: aSession. 
		mobileApp notNil ifTrue: [^aSession addWebApp: mobileApp for: self] ].
	webApp := WebMobileApplication newFor: self on: aSession. 
	webApp := WebApplication newFor: self on: aSession. "find and instantiate a right App for me"
	webApp notNil ifTrue: [^aSession addWebApp: webApp for: self].
	(self isBehavior and: [self allSuperclasses includes: WebApplication]) ifTrue: 
		[^aSession          "standalone App w/o link to domain"
			addWebApp: 
				(self basicNew session: aSession; initialize; setStandaloneApp) 
			for: self. ].
	^nil! !

!Object methodsFor: '*Aida' stamp: 'jm 8/3/2010 10:18'!
app
	"fastest and most convinient way to find a web app for that object"
	^self aidaWebAppFor: self firstSessionFromStack! !

!Object methodsFor: '*Aida' stamp: 'janko 3/19/2012 14:20'!
asWebAppNotFoundFor: aSession 
	| page |
	page := WebPage new.
	page addText: 'Cannot find aWebApplication for object a', self class name.
	^page! !

!Object methodsFor: '*Aida' stamp: 'janko 3/19/2012 14:47'!
changeToPreferredUrl
	"URL of that object is changed to one suggested by its #prefferedUrl method."
	"Note that its existing URLs are removed!!"
	"Call that method only from Apps, Widgets or Styles!!"
	^self app site urlResolver changeToPreferredUrl: self! !

!Object methodsFor: '*Aida' stamp: 'np 10/17/2008 17:40'!
deepSearchOfClass: aClassName 
	"finf all objects of that class down in object hierarchy"
	| objectDictionary class |
	objectDictionary := IdentityDictionary new.
	self aidaDeepCopyNotIn: objectDictionary.
	class := aClassName asSymbol.
	^ objectDictionary keys select: [ :each | each class name = class ]! !

!Object methodsFor: '*Aida' stamp: 'np 10/17/2008 17:40'!
deepSearchOfObsoleteClasses
	"find all objects of obsolete classes down in object hierarchy"
	| objectDictionary |
	objectDictionary := IdentityDictionary new.
	self aidaDeepCopyNotIn: objectDictionary.
	^ objectDictionary keys select: [ :each | each class isObsolete ]! !

!Object methodsFor: '*Aida' stamp: 'janko 3/19/2012 14:48'!
defaultToPreferredUrl
	"Default URL of that object is set to one suggested by its #prefferedUrl method."
	"Existing URLs are preserved, but just default URL used for automatic URL management"
	"Call that method only from Apps, Widgets or Styles!!"
	^self app site urlResolver defaultToPreferredUrl: self! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:26'!
expiresTimestamp
	"until when content of this object wont be changed"
	"used in http response, override if you like to be included"
	^self modifiedTimestamp  "to reload pages immediately"! !

!Object methodsFor: '*Aida' stamp: 'jm 8/20/2009 21:58'!
firstAppFromStack
	"try to find a first sender up in calling stack, who is  WebApplication"
	"Squeak specific!! "
	| stContext |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		(stContext receiver isKindOf: WebApplication) ifTrue: [^stContext receiver].
		stContext := stContext sender].
	^self firstContextFromStack app! !

!Object methodsFor: '*Aida' stamp: 'janko 11/1/2011 14:50'!
firstContextFromStack
	"try to find a first web execution context"
	"have we something faster?"
	| stContext request event |
	"Squeak specific!! "
	stContext := thisContext sender.
	[stContext notNil] whileTrue: [
		(stContext receiver isKindOf: WebContext) ifTrue:
			[^stContext receiver].
		(stContext receiver isKindOf: WebElement) ifTrue: 
			[stContext selector = #update ifTrue: 
				[^stContext receiver creationContext] ].  "a context of element to be updated, 
									  not necessary currenlty excecuting context!!"
		stContext := stContext sender].
	event := self firstEventFromStack.
	event notNil ifTrue: [^event context].
	request := self firstRequestFromStack.
	^request notNil ifTrue: [request context] ifFalse: [nil]! !

!Object methodsFor: '*Aida' stamp: 'jm 2/1/2011 21:21'!
firstEventFromStack
	"try to find a first sender up in calling stack which is an App and get a WebEvent of that call"
	"Squeak specific!! "
	| stContext isBlock |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		isBlock := AIDASite onPharo
			ifTrue: [stContext outerContext notNil] ifFalse: [stContext isBlock].	
		(isBlock not 
			and: [(stContext receiver isKindOf: WebApplication) 
				and: [stContext selector = #respondToEvent:]]) 				
					ifTrue: [^stContext at: 1].
		stContext := stContext sender].
	 stContext := thisContext.         "in case we execute in a separate web context's process"
	[stContext notNil] whileTrue: [
		(stContext receiver isKindOf: WebContext) ifTrue: [^stContext receiver request].
		stContext := stContext sender].
	^nil! !

!Object methodsFor: '*Aida' stamp: 'janko 6/25/2012 14:39'!
firstRequestFromStack
	"try to find a first sender up in calling stack, who is  AIDASite and get request of that call"
	"Squeak specific!! "
	| stContext isBlock |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		isBlock := AIDASite onPharo
			ifTrue: [stContext outerContext notNil] ifFalse: [stContext isBlock].	
		(isBlock not 
			and: [(stContext receiver isKindOf: AIDASite) 
				and: [stContext method numArgs > 1 
					and: [(stContext at: 2) isKindOf: HTTPRequest]] ])
						ifTrue: "AIDASite>>answer:toGetOrPost:on:"
							[^stContext at: 2].
		stContext := stContext sender].
	 stContext := thisContext.         "in case we execute in a separate web context's process"
	[stContext notNil] whileTrue: [
		(stContext receiver isKindOf: WebContext) ifTrue: [^stContext receiver request].
		stContext := stContext sender].
	^nil! !

!Object methodsFor: '*Aida' stamp: 'janko 6/25/2012 15:24'!
firstSessionFromStack
	"try to find a first sender up in calling stack, who is  AIDASite and get session if that call"
	"Squeak specific!! "
	| stContext isBlock |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		isBlock := AIDASite onPharo
			ifTrue: [stContext outerContext notNil] ifFalse: [stContext isBlock].	
		(isBlock not and: [stContext receiver isKindOf: AIDASite]) ifTrue: 	
			[(1 to: stContext method numArgs) do: [:inx | 
				(stContext at: inx) class == WebSession 
					ifTrue: [^(stContext at: inx)] ].
			^nil].
		stContext := stContext sender].
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		isBlock := AIDASite onPharo
			ifTrue: [stContext outerContext notNil] ifFalse: [stContext isBlock].	
		(isBlock not and: [stContext receiver isKindOf: WebContext]) ifTrue: 	
			[^(stContext receiver app session)].
		stContext := stContext sender].
	^nil! !

!Object methodsFor: '*Aida' stamp: 'jm 11/10/2010 21:25'!
firstWidgetOrAppFromStack
	"try to find a first sender up in calling stack, which is subclass of Widget or WebApplication"
	"Squeak specific!! "
	| stContext |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		((stContext receiver isKindOf: WebWidget) or: [stContext receiver isKindOf: WebApplication]) 
			ifTrue: [^stContext receiver].
		stContext := stContext sender].
	^nil! !

!Object methodsFor: '*Aida' stamp: 'mivsek 1/10/2008 18:14'!
forLanguage: aLanguageCodeSymbol
	"for multilingual support: returns an apropriate instance of itself for that language. 
	Langage is defined by ISO 639 2-letter language code, see 
	http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes"
	^false! !

!Object methodsFor: '*Aida' stamp: 'mivsek 1/10/2008 18:14'!
isMultilingual
	"for multilingual support: override this if your domain object responds 
	to #forLanguage: and returns an apropriate instance of itself for that language"
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:27'!
isVersionedObject
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:27'!
isWebApplication
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:27'!
isWebStyle
	^false! !

!Object methodsFor: '*Aida' stamp: 'jm 12/14/2010 23:43'!
isWebWidget
	^false! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:27'!
modifiedTimestamp
	"when this object was last modified"
	"used in http response, override if you like to be included"
	^nil! !

!Object methodsFor: '*Aida'!
preferedUrl
	"OBSOLETE!! Use a corrently spelling method with double r instead!!"
	^self preferredUrl! !

!Object methodsFor: '*Aida' stamp: 'janko 3/19/2012 13:21'!
preferredUrl
	"override with a suggestion for url of this method!! If not already used, 
	it will be considered by URLResolver during automatic url generation"
	^nil! !

!Object methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:29'!
sendOver: aStream 
	"from Wiki rendering"
	self printOn: aStream! !

!Object methodsFor: '*Aida' stamp: 'janko 3/19/2012 14:51'!
widgetsAndAppsFromStack
	"try to find a first sender up in calling stack, which is subclass of Widget or WebApplication"
	"Squeak specific!! "
	| stContext coll |
	stContext := thisContext.
	coll := OrderedCollection new.
	[stContext notNil] whileTrue: [
		((stContext receiver isKindOf: WebWidget) or: [stContext receiver isKindOf: WebApplication]) 
			ifTrue: [(coll includes: stContext receiver) ifFalse: [coll add: stContext receiver] ].
		stContext := stContext sender].
	^coll! !

!OrderedCollection methodsFor: '*Aida' stamp: 'np 8/22/2008 18:40'!
moveDown: anElement
	"move that element down (after current position) in a collection"
	| inx |
	(self notEmpty and: [self last = anElement]) ifTrue: [^self].
	inx := self indexOf: anElement.
	self add: anElement beforeIndex: inx+2.
	self removeAt: inx
	"#(1 2 3) asOrderedCollection moveDown: 1"! !

!OrderedCollection methodsFor: '*Aida' stamp: 'np 8/22/2008 18:40'!
moveUp: anElement
	"move that element up (before current position) in a collection"
	| inx |
	(self notEmpty and: [self first = anElement]) ifTrue: [^self].
	inx := self indexOf: anElement.
	self add: anElement beforeIndex: inx-1.
	self removeAt: inx+1
	"#(1 2 3) asOrderedCollection moveUp: 3"! !

!OrderedCollection methodsFor: '*Aida' stamp: 'mivsek 2/20/2008 10:21'!
removeAll
	"remove all elements quickly"
	self removeAllSuchThat: [:each | true]. "Squeak specific. #become: is VERY slow!!"
"	self become: OrderedCollection new " "VW specific"! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:38'!
addJobRoleNamed: aString
	(self existJobRoleNamed: aString) ifTrue: [^nil].
	self otherAt: #jobRoles ifAbsent: 
		[self otherAt: #jobRoles put: OrderedCollection new].
	(self otherAt: #jobRoles) add: (JobRole new name: aString)! !

!OrganizationUnit methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
addMember: aPerson
	aPerson becomeMemberOf: self! !

!OrganizationUnit methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
addOrganizationUnit: anOrganizationUnit
	units isNil ifTrue: [self initUnits].
	(self units includes: anOrganizationUnit) ifFalse:
		[self units add: anOrganizationUnit. anOrganizationUnit parent: self]! !

!OrganizationUnit methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
addOrganizationUnitNamed: aString
	self addOrganizationUnit: (OrganizationUnit newNamed: aString)! !

!OrganizationUnit methodsFor: 'roles-special' stamp: ' 10/1/08 16:40'!
addSpecialRoleNamed: aName
	(self existSpecialRoleNamed: aName) ifFalse:
		[self specialRoles add: (Role new name: aName)]! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:42'!
allJobRoles
	^self otherAt: #jobRoles ifAbsent: [^#()]! !

!OrganizationUnit methodsFor: 'accessing' stamp: 'np 10/20/2008 16:37'!
allJobRolesDownHierarchy
	"incudes me"
	^self allOrgUnits "down hierarchy"
		inject: Set new
		into: [:set :each | set addAll: each allJobRoles; yourself]! !

!OrganizationUnit methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
allMembers
	"all members of that org.unit"
	| parties |
	parties :=  (self roles select: [:role | role isMemberRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isMemberRole]) 
			collect: [:each | each party]);
		yourself.
	^parties asSet asOrderedCollection! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allOrgUnits
	"all units down in hierarchy, together with self"
	| collection |
	collection := OrderedCollection new.
	collection add: self.
	self units do: [:each | collection addAll: each allOrgUnits].
	^collection! !

!OrganizationUnit methodsFor: 'job roles' stamp: ' 10/1/08 16:40'!
allPersonsWithJobRoles
	"collect all persons holding job roles in this org unit"
	^self allJobRoles inject: Set new into: [:set :role | set addAll: role allPersons; yourself].! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
company
	"return a company whom belongs that org.unit"
	^self parent company! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:42'!
existJobRoleNamed: aString
	^(self otherAt: #jobRoles ifAbsent: [^false])
		contains: [:each | each name = aString]! !

!OrganizationUnit methodsFor: 'roles-special' stamp: ' 10/1/08 16:40'!
existSpecialRoleNamed: aName
	^(self specialRoleNamed: aName) notNil! !

!OrganizationUnit methodsFor: 'initialize-release' stamp: ' 10/1/08 16:40'!
initSpecialRoles
	specialRoles := OrderedCollection new! !

!OrganizationUnit methodsFor: 'initialize-release' stamp: ' 10/1/08 16:40'!
initUnits
	units := OrderedCollection new! !

!OrganizationUnit methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isOrganizationUnit
	^true! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:42'!
jobRoleNamed: aString
	^(self otherAt: #jobRoles ifAbsent: [^nil])
		detect: [:each | each name = aString] ifNone: [nil]! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
jobRoleWithUuid: aString
	"search for this job role through hierarchy starting from self"
	| found |
	^self allJobRoles detect: [:each | each uuid = aString] ifNone:
		[self units do: [:each | found := each jobRoleWithUuid: aString. found notNil ifTrue: [^found] ].
		nil]! !

!OrganizationUnit methodsFor: 'private' stamp: ' 10/1/08 16:40'!
migrateToUnicode
	"from iso8859-2"
	"OrganizationUnit allInstances do: [:each | each migrateToUnicode]"
	super migrateToUnicode.! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
orgUnitWithName: aString
	"search for this org.unit through hierarchy starting from self"
	| found |
	self name = aString ifTrue: [^self].
	self units do: [:each | each name = aString ifTrue: [^each] ].
	self units do: [:each | 
		found := each orgUnitWithName: aString. found notNil ifTrue: [^found] ].
	^nil! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
orgUnitWithUuid: aString
	"search for this org.unit through hierarchy starting from self"
	| found |
	self uuid = aString ifTrue: [^self].
	self units do: [:each | each uuid = aString ifTrue: [^each] ].
	self units do: [:each | found := each orgUnitWithUuid: aString. found notNil ifTrue: [^found] ].
	^nil! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
parent
	^parent! !

!OrganizationUnit methodsFor: 'private' stamp: ' 10/1/08 16:40'!
parent: anOrganizationUnit
	parent := anOrganizationUnit! !

!OrganizationUnit methodsFor: 'private' stamp: 'janko 3/19/2012 13:21'!
preferredUrl
	| nme |
	nme := self name trimBlanks asSloveneWithoutCircumflexes.
	^'/org-enota/', nme asHttpFriendly.

"OrganizationUnit allInstances do: [:each | 
	each repository notNil ifTrue: [each repository site urlResolver changeToPreferedURL: each] ]"! !

!OrganizationUnit methodsFor: 'private'!
printString
	^'orgUnit: ', self name! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:39'!
removeJobRole: aJobRole
	self otherAt: #jobRoles ifAbsent: [^nil].
	(self otherAt: #jobRoles) remove: aJobRole ifAbsent: [^nil]! !

!OrganizationUnit methodsFor: 'job roles' stamp: 'janko 8/6/2011 19:39'!
removeJobRoleNamed: aString
	(self existJobRoleNamed: aString) ifFalse: [^nil].
	(self otherAt: #jobRoles) remove: (self jobRoleNamed: aString)! !

!OrganizationUnit methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
removeMember: aPerson
	aPerson noMoreMemberOf: self! !

!OrganizationUnit methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
removeOrganizationUnit: anOrganizationUnit
	units isNil ifTrue: [^nil].
	(self units includes: anOrganizationUnit) ifTrue:
		[self units remove: anOrganizationUnit. anOrganizationUnit parent: nil]! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
repository
	self parent isNil ifTrue: [^nil].
	self parent class == Repository ifTrue: [^self parent].
	^self parent repository! !

!OrganizationUnit methodsFor: 'roles-special' stamp: ' 10/1/08 16:40'!
specialRoleCollection
	"all specail roles for that and parent org.units up in to the top of hierarchy.
	sorted by the top first!!"
	^(self parent notNil and: [self parent isKindOf: Party])
		ifTrue: [self parent specialRoleCollection addAll: self specialRoles; yourself]
		ifFalse: [self specialRoles]! !

!OrganizationUnit methodsFor: 'roles-special' stamp: ' 10/1/08 16:40'!
specialRoleNamed: aName
	^self specialRoles detect: [:each | each name = aName] ifNone: [nil]! !

!OrganizationUnit methodsFor: 'roles-special'!
specialRoles
	"a set of roles, special a for member of that org.unit, like aprover, tester etc"
	specialRoles isNil ifTrue: [self initSpecialRoles].
	^specialRoles! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
type
	^type! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
type: aSymbol
	"kind of org.unit like #division #sector #group etc."
	type := aSymbol! !

!OrganizationUnit methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
units
	units isNil ifTrue: [^#()].
	^units! !

!OrganizationUnit class methodsFor: 'instance creation' stamp: ' 10/1/08 16:40'!
newNamed: aString
	^self new name: aString! !

!OrganizationUnit class methodsFor: 'odb specific' stamp: ' 10/1/08 16:40'!
replicationSpecaa
	"Gemstone"
	^super replicationSpec! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testAddress! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testCompany! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testCompanyEmployees! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testEvents! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testOrgUnitJobRoles! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testOrganizationUnit! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testPerson! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testPersonDocumentsToKnow! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testPersonRecordFlows! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testPersonResponsibilities! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testPersonRoles! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testRoleGroups! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testRoles! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testRolesBasic! !

!PartiesTest methodsFor: 'testing' stamp: ' 10/1/08 23:12'!
testRolesSpecific! !

!Party methodsFor: 'related objects' stamp: ' 10/1/08 16:40'!
addRelatedObject: anObject
	(self relatedObjects includes: anObject) ifFalse:
		[self relatedObjects add: anObject].! !

!Party methodsFor: 'private' stamp: ' 10/1/08 16:40'!
addRelatedPartyRole: aRole
	(self relatedPartyRoles includes: aRole) ifTrue: [^nil].
	self relatedPartyRoles add: aRole.! !

!Party methodsFor: 'private' stamp: ' 10/1/08 16:40'!
addRole: aRole
	(self roles includes: aRole) ifTrue: [^nil].
	self roles add: aRole.! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
addRoleGroup: aRoleGroup
	(self roleGroups includes: aRoleGroup) ifFalse: [self roleGroups add: aRoleGroup]! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
addresses
	addresses isNil ifTrue: [self initAddresses].
	^addresses! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
allCustomers
	"return all parties which are my customers, therefore I am a supplier to them"
	| parties |
	parties :=  (self roles select: [:role | role isSupplierRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isCustomerRole]) 
			collect: [:each | each party]);
		yourself.
	^parties asSet asOrderedCollection! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
allEmployees
	"all employees of that party"
	| parties |
	parties :=  (self roles select: [:role | role isEmployeeRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isEmployeeRole]) 
			collect: [:each | each party]);
		yourself.
	^parties asSet asOrderedCollection! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
allRelatedRolesFrom: aParty
	"return all roles this party has to me"
	^self relatedPartyRoles select: [:each | each party == aParty]! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
allRoleGroups
	^self roleGroups copy! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
allRoles
	^self roles copy! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
allRolesTo: aParty
	"return all roles I have to this party"
	^self roles select: [:each | each relatedParty == aParty]! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
allSuppliers
	"return all parties which supply goods to me, therefore I am a customer of them"
	| parties |
	parties :=  (self roles select: [:role | role isCustomerRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isSupplierRole]) 
			collect: [:each | each party]); 
		yourself.
	^parties asSet asOrderedCollection! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
becomeCustomerOf: aParty
	"I become a customer of related party, I buy goods from this party"
	| role |
	(self isCustomerOf: aParty) ifTrue: [^false].
	role := CustomerRole new.
	role name: 'customer role'.
	self newRole: role relatedTo: aParty! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
becomeSiteOwner
	"usual for Companies, SiteOwnerRole has a reference to his WebSite"! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
becomeSupplierTo: aParty 
	"I become a supplier to related party, I supply goods to this party"
	| role |
	(self isSupplierTo: aParty) ifTrue: [^false].
	role := SupplierRole new.
	role name: 'supplier role'.
	self newRole: role relatedTo: aParty! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
becomeWebUserTo: aWebSiteOwnerPary! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
city
	^self mainAddress city! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
city: aString
	self mainAddress city: aString! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
country
	^self mainAddress country! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
country: aString
	self mainAddress country: aString! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
description
	description isNil ifTrue: [self description: ''].
	^description! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
description: aString
	description := aString! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
discontinueAllRoles
	self roles copy do: [:each | self discontinueRole: each].
	self relatedPartyRoles copy do: [:each | self discontinueRole: each]! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
discontinueAllRolesTo: aParty
	(self roles select: [:role | role relatedParty == aParty])
		do: [:each | self discontinueRole: each].! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
discontinueRole: aRole
	self roles remove: aRole ifAbsent: [].
	aRole relatedParty relatedPartyRoles remove: aRole ifAbsent: [].! !

!Party methodsFor: 'roles-basic'!
discontinueRoleNamed: aString
	| r |
	r := self roleNamed: aString.
	r notNil ifTrue: [self discontinueRole: r]! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
email
	^self mainAddress email! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
email: aString
	self mainAddress email: aString! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
events
	events isNil ifTrue: [self initEvents].
	^events! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
fax
	^self mainAddress fax! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
fax: aString
	self mainAddress fax: aString! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
id
	id isNil ifTrue: [self id: ''].
	^id! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
id: aString
	id := aString.! !

!Party methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initAddresses
	addresses := Dictionary new.! !

!Party methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initEvents
	events := DailyCollection new.! !

!Party methodsFor: 'initialize - release' stamp: 'janko 8/6/2011 19:49'!
initOtherValues
	other := Dictionary new.! !

!Party methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initRelatedObjects
	relatedObjects := OrderedCollection new.! !

!Party methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initRelatedPartyRoles
	relatedPartyRoles := OrderedCollection new.! !

!Party methodsFor: 'initialize - release' stamp: ' 10/1/08 16:40'!
initRoles
	roles := OrderedCollection new.! !

!Party methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isCompany
	^false! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
isCustomerOf: aParty

	| isCustomer |
	isCustomer := self roles contains: [:role | role relatedParty == aParty and: [role isCustomerRole] ].
	isCustomer ifTrue: [^true].
	"check also a complementary role"
	^self relatedPartyRoles contains: [:role | role party == aParty and: [role isSupplierRole] ].! !

!Party methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isOrganizationUnit
	^false! !

!Party methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isPerson
	^false! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
isSupplierTo: aParty

	| isSupplier |
	isSupplier := self roles contains: [:role | role relatedParty == aParty and: [role isSupplierRole] ].
	isSupplier ifTrue: [^true].
	"check also a complementary role"
	^self relatedPartyRoles contains: [:role | role party == aParty and: [role isCustomerRole] ].! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
mainAddress
	
	^self addresses 
		at: #MainAddress 
		ifAbsent: [self addresses at: #MainAddress put: Address new. self mainAddress].! !

!Party methodsFor: 'addresses' stamp: 'janko 4/20/2012 17:15'!
mobile
	^self mainAddress mobile! !

!Party methodsFor: 'addresses' stamp: 'janko 4/20/2012 17:16'!
mobile: aString
	self mainAddress mobile: aString! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
name
	name isNil ifTrue: [self name: ''].
	^name! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
name: aString
	name := aString trimBlanks.! !

!Party methodsFor: 'accessing'!
nameNonEmpty
	^self name trimBlanks notEmpty 
		ifTrue: [self name] 
		ifFalse: ['-- no name --'].! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
nameToDisplay
	"on web pages for instance"
	^self name! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
newRole: aRole
	"new role, but not in relationship with anyone"! !

!Party methodsFor: 'roles-basic' stamp: ' 10/1/08 16:40'!
newRole: aRole relatedTo: aParty
	"new role in relationship with other party"

	aRole party: self.
	aRole relatedParty: aParty.
	self addRole: aRole.
	aParty addRelatedPartyRole: aRole.! !

!Party methodsFor: 'roles-basic'!
newRoleNamed: aString
	"new role, but not in relationship with anyone"
	| new |
	(self roleNames includes: aString) ifTrue: [^self error: 'role with that name already exist'].
	new := Role new name: aString.
	self newRole: new! !

!Party methodsFor: 'roles-basic'!
newRoleNamed: aString relatedTo: aParty
	"new role in relationship with other party"
	| new |
	(self roleNames includes: aString) ifTrue: [^self error: 'role with that name already exist'].
	new := Role new name: aString.
	self newRole: new relatedTo: aParty! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
noMoreCustomerOf: aParty 
	"no more a customer of related party"
	(self isCustomerOf: aParty) ifFalse: [^nil].
	self discontinueRole:
		(self roles detect: [:role | role relatedParty == aParty and: [role isCustomerRole] ] ifNone: [^nil])! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
noMoreSupplierTo: aParty 
	"no more a supplier to related party"
	(self isSupplierTo: aParty) ifFalse: [^nil].
	self discontinueRole:
		(self roles detect: [:role | role relatedParty == aParty and: [role isSupplierRole] ] ifNone: [^nil])! !

!Party methodsFor: 'private' stamp: 'janko 8/6/2011 19:49'!
other
	^other! !

!Party methodsFor: 'private' stamp: 'janko 8/6/2011 19:43'!
otherAt: aString
	^self otherAt: aString ifAbsent: [nil]! !

!Party methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aString ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aString ifAbsent: [aBlock value]! !

!Party methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOtherValues].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!Party methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aString put: anObject
	self other isNil ifTrue: [self initOtherValues].
	^self other at: aString put: anObject! !

!Party methodsFor: 'private' stamp: ' 10/1/08 16:40'!
partialyConnectedRoles
	"roles, which are not correctly connected to related party and back"
	"not working well yet !!!!!! "
	| col |
	col := self roles reject: [:each | each relatedParty roles contains: [:role | role relatedParty == self] ].
	col addAll: (self relatedPartyRoles 
		reject: [:each | each relatedParty roles contains: [:role | role party == self] ]).
	^col

"Company allInstances select: [:each | each partialyConnectedRoles notEmpty]"! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
phone
	^self mainAddress phone! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
phone: aString
	self mainAddress phone: aString! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
post
	^self mainAddress post! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
post: anObject
	^self mainAddress post: anObject! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
postalCode
	^self mainAddress postalCode! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
postalCode: aString
	self mainAddress postalCode: aString! !

!Party methodsFor: 'private' stamp: ' 10/1/08 16:40'!
printString
	^'party: ', self name! !

!Party methodsFor: 'private' stamp: ' 10/1/08 16:40'!
reconnectEmployees
	"for debugging"
	self allEmployees do: [:each | self removeEmployee: each; addEmployee: each]! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
relatedObjects
	relatedObjects isNil ifTrue: [self initRelatedObjects].
	^relatedObjects! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
relatedParty
	"which party is the 'owner', e.g. doing business in elogis terms with that party"

	| thirdPLCustomers parties |
	thirdPLCustomers := LogisticSystem default owner all3PLCustomers.
	parties := thirdPLCustomers select: [:party | party isSupplierTo: self].
	^parties isEmpty 
		ifTrue: 
			[parties := thirdPLCustomers select: [:party | party isCustomerOf: self].
			parties isEmpty ifTrue: [^nil] ifFalse: [parties first] ]
		ifFalse: [parties first]! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
relatedPartyRoles
	relatedPartyRoles isNil ifTrue: [self initRelatedPartyRoles].
	^relatedPartyRoles! !

!Party methodsFor: 'related objects' stamp: ' 10/1/08 16:40'!
removeRelatedObject: anObject
	self relatedObjects remove: anObject ifAbsent: []! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
removeRoleGroup: aRoleGroup
	(self roleGroups includes: aRoleGroup) ifTrue: [self roleGroups remove: aRoleGroup]! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
roleGroupNamed: aString
	^self roleGroups detect: [:each | each name = aString] ifNone: [nil]! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
roleGroupWithUuid: aString
	^self roleGroups detect: [:each | each uuid = aString] ifNone: [nil]! !

!Party methodsFor: 'role groups' stamp: 'janko 8/6/2011 19:39'!
roleGroups
	(self otherAt: #roleGroups) isNil ifTrue: 
		[self otherAt: #roleGroups put: OrderedCollection new].
	^self otherAt: #roleGroups! !

!Party methodsFor: 'role groups' stamp: ' 10/1/08 16:40'!
roleGroupsIncludeRole: aRole
	^self roleGroups select: [:each | each includes: aRole]! !

!Party methodsFor: 'roles-basic'!
roleNamed: aString
	"find a role with that name"
	^self roles detect: [:each | each name = aString] ifNone: [nil]! !

!Party methodsFor: 'accessing'!
roleNames
	"names of roles this party plays"
	^self roles collect: [:each | each name].! !

!Party methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
roles
	roles isNil ifTrue: [self initRoles].
	^roles! !

!Party methodsFor: 'accessing'!
rolesText
	"names of roles this party plays, in one string separated with commas"
	| text |
	text := ''.
	1 to: self roleNames size do: [:inx |
		text := text, (self roleNames at: inx).
		inx = self roleNames size ifFalse: [text := text, ', '] ].
	^text! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
searchEmployeesWithSurname: aSurname name: aName
	| surname nme |
	surname := aSurname asLowercase, '*'. nme := aName asLowercase, '*'.
	^self allEmployees select: [:each | 
		(surname match: each surname asLowercase) and: [nme match: each name asLowercase] ]! !

!Party methodsFor: 'roles-specific' stamp: ' 10/1/08 16:40'!
searchEmployeesWithSurnameName: aString
	| string nm |
	string := aString asLowercase, '*'. 
	^self allEmployees select: [:each | 
		nm := each surnameName asLowercase.
		(string match: nm)].! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
street
	^self mainAddress street! !

!Party methodsFor: 'addresses' stamp: ' 10/1/08 16:40'!
street: aString
	self mainAddress street: aString! !

!Party methodsFor: 'changing' stamp: ' 10/1/08 16:40'!
updateFrom: aParty
	self name: aParty name.
	self description: aParty description.
	self city: aParty city.
	self street: aParty street.
	self postalCode: aParty postalCode.! !

!Party methodsFor: 'accessing' stamp: 'janko 8/6/2011 19:43'!
uuid
	"unique identifier "
	^self otherAt: #uuid ifAbsentPut: [(AIDASite random next * 1000000000) rounded printString]! !

!Party class methodsFor: 'instance creation' stamp: ' 10/1/08 16:40'!
newCustomerOf: aParty

	^super new
		becomeCustomerOf: aParty! !

!Party class methodsFor: 'instance creation' stamp: ' 10/1/08 16:40'!
newSupplierTo: aParty

	^super new
		becomeSupplierTo: aParty! !

!Party class methodsFor: 'odb specific' stamp: ' 10/1/08 16:40'!
replicationSpec
	"Gemstone"
	^super replicationSpec , 
		#( 	(id 	replicate)
			(name replicate)
			(description replicate)
			(addresses max 4)
			(roles max 2)
			(relatedPartyRoles max 2)
			(events forwarder)
			(relatedObjects max 1) )! !

!PartyCollection methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
add: aPartyOrRole
	"anOrganizationalUnit, aRole, aRoleGroup or aPerson"
	self parties add: aPartyOrRole! !

!PartyCollection methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
addAll: aPartyCollection
	aPartyCollection do: [:each | self add: each]! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
all
	^self parties copy! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allJobRoles
	^self parties select: [:each | each isKindOf: JobRole].! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allOrgUnits
	^self parties select: [:each | each isKindOf: OrganizationUnit].! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
allParentJobRoles
	^self parent allOrgUnits
		inject: OrderedCollection new into: [:col :each | col addAll: each allJobRoles; yourself]! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
allParentOrgUnits
	^self parent allOrgUnits! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
allParentOrgUnitsRolesPersons
	"sorted in that order.."
	| all |
	all := (SortedCollection withAll: self allParentOrgUnits sortBlock: [:a :b | a name < b name]) 
		asOrderedCollection.
	all addAll: (SortedCollection withAll: self allParentRoleGroups sortBlock: [:a :b | a name < b name]).
	all addAll: (SortedCollection withAll: self allParentJobRoles sortBlock: [:a :b | a name < b name]).
	all addAll: (SortedCollection withAll: self allParentPersons 
		sortBlock: [:a :b | a surnameName < b surnameName]).
	^all! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
allParentPersons
	^self parent allEmployees! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
allParentRoleGroups
	^self parent allRoleGroups! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allPersons
	"both individual, from job roles and from org.units"
	| persons |
	persons := self onlyPersons asSet.
	persons := self allOrgUnits inject: persons into: [:set :each | set addAll: each allMembers; yourself].
	persons addAll: self allPersonsFromJobRoles.
	persons addAll: self allPersonsFromRoleGroups.
	^persons asOrderedCollection! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allPersonsFromJobRoles
	| jobRoles  |
	jobRoles := self allJobRoles asSet.
	^self allParentPersons select: [:each |
		each jobRole notNil and: [jobRoles includes: each jobRole parentRole] ].

"	^self allJobRoles inject: Set new into: [:set :each | set addAll: each allPersons; yourself]."! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allPersonsFromOrgUnit: anOrgUnit
	| members |
	members := anOrgUnit allMembers asSet.
	^self allPersons select: [:each | members includes: each]! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allPersonsFromRoleGroups
	| jobRoles |
	jobRoles := self allRoleGroups inject: Set new into: [:set :each | set addAll: each allRoles; yourself].
	^self allParentPersons select: [:each |
		each jobRole notNil and: [jobRoles includes: each jobRole parentRole] ]! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allRoleGroups
	^self parties select: [:each | each isKindOf: RoleGroup].! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
allSorted
	"org.unitss first, then role groups, roles, persons"
	| all |
	all := (SortedCollection withAll: self allOrgUnits sortBlock: [:a :b | a name < b name]) 
		asOrderedCollection.
	all addAll: (SortedCollection withAll: self allRoleGroups sortBlock: [:a :b | a name < b name]).
	all addAll: (SortedCollection withAll: self allJobRoles sortBlock: [:a :b | a name < b name]).
	all addAll: (SortedCollection withAll: self onlyPersons 
		sortBlock: [:a :b | a surnameName < b surnameName]).
	^all! !

!PartyCollection methodsFor: 'accessing'!
allSortedText
	"org.unitss first, then role groups, roles, persons, as text"
	| sorted text |
	sorted := self allSorted asOrderedCollection.
	text := ''.
	sorted do: [:each |
		(each isKindOf: Person) ifTrue: [text := text, each surnameName].
		(each isKindOf: OrganizationUnit) ifTrue: [text := text, each name].
		(each isKindOf: RoleGroup) ifTrue: [text := text, each name].
		each = sorted last ifFalse: [text := text, ', '] ].
	^text! !

!PartyCollection methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
from: aPartyCollection
	self initParties.
	self addAll: aPartyCollection! !

!PartyCollection methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
includes: aPartyOrRole
	^self parties includes: aPartyOrRole! !

!PartyCollection methodsFor: 'initialize-release' stamp: ' 10/1/08 16:40'!
initParties
	parties := OrderedCollection new.! !

!PartyCollection methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
notEmpty
	^self parties notEmpty! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
onlyPersons
	"just individual persons"
	^self parties select: [:each | each isKindOf: Person]! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
parent
	^parent! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
parent: aCompany
	"a root company, containing those mix of parties"
	parent := aCompany! !

!PartyCollection methodsFor: 'accessing-parent' stamp: ' 10/1/08 16:40'!
parentPartyOrRoleNamed: aString
	(aString isNil or: [aString isEmpty]) ifTrue: [^nil].
	^self allParentOrgUnitsRolesPersons detect: [:each | each nameToDisplay = aString] ifNone: [nil].! !

!PartyCollection methodsFor: 'private' stamp: ' 10/1/08 16:40'!
parties
	parties isNil ifTrue: [self initParties].
	^parties! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
partyOrRoleNamed: aString
	^self parties detect: [:each | each nameToDisplay = aString] ifNone: [nil].! !

!PartyCollection methodsFor: 'adding-removing' stamp: ' 10/1/08 16:40'!
remove: aPartyOrRole
	"anOrganizationalUnit, aRole, aRoleGroup or aPerson"
	self parties remove: aPartyOrRole! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
size
	^self parties size! !

!PartyCollection methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
sort
	"permanently sort a parties collection"
	self from: self allSorted! !

!PartyCollection class methodsFor: 'instance creation' stamp: ' 10/1/08 16:40'!
newOn: aCompany
	^super new parent: aCompany! !

!PartyCollection class methodsFor: 'instance creation' stamp: ' 10/1/08 16:40'!
newOn: aCompany from: aPartyCollection
	^(self newOn: aCompany) from: aPartyCollection! !

!Person methodsFor: 'record flows' stamp: ' 10/1/08 16:40'!
activitiesNotified
	"all process activities on which this person is notified"
	| activities set |
	activities := self allRecordFlows collect: [:each | each activity].
	set := Set new: activities size. "remove duplicates, preserve order"
	^activities select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'responsibilities' stamp: ' 10/1/08 16:40'!
activitiesResponsible
	"all process activities where this person have some kind of responsibility"
	| activities set |
	activities := (self allResponsibilities select: [:each | each isTaskResponsibility])
		collect: [:each | each task activity].
	set := Set new: activities size. "remove duplicates, preserve order"
	^activities select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
allDeputies
	"all deputies of that person"
	^(self relatedPartyRoles select: [:role | role isDeputyRole]) collect: [:each | each party]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
allDeputyOf
	"all persons to whom that person is deputy"
	^(self roles select: [:role | role isDeputyRole]) collect: [:each | each relatedParty]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
allOrgUnits
	"all org.units where person is member"
	^((self roles select: [:role | role isMemberRole]) collect: [:role | role relatedParty]) asSet.! !

!Person methodsFor: 'record flows' stamp: ' 10/1/08 16:40'!
allRecordFlows
	"all record flows, concerned to that person"
	| flows set |
	flows := OrderedCollection new.
	self repository root allProcesses do: [:process | 
		process allTasks do: [:task | flows addAll: task allRecordFlows] ].
	set := Set new. self jobRole isNil ifTrue: [^#()].
	set add: self jobRole parentRole.
	set addAll: (self repository company roleGroupsIncludeRole: self jobRole parentRole).
	^flows select: [:flow | set includes: flow destination]! !

!Person methodsFor: 'responsibilities' stamp: 'jm 4/22/2009 23:04'!
allResponsibilities
	"search for all responsibilities through document repository, specially processes"
	| resps set |
	resps := OrderedCollection new. self repository isNil ifTrue: [^resps].
	self repository root allProcesses do: [:process |
		process allTasks do: [:task | resps addAll: task responsible] ].
	set := Set new. self jobRole isNil ifTrue: [^#()].
	set add: self jobRole parentRole.
	set addAll: (self repository company roleGroupsIncludeRole: self jobRole parentRole).
	^resps select: [:resp | set includes: resp role]! !

!Person methodsFor: 'responsibilities' stamp: ' 10/1/08 16:40'!
allTaskResponsibilities
	^self allResponsibilities select: [:each | each isTaskResponsibility]! !

!Person methodsFor: 'accessing' stamp: 'mivsek 1/10/2008 16:46'!
asICalUser
	^ICUser new
		commonName: self nameSurname  asSloveneWithoutCircumflexes "Outlook!!" ;
		emailAddress: self email! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
asPerson
	^self! !

!Person methodsFor: 'accessing' stamp: 'janko 8/6/2011 19:42'!
asWebUser
	"parallel WebUser object"
	^self otherAt: #WebUser ifAbsent: [^nil]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
becomeDeputyOf: aPerson
	| role |
	(self isDeputyOf: aPerson) ifTrue: [^false].
	role := DeputyRole new.
	role name: 'deputy role'.
	self newRole: role relatedTo: aPerson.! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
becomeEmployeeOf: aParty 
	"I become an employee of that party"
	| role |
	(self isEmployeeOf: aParty) ifTrue: [^false].
	role := EmployeeRole new.
	role name: 'employee role'.
	self newRole: role relatedTo: aParty.

	self noMoreFormerEmployeeOf: aParty "if it was former before"! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
becomeFormerEmployeeOf: aParty 
	"I become an employee of that party"
	| role |
	(self isFormerEmployeeOf: aParty) ifTrue: [^false].
	role := FormerEmployeeRole new.
	role name: 'former employee role'.
	self newRole: role relatedTo: aParty! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
becomeMemberOf: anOrgUnit 
	"I become a member  of that org.unit"
	| role |
	(self isMemberOf: anOrgUnit) ifTrue: [^false].
	role := MemberRole new.
	role name: 'member role'.
	self newRole: role relatedTo: anOrgUnit! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
company
	"in which he is employeed"
	| parties |
	parties :=  (self roles select: [:role | role isEmployeeRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isEmployeeRole]) 
			collect: [:each | each party]);
		yourself.
	^parties isEmpty ifTrue: [nil] ifFalse: [parties first]! !

!Person methodsFor: 'documents' stamp: ' 10/1/08 16:40'!
documentsToKnow
	"all documents with which this person should know about (be notified)"
	^self repository root allDocuments select: [:each | each isReleased and: [each shouldKnow: self]].! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
email
	^self asWebUser notNil 
		ifTrue: [self asWebUser email]
		ifFalse: [super email].! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
email: aString 
	self asWebUser notNil 
		ifTrue: [self asWebUser email: aString]
		ifFalse: [super email: aString].! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
haveDeputies
	^self relatedPartyRoles contains: [:role | role isDeputyRole].! !

!Person methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:42'!
integratedWithOffice
	"WebDAV integration on MS IE"
	^self otherAt: #integratedWithOffice ifAbsent: [false]! !

!Person methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
integratedWithOffice: aBoolean
	"WebDAV integration on MS IE"
	self otherAt: #integratedWithOffice put: aBoolean.! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
isDeputy
	^self roles contains: [:role | role isDeputyRole].! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
isDeputyOf: aPerson
	^self roles contains: [:role | role relatedParty == aPerson and: [role isDeputyRole] ].! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
isEmployeeOf: aParty
	| employee |
	employee := self roles contains: [:role | role relatedParty == aParty and: [role isEmployeeRole] ].
	employee ifTrue: [^true].
	"check also a complementary role"
	^self relatedPartyRoles contains: [:role | role party == aParty and: [role isEmployeeRole] ].! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
isFormerEmployeeOf: aParty
	| formerEmployee |
	formerEmployee := self roles contains: [:role | 
		role relatedParty == aParty and: [role isFormerEmployeeRole]].
	formerEmployee ifTrue: [^true].
	"check also a complementary role"
	^self relatedPartyRoles contains: [:role | role party == aParty and: [role isFormerEmployeeRole] ].! !

!Person methodsFor: 'roles - testing' stamp: ' 10/1/08 16:40'!
isMemberOf: anOrgUnit
	| isMember |
	isMember := self roles contains: [:role | role relatedParty == anOrgUnit and: [role isMemberRole] ].
	isMember ifTrue: [^true].
	"check also a complementary role"
	^self relatedPartyRoles contains: [:role | role party == anOrgUnit and: [role isMemberRole] ].! !

!Person methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isPerson
	^true! !

!Person methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isWebUser
	^false! !

!Person methodsFor: 'testing' stamp: ' 10/1/08 16:40'!
isWebUserGroup
	^false! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
jobParentRole
	self jobRole isNil ifTrue: [^nil].
	^self jobRole parentRole.! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
jobRole
	^self roles detect: [:role | role isJobRole] ifNone: [^nil].! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
jobRoleName
	^self jobRole notNil ifTrue: [self jobRole name] ifFalse: [''].! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
jobRoleNamed: aString
	"org.unit should have this job role already defined!!"
	| parentRole |
	self organizationUnit isNil ifTrue: [^nil].
	parentRole := self organizationUnit jobRoleNamed: aString. parentRole isNil ifTrue: [^nil].
	self jobRole notNil ifTrue: [self removeJobRole].
	self newRole: parentRole newChildRole relatedTo: self company! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
menuName
	"in dropdown menus"
	^self surnameName! !

!Person methodsFor: 'private' stamp: ' 10/1/08 16:40'!
migrateToUnicode
	"from iso8859-2"
	"Person allInstances do: [:each | each migrateToUnicode]"
	super migrateToUnicode.
	surname notNil ifTrue: [surname := surname ensureUnicodeSloveneChars].! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
nameSurname
	^self name, ' ', self surname! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
nameToDisplay
	"on web pages for instance"
	^self surnameName! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
noMoreDeputyOf: aPerson
	| role |
	role := self roles 
		detect: [:each | each relatedParty == aPerson and: [each isDeputyRole] ] ifNone: [nil].
	role notNil ifTrue: [self discontinueRole: role].
	role := aPerson relatedPartyRoles 
		detect: [:each | each relatedParty == self and: [each isDeputyRole] ] ifNone: [nil].
	role notNil ifTrue: [aPerson discontinueRole: role].! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
noMoreEmployeeOf: aParty 
	"no more an employee of related party"
	| role |
	role := self roles 
		detect: [:each | each relatedParty == aParty and: [each isEmployeeRole] ] ifNone: [nil].
	role notNil ifTrue: [self discontinueRole: role].
	role := aParty relatedPartyRoles 
		detect: [:each | each relatedParty == self and: [each isEmployeeRole] ] ifNone: [nil].
	role notNil ifTrue: [aParty discontinueRole: role].

	self becomeFormerEmployeeOf: aParty.! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
noMoreFormerEmployeeOf: aParty 
	| role |
	role := self roles 
		detect: [:each | each relatedParty == aParty and: [each isFormerEmployeeRole] ] ifNone: [nil].
	role notNil ifTrue: [self discontinueRole: role].
	role := aParty relatedPartyRoles 
		detect: [:each | each relatedParty == self and: [each isFormerEmployeeRole] ] ifNone: [nil].
	role notNil ifTrue: [aParty discontinueRole: role].! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
noMoreMemberOf: anOrgUnit 
	"no more a memebr of related party"
	(self isMemberOf: anOrgUnit) ifFalse: [^nil].
	self discontinueRole:
		(self roles detect: [:role | role relatedParty == anOrgUnit and: [role isMemberRole] ] ifNone: [^nil])! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
organizationUnit
	"in which he is a member"
	| parties |
	parties :=  (self roles select: [:role | role isMemberRole]) 
		collect: [:each | each relatedParty].
	parties := parties addAll:
		((self relatedPartyRoles select: [:role | role isMemberRole]) 
			collect: [:each | each party]);
		yourself.
	^parties isEmpty ifTrue: [nil] ifFalse: [parties first]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
organizationUnit: anOrganizationUnit
	self allOrgUnits do: [:each | self noMoreMemberOf: each].
	anOrganizationUnit notNil ifTrue: [self becomeMemberOf: anOrganizationUnit]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
organizationUnitName
	^self organizationUnit notNil ifTrue: [self organizationUnit name] ifFalse: ['']! !

!Person methodsFor: 'accessing' stamp: 'janko 3/16/2008 17:00'!
password
	self asWebUser notNil ifTrue: [^self asWebUser password].
	^nil! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
password: aString 
	self asWebUser notNil ifTrue: [^self asWebUser password: aString trimBlanks].! !

!Person methodsFor: 'accessing' stamp: 'np 10/20/2008 16:38'!
passwordText
	"password is encripted/invisible anway, so return just empty "
	^''! !

!Person methodsFor: 'accessing' stamp: 'np 10/20/2008 16:38'!
passwordText: aString
	aString = self passwordText "all *****, this means that password was not changed"
		ifTrue: [^nil]. 
	aString trimBlanks isEmpty ifTrue: [^nil].
	^self password: aString! !

!Person methodsFor: 'private' stamp: 'janko 3/19/2012 13:21'!
preferredUrl
	| nme |
	nme := self surnameName trimBlanks asSloveneWithoutCircumflexes.
	^'/oseba/', nme asHttpFriendly.

"Person allInstances do: [:each | 
	each repository notNil ifTrue: [each repository site urlResolver changeToPreferedURL: each] ]"! !

!Person methodsFor: 'private' stamp: ' 10/1/08 16:40'!
printString
	^'Person: ', self name, ' ', self surname! !

!Person methodsFor: 'record flows' stamp: ' 10/1/08 16:40'!
processesNotified
	"all processes where on which this person is notified"
	| processes set |
	processes := self allRecordFlows collect: [:each | each process].
	set := Set new: processes size. "remove duplicates, preserve order"
	^processes select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'responsibilities' stamp: ' 10/1/08 16:40'!
processesResponsible
	"all processes where this person have some kind of responsibility"
	| processes set |
	processes := self allResponsibilities collect: [:each | each process].
	set := Set new: processes size. "remove duplicates, preserve order"
	^processes select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
removeJobRole
	self jobRole notNil ifTrue: [self discontinueRole: self jobRole].! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
repository
	self organizationUnit notNil ifTrue: [^self organizationUnit repository].
	^self company notNil ifTrue: [self company repository] ifFalse: [nil].! !

!Person methodsFor: 'roles - specific' stamp: ' 10/1/08 16:40'!
specialRoleCollection
	"a set of additional roles by person's org.unit and org.hierarch up to the top"
	^self organizationUnit notNil
		ifTrue: [self organizationUnit specialRoleCollection]
		ifFalse: [self company notNil
			ifTrue: [self company specialRoleCollection]
			ifFalse: [OrderedCollection new] ].! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
surname
	surname isNil ifTrue: [self surname: ''].
	^surname! !

!Person methodsFor: 'accessing' stamp: 'janko 3/16/2008 17:00'!
surname: aString
	surname := aString trimBlanks! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
surnameName
	^self surname, ' ', self name! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
surnameName2
	^self surnameName trimBlanks notEmpty 
		ifTrue: [self surnameName]
		ifFalse: ['--brez priimka in imena---']! !

!Person methodsFor: 'record flows' stamp: ' 10/1/08 16:40'!
tasksNotified
	"all process tasks  on which this person is notified"
	| tasks set |
	tasks := self allRecordFlows collect: [:each | each task].
	set := Set new: tasks size. "remove duplicates, preserve order"
	^tasks select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'responsibilities' stamp: ' 10/1/08 16:40'!
tasksResponsible
	"all process tasks where this person have some kind of responsibility"
	| tasks set |
	tasks := (self allResponsibilities select: [:each | each isTaskResponsibility]) 
		collect: [:each | each task].
	set := Set new: tasks size. "remove duplicates, preserve order"
	^tasks select: [:each || exist | exist := set includes: each. set add: each. exist not]! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
username
	self asWebUser notNil ifTrue: [^self asWebUser username].
	^nil! !

!Person methodsFor: 'accessing' stamp: ' 10/1/08 16:40'!
username: aString 
	self asWebUser notNil ifTrue: [^self asWebUser username: aString trimBlanks].! !

!Person methodsFor: 'accessing' stamp: 'janko 8/6/2011 19:38'!
webUser: aWebUser
	"a parallel WebUser for web server security etc."
	self otherAt: #WebUser put: aWebUser.
	(aWebUser otherAt: #Person) ~= self ifTrue: [aWebUser person: self].! !

!Person class methodsFor: 'instance creation'!
newWithRelatedWebUserOn: anAIDASite
	| instance |
	instance := super new.
	instance webUser: (anAIDASite webUserClass new person: instance; parent: anAIDASite securityManager).
	^instance! !

!PositionableStream methodsFor: '*Aida' stamp: 'JM 4/26/2007 14:28'!
upToSeparator
	"Answer a subcollection from position to the occurrence (if any, exclusive) of a separator.
	The stream is left positioned after the separator.
	If no separator is found answer everything."

	| newStream element |
	newStream := collection class new writeStream.
	[self atEnd]
		whileFalse:
			[element := self next.
			element isSeparator
				ifTrue: [^newStream contents].
			newStream nextPut: element.].
	^newStream contents
	
" 'abc def' readStream upToSeparator"
! !

!Role methodsFor: 'initialize-release' stamp: 'janko 8/8/2011 18:09'!
initOther
	other := Dictionary new.! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isCustomerRole
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isDeputyRole
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isEmployeeRole
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isFormerEmployeeRole
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isJobRole
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isMemberRole
	^false! !

!Role methodsFor: 'testing'!
isPerson
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isRole
	^true! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isRoleGroup
	^false! !

!Role methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isSupplierRole
	^false! !

!Role methodsFor: 'private' stamp: ' 10/1/08 16:41'!
migrateToUnicode
	"from iso8859-2"
	name notNil ifTrue: [name := name ensureUnicodeSloveneChars].! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
name
	^name! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
name: aString
	name := aString.! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
nameToDisplay
	^self name! !

!Role methodsFor: 'private' stamp: 'janko 8/8/2011 18:07'!
other
	^other! !

!Role methodsFor: 'private' stamp: 'janko 8/8/2011 18:07'!
otherAt: aSymbol
	"other values"
	^self otherAt: aSymbol ifAbsent: [nil]! !

!Role methodsFor: 'private' stamp: 'janko 8/8/2011 18:08'!
otherAt: aSymbol ifAbsent: aBlock
	"other values"
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!Role methodsFor: 'private' stamp: 'janko 8/8/2011 18:08'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!Role methodsFor: 'private' stamp: 'janko 8/8/2011 18:08'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
party
	^party! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
party: aParty
	party := aParty.! !

!Role methodsFor: 'private' stamp: ' 10/1/08 16:41'!
printString
	^'aRole ', self name! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
relatedParty
	^relatedParty! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
relatedParty: aParty
	relatedParty := aParty.! !

!Role methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
uuid
	"some unique identifier. Hash for now, probably unique enough!! "
	^self hash printString! !

!RoleGroup methodsFor: 'adding-removing' stamp: ' 10/1/08 16:41'!
add: aRoleOrGroup
	(self subroles includes: aRoleOrGroup) ifFalse: [self subroles add: aRoleOrGroup]! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
allPersonsWithJobRoles
	"collect all persons holding job roles as part of that role group"
	^self allRoles inject: Set new into: [:set :role | set addAll: role allPersons; yourself].! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
allRoleGroups
	^self subroles select: [:each | each isRoleGroup]! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
allRoles
	^self subroles select: [:each | each isRole]! !

!RoleGroup methodsFor: 'adding-removing' stamp: ' 10/1/08 16:41'!
includes: aRoleOrGroup
	^self subroles includes: aRoleOrGroup! !

!RoleGroup methodsFor: 'private' stamp: ' 10/1/08 16:41'!
initSubroles
	subroles := OrderedCollection new.! !

!RoleGroup methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isPerson
	^false! !

!RoleGroup methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isRole
	^false! !

!RoleGroup methodsFor: 'testing' stamp: ' 10/1/08 16:41'!
isRoleGroup
	^true! !

!RoleGroup methodsFor: 'private' stamp: ' 10/1/08 16:41'!
migrateToUnicode
	"from iso8859-2"
	name notNil ifTrue: [name := name ensureUnicodeSloveneChars].! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
name
	^name! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
name: aString
	name := aString.! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
nameToDisplay
	^name! !

!RoleGroup methodsFor: 'private' stamp: ' 10/1/08 16:41'!
printString
	^'aRoleGroup ', self name! !

!RoleGroup methodsFor: 'adding-removing' stamp: ' 10/1/08 16:41'!
remove: aRoleOrGroup
	(self subroles includes: aRoleOrGroup) ifTrue: [self subroles remove: aRoleOrGroup]! !

!RoleGroup methodsFor: 'private' stamp: ' 10/1/08 16:41'!
subroles
	subroles isNil ifTrue: [self initSubroles].
	^subroles! !

!RoleGroup methodsFor: 'accessing' stamp: ' 10/1/08 16:41'!
uuid
	"some unique identifier. Hash for now, probably unique enough!! "
	^self hash printString! !

!ScaledDecimal methodsFor: '*Aida' stamp: 'janko 8/3/2011 15:27'!
asScaledDecimal: aScaleInteger
	^self class newFromNumber: self scale: aScaleInteger

! !

!ScaledDecimal methodsFor: '*Aida' stamp: 'janko 8/3/2011 20:57'!
printDotString
	"Janko Mivsek, 1997"
	"format and return the number with dots between thousandths:  '3.120.123' "
	"1234.12s4 printDotString"
	| denom n quo rem stream |
	stream := WriteStream on: String new.
	denom := 10 raisedTo: scale.
	n := numerator * denom + (denominator bitShift: -1) // denominator.
	numerator < 0 ifTrue:
		[stream nextPut: $-.  n := n negated].
	quo := n // denom. rem := n \\ denom.
	stream nextPutAll: quo printDotString.
	scale > 0 ifTrue:
		[stream nextPut: $, .
		scale timesRepeat:
			[rem := rem*10.
			stream nextPut: (Character digitValue: rem//denom).
			rem := rem \\ denom]].
	^stream contents.! !

!ScaledDecimal methodsFor: '*Aida' stamp: 'janko 8/3/2011 20:58'!
printDotStringNoZero
	"don't print anything if zero"
	^self ~= 0 ifTrue: [self printDotString] ifFalse: ['']! !

!SchedulerTest methodsFor: 'running' stamp: 'jm 4/26/2009 15:40'!
setUp
	scheduler := WebScheduler newOn: nil.
	scheduler start.! !

!SchedulerTest methodsFor: 'running' stamp: ' 21/4/07 22:08'!
tearDown
	scheduler stop.! !

!SchedulerTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 20:54'!
testAddingSingleEvent
"	scheduler at: SpTimestamp now callMethod: #transcript of: self. "! !

!SchedulerTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 20:54'!
testAddingSingleEvent2
	"look at Transcript!! "
	| time |
	time := SpTimestamp fromSeconds: (SpTimestamp now asSeconds + 1).
	scheduler at: time runBlock: [self transcript].
	(Delay forSeconds: 2) wait.! !

!SchedulerTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testMinutePeriodicEvent
	"it should write twice to transcript in 2 minutes!! "
	scheduler everyMinuteAt: 30 runBlock: [self transcript].
"	(Delay forSeconds: 120) wait "! !

!SchedulerTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 20:58'!
testMoreMinutePeriodicEvents
	"it should write to transcript in 2 minutes!! "
"	scheduler everyMinuteAt: 30 runBlock: [self transcript1].
	scheduler everyMinuteAt: 15 runBlock: [self transcript2].
	scheduler everyMinuteAt: 45 runBlock: [self transcript3].
	scheduler everyMinuteAt: 20 runBlock: [self transcript4].
""	(Delay forSeconds: 120) wait"! !

!SchedulerTest methodsFor: 'testing-queue order' stamp: 'mivsek 8/22/2007 20:57'!
testOrderOf2AscEvents
	scheduler stop. "just testing order in queue!!"
"	scheduler everyMinuteAt: 15 runBlock: [self transcript1].
	scheduler everyMinuteAt: 30 runBlock: [self transcript2].
	self assert: (scheduler queue at: 1) period value = 15.
	self assert: (scheduler queue at: 2) period value = 30.
"! !

!SchedulerTest methodsFor: 'testing-queue order' stamp: 'mivsek 8/22/2007 20:57'!
testOrderOf2DescEvents
	scheduler stop. "just testing order in queue!!"
"	scheduler everyMinuteAt: 30 runBlock: [self transcript1].
	scheduler everyMinuteAt: 15 runBlock: [self transcript2].
	self assert: (scheduler queue at: 1) period value = 15.
	self assert: (scheduler queue at: 2) period value = 30.
"! !

!SchedulerTest methodsFor: 'testing-queue order' stamp: 'mivsek 8/22/2007 20:57'!
testOrderOf3AscEvents
	scheduler stop. "just testing order in queue!!"
"	scheduler everyMinuteAt: 15 runBlock: [self transcript1].
	scheduler everyMinuteAt: 30 runBlock: [self transcript2].
	scheduler everyMinuteAt: 45 runBlock: [self transcript3].
	self assert: (scheduler queue at: 1) period value = 15.
	self assert: (scheduler queue at: 2) period value = 30.
	self assert: (scheduler queue at: 3) period value = 45.
"! !

!SchedulerTest methodsFor: 'testing-queue order' stamp: 'mivsek 8/22/2007 20:58'!
testOrderOf3DescEvents
	scheduler stop. "just testing order in queue!!"
"	scheduler everyMinuteAt: 45 runBlock: [self transcript1].
	scheduler everyMinuteAt: 30 runBlock: [self transcript2].
	scheduler everyMinuteAt: 15 runBlock: [self transcript3].
	self assert: (scheduler queue at: 1) period value = 15.
	self assert: (scheduler queue at: 2) period value = 30.
	self assert: (scheduler queue at: 3) period value = 45.
"! !

!SchedulerTest methodsFor: 'testing-queue order' stamp: 'mivsek 8/22/2007 20:58'!
testOrderOf3MixedEvents
	scheduler stop. "just testing order in queue!!"
"	scheduler everyMinuteAt: 15 runBlock: [self transcript1].
	scheduler everyMinuteAt: 45 runBlock: [self transcript2].
	scheduler everyMinuteAt: 30 runBlock: [self transcript3].
	self assert: (scheduler queue at: 1) period value = 15.
	self assert: (scheduler queue at: 2) period value = 30.
	self assert: (scheduler queue at: 3) period value = 45.
"! !

!SchedulerTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSetup! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript
	Transcript cr; show: 'scheduled event'! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript1
	Transcript cr; show: 'scheduled event 1'! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript2
	Transcript cr; show: 'scheduled event 2'! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript3
	Transcript cr; show: 'scheduled event 3'! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript4
	Transcript cr; show: 'scheduled event 4'! !

!SchedulerTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
transcript5
	Transcript cr; show: 'scheduled event 5'! !

!SpDate methodsFor: '*Aida' stamp: 'JM 4/22/2007 19:01'!
+ aNumber 
	^self addDays: aNumber! !

!SpDate methodsFor: '*Aida' stamp: 'JM 4/22/2007 19:01'!
- aNumber 
	"subtract number of days from a date."
	^self subtractDays: aNumber! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:36'!
currentMonth
	^self currentYear and: [self monthIndex = SpDate today monthIndex]! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:37'!
currentYear
	^self year = SpDate today year! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:37'!
firstDayInMonth
	^SpDate newDay: 1 month: self monthIndex year: self year! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:38'!
firstDayInNextMonth
	^SpDate 
		newDay: 1 
		month: (self lastDayInMonth addDays: 1) monthIndex
		year: (self lastDayInMonth addDays: 1) year! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:38'!
firstDayInNextYear
	^SpDate 
		newDay: 1
		month: self firstDayInMonth monthIndex
		year: self firstDayInMonth year + 1! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:38'!
firstDayInPreviousMonth
	^SpDate 
		newDay: 1
		month: (self firstDayInMonth subtractDays: 1) monthIndex
		year: (self firstDayInMonth subtractDays: 1) year! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:38'!
firstDayInPreviousYear
	^SpDate 
		newDay: 1
		month: self firstDayInMonth monthIndex
		year: self firstDayInMonth year + 1! !

!SpDate methodsFor: '*Aida' stamp: 'np 10/22/2008 23:39'!
lastDayInMonth
	^SpDate newDay: self daysInMonth month: self monthIndex year: self year! !

!SpDate methodsFor: '*Aida' stamp: 'np 1/22/2008 12:20'!
monthAndDayString
	"with leading zeros, example: 05-16 for 16may"
	^(self monthIndex < 10 ifTrue: ['0'] ifFalse: ['']), self monthIndex printString, '-',
	 	(self underlyingDate dayOfMonth < 10 ifTrue: ['0'] ifFalse: ['']), self underlyingDate dayOfMonth printString

"SpDate today monthAndDayString"! !

!SpDate methodsFor: '*Aida' stamp: 'JM 4/22/2007 19:02'!
printISOString
	^self year printString, 
		(self monthIndex < 10 ifTrue: ['0'] ifFalse: ['']), self monthIndex printString,
		(self dayOfMonth < 10 ifTrue: ['0'] ifFalse: ['']), self dayOfMonth printString

"Date today printISOString   "! !

!SpDate methodsFor: '*Aida' stamp: 'JM 4/26/2007 19:56'!
shortPrintSloString
	^self underlyingDate dayOfMonth printString, '.', 
		self underlyingDate monthIndex printString, '.', self year printString.

"SpDate today shortPrintSloString"! !

!SpDate methodsFor: '*Aida' stamp: 'janko 9/30/2011 10:13'!
shorterPrintSloString
	"year in two digits only"
	| yeart |
	yeart := (self year \\ 100) printString. yeart size = 1 ifTrue: [yeart := '0', yeart].
	^self underlyingDate dayOfMonth printString, '.', self monthIndex printString, '.', yeart.

"Date today shorterPrintSloString"! !

!SpFilename methodsFor: '*Aida' stamp: 'np 3/18/2008 05:58'!
contentsAsMethod
	"return a body of method with a literal array with contents of that file"
	| input output |
	input := self readStream.
	input binary.
	output := WriteStream with: String new.
	output nextPutAll: '^#('.
	[ [input atEnd] whileFalse: [output nextPutAll: input next printString; nextPut: $ ].
	output nextPutAll: ')' ]
		ensure: [input close].
	^output contents

"(SpFilename named: 'source.st') contentsAsMethod "! !

!SpFilename methodsFor: '*Aida' stamp: 'janko 3/22/2008 17:17'!
contentsOfEntireFileBinary
	| stream |
	[stream := FileStream oldFileNamed: self filename.
	^stream binary contentsOfEntireFile]
		ensure: [stream close]
! !

!SpFilename methodsFor: '*Aida' stamp: 'np 6/11/2008 05:02'!
directoryContents
	| entries |
	entries := FileDirectory new directoryContentsFor: (self asAbsoluteFilename filename).
	^entries collect: [:each | each name]! !

!SpTimestamp methodsFor: '*Aida' stamp: 'jm 2/7/2011 13:04'!
>= anOSkTimeStamp 
	^self underlyingTimestamp >= anOSkTimeStamp underlyingTimestamp! !

!SpTimestamp methodsFor: '*Aida' stamp: 'jm 2/4/2011 21:26'!
printSloString
	^self asDate shortPrintSloString, ' ', self asTime printSloString
! !

!SpTimestamp methodsFor: '*Aida' stamp: 'JM 4/22/2007 15:33'!
sendOver: aStream 
	"from Wiki rendering"
	self printOn: aStream
"
	TimestampPrintPolicy 
		print: (TimeZone default convertToGMT: self asSeconds
				do: [:date :seconds | Timestamp fromDate: date andTime: (Time fromSeconds: seconds)])
		on: aStream
		using: 'ddd, dd mmm yyyy hh:mm:ss GMT'
"! !

!String methodsFor: '*Aida' stamp: 'np 3/25/2009 15:36'!
aidaIsAssociation
	"used for Aida/Web translation support, multilingual strings are namelly assocs: #fr->'Bonjour'"
	^false! !

!String methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:05'!
asCollectionOfHtmlHeadings
	"find all headings H1-5 and return a collection of headings, complete with tags"
	| in tag collection line |
	in := self readStream. collection := OrderedCollection new.
	[in atEnd] whileFalse:
		[in upTo: $<. in atEnd ifFalse: [tag := in upTo: $>].
		(tag size >= 2 and: [tag first asLowercase = $h and: [(tag at: 2) isDigit]] ) ifTrue:
			[tag := String with: $h with: (tag at: 2). "cleaned, without any parms!!"
			line := '<', tag, '>', (in upToAll: '</', tag, '>'), '</', tag, '>'. 
			collection add: line] ].
	^collection

" '<h1>Heading1</h1><h2>Heading2</h2>' asCollectionOfHtmlHeadings"
" '<h1><b>Heading1</b></h1>' asCollectionOfHtmlHeadings"! !

!String methodsFor: '*Aida' stamp: 'janko 8/25/2012 15:06'!
asHttpFriendly
	"Usefull specially for Url composition (like in preferedUrl). Converts all non Url friendly 
	characters to '-' and skip last point if exists (not good for Urls in emails).
 	Caution, / is also converted!! Unicode is allowed "
	| nonallowed conv |
	nonallowed := #($ $+ $: $> $< $= $/ #\ $~ $( $) ).
	self isEmpty ifTrue: [^self].
	conv := self collect: 
		[:ch | (nonallowed includes: ch)
			ifTrue: [$-]
			ifFalse: [ch] ].
	^(conv last = $. )
		ifTrue: [conv copyFrom: 1 to: conv size-1] "skip last point"
		ifFalse: [conv]

" '1+1=(3/4).d.d.' asHttpFriendly "! !

!String methodsFor: '*Aida' stamp: 'janko 8/3/2011 19:10'!
asScaledDecimal: aScaleNumber
	"Janko Mivsek, Eranova d.o.o. dec97, feb07, may11"
	"convert a string to a scaled decimal number with specified scale. Precision is remained as specified
	in fraction part of a number. Decimal point character is automatically detected and can be . or , "
	| string clean pos sign dpCh number denomString |
	string := self trimBlanks. string isEmpty ifTrue: [^0 asScaledDecimal: aScaleNumber].
	sign := string detect: [:ch | ch = $- | ch isDigit] ifNone: [^0.0s]. 
	sign = $- ifTrue: [sign := -1] ifFalse: [sign := 1].
	dpCh := string reverse detect: [:ch | ch isDigit not] ifNone: [$.].
	clean := string select: [:ch | ch isDigit | (ch = dpCh)].  clean isEmpty ifTrue: [^0.0s].
	clean first = dpCh ifTrue: [clean := '0', clean].
	pos := clean indexOf: dpCh . pos = 0 ifTrue: [^(clean asInteger asScaledDecimal: aScaleNumber)*sign].
	denomString := clean copyFrom: pos+1 to: clean size.
	number := ScaledDecimal new
		setNumerator: ((clean copyUpTo: dpCh ), denomString) asInteger
		denominator:  (10 raisedTo: denomString size)
		scale: aScaleNumber.
	^number * sign

" '-2.445.444,988899987' asScaledDecimal: 3 " "comma as decimal point (european)"
" '-2,445,444.988899987' asScaledDecimal: 3 " "point as decimal point"! !

!String methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:05'!
asSloveneWithoutCircumflexes
	"convert Unicode csz string with ^ (sumniki) to plain ascii csz"
	"'c^s^z^C^S^Z^' convertToSloveneChars asSloveneWithoutCircumflexes"
	^self collect: 
		[:ch | ch asInteger > 127 
			ifTrue:
				[ch = AIDASite charc ifTrue: [$c]
					ifFalse: [ ch  = AIDASite charC ifTrue: [$C]
					ifFalse: [ ch  = AIDASite chars ifTrue: [$s]
					ifFalse: [ ch  = AIDASite charS ifTrue: [$S]
					ifFalse: [ ch  = AIDASite charz ifTrue: [$z] 
					ifFalse: [ ch  = AIDASite charZ ifTrue: [$Z]
					ifFalse: [$- ] ]]]]]
				]
			ifFalse: [ch] ]! !

!String methodsFor: '*Aida' stamp: 'janko 3/16/2008 11:41'!
contentsAsMethod
	"return a body of method with a literal array with contents of that string"
	| input output |
	input := self readStream.
	output := WriteStream with: String new.
	output nextPutAll: '^#('.
	[input atEnd] whileFalse: [output nextPutAll: input next asInteger asString; nextPut: $ ].
	output nextPutAll: ')'.
	^output contents

" 'visual.cha'contentsAsMethod "! !

!String methodsFor: '*Aida' stamp: 'janko 8/25/2012 15:07'!
convertToSloveneChars
	"convert csz string with ^ as 'sumnik' to proper unicode string. 
	Only pure ASCII strings are converted!!"
	"'Mivs^ek' convertToSloveneChars"
	| in out ch |
"	self class == ByteString ifFalse: [^self]. " "what if there is a mixed string, some unicode already?"
	in := self readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[ch := in next.
		(in peek = $^ ) ifTrue: [(#($c $C $s $S $z $Z) includes: ch) ifTrue: 
			[in next. 
			ch = $c ifTrue: [ch := AIDASite charc]. ch = $C ifTrue: [ch := AIDASite charC].
			ch = $s ifTrue: [ch := AIDASite chars]. 	ch = $S ifTrue: [ch := AIDASite charS].
			ch = $z ifTrue: [ch := AIDASite charz]. ch = $Z ifTrue: [ch := AIDASite charZ] ] ].
		out nextPut: ch].
	^out contents! !

!String methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:07'!
ensureUnicodeSloveneChars
	"if string has other that unicode slovene chars, try to correct them!!"
	"'Miv©ek' ensureUnicodeSloveneChars"
	| in out ch uniSet |
	in := self readStream. out := WriteStream on: String new. uniSet := AIDASite charCszSet. 
	[in atEnd] whileFalse: 
		[ch := in next.
		(ch asInteger < 128 or: [uniSet includes: ch])
			ifTrue: [out nextPut: ch]
			ifFalse: [out nextPut: 
				([(AIDASite convert: (String with: ch) fromCodepage: #'iso-8859-2') first]
					on: Error do: [:ex | ch]) ] ].
	^out contents! !

!String methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:07'!
isValidEMailAddress
	(self includes: $@) ifFalse: [^false].
	^(self trimBlanks contains: [:char | 
		char isAlphaNumeric not and: [(#($. $- $_  $@) includes: char) not] ]) not

" 'janko.mivsek@eranova.si' isValidEMailAddress"! !

!String methodsFor: '*Aida' stamp: 'np 3/31/2008 17:25'!
trimBlanks
	^SpStringUtilities trimBlanksFrom: self! !

!String methodsFor: '*Aida' stamp: 'np 1/21/2008 17:38'!
withHeadingAnchors
	"add anchors before all H1-5 tags, each with sequence number of that tag, eg: <a name=h-15>"
	| in out tag number |
	in := self readStream. number := 1.
	out := WriteStream on: String new.
	[in atEnd] whileFalse:
		[out nextPutAll: (in upTo: $<).
		in atEnd ifFalse: [tag := in upTo: $>] ifTrue: [^out contents].
		(tag size = 2 and: [tag first asLowercase = $h and: [tag last isDigit]] ) ifTrue:
			[out nextPutAll: '<a name="h-', number printString, '"></a>'. 
			number := number +1].
		out nextPutAll: '<', tag, '>'].
	^out contents

"'<h1>Heading1</h1><h2>Heading2</h2>' withHeadingAnchors"! !

!String methodsFor: '*Aida' stamp: 'JM 4/22/2007 18:08'!
withHtmlBreaks
	"changes all cr with <br>"
	^self copyReplaceAll: (String with: Character cr) with: '<br>'

"('aaa', (String with: Character cr), 'bbb') withHtmlBreaks"! !

!String methodsFor: '*Aida' stamp: 'jm 11/10/2010 21:27'!
withoutHtmlTags
	"strip all tags and newlines, replace <br> and <p> with cr"
	| in out text tag |
	in := self readStream.
	out := WriteStream on: String new.
	[in atEnd] whileFalse:
		[text := ((in upTo: $<) copyWithout: Character cr).
		text := text copyReplaceAll: '&scaron;' with: (String with: AIDASite chars). "slovenian s^"
		text := text copyReplaceAll: '&Scaron;' with: (String with: AIDASite charS). "slovenian S^"
		text := text copyReplaceAll: '&nbsp;' with: ' '. "nonbreakable space"
		out nextPutAll: text.
		in atEnd ifFalse: [tag := in upTo: $>].
		(tag = 'br') | (tag = 'p') ifTrue: [out nextPut: Character cr ] ].
	^out contents

"'<span>by Michael A. <br>Prospero</span>' withoutHtmlTags"! !

!SwazooAida class methodsFor: 'start/stop' stamp: 'np 3/15/2009 15:56'!
demoStart             
	"will create (if not yet) and start a demo site on http://localhost:8888"
	SwazooServer aidaDemoStart! !

!SwazooAida class methodsFor: 'start/stop' stamp: 'np 3/15/2009 15:56'!
demoStop             
	"will stop a demo site on http://localhost:8888"
	SwazooServer aidaDemoStop! !

!SwazooAida class methodsFor: 'start/stop' stamp: ' 10/1/08 22:01'!
start    
	"will start all existing sites, both Aida ones and others on  Swazoo web server"
	SwazooServer start! !

!SwazooAida class methodsFor: 'start/stop' stamp: ' 10/1/08 22:01'!
startOn: portNum   
	"will start a site on that port on all IP interfaces, any host"
      "site will be created if doesn't exist yet"
	SwazooServer aidaStartOn: portNum! !

!SwazooAida class methodsFor: 'start/stop' stamp: 'np 3/15/2009 15:43'!
stop    
	"will stop all running sites, both Aida ones and other on Swazoo web server"
	SwazooServer stop! !

!SwazooIntegrationTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
localSendUrl: aString
	"sends request with that RELATIVE url to the site localy - it simulates a real network request. "
	| request httpServer |
	request := Swazoo.HTTPRequest request: aString from: self siteHost at: self siteIP.
	request uri port: self sitePort.
	httpServer := server servers asOrderedCollection first.
	^httpServer answerTo: request! !

!SwazooIntegrationTest methodsFor: 'private' stamp: ' 21/4/07 22:08'!
sendUrl: aString
	"sends a real network request with that RELATIVE url to the site with parameters from defaults. 
	Returns a Net.HttpResponse"
	| client request |
	client := Net.HttpClient new.
	request := Net.HttpRequest get: 'http://', self siteHost, ':', self sitePort printString, aString.
	^client executeRequest: request.! !

!SwazooIntegrationTest methodsFor: 'running' stamp: ' 21/4/07 22:08'!
setUp
	server := Swazoo.SwazooServer singleton.
	"server initialize." "DANGEROUS!! "  "to remove all stuff and stop it"
	"site := AIDASite newNamed: self siteName.
	site 
		host: self siteHost;
		ip: self siteIP;
		port: self sitePort;
		sslPort: self siteSSLPort. "! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
siteHost
	^'localhost'! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
siteIP
	^'localhost'! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
siteName
	^'test'! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
sitePort
	^8765! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
siteRootUri
	^'/'! !

!SwazooIntegrationTest methodsFor: 'defaults' stamp: ' 21/4/07 22:08'!
siteSSLPort
	^8766! !

!SwazooIntegrationTest methodsFor: 'running' stamp: ' 21/4/07 22:08'!
tearDown
	"site := server siteNamed: self siteName.
	site stop.
	server removeSite: site.
	server := nil.
	site := nil."! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testAccessingByName
"
	self assert: (Swazoo.SwazooServer siteNamed: self siteName) notNil.
	self assert: (Swazoo.SwazooServer siteHostnamed: self siteHost) notNil
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testAdminPage
"
	| |
	server startSite: self siteName.
	self shouldnt: [self sendUrl: '/admin.html'] raise: Error.
	self shouldnt: [self sendUrl: '/admin.html?view=login'] raise: Error.
	server stopSite: self siteName.
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testDummyRequest
"
	server startSite: self siteName.
	self should: [self sendUrl: '/dummycompletelydummy.html'] raise: Net.HttpObjectNotFound.
	server stopSite: self siteName.
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testLocalAdminPage
"
	| response |
	server startSite: self siteName.
	response := self localSendUrl: '/admin.html'.
	self assert: response isRedirectLink.
	response := self localSendUrl: '/admin.html?view=login'.
	self assert: response isOk.
	server stopSite: self siteName.
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testLocalDummyRequest
"
	| response |
	server startSite: self siteName.
	response := self localSendUrl: '/dummycompletelydummy.html'.
	self assert: response isNotFound.
	server stopSite: self siteName.
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSetUp
"
	self assert: (server sites size = 1).
	self assert: (site ip = self siteIP).
	self assert: (site host = self siteHost).
	self assert: (site port = self sitePort).
	self assert: site isServing not.
"! !

!SwazooIntegrationTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:00'!
testStarting
"	server startSite: self siteName.
	self assert: (server siteNamed: self siteName) isServing.
	self assert: (server servers asOrderedCollection first isServing).
	server stopSite: self siteName.
	self deny: (server siteNamed: self siteName) isServing.
"! !

!SwazooServer methodsFor: '*Aida'!
aidaDemoSite
	"return aidademo site. Create and make it default, if it not yet there"
	| siteName |
	siteName := 'aidademo'.
	(self siteNamed: siteName) isNil ifTrue:
		[AIDASite newNamed: siteName.
		AIDASite default: siteName.
		(AIDASite named: siteName) host: '*' ip: '*'  port: 8888].
	^self siteNamed: siteName! !

!SwazooServer methodsFor: '*Aida'!
aidaDemoStart
	self aidaDemoSite start.! !

!SwazooServer methodsFor: '*Aida'!
aidaDemoStop
	self aidaDemoSite stop.! !

!SwazooServer methodsFor: '*Aida'!
aidaSites
	^self sites select: [:each | each isKindOf: AIDASite]! !

!SwazooServer methodsFor: '*Aida' stamp: 'mivsek 1/10/2008 22:06'!
aidaStartOn: aPortNumber
	| site |
	site := self siteAnyHostAllInterfacesOnPort: aPortNumber.
	site isNil ifTrue: [site := self prepareAidaDemoSiteOnPort: aPortNumber].
	site start.
	^site! !

!SwazooServer methodsFor: '*Aida' stamp: 'mivsek 1/10/2008 22:07'!
prepareAidaDemoSiteOnPort: aNumber
	"this site will run on all IP interfaces on that port"
	| name site |
	name := 'aidaOn', aNumber printString.
	site := AIDASite newNamed: name. "which is now also added to SwazoServer"
	site host: '*' ip: '*' port: aNumber.
	^site! !

!Time methodsFor: '*Aida'!
printSecSloString
	^self hours printString, ':',
		(self minutes < 10 ifTrue: ['0'] ifFalse: ['']), self minutes printString, ':',
		(self seconds < 10 ifTrue: ['0'] ifFalse: ['']), self seconds printString

"Time now printSecSloString"! !

!Time methodsFor: '*Aida' stamp: 'np 1/22/2008 08:47'!
printSloString
	^"(self hours < 10 ifTrue: ['0'] ifFalse: [''])," self hours printString, ':',
		(self minutes < 10 ifTrue: ['0'] ifFalse: ['']), self minutes printString

"Time now printSloString"! !

!URLResolver methodsFor: 'request counting'!
addCountsFromDictionary: aCountDictionary

| object origCounter stopUrls |
	stopUrls := Col collect: [:assoc | assoc notNil ifTrue: [assoc key] ].
	aCountDictionary keysAndValuesDo: [:url :counter |
	(stopUrls includes: url asLowercase) ifFalse:
		[object := self objectOnUrl: url.
		object notNil ifTrue: 
			[origCounter := self counterFor: object.
			origCounter addCounter: counter ] ]
		ifTrue: ["self halt"] ]

"URLResolver default addCountsFromDictionary: Janko"
"
| boss |
boss := (BinaryObjectStorage onOld: '..\images\janko\LogDict.boss' asFilename readStream).
Janko := boss next.
boss close
"! !

!URLResolver methodsFor: 'adding-removing' stamp: 'janko 8/25/2012 19:37'!
addObject: anObject withUrl: aString
	"add an object if not already exist and add url to the collection of urls for that object.
	If aString url point to some other object already, then remove url from that other object"
	"warning, if web elements (such as web apps) will be registered"
"	self isWebElement: anObject." "do we still need this warning?"
	anObject isNil ifTrue: [^nil]. "do not add nil objects!!"
	self site critical: 
		[(self allWebPages at: anObject ifAbsentPut: [OrderedCollection new])
				add: aString asLowercase.
		(self allUrlLinks includesKey: aString asLowercase) ifTrue:
			[(self allWebPages at: (self allUrlLinks at: aString asLowercase)	
				ifAbsentPut: [OrderedCollection new])
					remove: aString asLowercase ifAbsent: [] ].
		self allUrlLinks at: aString asLowercase put: anObject ].
	^anObject! !

!URLResolver methodsFor: 'static pages' stamp: 'janko 3/19/2012 15:15'!
allHTMLPagesSize
	"sums sizes of all static pages"

	| fname sum |
	sum := 0.
	self allHtmlPageUrls do: [:url | 
		fname := self site homeDirectory, url.
		fname := fname copyReplaceAll: '/' with: '\'.
		fname asFilename exists 
			ifTrue: [sum := sum + fname asFilename fileSize] ].
	^sum

"URLResolver default allHTMLPagesSize"! !

!URLResolver methodsFor: 'static pages'!
allHtmlPageUrls
	"find all .htm and .html pages in directory hierarchy starting at aWebServer homeDirectory.
	return as collection of relative url links"

	^self allHtmlPageUrlsIn: self site homeDirectory.

"URLResolver default allHTMLPageUrls"! !

!URLResolver methodsFor: 'static pages'!
allHtmlPageUrlsIn: aDirectoryString
	"find all .htm and .html pages in directory hierarchy starting at a specified directory and all 	subdirectories.	Return as collection of relative url links"

	| collection dir |
	dir := aDirectoryString.
	dir last ~= $\ ifTrue: [dir := dir, '\'].
	dir asFilename exists ifFalse: [^#()].
	collection := OrderedCollection new.
	aDirectoryString asFilename directoryContents do: [:each | 
		(dir, each) asFilename isDirectory
			ifTrue: [collection addAll: (self allHtmlPageUrlsIn: (dir, each))]
			ifFalse: 
				[('.htm' match: each asFilename extension) ifTrue:
					[collection add: (self urlForFile: each asString directory: aDirectoryString)] ]
		].
	^collection.

"URLResolver default allHTMLPageUrlsIn: 'h:\wwwroot\planid' "! !

!URLResolver methodsFor: 'static pages'!
allHtmlPagesSize
	"sums sizes of all static pages"

	| fname sum |
	sum := 0.
	self allHtmlPageUrls do: [:url | 
		fname := self site homeDirectory, url.
		fname := fname copyReplaceAll: '/' with: '\'.
		fname asFilename exists 
			ifTrue: [sum := sum + fname asFilename fileSize] ].
	^sum

"URLResolver default allHTMLPagesSize"! !

!URLResolver methodsFor: 'request counting' stamp: ' 21/4/07 22:07'!
allPagesAndCounts

	"return total counts for all objects that have counters, most counted first"

	| collection |
	collection := OrderedCollection new.
	self counters keysAndValuesDo: [:object :counter |
		collection add: (Array
			with: object
			with: counter total)].
	^SortedCollection
		withAll: collection
		sortBlock: [:a :b | (a at: 2) > (b at: 2)]

"URLResolver default allPagesAndCounts"! !

!URLResolver methodsFor: 'private'!
allUrlLinks
	"return a dictionary with url as key and reference to an object with that url as value"
	^allURLLinks! !

!URLResolver methodsFor: 'request counting' stamp: 'np 10/17/2008 17:43'!
allUrlsAndCounters
	"return copies of all counters as dictionary with url as key"
	| dictionary |
	dictionary := Dictionary new.
	self counters keysAndValuesDo: [:object :counter |
		dictionary 
			at: (self halfUrlFor: object)
			put: counter aidaDeepCopy].
	^dictionary

"URLResolver default allUrlsAndCounters"
"
(BinaryObjectStorage onNew: 'counters.boss' asFilename writeStream)
	nextPut: URLResolver default allUrlsAndCounters;
	close
"! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
allWebPages
	" return a dictionary with object reference as key and one on more urls for that object as value.
	first  is default one, when urls are dinamicaly generated"
	^allWebPages! !

!URLResolver methodsFor: 'private' stamp: 'janko 4/20/2012 17:17'!
autoUrlFor: anObject
	"use preferred url if possible. If that url already exist, add -a, -b, ... to url and repeat"
	| url extension lastPoint |
	url := anObject preferredUrl. url isNil ifTrue: [^self randomUrlFor: anObject].
	(url size >= 1 and: [url first = $/]) ifFalse: [self error: 'preferredUrl must start with / '].
	[(self objectOnUrl: url) notNil] whileTrue: "already exist"
		[lastPoint := url lastIndexOf: $. . lastPoint = 0 ifTrue: [lastPoint := url size+1].
		extension := url copyFrom: lastPoint to: url size.
		url := url copyReplaceAll: extension with: ''. 
		url isEmpty ifTrue:  [^self randomUrlFor: anObject].
		(url size > 1 and: [(url at: url size-1) = $-]) "already have an extension char!!"
			ifTrue: 
				[url last = $z ifTrue: [^self randomUrlFor: anObject]. "only to $z, then back to random!!"
				url := (url copyFrom: 1 to: url size-1), (String with: (url last asInteger + 1) asCharacter)]
			ifFalse: [url := url, '-a'].
		url := url, extension].
	^url

"URLResolver default halfUrlFor: (Document new id: 'SOP-0111-02').
URLResolver default autoUrlFor: (Document new id: 'SOP-0111-02')"! !

!URLResolver methodsFor: 'private-obsolete'!
changeToPreferedURL: aString
	"OBSOLETE!!"
	^self changeToPreferredUrl: aString! !

!URLResolver methodsFor: 'adding-removing'!
changeToPreferredUrl: anObject
 	"remove all existing urls and make this as only one"
	"BEWARE, all old urls will be erased, url references can be breaked!! "
	| url |
	url := anObject preferredUrl.
	url isNil ifTrue: [^nil].
	(url size > 1 and: [url first = $/]) ifFalse: [self error: 'preferredUrl must start with / '].
	self removeObject: anObject.
	self defaultUrl: url for: anObject.! !

!URLResolver methodsFor: 'adding-removing' stamp: ' 21/4/07 22:07'!
changeToURL: aString forObject: anObject
 	"remove all existing urls and make this as only one"
	"BEWARE, all ols urls will be erased, url references can be breaked!! "
	self removeObject: anObject.
	self defaultURL: aString forObject: anObject.! !

!URLResolver methodsFor: 'adding-removing'!
changeToUrl: aString for: anObject
 	"remove all existing urls and make this as only one"
	"BEWARE, all ols urls will be erased, url references can be breaked!! "
	self removeObject: anObject.
	self defaultUrl: aString for: anObject.! !

!URLResolver methodsFor: 'private'!
correctUrlEncoding
	"make sure all urls are decodedHTTP, without %20 etc"
	self allUrlLinks keys do: [:key | (key decodedHTTP ~= key) 
		ifTrue: [self allUrlLinks at: key decodedHTTP put: (self allUrlLinks at: key). 
			self allUrlLinks removeKey: key] ].
	self allWebPages values do: [:coll |
	coll copy do: [:each | (each decodedHTTP ~= each) 
		ifTrue: [coll at: (coll indexOf: each) put: each decodedHTTP] ] ].

"
self allURLLinks keys select: [:key | (key decodedHTTP ~= key)].
self allWebPages associations select: [:assoc |
	assoc value contains: [:each | (each decodedHTTP ~= each)] ].
"! !

!URLResolver methodsFor: 'request counting' stamp: ' 21/4/07 22:07'!
counterFor: anObject
	anObject isNil ifTrue: [^nil].
	(self counters includesKey: anObject)
		ifFalse: [self resetCounterFor: anObject].
	^self counters at: anObject! !

!URLResolver methodsFor: 'request counting'!
counterForUrl: anUrlString

	"return a counter for object with specified url. Nil if not exist"

	| object  |
	object := self objectOnUrl: anUrlString.
	object isNil ifTrue: [^nil].
	^self counterFor: object.

"URLResolver default counterForUrl: '/osn/g_l-vse.htm'"
"WebServer default totalCounter"
"WebServer default pagesCounter"! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
counters

	"dictionary of web counters for every object, registered in URLResolver"

	counters isNil ifTrue: [self initCounters].
	^counters.! !

!URLResolver methodsFor: 'adding-removing'!
defaultToPreferredUrl: anObject
	"Default URL of that object is set to one suggested by its #prefferedUrl method."
	"Existing URLs are preserved, but just default URL used for automatic URL management"
	| url |
	url := anObject preferredUrl.
	url isNil ifTrue: [^nil].
	(url size > 1 and: [url first = $/]) ifFalse: [self error: 'preferredUrl must start with / '].
	self defaultUrl: url for: anObject.! !

!URLResolver methodsFor: 'private-obsolete'!
defaultURL: aString forObject: anObject
	"OBSOLETE!!"
	^self defaultUrl: aString for: anObject! !

!URLResolver methodsFor: 'adding-removing'!
defaultUrl: aString for: anObject
	"set url as default url for that object. This url is then used in dynamic url creation. If an object 
	does not already exist, then create a new entry first"
	| urls first defInx |
	self addObject: anObject withUrl: aString.  "just in case object is new one"
	"swap old default with new default url on a first place in collection"
	self site critical: 
		[urls := allWebPages at: anObject.
		first := urls first.
		defInx := urls indexOf: aString asLowercase.
		urls at: 1 put: (urls at: defInx).
		urls at: defInx put: first].! !

!URLResolver methodsFor: 'testing'!
existObject: anObject
	"true if this object is registered on son Url"
	^self allWebPages includesKey: anObject! !

!URLResolver methodsFor: 'private-obsolete'!
existURL: aString
	"OBSOLETE!!"
	^self existUrl: aString! !

!URLResolver methodsFor: 'testing'!
existUrl: aString
	"return true if URL has connection to some object"
	^self allUrlLinks includesKey: aString asLowercase! !

!URLResolver methodsFor: 'private'!
findHostPortOn: aSession
	"finds hostname and port for complete url. Returns association host->port"
	| host session|
	(self site host ~= '*') ifTrue:  "host ant port clearly defined in site's url identifier"
		[^self site host-> self site port]. 
	session := aSession notNil ifTrue: [aSession] ifFalse: [self firstSessionFromStack].
	session ifNil: 
		[session := self site sessionManager sessions values asOrderedCollection 
			detect: [:each | each lastRequest notNil] ifNone: [nil] ]. "good enough?" 
	session ifNil: [^'localhost'->self site port].
	host := (session lastRequest 
		headerAt: 'x-forwarded-host'   "find host from request"
		ifAbsent: [[session lastRequest host ]]) value. 
	^host->self site port! !

!URLResolver methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
fullUrlEncodedSpacesFor: anObject on: aSession
	"change spaces to %20"
	^(self fullUrlFor: anObject on: aSession) copyReplaceAll: ' ' with: '%20'! !

!URLResolver methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
fullUrlFor: anObject on: aSession
	"find or make a path for anObject and compose full url together with server address and 
	query string, eg: http://www.eranova.si/welcome.html?view=brief"
	^self 
		fullUrlFromPath: (self halfUrlFor: anObject)
		andParms: (aSession notNil ifTrue: [aSession parms] ifFalse: [#()])
		on: aSession! !

!URLResolver methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
fullUrlFromPath: aPathString andParms: aParmsDictionary on: aSession
	"compose full url: server address, document path and additional parameters in query string, 
	for instance: http://www.eranova.si/welcome.html?view=brief"
	| url |
	url := self urlFromHalfUrl: aPathString on: aSession.
	^self halfUrlFromPath: url andParms: aParmsDictionary on: aSession. "not very nice, i know ..."
	
"
| parms |
parms := Dictionary new.
parms at: 'view' put: 'brief'. parms at: 'id' put: '12345'. 
URLResolver default fullUrlFromPath: '/dzs/panorama.html' andParms: parms on: WebSession new
"! !

!URLResolver methodsFor: 'accessing'!
halfUrlFor: anObject
	"finds or composes an URL reference to that object . If the URL is new one, then it is written to both dictionaries for later lookup. If resolution is unsuccessfull then returns nil. If anObject dont have an url yet, url part for them is automatically generated, for example:  /objecto1638948.html"
	| newUrl urls |
	urls := (self allWebPages at: anObject ifAbsent: [
	      newUrl := ((anObject isKindOf: WebPage)  and: [anObject title notNil] )
			ifTrue: ['/', anObject title asLowercase,'.html']			
			ifFalse: [self autoUrlFor: anObject].
		self addObject: anObject withUrl: newUrl.
		OrderedCollection with: newUrl]).
	"just in case object has an empty collection of urls"
	(urls isNil or: [urls isEmpty]) ifTrue: 
		[self removeObject: anObject. ^self halfUrlFor: anObject].
	^urls at: 1.! !

!URLResolver methodsFor: 'accessing' stamp: 'janko 3/21/2008 16:51'!
halfUrlFromPath: aPathString andParms: aParmsDictionary on: aSession
	"compose half url: /document path and additional parameters in query string, for instance: 	/welcome.html?view=brief"
	| url parmsString newValue |
	url := aPathString.
	aParmsDictionary size > 0 ifTrue:
		[parmsString := ''.
		aParmsDictionary keysAndValuesDo: [:name :value |
			(value isKindOf: Set) ifTrue:[newValue := value asArray at: 1]ifFalse:[newValue := value].
			parmsString := parmsString, 
				(AIDASite convertToWebString: name asString), '=', 
				(AIDASite convertToWebString: newValue asString), '&'].  "value"
		url := url, '?', (parmsString copyFrom: 1 to: (parmsString size - 1))].
	^url

"
| parms |
parms := Dictionary new.
parms at: 'view' put: 'brief'. parms at: 'id' put: '12345'. 
URLResolver default halfUrlFromPath: '/dzs/panorama.html' andParms: parms on: WebSession new
"! !

!URLResolver methodsFor: 'request counting'!
incCounterFor: anObject
	"increment a web counter for that object. Only text/html object are counted
	Don't count temporary objects"
	(anObject aidaContentType = 'text/html') ifFalse: [^nil].
	self site critical: 
		[(self counters includesKey: anObject) ifFalse: [self resetCounterFor: anObject].
		(self counters at: anObject) incCounter.
		"self totalCounter incCounter   **aWebServer already counts!! "]! !

!URLResolver methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initCounters
	"init a counters dictionary and open a new counter for each already registered object"
	counters := Dictionary new. 
	self allWebPages keys do: [:object | self resetCounterFor: object].! !

!URLResolver methodsFor: 'initialize-release'!
initUrlLinks
	allURLLinks := Dictionary new.! !

!URLResolver methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initWebPages
	allWebPages := IdentityDictionary new.! !

!URLResolver methodsFor: 'initialize-release'!
initialize
	self initWebPages.
	self initUrlLinks.
	self initCounters.! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isWebElement: anObject


	" test if anObject is a web element, such as web app and write warning to the transcript"
	
	(anObject isKindOf: WebElement) ifTrue:
		[Transcript cr; show: '*** WARNING: URLResolver detected a ', 
		anObject class printString, '  will be registered ***'; cr.

		"to detect from where this request comes"
		"self halt"
		].! !

!URLResolver methodsFor: 'accessing'!
methodImageForUrl: aString 
	"maybe a method image can be done from current WebStyle?"
	|  name selector |
	('/img/*' match: aString) ifFalse: [^nil].
	name := (aString readStream upTo: $/ ; upTo: $/; upTo: $. ) asLowercase.
	selector := self site style class allSelectors 
		detect: [:each | each asString asLowercase = name] ifNone: [^nil].
	^WebMethodImage fromMethod: selector on: self site style contentType: 'image/gif' site: self site

"URLResolver default methodImageForURL: '/img/eranovaLogoGif.gif' "! !

!URLResolver methodsFor: 'accessing'!
objectOnDifferentPresentationUrl: aString
	"check if different representation (like .json or .xml) is requested and 
       returns its object by skipping the extension in URL"
	| url |
	url := aString asLowercase.
	url := ('*.json' match: url)
		ifTrue: [url copyReplaceAll: '.json' with: '']
		ifFalse: [	('*.xml' match: url)
			ifTrue: [url copyReplaceAll: '.xml' with: '']
			ifFalse: [url "later for more"] ].
	^self allUrlLinks at: url ifAbsent: [nil]! !

!URLResolver methodsFor: 'accessing'!
objectOnUrl: aString
	" finds a reference to an object, specified by that URL string. If not yet known, try to 
	find it as a html file. if not found, search method resources in current WebStyle too.."
	"If still not found, check if different representation (like .json or .xml) is requested"
	| object |
	^self allUrlLinks at: aString asLowercase ifAbsent: 
		["object := self fileProxyForURL: aString." "moved to router and staticServer"
		self site staticServer. "just to create it od not yet = lazy migration"
		object := self methodImageForUrl: aString.
		object notNil ifTrue: [^self addObject: object withUrl: aString].
		object := self objectOnDifferentPresentationUrl: aString. "like .json or .xml"
		^object]. "or nil"

"URLResolver default objectOnURL: '/osn/g_l-vse.htm' "! !

!URLResolver methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
objectsOfClass: aClass
	^self allWebPages keys select: [:object | object class = aClass ]

"URLResolver default objectsOfClass: WebMethodImage"! !

!URLResolver methodsFor: 'private-obsolete'!
ooRefFromURL: aString
	"OBSOLETE!!"
	^self objectOnUrl: aString! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
randomGen
	randomGen isNil ifTrue: [self randomGen: Random new].
	^randomGen! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
randomGen: anObject
	randomGen := anObject! !

!URLResolver methodsFor: 'private'!
randomUrlFor: anObject
	| number ext url |
	number := (self site class random next * 10000000) asInteger.
	ext := self site mimeMap extensionForType: anObject aidaContentType.
	ext isNil ifTrue: [ext := 'html'].
	url := '/object/o', number printString, '.', ext.
	^(self objectOnUrl: url) isNil  "avoid duplicates!!"
		ifTrue: [url]
		ifFalse: [self randomUrlFor: anObject]! !

!URLResolver methodsFor: 'static pages'!
refreshAllHtmlPages
	""

	| count |
	count := 1.
	self allWebPages keys do: [:object |
		(object isKindOf: FileProxy) ifTrue:	 
			[count \\ 10 = 0 ifTrue: [Transcript cr; show: count printString].
			object refreshContent.
			count := count + 1] ].

"URLResolver default refreshAllHTMLPages"! !

!URLResolver methodsFor: 'private'!
regenerateAllUrlLinks
	"from urls in allWebPages"
	"AIDASite default urlResolver regenerateAllUrlLinks"
	self allWebPages keysAndValuesDo: [:object :urls |
		urls do: [:url | self allUrlLinks at: url put: object] ].! !

!URLResolver methodsFor: 'static pages'!
registerAllHtmlPages
	"if not already, then register all static html pages in directory hierarchy starting
	at aWebServer homeDirectory. Opan also counters for them"

	| count proxy |
	count := 1.
	self allHtmlPageUrls do: [:url | 
		count \\ 10 = 0 ifTrue: [Transcript cr; show: count printString].
		proxy := self objectOnUrl: url.
		self counterFor: proxy.
		count := count + 1].

"URLResolver default registerAllHTMLPages"! !

!URLResolver methodsFor: 'indexing'!
reindexAllObjects
	"all text/html objects are reindexed"
	self allWebPages keysDo: [:object |
		(object aidaContentType = 'text/html') ifTrue:
			[self site index indexObject: object] ]

"URLResolver default reindexAllObjects"! !

!URLResolver methodsFor: 'indexing'!
reindexNonIndexedObjects
	"all text/html objects are reindexed"
	self allWebPages keysDo: [:object |
		(object aidaContentType = 'text/html') ifTrue:
			[(self site index indexedObjects includesKey: object) ifFalse:
				[self site index indexObject: object] ] ]

"URLResolver default reindexNonIndexedObjects"! !

!URLResolver methodsFor: 'static pages' stamp: ' 21/4/07 22:07'!
releaseAllHTMLPages

	self allWebPages keys do: [:obj |
		(obj isKindOf: FileProxy) ifTrue:
	 		[obj releaseContent] ]

"URLResolver default releaseAllHTMLPages"! !

!URLResolver methodsFor: 'static pages'!
releaseAllHtmlPages

	self allWebPages keys do: [:obj |
		(obj isKindOf: FileProxy) ifTrue:
	 		[obj releaseContent] ]

"URLResolver default releaseAllHTMLPages"! !

!URLResolver methodsFor: 'static pages'!
releaseAllImages
	self allWebPages keys do: [:obj |
		((obj isKindOf: FileProxy) and: ['*image*' match: obj aidaContentType])
			ifTrue: [obj releaseContent] ]

"URLResolver default releaseAllImages"! !

!URLResolver methodsFor: 'static pages' stamp: ' 21/4/07 22:07'!
releaseAllStaticPages

	self allWebPages keysDo: [:object | 
		(object isKindOf: FileProxy) ifTrue: [object releaseContent] ]

"URLResolver default releaseAllStaticPages"! !

!URLResolver methodsFor: 'request counting' stamp: ' 21/4/07 22:07'!
removeCounterFor: anObject


	(self counters includesKey: anObject)
		ifTrue: [self counters removeKey: anObject]! !

!URLResolver methodsFor: 'request counting'!
removeNonHtmlCounters
	self counters keys do: [:object |
		object aidaContentType ~= 'text/html' ifTrue:
			[self removeCounterFor: object] ]

"URLResolver default removeNonHTMLCounters"! !

!URLResolver methodsFor: 'adding-removing'!
removeObject: anObject
	"remove object and all its URLs. Returns true if object existed and false if not. 
	Remove also its web counter"
	| urls |
	self site critical:
		[urls := (self allWebPages at: anObject ifAbsent: [^nil]).
		self allWebPages removeKey: anObject.
		urls notNil ifTrue: [urls do: [: each | self allUrlLinks removeKey: each ifAbsent: [] ] ].
		self counters removeKey: anObject ifAbsent: [] ].
	^true! !

!URLResolver methodsFor: 'adding-removing'!
removeObjectWithUrl: aString

"remove object and all its URLs. Returns true if object existed and false if not"

	| object |
	object := allURLLinks at: aString asLowercase ifAbsent: [^false].
	^self removeObject: object.! !

!URLResolver methodsFor: 'adding-removing' stamp: 'janko 8/25/2012 18:40'!
removeObjectsOfClass: aClass
	"fast removal even if dictionaries are really big"
	| toRemove newWebPages newURLLinks newCounters |
	toRemove := (self objectsOfClass: aClass) asSet.
	newWebPages := Dictionary aidaWithAll:
		(self allWebPages associations reject: [:assoc | toRemove includes: assoc key]).
	newURLLinks := Dictionary aidaWithAll:
		(self allUrlLinks associations reject: [:assoc | toRemove includes: assoc value]).
	newCounters := Dictionary aidaWithAll:
		(self counters associations reject: [:assoc | toRemove includes: assoc key]).
	self site critical:
		[allWebPages := newWebPages.
		allURLLinks := newURLLinks.
		counters := newCounters]


"URLResolver default removeObjectsOfClass: WebUser"
"URLResolver default allWebPages size  38 45"! !

!URLResolver methodsFor: 'adding-removing' stamp: 'janko 12/6/2008 18:38'!
removeObjectsOfClassNamed: aString
	"good for removing Obsolete classes!!"
	self site critical:
		[self allWebPages keys do: [:object | 
			object class name= aString ifTrue: [self removeObject: object]] ].

"URLResolver default removeObjectsOfClassNamed: WebMethodImage"
"URLResolver default allWebPages size 10934"! !

!URLResolver methodsFor: 'adding-removing'!
removeObjectsOfObsoleteClass
	self site critical:
		[self allWebPages keys do: [:object | 
			object class isObsolete ifTrue: [self removeObject: object]] ].

"URLResolver default removeObjectsOfObsoleteClass"! !

!URLResolver methodsFor: 'adding-removing'!
removeUrl: aString
	"remove this URL and also object, if this url was the last one pointed to object Returns 
	true if url existed and false if not. Also remove web counter"
	| object |
	self site critical:
		[object := (self allUrlLinks at: aString asLowercase ifAbsent: [^nil]).
		(self allWebPages at: object) remove: aString asLowercase ifAbsent: [].
		(self allWebPages at: object) isEmpty ifTrue: [self allWebPages removeKey: object]. 
		self allUrlLinks removeKey: aString asLowercase.
		self counters removeKey: object ifAbsent: [] ].
	^true! !

!URLResolver methodsFor: 'request counting' stamp: ' 21/4/07 22:07'!
resetAllCounters

	self counters values do: [:each | each reset].

"URLResolver default resetAllCounters"! !

!URLResolver methodsFor: 'request counting' stamp: ' 21/4/07 22:07'!
resetCounterFor: anObject
	"reset counters for specified object. If not yet exist, initialize it first"
	anObject isNil ifTrue: [^nil].
	self site critical:
		[(self counters includesKey: anObject) ifFalse: 
			[self counters at: anObject put: WebCounter new].
		(self counters at: anObject) reset]! !

!URLResolver methodsFor: 'accessing'!
resourceFor: aRequest
	"returns a resource (domain object) to respond to that request"
	| url | 
	url := AIDASite convertFromWeb: aRequest uriString on: aRequest session.  "for international Urls"
	^self objectOnUrl: url! !

!URLResolver methodsFor: 'accessing'!
scanForUrlsFrom: aWebPage

"start looking for all WebLinks in pages starting from aWebPage and converting them to the URL links in instance variables allWebPages and allURLLinks."! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site
	"a parent site with this url resolver"
	^site! !

!URLResolver methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site: anAIDASite
	site := anAIDASite.! !

!URLResolver methodsFor: 'static pages' stamp: ' 21/4/07 22:07'!
urlForFile: aFilenameString directory: aDirectoryString

	| path dir |
	dir := aDirectoryString.
	dir last ~= $\ ifTrue: [dir := dir, '\'].
	path := dir, aFilenameString.
	path := path copyReplaceAll: self site homeDirectory with: ''.
	^path copyReplaceAll: '\' with: '/'

"URLResolver default urlForFile: 'index.htm' directory: 'h:\wwwroot\planid\osn' "! !

!URLResolver methodsFor: 'accessing'!
urlFromHalfUrl: aString on: aSession
	| host port hostPort portString protocolString |
	hostPort := self findHostPortOn: aSession.
	host := hostPort key. port := hostPort value.
	portString := (aSession notNil and: [aSession isEncrypted]) 
		ifFalse: [(port = 80) ifTrue: [''] ifFalse: [':', port printString] ]
		ifTrue: [(self site sslPort = 443) ifTrue: [''] ifFalse: [':', self site sslPort printString] ].
	protocolString := (aSession notNil and: [aSession isEncrypted])  
		ifFalse: ['http://'] ifTrue: ['https://'].
	^protocolString, host asLowercase, portString, aString.! !

!URLResolver class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default
	^AIDASite default urlResolver! !

!URLResolver class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newOn: anAIDASite
	^super new 
		initialize; 
		site: anAIDASite! !

!URLResolverTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:08'!
setUp
"DANGEROUS!!
	server := Swazoo.SwazooServer singleton.
	server initialize.  ""to remove all stuff and stop it""
	site := AIDASite newNamed: 'test'.
"! !

!URLResolverTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:09'!
tearDown
"	site := server siteNamed: 'test'.
	site stop.
	server removeSite: site.
	server := nil. site := nil.
"! !

!URLResolverTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSetUp! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allVersionSpecs
	^self olderVersionSpecs, (Array with: self), self newerVersionSpecs! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
clearCurrent
	current := false! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
current
	"this version current one? Current version object have a direct url, without 'version=' in query part"
	^current! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
current: aBoolean
	current := aBoolean! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
currentVersionSpec
	"find a version spec of current object in a chain"
	self isCurrent ifTrue: [^self].
	^self olderVersionSpecs detect: [:each | each isCurrent] ifNone: 
		[^self newerVersionSpecs detect: [:each | each isCurrent] 
			ifNone: [self error: 'no current version!!'] ].! !

!VersionSpec methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isCurrent
	^self current! !

!VersionSpec methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isNewest
	^self next isNil! !

!VersionSpec methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isOldest
	^self parent isNil! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
newerVersionSpecs
	"return all version specs of that object, newer than this one"
	self isNewest ifTrue: [^#()].
	^OrderedCollection new 
		add: self next version; addAll: self next version newerVersionSpecs;
		yourself! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
next
	"next version of an object in version chain, if any"
	^next! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
next: anObject
	next := anObject! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
number
	"version number, integer by default, but it can be any string"
	^number! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
number: aString
	number := aString! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object
	"object for which is this version spec"
	^object! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
object: anObject
	object := anObject! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
olderVersionSpecs
	"return all version specs of that object, older than this one"
	self isOldest ifTrue: [^#()].
	^OrderedCollection new 
		addAll: self parent version olderVersionSpecs; add: self parent version;
		yourself! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
otherVersionSpecs
	"older and newer versions, if any"
	^self olderVersionSpecs, self newerVersionSpecs! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
parent
	"older version of an object in version chain, if any. It is a parent of that object, 
	because it is derived from it"
	^parent! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: anObject
	parent := anObject! !

!VersionSpec methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString
	^'aVersionSpec version: ', self number! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setCurrent
	self current: true.
	self otherVersionSpecs do: [:each | each clearCurrent].! !

!VersionSpec methodsFor: 'initalize-release' stamp: ' 21/4/07 22:07'!
setDefaultNumber
	self isOldest 
		ifTrue: [self number: '1'] 
		ifFalse: [self setIncrementedNumberFromParent]! !

!VersionSpec methodsFor: 'initalize-release' stamp: ' 21/4/07 22:07'!
setIncrementedNumberFromParent
	"for now, later it should increment last number in string"
	self number: (self parent version number asInteger + 1) printString! !

!VersionSpec methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
versionSpecWithNumber: aString
	"find spec  with that version number"
	self number = aString ifTrue: [^self].
	^self olderVersionSpecs detect: [:each | each number = aString] ifNone: 
		[^self newerVersionSpecs detect: [:each | each number = aString] ifNone: [nil] ].! !

!VersionSpec class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
firstFor: anObject
	"for a first version of an object"
	^super new
		object: anObject;
		setDefaultNumber;
		setCurrent! !

!VersionSpec class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
new
	^self shouldNotImplement! !

!VersionSpec class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newFromParent: anOldObject for: aNewObject
	| newSpec |
	newSpec := super new
		object: aNewObject;
		parent: anOldObject;
		setIncrementedNumberFromParent;
		clearCurrent.
	aNewObject version: newSpec.
	anOldObject version next: aNewObject.
	^newSpec! !

!VersionSpecTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testFirstCreation
	| spec |
	spec := VersionSpec firstFor: ''.
	self assert: spec number = '1'.
	self assert:  spec isCurrent.
	self assert:  spec isOldest.
	self assert:  spec isNewest.! !

!VersionSpecTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSearchByNumber
	| o spec |
	o := VersionedObject new.
	spec := VersionSpec newFromParent: o for: VersionedObject new.
	self assert: ((spec versionSpecWithNumber: '2') number = '2').
	self assert: ((spec versionSpecWithNumber: '1') number = '1').
	self assert: (spec versionSpecWithNumber: '3') isNil.! !

!VersionSpecTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSecondCreation
	| o spec |
	o := VersionedObject new.
	spec := VersionSpec newFromParent: o for: VersionedObject new.
	self assert: spec number = '2'.
	self deny:  spec isCurrent.
	self deny:  spec isOldest.
	self assert:  spec isNewest.
	self assert: spec parent == o.
	spec setCurrent.
	self assert:  spec isCurrent.
	self deny: spec parent version isCurrent.! !

!VersionSpecTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSetCurrent
	| o spec |
	o := VersionedObject new.
	spec := VersionSpec newFromParent: o for: VersionedObject new.
	self assert:  o isCurrentVersion.
	self deny:  spec isCurrent.
	spec setCurrent.
	self assert:  spec isCurrent.
	self deny: o isCurrentVersion.! !

!VersionedExample methodsFor: 'accessing' stamp: ' 21/4/07 22:08'!
body
	^body! !

!VersionedExample methodsFor: 'accessing' stamp: ' 21/4/07 22:08'!
body: anObject
	body := anObject! !

!VersionedExample methodsFor: 'copying' stamp: ' 21/4/07 22:08'!
copyContentsTo: anObject
	anObject title: self title copy.
	anObject body: self body copy.! !

!VersionedExample methodsFor: 'printing' stamp: ' 21/4/07 22:08'!
printString
	^'aVersionedExample ', 
		(self title notNil ifTrue: [self title] ifFalse: ['']), ' ', 
		(self body notNil ifTrue: [self body] ifFalse: [''])! !

!VersionedExample methodsFor: 'accessing' stamp: ' 21/4/07 22:08'!
title
	^title! !

!VersionedExample methodsFor: 'accessing' stamp: ' 21/4/07 22:08'!
title: anObject
	title := anObject! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
allVersions
	^self version allVersionSpecs collect: [:each | each object]! !

!VersionedObject methodsFor: 'copying' stamp: ' 21/4/07 22:07'!
asNewVersion
	"return a new version of that object with all its current contents"
	| new |
	new := self class new.
	new version: (VersionSpec newFromParent: self for: new).
	self copyContentsTo: new.
	^new! !

!VersionedObject methodsFor: 'copying' stamp: ' 21/4/07 22:07'!
copyContentsTo: anObject
	"override in subclases to copy contents to a new object"! !

!VersionedObject methodsFor: 'accessing-current' stamp: ' 21/4/07 22:07'!
currentVersion
	"find a current version of object in a version chain"
	^self version currentVersionSpec object! !

!VersionedObject methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initVersion
	self version: (VersionSpec firstFor: self)! !

!VersionedObject methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isCurrentVersion
	^self version isCurrent! !

!VersionedObject methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isNewestVersion
	^self version isNewest! !

!VersionedObject methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isOldestVersion
	^self version isOldest! !

!VersionedObject methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isOnlyVersion
	^self version isOldest & self version isNewest! !

!VersionedObject methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isVersionedObject
	^true! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
newerVersions
	^self version newerVersionSpecs collect: [:each | each object]! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
newestVersion
	self isNewestVersion ifTrue: [^self].
	^self newerVersions last! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
nextVersion
	"next version of an object in version chain, if any"
	^self version next! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
olderVersions
	^self version olderVersionSpecs collect: [:each | each object]! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
oldestVersion
	self isOldestVersion ifTrue: [^self].
	^self olderVersions first! !

!VersionedObject methodsFor: 'accessing-versions' stamp: ' 21/4/07 22:07'!
parentVersion
	"older version of an object in version chain, if any. It is a parent of that object, 
	because it is derived from it"
	^self version parent! !

!VersionedObject methodsFor: 'private'!
removeOldVersions
	"remove all versions of this document, which are older than current version"
	| vobjects |
	vobjects := self currentVersion olderVersions.
	vobjects do: [:each | 
		each version parent: nil; next: nil.
		each version: nil]! !

!VersionedObject methodsFor: 'accessing-current' stamp: ' 21/4/07 22:07'!
setCurrentVersion
	"set this object as current version, which has always the same identity "
	| other |
	self isCurrentVersion ifTrue: [^nil].
	other := self currentVersion.
	self swapIdentityWith: other.
	^other version setCurrent "because other is now me!! "! !

!VersionedObject methodsFor: 'private' stamp: ' 21/4/07 22:07'!
swapIdentityWith: anObject
	"carefully adjust object references (object, parent, next) in version specs too!!"
	|  o1 o2 s1Spec s2Spec |
	o1 := self. o2 := anObject.  s1Spec := o1 version. s2Spec := o2 version.
	o1 become: o2.
	s1Spec object: o2. s2Spec object: o1.
	s1Spec isNewest ifFalse:
		[s1Spec next == o2 ifTrue: [s1Spec next: o1] ifFalse: [s1Spec next version parent: o2] ].
	s1Spec isOldest ifFalse:
		[s1Spec parent == o2 ifTrue: [s1Spec parent: o1] ifFalse: [s1Spec parent version next: o2]].
	s2Spec isNewest ifFalse:
		[s2Spec next == o1 ifTrue: [s2Spec next: o2] ifFalse: [s2Spec next version parent: o1] ].
	s2Spec isOldest ifFalse:
		[s2Spec parent == o1 ifTrue: [s2Spec parent: o2] ifFalse: [s2Spec parent version next: o1]].! !

!VersionedObject methodsFor: 'copying'!
undoNewVersion
	"remove new version, if not yet current. Return previous one"
	| previous |
	self isCurrentVersion ifTrue: [^self error: 'cannot remove current version'].
	self isNewestVersion ifFalse: [^self error: 'cannot remove version which is nost last/newest'].
	self isOnlyVersion ifTrue: [^self error: 'cannot remove the one and only version'].
	previous := self parentVersion.
	previous version next: nil.  "this will break a chain of versions to this one"
	^previous! !

!VersionedObject methodsFor: 'private' stamp: ' 21/4/07 22:07'!
version
	version isNil ifTrue: [self initVersion].
	^version! !

!VersionedObject methodsFor: 'private' stamp: ' 21/4/07 22:07'!
version: aVersionSpec
	version := aVersionSpec! !

!VersionedObject methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
versionNumber
	"version number, integer by default, but it can be any string"
	^self version number! !

!VersionedObject methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
versionNumber: aString
	"set version number other than default"
	^self version number: aString! !

!VersionedObject methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
versionWithNumber: aString
	"find version with that number"
	| spec |
	spec := self version versionSpecWithNumber: aString.
	^spec notNil ifTrue: [spec object] ifFalse: [nil]! !

!VersionedObjectTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testFirstCreation
	| o |
	o := VersionedObject new.
	self assert: o versionNumber = '1'.
	self assert:  o isCurrentVersion.
	self assert:  o isOldestVersion.
	self assert:  o isNewestVersion.
	self assert:  o parentVersion isNil.
	self assert:  o nextVersion isNil.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testIdentityPreservation
	| o1 o2 c |
	o1 := VersionedExample new. o1 title: 'test'.
	o2 := o1 asNewVersion.  o2 title: 'sectest'.
	c := o1 currentVersion.
	self assert: c == o1.
	o2 setCurrentVersion.
	self assert: c == o1 currentVersion. "identity must be preserved!! "! !

!VersionedObjectTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testNewVersion
	| o o2 |
	o := VersionedObject new.
	o2 := o asNewVersion.
	self assert: o2 versionNumber = '2'.
	self deny:  o2 isCurrentVersion.
	self deny:  o2 isOldestVersion.
	self assert:  o2 isNewestVersion.
	self assert: o2 parentVersion == o.! !

!VersionedObjectTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testNewVersionOfExample
	| o o2 |
	o := VersionedExample new. o title: 'test'; body: 'this is test'.
	o2 := o asNewVersion.
	self assert: o2 title = o title.
	self assert: o2 body = o body.! !

!VersionedObjectTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSearchByNumber
	| o1 o2 o3 |
	o1 := VersionedExample new. o1 title: 'first'. o2 := o1 asNewVersion. o2 title: 'second'. 
	o3 := o2 asNewVersion. o3 title: 'third'. 
	self assert: ((o2 versionWithNumber: '1') versionNumber = '1').
	self assert: ((o2 versionWithNumber: '2') versionNumber = '2').
	self assert: ((o2 versionWithNumber: '3') versionNumber = '3').
	self assert: ((o2 versionWithNumber: '4') isNil).! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSetCurrent
	| o1 o2 |
	o1 := VersionedObject new. o2 := o1 asNewVersion.
	self assert:  o1 isCurrentVersion.
	self deny:  o2 isCurrentVersion.
	o2 setCurrentVersion.
	self assert:  o1 isCurrentVersion. "o1 and o2 identities are swapped!! "
	self deny:  o2 isCurrentVersion.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwap3Objects
	| o1 o2 o3 |
	o1 := VersionedExample new. o1 title: 'first'. o2 := o1 asNewVersion. o2 title: 'second'. 
	o3 := o2 asNewVersion. o3 title: 'third'. o3 version setCurrent. "to debug more easily"
	self assert: o1 version next == o2. 
	self assert: o2 version parent == o1. self assert: o2 version next == o3.
	self assert: o3 version parent == o2.
	o1 setCurrentVersion.
	self assert: o3 version next == o2. "test chain integrity"
	self assert: o2 version parent == o3. self assert: o2 version next == o1.
	self assert: o1 version parent == o2.
	self assert: o1 title = 'third'. self assert: o2 title = 'second'. self assert: o3 title = 'first'.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwap3Objects2
	| o1 o2 o3 |
	o1 := VersionedExample new. o1 title: 'first'. o2 := o1 asNewVersion. o2 title: 'second'. 
	o3 := o2 asNewVersion. o3 title: 'third'. 
	self assert: o1 version next == o2. 
	self assert: o2 version parent == o1. self assert: o2 version next == o3.
	self assert: o3 version parent == o2.
	o3 setCurrentVersion.
	self assert: o3 version next == o2. "test chain integrity"
	self assert: o2 version parent == o3. self assert: o2 version next == o1.
	self assert: o1 version parent == o2.
	self assert: o1 title = 'third'. self assert: o2 title = 'second'. self assert: o3 title = 'first'.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwapIdentity
	| o1 o2 |
	o1 := VersionedExample new. o1 title: 'first'.
	o2 := o1 asNewVersion. o2 title: 'second'.
	self assert: o1 isCurrentVersion.
	self assert: o1 title = 'first'. self assert: o2 title = 'second'.
	o2 setCurrentVersion.
	self assert: o1 isCurrentVersion. "because of identity swap!! "
	self assert: o1 title = 'second'. self assert: o2 title = 'first'.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwapIdentity2
	| o1 o2 s1 s2 |
	o1 := VersionedExample new. o1 title: 'first'.
	o2 := o1 asNewVersion. o2 title: 'second'.
	s1 := o1 version. s2 := o2 version.
	self assert: s1 object title = 'first'. self assert: s2 object title = 'second'.
	o2 setCurrentVersion.
	"version chain order must be preserved!!"
	self assert: s1 object title = 'first'. self assert: s2 object title = 'second'.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwapIdentity3
	| o1 o2 |
	o1 := VersionedExample new. o1 title: 'first'.
	o2 := o1 asNewVersion. o2 title: 'second'. o2 version setCurrent. "to debug more easily"
	o1 setCurrentVersion. 
	self assert: o1 version object == o1. "check references to spec and back"
	self assert: o2 version object == o2.
	self assert: o1 version parent == o2. "test chain integrity"
	self assert: o2 version next == o1.! !

!VersionedObjectTest methodsFor: 'testing-identity swap' stamp: ' 21/4/07 22:08'!
testSwapIdentity4
	| o1 o2 |
	o1 := VersionedExample new. o1 title: 'first'.
	o2 := o1 asNewVersion. o2 title: 'second'. 
	o2 setCurrentVersion.  "to test other part of VersionedObject swapIdentity"
	self assert: o1 version object == o1. "check references to spec and back"
	self assert: o2 version object == o2.
	self assert: o1 version parent == o2. "test chain integrity"
	self assert: o2 version next == o1.! !

!VersionedObjectTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testVersionIncrement
	| o o2 |
	o := VersionedObject new. o versionNumber: '1234'.
	o2 := o asNewVersion.
	self assert: o2 versionNumber = '1235'.! !

!VersionedObjectTest methodsFor: 'testing-url links' stamp: ' 21/4/07 22:08'!
testWebLink
	| o1 o2 link |
	o1 := VersionedExample new. o1 title: 'first'.
	o2 := o1 asNewVersion. o2 title: 'second'.
	link := WebLink linkTo: o1.
	self assert: link ooReference == o1.
	self deny: (link parms includesKey: 'version').
	link := WebLink linkTo: o2.
	self assert: link ooReference == o1.  "o1 is current version!! "
	self assert: (link parms at: 'version') = '2'.! !

!ViewTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
addView: aSymbol description: aString
	(self views contains: [:each | each key == aSymbol asSymbol]) 
		ifFalse: [self views add: (Association key: aSymbol asSymbol value: (Array with: aString with: #()))]! !

!ViewTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
addView: aSymbol description: aString also: aSymbolArray
	"if view is in aSymbolArray, then it is also considered selected"
	(self views contains: [:each | each key == aSymbol asSymbol]) 
		ifFalse: [self views add: (Association key: aSymbol asSymbol 
			value: (Array with: aString with: aSymbolArray))]! !

!ViewTabs methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initViews
	views := OrderedCollection new.! !

!ViewTabs methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self initViews.
	^self! !

!ViewTabs methodsFor: 'private'!
prepareTabsList
	| app inx view linkTarget |
	app := self app.  inx := 1. 
      view := app view. view = #'' ifTrue: [view := #main].
	linkTarget := app isStandaloneApp ifTrue: [app class] ifFalse: [app observee].
	self views do: [:each | 
		view = each key | ((each value at: 2) includes: view)
			ifTrue: 
				[self addLinkTo: linkTarget text: (each value at: 1) view: each key.
				self selected: inx]
"		 	ifTrue: [self addTextBold: (each value at: 1). self selected: inx] "
			ifFalse: [self addLinkTo: linkTarget text: (each value at: 1) view: each key].
		inx := inx + 1]! !

!ViewTabs methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareTabsList.
	^super streamHtmlTo: aStream for: aRequest on: aSession! !

!ViewTabs methodsFor: 'private' stamp: ' 21/4/07 22:07'!
views
	^views! !

!ViewTabs class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebAnchor methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name: aString
	"name of the anchor. Used for referencing in web links"
	self attributesAt: #name put: aString.! !

!WebAnchor methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIndent
	^true! !

!WebAnchor methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident, '<a'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	"print a text with attributes and composite elements"
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: '</a>', self  eol.! !

!WebAnchor class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
name: aString
	"make an anchor with specified name"
	^self new name: aString! !

!WebAnchor class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
name: aString text: anotherString
	"make an anchor with specified name and text"
	^self new name: aString; text: anotherString.! !

!WebAnchor class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
nr: aNumber
	"make a web anchor in format 'anchorx', for example 'anchor6'"
	^self new name: ('anchor', aNumber printString).! !

!WebAnchor class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
nr: aNumber text: aString
	"make an anchor with specified numberName ('anchor5') and text"
	^(self nr: aNumber) text: aString.! !

!WebApplication methodsFor: 'private-form posting'!
acceptInputsAndActionFrom: aRequest
	|  form |
	form := self formPostedFrom: aRequest.
	form acceptInputsFrom: aRequest.
	self callActionFrom: aRequest. "if any"! !

!WebApplication methodsFor: 'private-obsolete' stamp: ' 21/4/07 22:07'!
actionMainSearch
	self actionSearch! !

!WebApplication methodsFor: 'private-obsolete'!
actionSearch
	"a generic action when search button is pressed. It can be in almost every page."
	| indexApp |
	indexApp := self site index aidaWebAppFor: self session.
	indexApp searchString: self search. self search: ''.
	indexApp actionMain.
	self redirectTo: self site index view: #results! !

!WebApplication methodsFor: 'private-views'!
activateView: aSymbol
	self activeViews add: aSymbol! !

!WebApplication methodsFor: 'private-views'!
activeViews
	"views which have currently open pages on user's browser"
	^self otherAt: #activeViews ifAbsent: [self initActiveViews]! !

!WebApplication methodsFor: 'private-window delegation'!
add: aWebElement
	"add to a form of currently executing context"
	^self context form add: aWebElement! !

!WebApplication methodsFor: 'private-contexts'!
addContext: aContext
	self contexts at: aContext id put: aContext! !

!WebApplication methodsFor: 'private-composing'!
aidaIsRespondingStreamed
	^self context page aidaIsRespondingStreamed! !

!WebApplication methodsFor: 'private-obsolete'!
ajaxUpdate: anOldElement from: anElementToRecreate on: aRequest
	"prepare to update (recreate or refresh) that element by returning a recreated one"
	| new different |
	anOldElement isNil ifTrue:  [^WebElement new]. "only arguments/command was sent. Process it before!! "
	anElementToRecreate isNil ifTrue: [^WebElement new]. "can happen after window/context closing"
	anElementToRecreate creationMethod isNil ifTrue: [^anOldElement]. "in form elements it will return new value!!"
	aRequest context afterCloseUpdate:  anElementToRecreate afterCloseUpdate "element to update, if any".
	different := (anOldElement == anElementToRecreate) not.  "content will be from element different that old one"
	different not ifTrue:     "only when content will be from the old element. "
		[aRequest context announceReplacementWith: anOldElement]. "for reset see WebElement class>>new"
	new := anOldElement isWebWidget
		ifTrue: [self ajaxUpdateWidget: anOldElement from: anElementToRecreate on: aRequest]
		ifFalse: [(anElementToRecreate creationObject notNil 
				and: [anElementToRecreate creationObject isWebWidget]) 
			ifTrue: [self ajaxUpdateWidgetElement: anOldElement from: anElementToRecreate on: aRequest] 
			ifFalse: [self ajaxUpdateAppElement: anOldElement from: anElementToRecreate on: aRequest] ].
	aRequest context cancelReplacement. "if any"
	^new! !

!WebApplication methodsFor: 'private-obsolete'!
ajaxUpdateAppElement: anOldElement from: anElementToRecreate on: aRequest
	"prepare to update (recreate or refresh) some element in current App by returning a recreated one"
	| argument new |
	argument := aRequest postDataStringAt: 'parm'.   "element creation method with an argument (parm) "
	('view*' match: anElementToRecreate creationMethod asString) ifTrue: 
		[^self error: 'Cannot Ajax update views!! View in question: #', anElementToRecreate method].
	new := (self class canUnderstand: anElementToRecreate creationMethod) 
		ifTrue: [(anElementToRecreate creationMethod asString last = $: )
			ifTrue: [self perform: anElementToRecreate creationMethod with: argument ] "object method: parm"
			ifFalse: [argument notNil  "try to call the method with that argument"
				ifTrue: [self perform: (anElementToRecreate creationMethod, ':') asSymbol with: argument]
				ifFalse: [self perform: anElementToRecreate creationMethod] ] ]
		ifFalse: [self error: 'App does not  understand this update method!!' " WebElement new method: nil"].
	^new! !

!WebApplication methodsFor: 'private-obsolete'!
ajaxUpdateWidget: anOldElement from: anElementToRecreate "widget" on: aRequest
	"prepare to update (recreate or refresh) that widget by returning a recreated one"
	| argument creationObject superform new |
	argument := aRequest postDataStringAt: 'parm'.   "element creation method with an argument (parm) "
	creationObject := anElementToRecreate creationObject.
	superform := anElementToRecreate form superform.
	superform removeSubform: anElementToRecreate form.
	aRequest context cancelReplacement. "widget is rebuilt, not replaced with new instance!!"
	new := (creationObject class canUnderstand: anElementToRecreate creationMethod) 
		ifTrue: [(anElementToRecreate creationMethod asString last = $: )
			ifTrue: [creationObject perform: anElementToRecreate creationMethod with: argument ] 
			ifFalse: [argument notNil  "try to call the method with that argument"
				ifTrue: [creationObject perform: (anElementToRecreate creationMethod, ':') asSymbol with: argument]
				ifFalse: [creationObject perform: anElementToRecreate creationMethod] ] ]
		ifFalse: [self error: 'App does not  understand this update method!!' " WebElement new method: nil"].
	superform addSubform: new form.
	^new! !

!WebApplication methodsFor: 'private-obsolete'!
ajaxUpdateWidgetElement: anOldElement from: anElementToRecreate "widget" on: aRequest
	"prepare to update (recreate or refresh) some element in that widget by returning a recreated one"
	| argument creationObject new |
	argument := aRequest postDataStringAt: 'parm'.   "element creation method with an argument (parm) "
	creationObject := anElementToRecreate creationObject.
	new := (creationObject class canUnderstand: anElementToRecreate creationMethod) 
		ifTrue: [(anElementToRecreate creationMethod asString last = $: )
			ifTrue: [creationObject perform: anElementToRecreate creationMethod with: argument ] 
			ifFalse: [argument notNil  "try to call the method with that argument"
				ifTrue: [creationObject perform: (anElementToRecreate creationMethod, ':') asSymbol with: argument]
				ifFalse: [creationObject perform: anElementToRecreate creationMethod] ] ]
		ifFalse: [self error: 'Widget does not  understand this update method!!' " WebElement new method: nil"].
	^new! !

!WebApplication methodsFor: 'private' stamp: 'jm 8/25/2009 20:53'!
announceAction: anActionSymbol onView: aSymbol
	"Squeak specific"
	"When Squeak will have Announcements by default ..."
"	self announce: 
		(AppActionTrigered for: self observee on: self session view: aSymbol action: anActionSymbol)
"! !

!WebApplication methodsFor: 'private' stamp: 'jm 8/25/2009 20:52'!
announceView: aSymbol
	"Squeak specific"
	"When Squeak will have Announcements by default ..."
"	self  announce: 
		(AppViewShowed for: self observee on: self session view: aSymbol)
"! !

!WebApplication methodsFor: 'accessing'!
app
	^self! !

!WebApplication methodsFor: 'private-obsolete'!
ask: aWebElement
	"ask for something, like delete confirmation dialog. Stop execution here until the result is returned. Return 
	that result. See WebDemoApp control flow for examples"
	self show: aWebElement.
	^self context answer! !

!WebApplication methodsFor: 'private-form posting'!
callActionFrom: aRequest
	"Calls an action method if any"
	| form |
	form := aRequest context form.
	aRequest isAjaxPostWithSingleInput ifFalse:     "ajax posts of single form elements doesn't trigger actions!!"
		[self callActionMethodForButton: (form buttonFrom: aRequest) on: aRequest context].
	(aRequest session shouldRedirect not and: [aRequest isAjaxRequest not]) ifTrue:
		[self redirectToView: aRequest view]   " after post always redirect to avoid aidaCtx in Urls!! "! !

!WebApplication methodsFor: 'private-form posting'!
callActionMethodForButton: aButton on: aContext
	"name of button pressed is in argument"
	| methd |
	methd := self class actionMethodForView: aContext view button: aButton. 
	methd notNil 
		ifTrue: [self perform: methd asSymbol]
		ifFalse: [self reportMissingActionMethodIfNeeded].
	self announceAction: aButton action onView: aContext view! !

!WebApplication methodsFor: 'private-window delegation'!
cell
	"delegate to the form of currently executing context"
	^self context form cell! !

!WebApplication methodsFor: 'private-versions' stamp: 'janko 7/18/2008 22:22'!
changeObserveeToVersionFor: aRequest
	| object |
	object := self observee versionWithNumber: (self versionFromRequest: aRequest).
	object notNil ifTrue: [self observee: object]! !

!WebApplication methodsFor: 'private-multilingual' stamp: 'janko 11/12/2008 20:08'!
checkObserveeLanguageFor: aRequest
	"change observee to point to domain object in right language if necessary 
	(from session language or explicit language request in query part of Url)"
	| language new |
	(self isLanguageRequest: aRequest) "language= in query part of url"
		ifTrue: [self session language: (aRequest queryAt: 'language') asSymbol].
	language := self session language.
	new := self observee forLanguage: language.
	new notNil ifTrue: [self observee: new]! !

!WebApplication methodsFor: 'private-versions' stamp: 'janko 7/18/2008 22:25'!
checkObserveeVersionFor: aRequest
	"change observee to point to correct version if necessary"
	(self isVersionRequest: aRequest) ifTrue: [^self changeObserveeToVersionFor: aRequest].
	self observee isCurrentVersion ifFalse: [self observee: self observee currentVersion].! !

!WebApplication methodsFor: 'private-window delegation'!
clear
	"delegate to the form of currently executing context"
	super clear. "overall app stuff"
	^self context form clear "view specific stuff"! !

!WebApplication methodsFor: 'clipboard' stamp: ' 21/4/07 22:07'!
clipboard
	^self session clipboard! !

!WebApplication methodsFor: 'private-composing'!
composeWebPageFor: aRequest 
	| ctx |
	ctx := self findCreateOrSerializeContextFor: aRequest. "for posts and ajax just find, never create. 
														Req's context is also set"
	ctx  isNil ifTrue: 
		[^WebPage new addText: 'request for unknown or nonexistent context!!'; yourself].
	(aRequest isPost and: [aRequest isAjaxRequest not]) "be sure to call that before any post data is accessed!! "
		ifTrue: [ctx form registerStreamedFieldsInto: aRequest]. 
	(aRequest isPost and: [self site contextProcesses])
		ifTrue: [ctx startProcess]. "if not already. Always for posts and Ajax"
	ctx isExecutingInOwnProcess 
		ifTrue: 
			[ctx executeRequest: aRequest. "in ctx's process, will actually call our #printWebPageStepTwoFor:"
			ctx first mainSemaphore wait. "until context's process signal end of executing"
			ctx first initMainSemaphore.
			aRequest context isFirst ifTrue: [ctx stopProcess].
			^aRequest context result] "resulted page of context execution"
		ifFalse: [^self composeWebPageStepTwoFor: aRequest].! !

!WebApplication methodsFor: 'private-composing'!
composeWebPageStepTwoFor: aRequest 
	| toLogin |
	self observee isMultilingual 
		ifTrue: [self checkObserveeLanguageFor: aRequest ].  "and change observee if needed"
	self isObserveeVersioned 
		ifTrue: [self checkObserveeVersionFor: aRequest ]. "and change observee if needed"
	toLogin := false. "self isEncryptionSatisfied ifTrue: [toLogin := true]."
	(aRequest  isPost and: [aRequest  isAjaxRequest not]) ifTrue: 
		[(self updateAllowed: aRequest context view) 
			ifTrue: [self acceptInputsAndActionFrom: aRequest] ifFalse: [toLogin := true] ].
	toLogin ifTrue:
		[(self observee == self site admin and: [self session newView = 'login']) 
			ifFalse: [self redirectTo: self site admin view: #login].
		^WebPage new].
	self session lastApp: self. "!!!!!!"
 	aRequest isAjaxRequest ifTrue: [^self respondToAjaxRequest: aRequest].
	self session shouldRedirect ifTrue: [^WebPage new].
	self setProcessFromTaskId. "for BPM engine, if present"
	^self composeWebView: aRequest context view for: aRequest.! !

!WebApplication methodsFor: 'private-composing'!
composeWebView: aViewSymbol for: aRequest
 	"build a web page for that view"
	| method page form |
	aRequest context page clear; clearAttributesExceptId; setRandomId;
		initPageHeaderLinks; initPageScripts; checkBrowserSupport.
	aRequest context form initFields.
	method := self class viewMethodForView: aViewSymbol. 
	method isNil ifTrue: [^WebElement new addTextH3: 'ERROR: view named ', aViewSymbol printString, ' does not exist'; yourself].
	^(self viewAllowed: aViewSymbol)
		ifTrue: [page := self perform: method. "like #viewMain etc. "
			page isWebApplication ifTrue: 
				[form := aRequest context form.
				self session inTranslationMode ifTrue: [form prepareForTranslation]. "in-line edit"
				aRequest context window registerFormElements]. "must be after above transl.preparation!!"
			self storeThisUrl.
			self announceView: aViewSymbol.
			self activateView: aViewSymbol. "page is now shown/active on user browser"
			page]
		ifFalse: [self redirectTo: self site admin view: #login.
			WebPage new].! !

!WebApplication methodsFor: 'accessing' stamp: 'jm 11/18/2010 14:46'!
context
	"a context of currently executing web request"
	"use sparingly, slow!! "
	| ctx |
	ctx := self firstContextFromStack.
	^ctx notNil 
		ifTrue: [ctx]
		ifFalse: [self contexts values    "for tests to work, otherwise this is invalid!! "
			detect: [:each | each isFirst and: [each view = #main] ] 
			ifNone: [nil]]! !

!WebApplication methodsFor: 'private-contexts'!
contextForView: aSymbol
	^self contexts values 
		detect: [:ctx | ctx isFirst and: [ctx view = aSymbol] ] 
		ifNone: [nil]! !

!WebApplication methodsFor: 'private-contexts'!
contexts
	"a dictionary of context by context id (a unique number)"
	contexts isNil ifTrue: [self initContexts].
	^contexts! !

!WebApplication methodsFor: 'clipboard' stamp: ' 21/4/07 22:07'!
copyToClipboard
	"copy an url and title of current view of observee object to web clipboard"
	| object |
	object := self observee isVersionedObject
		ifTrue: [self observee currentVersion] "so that link will be aways same regardles of version!!"
		ifFalse: [self observee].
	title := (object class canUnderstand: #id) ifTrue: [object id, ' '] ifFalse: [''].
	title := (object class canUnderstand: #title) ifTrue: [title, object title] ifFalse: [nil].
	title isNil ifTrue: 
		[title := (object class canUnderstand: #indexTitle) ifTrue: [object indexTitle] ].
	title isNil ifTrue: [title := self title].
	self clipboard 
		title: title;
		url: (self site urlResolver halfUrlFor: object);
		object: object! !

!WebApplication methodsFor: 'private-views'!
deactivateView: aSymbol
	self activeViews remove: aSymbol ifAbsent: [].
	self session realtimeHandler cleanup "to remove realtime connections on just closed page"! !

!WebApplication methodsFor: 'accessing'!
defaultView
	" #main "
	^self class defaultView! !

!WebApplication methodsFor: 'private-contexts'!
ensureContextForView: aViewSymbol for: aRequest
	aRequest context isNil ifTrue:
		[aRequest context: (self contextForView: aViewSymbol). "try to find it first among existing for that view"
		aRequest context isNil ifTrue: [| ctx |
			ctx := (WebContextFirst newOn: self) view: aViewSymbol.
			aRequest context: ctx.
			self addContext: ctx] ]! !

!WebApplication methodsFor: 'error reporting' stamp: 'janko 9/30/2011 11:38'!
errorReport
	"element with report of errors, if any"
	| e |
	e := WebElement newId: #error.  "see WebStyle css42ErrorReport for style definition!! "
	self showError notNil ifTrue: 
		[(e addText: self showError) style: '{color: red}'].
	self showError: nil.
	^e! !

!WebApplication methodsFor: 'private-contexts'!
findContextFor: aRequest
	"POSTs and Ajax requests must always have context ids!!. Also set the current context"
	| id |
	id := aRequest contextId.
	(id isNil or: [(self contexts includesKey: id) not]) ifTrue: [^nil].
	^self contexts at: id! !

!WebApplication methodsFor: 'private-contexts'!
findContextSameViewFor: aRequest
	"if a context for the requested view already exist, use it"
	| requestedView |
	requestedView := aRequest view. 
	requestedView isNil ifTrue: [requestedView := #main].
	^self contextForView: requestedView! !

!WebApplication methodsFor: 'private-contexts'!
findCreateOrSerializeContextFor: aRequest
	"and set the current context and view"
	"for posts and ajax request the context id must always be present in request!!"
	"Serialize execution if some other request is already executing"
	| ctx |
	ctx := self findContextFor: aRequest.
	(ctx isNil and: [aRequest isPost or: [aRequest isAjaxRequest]]) ifTrue: [^nil]. "this should not happen!!"
	ctx isNil ifTrue: [ctx := self findContextSameViewFor: aRequest]. "temporary"
	ctx isNil ifTrue: 
		[ctx := (WebContextFirst newOn: self) view: aRequest view.
		self addContext: ctx].
	ctx isBusy ifTrue: [ctx serialize: aRequest].  "context is busy, serialize execution"
	ctx event: aRequest.
	aRequest context: ctx.
	^ctx! !

!WebApplication methodsFor: 'private-form posting'!
formPostedFrom: aRequest
	"get a form from which input is posted by this request"
	| elementToUpdate |
	aRequest isAjaxRequest ifFalse: [^aRequest context form].
	aRequest isAjaxPostWithSingleInput ifTrue: 
		[^(aRequest context form fieldNamed: aRequest ajaxSingleInputName) form].
	elementToUpdate := aRequest context elementId: aRequest ajaxElementId.
	elementToUpdate isNil ifTrue: [^aRequest context form]. "always?"
	elementToUpdate isStubElement ifTrue: [^aRequest context form]. 
	^elementToUpdate creationObject isWebWidget
			ifTrue: [elementToUpdate creationObject form]
			ifFalse: [aRequest context form]. "form of currently shown window/page"! !

!WebApplication methodsFor: 'private-composing'!
helpLink
	"link to help page for current view and App. If not exist, then nothing, exept for 
	admin - link to creation of new help page"
	| link viewName |
	self class == WebHelpPageApp ifTrue: [^WebElement new].
	viewName := self inDefaultView ifTrue: ['main'] ifFalse: [self view asString].
	link := WebLink newClass: #helpLink.
	(self site help existApp: self view: viewName)
		ifTrue: [link text: ('<b>', self style helpText, '</b>') 
			linkTo: (self site help forApp: self view: viewName)]
		ifFalse: [self user hasAdminRights
			ifTrue: [link text: '<b>', self style addHelpText, '</b>' linkTo: self site help; view: 'newPage'; 
				parameter: 'app' value: self class name asString;
				parameter: 'hview' value: viewName]
			ifFalse: [^WebElement new] ].
	^link! !

!WebApplication methodsFor: 'accessing'!
inDefaultView
	"#main or not defined"
	^(self view = self defaultView) | (self view = #'')! !

!WebApplication methodsFor: 'accessing-modes' stamp: ' 21/4/07 22:07'!
inEditMode
	^self mode = #edit! !

!WebApplication methodsFor: 'error reporting'!
inError
	^self showError notNil and: [self showError notEmpty]! !

!WebApplication methodsFor: 'accessing-modes' stamp: ' 21/4/07 22:07'!
inViewMode
	^self mode = #view! !

!WebApplication methodsFor: 'private-obsolete' stamp: ' 21/4/07 22:07'!
indexObservee
	"index or reindex observee of that app"
	^self site index indexObject: self observee! !

!WebApplication methodsFor: 'initialize-release'!
initActiveViews
	^self otherAt: #activeViews put: Set new! !

!WebApplication methodsFor: 'private-security'!
initAdminAccess
	"admin group has rights to all views and updates in all Apps!! "
	self site securityManager initAdminAccess.! !

!WebApplication methodsFor: 'initialize-release'!
initContexts
	contexts := Dictionary new.! !

!WebApplication methodsFor: 'initialize-release'!
initOther
	other := Dictionary new.! !

!WebApplication methodsFor: 'initialize-release'!
initialize
	"override in subclasses if needed"! !

!WebApplication methodsFor: 'testing'!
isActive
	"not yet cleaned up"
	^self session notNil! !

!WebApplication methodsFor: 'private-views'!
isActiveView: aSymbol
	^self activeViews includes: aSymbol! !

!WebApplication methodsFor: 'private-bpm' stamp: ' 21/4/07 22:07'!
isControledByBPMProcess
	"by a BPM process instance, which control a workflow of this app too"
	^self process notNil! !

!WebApplication methodsFor: 'private-security'!
isEncryptionSatisfied
	^(self mustBeEncrypted: self session newView) and: [self session lastRequest isEncrypted not]! !

!WebApplication methodsFor: 'private-multilingual' stamp: 'janko 7/18/2008 22:26'!
isLanguageRequest: aRequest
	^(aRequest queryAt: 'language') notNil! !

!WebApplication methodsFor: 'private-versions' stamp: ' 21/4/07 22:07'!
isObserveeVersioned
	^self observee isVersionedObject! !

!WebApplication methodsFor: 'testing'!
isStandaloneApp
	"it is not a representation of some domain object in MVC fashion"
	^self otherAt: #StandaloneApp ifAbsent: [false]! !

!WebApplication methodsFor: 'private-versions' stamp: 'janko 7/18/2008 22:26'!
isVersionRequest: aRequest
	^(self versionFromRequest: aRequest) notNil! !

!WebApplication methodsFor: 'testing'!
isWebApplication
	^true! !

!WebApplication methodsFor: 'testing'!
isWebWidget
	^false! !

!WebApplication methodsFor: 'accessing-modes' stamp: ' 21/4/07 22:07'!
mode
	| mode |
	mode := self otherAt: #Mode.
	^mode isNil 
		ifTrue: [self setViewMode. self mode] 
		ifFalse: [mode]! !

!WebApplication methodsFor: 'private' stamp: ' 21/4/07 22:07'!
mode: aSymbol
	"portlet modes #view #edit "
	self otherAt: #Mode put: aSymbol! !

!WebApplication methodsFor: 'private-security'!
mustBeEncrypted: aViewSymbol
	"check  if this view must be sent encrypted"
	| right |
"	(self observee = self site admin) & (aViewSymbol = #login) ifTrue: [^true]." "!!!!!!"
	 right := self site securityManager 
		isUser: self user
		allowedTo: (self class encryptSymbolFor: aViewSymbol)
		on: self class name.
	^right! !

!WebApplication methodsFor: 'private-window delegation'!
newCell
	"delegate to the form of currently executing context"
	^self context form newCell! !

!WebApplication methodsFor: 'private-window delegation'!
newRow
	"delegate to the form of currently executing context"
	^self context form newRow! !

!WebApplication methodsFor: 'private-window delegation'!
newTable
	"delegate to the form of currently executing context"
	^self context form newTable! !

!WebApplication methodsFor: 'redirection' stamp: ' 21/4/07 22:07'!
newView: aSymbol
	"in action methods, to direct to a specified view after button pressed"
	self session newView: aSymbol! !

!WebApplication methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
observee
	"return reference to an object, for which this app acts as an observer - to make an user interface
	of them"
	^observee! !

!WebApplication methodsFor: 'private' stamp: ' 21/4/07 22:07'!
observee: anObject
	"set the reference to an object, for which this app acts as an observer - to make an user interface
	of them"
	observee := anObject! !

!WebApplication methodsFor: 'private-other'!
other
	^other! !

!WebApplication methodsFor: 'private-other'!
otherAt: aSymbol
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebApplication methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebApplication methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebApplication methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebApplication methodsFor: 'accessing'!
page
	"a webpage on which currently built view is shown"
	^self context page! !

!WebApplication methodsFor: 'private'!
pageContentWidth
	"obsolete, rather use direct: self  style... !! "
	^self style pageContentWidth! !

!WebApplication methodsFor: 'clipboard' stamp: ' 21/4/07 22:07'!
pasteFromClipboard
	"get a DocLink with title and url. Nil if clipboard empty"
	self clipboard isEmpty ifTrue: [^nil].
	^self clipboard asDocLink! !

!WebApplication methodsFor: 'accessing-other' stamp: ' 21/4/07 22:07'!
process
	"a BPM.Process instance, on which this app is activated by some task"
	^self otherAt: #Process! !

!WebApplication methodsFor: 'accessing-other' stamp: ' 21/4/07 22:07'!
process: aBPMProcess
	self other at: #Process put: aBPMProcess! !

!WebApplication methodsFor: 'redirection'!
redirectTo: anObjectOrUrlString
	"redirect browser to a default view for specified object or url link"
	anObjectOrUrlString isNil ifTrue: [^self error: 'redirection target is nil!!'].
	self session redirectLink: (WebLink text:'' linkTo: anObjectOrUrlString).! !

!WebApplication methodsFor: 'redirection' stamp: 'jm 6/27/2009 20:43'!
redirectTo: anObjectOrUrlString view: aSymbol
	"redirect browser to a specified view for specified object or url link"
	anObjectOrUrlString isNil ifTrue: [^self error: 'redirection target is nil!!'].
	self session redirectLink: (WebLink text:'' linkTo: anObjectOrUrlString view: aSymbol).! !

!WebApplication methodsFor: 'redirection' stamp: 'jm 6/27/2009 20:43'!
redirectTo: anObjectOrUrlString view: aSymbol parameter: aParmString value: aValueString
	"redirect browser to a specified view for specified object or url link"
	anObjectOrUrlString isNil ifTrue: [^self error: 'redirection target is nil!!'].
	self session redirectLink: ((WebLink text:'' linkTo: anObjectOrUrlString view: aSymbol)
		 parameter: aParmString value: aValueString).! !

!WebApplication methodsFor: 'redirection'!
redirectToView: aSymbol
	"redirect browser to a different view for same observee"
	| target |
	target := self observee notNil 
		ifTrue: [self observee] 
		ifFalse: [self class].  "standalone App without link to domain model. Class!! "
	self session redirectLink: (WebLink text:'' linkTo: target view: aSymbol).! !

!WebApplication methodsFor: 'private-contexts'!
removeContext: aContext
	self contexts removeKey: aContext id ifAbsent: []! !

!WebApplication methodsFor: 'private'!
removeYourself
	"called during session application state cleanup"
	self session isNil ifTrue: [^nil].
	self observee notNil ifTrue:
		[self session removeApp: self for: self observee type: #web].
	self session: nil.
	self observee: nil.! !

!WebApplication methodsFor: 'private-form posting'!
reportMissingActionMethodIfNeeded
	self error: 'Action method missing or with wrong name. Name must be composed as ''action''+viewname+action(optional), like #actionMainSave, if you put button with action: #save in viewMain'! !

!WebApplication methodsFor: 'private-obsolete'!
respondToAjaxAutocomplete: aRequest
	|  form fieldName fieldValue field choices e |
	form := self formPostedFrom: aRequest.
	fieldName := aRequest ajaxSingleInputName.
	fieldValue := (aRequest "context request" postDataAt: fieldName) value.
	fieldValue := AIDASite convert: fieldValue fromCodepage: #utf8.
	field := form fields at: fieldName. 
	choices := field getChoicesForEntry: fieldValue.
	e := WebList newUnordered.
	choices do: [:each || string |
		string := each convertToSloveneChars.
		e add: (WebRawText text: (AIDASite convert: string toCodepage: #utf8))].
	^e! !

!WebApplication methodsFor: 'private-obsolete'!
respondToAjaxCloseWindow: aRequest
	"OBSOLETE"
	| ctx |
	ctx := aRequest context.
	ctx result: WebElement basicNew.
	ctx parent result: ctx result. "just in case"
	ctx first mainSemaphore signal. " to ensure continuing main thread"
	ctx parent isFirst ifTrue: [ctx parent stopProcess].  "we don't need it anymore"
	ctx close. "finaly the time to safely close our context"! !

!WebApplication methodsFor: 'private-obsolete'!
respondToAjaxInPlaceEditing: aRequest
	"field is immediatelly posted/saved!! "
	| fieldValue field response |
	field := aRequest context elementId: aRequest ajaxElementId.
	field isFormated & aRequest isAjaxWikiFormatedRequest not  ifFalse:
		[fieldValue := (aRequest postDataAt: 'value') value.
		fieldValue := AIDASite convert: fieldValue fromCodepage: #utf8.
		field value: fieldValue.
		field save].
	response := field value.
	aRequest isAjaxWikiFormatedRequest ifTrue: [response := response asWikiHtml].
	response := AIDASite convert: response toCodepage: #utf8.
	^WebElement new add: (WebRawText text: response); yourself! !

!WebApplication methodsFor: 'private-obsolete'!
respondToAjaxRequest: aRequest
	| oldElement elementToRecreate e result ctx |
	oldElement := aRequest context elementId: aRequest ajaxElementId. "should be here, its context stil alive"
	elementToRecreate := aRequest context elementId: aRequest ajaxElementToRecreateId.
	aRequest isAjaxInPlaceEditingRequest ifTrue: [^self respondToAjaxInPlaceEditing: aRequest].
	aRequest isAjaxAutocompleteRequest ifTrue: [^self respondToAjaxAutocomplete: aRequest].
	aRequest isAjaxPostWithInput ifTrue: [self acceptInputsAndActionFrom: aRequest].
	aRequest isAjaxCloseWindowRequest ifTrue: [self respondToAjaxCloseWindow: aRequest]. "then continue here!!"
	aRequest isAjaxPopupWindowRequest 
		ifTrue: 
			[ctx := aRequest context createNewContext. "is also added to context chain and also to this app"
			ctx event: aRequest.
			aRequest context: ctx. "switch to a new context during th rest of execution"
			e := self ajaxUpdate: oldElement from: elementToRecreate on: aRequest. 
			e := self wrap: e intoPopupWindow: ctx window] "e is now window with wrapped element"
		ifFalse: 
			[e := self ajaxUpdate: oldElement from: elementToRecreate on: aRequest]. 
	e registerFormElements.
	e prepareToHtmlStreamingOn: self session. "to prepare again"
	result := e copy.
	result nilAttributes. "to be just plain element, no div,  to send inner html of original element only"
	aRequest context result: result.
	^result! !

!WebApplication methodsFor: 'private-ajax'!
respondToEvent: aWebEvent
	"this method is here just to have an App in the stack, because 'climbing of the stack' methods"
	| ctx e |
	aWebEvent element isWindowPopupRequested
		ifTrue: 
			[ctx := aWebEvent context createNewContext. "is also added to context chain and also to this app"
			aWebEvent context: ctx. "switch to a new context during the rest of execution"
			ctx event: aWebEvent.
			e := aWebEvent element handleEvent: aWebEvent. 
			e creationContext: ctx.  "change the default to the popup one"
			e := self wrap: e intoPopupWindow: ctx window. "e is now window with wrapped element"
			self session queueUpdateElement: e]
		ifFalse: 
			[aWebEvent element handleEvent: aWebEvent]! !

!WebApplication methodsFor: 'private-window delegation'!
row
	"delegate to the form of currently executing context"
	^self context form row! !

!WebApplication methodsFor: 'accessing-other' stamp: ' 21/4/07 22:07'!
search
	^self otherAt: #Search! !

!WebApplication methodsFor: 'accessing-other' stamp: ' 21/4/07 22:07'!
search: aString
	"search input field"
	self otherAt: #Search put: aString! !

!WebApplication methodsFor: 'accessing'!
session
	"on which this App represent the observed domain object"
	^session! !

!WebApplication methodsFor: 'private'!
session: aWebSession
	"on which this App represent the observed domain object"
	session := aWebSession! !

!WebApplication methodsFor: 'accessing-modes' stamp: ' 21/4/07 22:07'!
setEditMode
	self mode: #edit! !

!WebApplication methodsFor: 'private-bpm' stamp: ' 21/4/07 22:07'!
setProcessFromTaskId
	"set a reference to a BPM process instance, which control a workflow of this app too"
	| uuid workitem |
	uuid := self session lastRequest queryAt: 'taskId' ifAbsent: [^nil].
	workitem := self site repository bpm worklist itemWithTaskUuid: uuid for: self user.
	workitem isNil ifTrue: [^nil].
	self process: workitem task process.
	workitem subscribeToApp: self.! !

!WebApplication methodsFor: 'private'!
setStandaloneApp
	"it is not a representation of some domain object in MVC fashion"
	self otherAt: #StandaloneApp put: true! !

!WebApplication methodsFor: 'accessing-modes' stamp: ' 21/4/07 22:07'!
setViewMode
	self mode: #view! !

!WebApplication methodsFor: 'private-obsolete'!
show: aWebElement
	"show something like info dialog. Stop execution here until the dialog is closed. 
	See WebDemoApp control flow for examples"
	| ourCtx popupCtx |
	ourCtx := self context.
	popupCtx := ourCtx request context createNewContext. "is also added to context chain and also to this app"
	popupCtx request: ourCtx request.
	ourCtx request context: popupCtx. "switch to a new context during the rest of execution"
	popupCtx result:
		(self wrap: aWebElement intoPopupWindow: popupCtx window). "e is now window with wrapped element"
	popupCtx result changeContextFrom: ourCtx to: popupCtx. "scan for all references to contexts and change them"
	aWebElement registerFormElementsTo: popupCtx form.  "probably already, but just to be sure"
	ourCtx first mainSemaphore signal. "to return that popup"
	ourCtx wait.
	"now the execution of our process is interrupted until the popup window and therefore its context is closed"! !

!WebApplication methodsFor: 'error reporting'!
showError
	^self otherAt: #Error! !

!WebApplication methodsFor: 'error reporting'!
showError: aString
	"error message to be written on web page. "
	self otherAt: #Error put: aString! !

!WebApplication methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	"reference to a site on which this app shows some object. "
	^self session site! !

!WebApplication methodsFor: 'private-composing'!
storeThisUrl
	"to a User. It is helpull for return after logon, for instance"
	self user lastAppUrl: self session lastRequest uriString! !

!WebApplication methodsFor: 'private-composing'!
streamHtmlTo: aStream for: aRequest on: aSession
	"For apps we print a window of currently executing context"
	^aRequest context page streamHtmlTo: aStream for: aRequest on: aSession.! !

!WebApplication methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
style
	^self site style! !

!WebApplication methodsFor: 'private-window delegation'!
table
	"delegate to the form of currently executing context"
	^self context form table! !

!WebApplication methodsFor: 'private-window delegation'!
title
	"delegate to the window of currently executing context"
	^self context page title! !

!WebApplication methodsFor: 'private-window delegation'!
title: aStringOrMultilangAssociation
	"delegate to the window of currently executing context"
	^self context page title: aStringOrMultilangAssociation! !

!WebApplication methodsFor: 'private-security'!
updateAllowed: aViewSymbol
	"check if update is allowed to this observee object with specified view"
	"update for admin login page is always allowed"
	"reregister rights for admin if denial is encountered "
	| right |
	(self observee = self site admin) & (aViewSymbol = #login) ifTrue: [^true].
	 right := self site securityManager 
		isUser: self user allowedTo: (self class updateRightSymbolFor:aViewSymbol)
		on: self class name.
	(right not and: [self session adminAllowed]) ifTrue: 
		[self initAdminAccess. 
		^self updateAllowed: aViewSymbol].
	^right! !

!WebApplication methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
user
	"reference to a user of current session "
	^self session user! !

!WebApplication methodsFor: 'private-versions' stamp: 'np 10/20/2008 16:39'!
versionFromRequest: aRequest
	"for Ajax requests too!!"
	| version |
	version := aRequest queryAt: 'version'.
	version isNil ifTrue:
		[aRequest isAjaxRequest ifFalse: [^nil].
		version := aRequest isPost
			ifTrue: [(aRequest postDataAt: 'version') value]
			ifFalse: [aRequest queryAt: 'version'] ].
	^version! !

!WebApplication methodsFor: 'accessing'!
view
	"view of currently executing web context"
	"use sparingly, slow!! "
	^self context view! !

!WebApplication methodsFor: 'private-security'!
viewAllowed: aViewSymbol
	"check if page view is allowed to this observee object with specified view"
	"admin logon page always allowed"
	"reregister rights for admin if denial is encountered "
	| right |
	(self observee = self site admin) & (aViewSymbol = #login) ifTrue: [^true].
	 right := self site securityManager 
		isUser: self user allowedTo: (self class viewRightSymbolFor: aViewSymbol)
		on: self class name.
	(right not and: [self session adminAllowed]) ifTrue: 
		[self initAdminAccess. ^true].
	^right! !

!WebApplication methodsFor: 'private-obsolete'!
visitsCount
	"returns number of visits of this page"
     ^(self site urlResolver counterFor: self observee)
		total! !

!WebApplication methodsFor: 'accessing'!
window
	"window in of currently executing web context"
	"use sparingly, slow!! "
	^self context window! !

!WebApplication methodsFor: 'private-ajax'!
wrap: anElement intoPopupWindow: aWebWindow
	"put the element into a WebWindow and prepare it for popup"
	| ctx o l |
	ctx := aWebWindow context.
	aWebWindow addText: '<style>', aWebWindow popupStyle, '</style>'.
	o := WebElement newId: 'overlay', ctx level printString.
	l := (WebElement newId: 'lightbox', ctx level printString) style: 'display: none;'.
	l add: anElement.
	aWebWindow add: o; add: l.
	aWebWindow scriptAfter: 'updateLightboxLevel(', ctx level printString,')'. "from WebStyle>>js30Lightbox"
	aWebWindow elementToReplace: ctx parent window popupStub.
	aWebWindow afterCloseUpdate: anElement afterCloseUpdate. "if any"
	^aWebWindow! !

!WebApplication class methodsFor: 'view, action methods'!
actionMethodForView: aViewSymbol
	"obsolete, only for WebSecurityManagerApp !!"
	| method viewSymbol |
	viewSymbol := aViewSymbol isEmpty 
		ifTrue: [self defaultView] ifFalse: [aViewSymbol asSymbol].
	method := self composedActionMethodNameForView: viewSymbol.
	(self canUnderstand: method) ifFalse: [^nil].
	^method! !

!WebApplication class methodsFor: 'view, action methods'!
actionMethodForView: aViewSymbol button: aButton
	"if no method for that button name, return nil"
	| method viewSymbol |
	viewSymbol := aViewSymbol asString isEmpty 
		ifTrue: [self defaultView] ifFalse: [aViewSymbol asSymbol].
	method := self composedActionMethodNameForView: viewSymbol action: aButton action.
	(self canUnderstand: method) ifTrue: [^method].
	'search' = aButton action ifTrue: [^#actionSearch].
	^nil
"
	method := self composedActionMethodNameForView: viewSymbol.
	(self canUnderstand: method) ifTrue: [^method].
	^nil
"! !

!WebApplication class methodsFor: 'private'!
allComposedViewMethods
	| methods |
	methods := self selectors asSet select: [:each | 'view*' match:each asString].
	methods := methods reject: [:each | 
		#(view viewAllowed: viewMethodForView: ) includes: each].
	^self superclass isWebApplication 
		ifTrue: [methods addAll: self superclass allComposedViewMethods; yourself]
		ifFalse: [methods]

"WebDemoApp new class allComposedViewMethods"! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
allComposedViews
	"remove 'view' and lowercase start of remining part of method to get a view name from method"
	^self allComposedViewMethods collect: [:each | 
		((String with: (each at: 5) asLowercase), 
			(each copyReplaceFrom: 1 to: 5 with: String new)) asSymbol].

"WebDemoApp new class allComposedViews"! !

!WebApplication class methodsFor: 'accessing' stamp: 'JM 4/26/2007 17:06'!
allViews
	^self allComposedViews! !

!WebApplication class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allWebAppClasses
	"return an ordered collection with a WebApplication class all their subclasses ordered
	by levels of inheritance and by class name on the same level"
	| classes |
	classes := OrderedCollection new.
	self allWebAppClassesTo: classes.
	^classes

"WebApplication allWebAppClasses"! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
allWebAppClassesTo: aCollection 
	"return an ordered collection with a WebApplication class all their subclasses ordered
	by levels of inheritance and by class name on the same level"
	| subcls |
	aCollection add: self.
	subcls := SortedCollection withAll: self subclasses
				sortBlock: [:a :b | a name < b name].
	subcls do: [:subclass | subclass allWebAppClassesTo: aCollection]! !

!WebApplication class methodsFor: 'security' stamp: ' 21/4/07 22:07'!
allowAllUpdatesFor: aWebUserOrGroup on: anAIDASite
	"set access rigths to allow all updates on that web app for specified user or group 
	on specified server"
	self allWebAppClasses do: [:appClass |
		appClass allViews do: [:appView |
			anAIDASite securityManager
				setAccessRights: (appClass updateRightSymbolFor: appView)
				for: aWebUserOrGroup
				on: appClass name] ].

"
WebSecurityManagerApp allowAllUpdatesFor: 
	(WebSecurityManager default adminUser)
		on: AIDASite default
"! !

!WebApplication class methodsFor: 'security' stamp: ' 21/4/07 22:07'!
allowAllViewsFor: aWebUserOrGroup on: anAIDASite
	"set access rigths to allow all views on all web apps for specified user or group on specified site"
	self allWebAppClasses do: [:appClass |
		appClass allViews do: [:appView |
			anAIDASite securityManager
				setAccessRights: (appClass viewRightSymbolFor: appView)
				for: aWebUserOrGroup
				on: appClass name] ].
"
WebApplication allowAllViewsFor: 
	(WebSecurityManager default adminUser)
	on: AIDASite default
"! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
appClassLevel
	"return the level of inheritance of a class, relative to a WebApplication class"
	| level cls |
	level := 1.
	cls := self.
	[cls == WebApplication] whileFalse: 
			[level := level + 1.
			cls := cls superclass].
	^level! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
capitalizeName: aString
	"make first char uppercase"
	aString isEmpty ifTrue: [^''].
	^(String with: aString first asUppercase), (aString copyFrom: 2 to: aString size)

"WebApplication capitalizeName: 'main' "! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
composedActionMethodNameForView: aViewName
	^('action', (self capitalizeName: aViewName asString)) asSymbol

"WebApplication composedActionMethodNameForView: 'main'"! !

!WebApplication class methodsFor: 'private'!
composedActionMethodNameForView: aViewName action: aSymbol
	| mtname |
	mtname := (self composedActionMethodNameForView: aViewName) asString.
	aSymbol notNil ifTrue:
		[mtname := mtname, (self capitalizeName: aSymbol asString)].
	^mtname asSymbol

"WebApplication composedActionMethodNameForView: 'main' action: 'addFolder'"! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
composedMethodNameForView: aViewName
	^('view', (self capitalizeName: aViewName asString)) asSymbol

"WebApplication new class composedMethodNameForView: 'main'"! !

!WebApplication class methodsFor: 'accessing'!
defaultView
	^#main! !

!WebApplication class methodsFor: 'security'!
encryptSymbolFor: aViewSymbol
	"if view does not exist, then use a default (first) view. Be sure to use a
	sublclass of WebApplication when calling that method to find the right default view"
	| view allViews|
	allViews := self allViews.
	allViews isEmpty ifTrue: [^nil].
	view := (allViews includes: aViewSymbol)
		ifTrue: [aViewSymbol]
		ifFalse: [self defaultView].
	view := (String with: view asString first asUppercase), 
		(view asString copyFrom: 2 to: view asString size).
	^('encrypt', view asString) asSymbol! !

!WebApplication class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isWebApplication
	^true! !

!WebApplication class methodsFor: 'instance creation'!
newFor: anObject on: aSession
	"guess a class from anObject class name (class name + 'App') and create instance of it"
	| instance |
	instance := self newFromNameFor: anObject on: aSession.
	instance isNil ifTrue: [^nil].
	^instance session: aSession! !

!WebApplication class methodsFor: 'private' stamp: 'jm 8/21/2009 18:15'!
newFromNameFor: anObject on: aSession
	"Try to create of AnObjectApp instance if that class exist."
	"Squeak specific!!"
	| className class |
	className := (anObject class name asString, 'App') asSymbol.
	class := [Smalltalk at: className] on: Error do: [:ex | ^nil].  "Squeak specific!!"
	(class allSuperclasses includes: WebApplication) ifFalse: [^nil].
	^class basicNew 
		observee: anObject; 
		session: aSession; 
		initialize.
! !

!WebApplication class methodsFor: 'security'!
updateRightSymbolFor: aViewSymbol
	"return a right symbol, used for setting/testing rights to update a page with specified view.
	A symbol is composed as follows: '#upd',<aViewSymbol> for expample for view #brief
	result is #updbrief"
	"if view does not exist, then use a default (first) view. Be sure to use a
	sublclass of WebApplication when calling that method to find the right defult view"
	| view allViews|
	allViews := self allViews.
	allViews isEmpty ifTrue: [^nil].
	view := (allViews includes: aViewSymbol)
		ifTrue: [aViewSymbol]
		ifFalse: [self defaultView].
	view := (String with: view asString first asUppercase), 
		(view asString copyFrom: 2 to: view asString size).
	^('upd', view) asSymbol! !

!WebApplication class methodsFor: 'view, action methods'!
viewMethodForView: aViewSymbol
	| method viewSymbol |
	viewSymbol := aViewSymbol isEmpty 
		ifTrue: [self defaultView] ifFalse: [aViewSymbol].
	method := self composedMethodNameForView: viewSymbol.
	(self canUnderstand: method) ifFalse: [^nil].
	^method

"WebDemoApp new class viewMethodForView: #imageGallery"! !

!WebApplication class methodsFor: 'security'!
viewRightSymbolFor: aViewSymbol
	"return a right symbol, used for setting/testing rights to view a page with specified view.
	a symbol is composed as follows: '#view',<aViewSymbol> for expample for view #brief
	result is #viewbrief"
	"if view does not exist, then use a default (first) view. Be sure to use a
	sublclass of WebApplication when calling that method to find the right defult view"
	| view allViews|
	allViews := self allViews. allViews isEmpty ifTrue: [^nil].
	view := (allViews includes: aViewSymbol)
		ifTrue: [aViewSymbol]
		ifFalse: [self defaultView].
	view := (String with: view asString first asUppercase), 
		(view asString copyFrom: 2 to: view asString size).
	^('view', view) asSymbol! !

!WebApplicationTest methodsFor: 'running' stamp: ' 21/4/07 22:08'!
setRequest
	request := HTTPGet new.
	request parseURI: 'http://www.eranova.si/demo.html'.
	session lastRequest: request! !

!WebApplicationTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:12'!
setUp
"TOO DANGEROUS!!!!!!
	server := Swazoo.SwazooServer singleton.
	server initialize.  ""to remove all stuff and stop it""
	site := AIDASite newNamed: 'test'.
	session := WebSession newOn: site sessionManager.
	app := site admin webAppFor: session.
	self setRequest.
"! !

!WebApplicationTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:12'!
tearDown
"	site := server siteNamed: 'test'.
	site stop.
	server removeSite: site.
	server := nil. site := nil. session := nil. app := nil.
"! !

!WebApplicationTest methodsFor: 'testing-versions' stamp: 'mivsek 8/22/2007 21:13'!
testChangeObserveeVersion
"	| o1 |
	o1 := VersionedExample new. o1 asNewVersion.
	app := o1 webAppFor: session.
	self assert: app observee versionNumber = '1'.
	request uri queries: (request uri queries, '&version=2').
	app checkObserveeVersion.
	self assert: app observee versionNumber = '2'.
	self deny: app observee isCurrentVersion
"! !

!WebApplicationTest methodsFor: 'testing-versions' stamp: 'mivsek 8/22/2007 21:13'!
testChangeObserveeVersionBack
"	| o1 |
	o1 := VersionedExample new. o1 asNewVersion.  app := o1 webAppFor: session.
	request uri queries: (request uri queries, '&version=2').
	app checkObserveeVersion.
	self assert: app observee versionNumber = '2'.
	self setRequest. ""to be without version again""
	app checkObserveeVersion.
	self assert: app observee versionNumber = '1'.
	self assert: app observee isCurrentVersion
"! !

!WebApplicationTest methodsFor: 'testing-versions' stamp: 'mivsek 8/22/2007 21:13'!
testCurrentVersionChange
"	| o1 o2 |
	o1 := VersionedExample new. o2 := o1 asNewVersion.
	app := o1 webAppFor: session.
	self assert: app observee isCurrentVersion.
	self assert: app observee versionNumber = '1'.
	o2 setCurrentVersion.
	self assert: app observee isCurrentVersion. ""because of identity change!! ""
	self assert: app observee versionNumber = '2'.
"! !

!WebApplicationTest methodsFor: 'testing' stamp: ' 21/4/07 22:08'!
testSecurity! !

!WebApplicationTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:13'!
testSetUp
"	self assert: app notNil.
	self assert: app observee == site admin.
	self assert: app session == session.
	self assert: (session webAppFor: site admin) == app
"! !

!WebApplicationTest methodsFor: 'testing-versions' stamp: 'mivsek 8/22/2007 21:14'!
testVersionRequest
"	| o1 |
	o1 := VersionedExample new. 
	app := o1 webAppFor: session.
	self deny: app isVersionRequest.
	self assert: app versionFromRequest isNil.
	request uri queries: (request uri queries, '&version=2').
	self assert: app isVersionRequest.
	self assert: app versionFromRequest = '2'.
"! !

!WebApplicationTest methodsFor: 'testing-versions' stamp: 'mivsek 8/22/2007 21:14'!
testVersionedObject
"	| o1 o2 |
	o1 := VersionedExample new. o2 := o1 asNewVersion.
	app := o1 webAppFor: session.
	self assert: app observee isVersionedObject.
	self assert: app observee isCurrentVersion.
"! !

!WebAudio methodsFor: 'attributes'!
autoplay
	"audio will start playing as soon as it is ready"
	self attributes at: #autoplay put: true! !

!WebAudio methodsFor: 'attributes'!
controls: aString
	"Specifies that audio controls should be displayed (such as a play/pause button etc)."
	self attributes at: #controls put: aString! !

!WebAudio methodsFor: 'attributes'!
loop
	"audio will start over again, every time it is finished"
	self attributes at: #loop put: true! !

!WebAudio methodsFor: 'attributes'!
preload: aSymbol
	"Specifies if and how the author thinks the audio should be loaded when the page loads"
	" #auto #metadata or #none "
	self attributes at: #preload put: aSymbol asString! !

!WebAudio methodsFor: 'attributes'!
src: anUrlString
	"Specifies the URL of the video file"
	" #auto #metadata or #none "
	self attributes at: #src put: anUrlString! !

!WebAudio methodsFor: 'private'!
tag
	^#audio! !

!WebAudio methodsFor: 'attributes'!
text: aString
	"will be shown if browser does not support audio"
	self addText: aString! !

!WebAutocomplete2Field methodsFor: 'private'!
acceptInputFromValue: aValueString
	| vlue choices |
	vlue :=  AIDASite convertFromWeb: aValueString on: self session. "ensure unicode!!"
	vlue := (WebFormElement autoConvertString:  vlue toObject: self value).
	self choicesObject notNil & self choiceAspect notNil ifTrue: "save real object, not only text!! "
		[choices := self choicesObject perform: self choicesAspect.
		vlue := choices detect: [:each | (each perform: self choiceAspect) = vlue] ifNone: [nil] ].
	self value: vlue.! !

!WebAutocomplete2Field methodsFor: 'private-streaming'!
addSetupScript
	"jQuery specific"
self scriptAfter: '
$("#', self id, '").autocomplete({
	source : function (request, callback) {
		$.ajax ({
			url : "/aidasession/element-', self id asString, '-ctx', self context id printString, '",
			data : { term : request.term },
			complete : function (xhr, result) {
				if (result !!= "success") return;
				callback (JSON.parse(xhr.responseText));
			}
		});
	}
})
.data( "autocomplete" )._renderItem = function( ul, item ) {
	return $( "<li></li>" )
		.data( "item.autocomplete", item )
		.append( "<a>" + item.label + "</a>" )
		.appendTo( ul );
};
'.! !

!WebAutocomplete2Field methodsFor: 'events-ajax'!
afterPostAndUpdate: aWebElement
	"after the selection the field is immediatelly Ajax posted and the specified element is updated"
	self elementToUpdate: aWebElement! !

!WebAutocomplete2Field methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession
	"Ajax call via session from jQuery Autocomplete to return matched choices"
	| presenter criteria |
	presenter := WebJSONPresenter new.
	criteria := aRequest queryAt: 'term'. "characters entered so far in Autocomplete field"
	presenter presenterBlock: 
		[self choicesAsJsonForEntry: criteria ].
	^presenter! !

!WebAutocomplete2Field methodsFor: 'accessing'!
choiceAspect
	"this method is called on each choice to display choice's text"
	^choiceAspect! !

!WebAutocomplete2Field methodsFor: 'accessing'!
choiceAspect: aSymbol
	choiceAspect := aSymbol! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesAsJsonForEntry: aString
	| choices |
	choices := self getChoicesForEntry: aString.
	choices := choices collect: [:each | 
		(Dictionary new
			at: #label put: (self empasizeStarting: aString in: each);
			at: #value put: each;
			yourself) ].
	^WebJSON stringify: choices.! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesAspect
	^choicesAspect! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesAspect: aSymbol
	choicesAspect := aSymbol! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesAspect: aSymbol for: anObject
	"this method is called with our field as argument on that object. It must return a collection of strings"
	"example: myObject searchFor: aString (choicesAspect is #searchFor: )"
	self choicesAspect: aSymbol.
	self choicesObject: anObject! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesObject
	^choicesObject! !

!WebAutocomplete2Field methodsFor: 'private'!
choicesObject: anObject
	choicesObject := anObject! !

!WebAutocomplete2Field methodsFor: 'accessing'!
elementToUpdate
	^elementToUpdate! !

!WebAutocomplete2Field methodsFor: 'accessing'!
elementToUpdate: aWebElement
	elementToUpdate := aWebElement! !

!WebAutocomplete2Field methodsFor: 'private'!
empasizeStarting: aCriteria in: aString
	"put in bold starting part of text to emphasize the criteria part. Ignore case"
	| in out |
	aCriteria trimBlanks isEmpty ifTrue: [^aString].
	(aCriteria trimBlanks, '*' match: aString) ifFalse: [^aString].
	in := aString readStream.
	out := WriteStream on: String new.
	out nextPutAll: '<b>'.
	aCriteria trimBlanks size timesRepeat: [out nextPut: in next].
	out nextPutAll: '</b>'.
	[in atEnd] whileFalse: [out nextPut: in next].
	^out contents! !

!WebAutocomplete2Field methodsFor: 'private'!
getChoicesForEntry: aString
	"return list of choices, selected already entered characters in  aString. "
	"always return text strings, not choice objects!!"
	| choices matchString |
	self choiceAspect isNil "one possiblity, direct question to choicesObject"
		ifTrue: [^self choicesObject perform: self choicesAspect with: aString].
	"other possibility, we select internaly from all choices"
	choices := self choicesObject perform: self choicesAspect.
	matchString := aString, '*'.
	choices := choices select: [:each | matchString match: (each perform: self choiceAspect)].
	^choices collect: [:each | each perform: self choiceAspect].! !

!WebAutocomplete2Field methodsFor: 'initialize-release'!
initialize
	"jQuery specific"
	super initialize.
	JQueryLibrary ensureUI.! !

!WebAutocomplete2Field methodsFor: 'testing'!
isAutocompleteField
	^true! !

!WebAutocomplete2Field methodsFor: 'private-streaming'!
prepareAttributesToStreamOn: aSession
	"if choiceAspect is set, use it!! "
	super prepareAttributesToStreamOn: aSession.
	self choiceAspect isNil ifTrue: [^super prepareAttributesToStreamOn: aSession].
	self value isNil ifTrue: [^nil].
	(self value class canUnderstand: self choiceAspect) ifFalse: [^nil].
	self attributesAt: #value put: 
		(WebFormElement autoConvertAndEncodeValue: (self value perform: self choiceAspect))! !

!WebAutocomplete2Field methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self ensureId. 
	self addSetupScript.
	super streamHtmlTo: aStream for: aRequest on: aSession.! !

!WebAutocomplete2Field class methodsFor: 'instance creation'!
aspect: aSymbol for: anObject choicesAspect: aChoicesSymbol for: aChoicesObject
	"choicesAspect method is called with our field as argument on aChoicesObject. 
	It must return a collection of strings"
	"example: myObject searchFor: aString (choicesAspect is #searchFor: )"
	^self new 
		aspect: aSymbol for: anObject;
		choicesAspect: aChoicesSymbol for: aChoicesObject! !

!WebAutocomplete2Field class methodsFor: 'instance creation'!
aspect: aSymbol for: anObject choicesAspect: aChoicesSymbol for: aChoicesObject choiceAspect: aTextSymbol
	"choicesAspect method is called with our field as argument on aChoicesObject. 
	It returs a collection of objects, an choice's text 
	is retrieved with a call of choiceAspect method on each"
	^self new 
		aspect: aSymbol for: anObject;
		choicesAspect: aChoicesSymbol for: aChoicesObject;
		choiceAspect: aTextSymbol! !

!WebAutocompleteField methodsFor: 'private'!
acceptInputFromValue: aValueString
	| vlue choices |
	vlue :=  AIDASite convertFromWeb: aValueString on: self session. "ensure unicode!!"
	vlue := (WebFormElement autoConvertString:  vlue toObject: self value).
	self choicesObject notNil & self choiceAspect notNil ifTrue: "save real object, not only text!! "
		[choices := self choicesObject perform: self choicesAspect.
		vlue := choices detect: [:each | (each perform: self choiceAspect) = vlue] ifNone: [nil] ].
	self value: vlue.! !

!WebAutocompleteField methodsFor: 'private-streaming'!
addSetupScriptOn: aStream choicesElement: aChoicesElement
	"Scriptaculous specific"
	| contextParm url afterUpdateElement updateUrl parms |
	contextParm := WebContext contextIdName "aidaCtx", '=', self app context id printString.
	url := self ajaxCallUrlExtended, '&ajaxAutocompleteField&', contextParm.
	afterUpdateElement := self elementToUpdate isNil 
		ifTrue: [''] 
		ifFalse:
			[self elementToUpdate ensureId. 
			updateUrl := self ajaxCallUrl. 
			parms := self ajaxCallUrlParametersFor: self elementToUpdate context: self app context. "is this needed"
 			parms := parms, '&ajaxElementToRecreateId=', self elementToUpdate id asString.
			'afterUpdateElement: function(element, selectedElement){var field = Form.Element.serialize(''',
			self id asString, '''); var name = $(''',
			self id asString, ''').name; new Ajax.Updater(''', self elementToUpdate id asString, ''', ''', updateUrl, 
			''', {method: ''post'', postBody: field + ''', ('&', parms), 
			'&ajaxSingleField='' + name, evalScripts: true})} '].

	aStream nextPutAll: '<script type="text/javascript">new Ajax.Autocompleter(''', 
		self id asString, ''', ''', aChoicesElement id asString, ''', ''', url, 
		''', {', afterUpdateElement, '});</script>', self eol.! !

!WebAutocompleteField methodsFor: 'events-ajax'!
afterPostAndUpdate: aWebElement
	"after the selection the field is immediatelly Ajax posted and the specified element is updated"
	self elementToUpdate: aWebElement! !

!WebAutocompleteField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
choiceAspect
	"this method is called on each choice to display choice's text"
	^choiceAspect! !

!WebAutocompleteField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
choiceAspect: aSymbol
	choiceAspect := aSymbol! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
choicesAspect
	^choicesAspect! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
choicesAspect: aSymbol
	choicesAspect := aSymbol! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
choicesAspect: aSymbol for: anObject
	"this method is called with our field as argument on that object. It must return a collection of strings"
	"example: myObject searchFor: aString (choicesAspect is #searchFor: )"
	self choicesAspect: aSymbol.
	self choicesObject: anObject! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
choicesObject
	^choicesObject! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
choicesObject: anObject
	choicesObject := anObject! !

!WebAutocompleteField methodsFor: 'accessing'!
elementToUpdate
	^elementToUpdate! !

!WebAutocompleteField methodsFor: 'accessing'!
elementToUpdate: aWebElement
	elementToUpdate := aWebElement! !

!WebAutocompleteField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
getChoicesForEntry: aString
	"return list of choices, selected already entered characters in  aString. "
	"always return text strings, not choice objects!!"
	| choices matchString |
	self choiceAspect isNil "one possiblity, direct question to choicesObject"
		ifTrue: [^self choicesObject perform: self choicesAspect with: aString].
	"other possibility, we select internaly from all choices"
	choices := self choicesObject perform: self choicesAspect.
	matchString := aString, '*'.
	choices := choices select: [:each | matchString match: (each perform: self choiceAspect)].
	^choices collect: [:each | each perform: self choiceAspect].! !

!WebAutocompleteField methodsFor: 'initialize-release'!
initialize
	"Scriptaculous specific"
	super initialize.
	ScriptaculousLibrary ensureScriptaculous.! !

!WebAutocompleteField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isAutocompleteField
	^true! !

!WebAutocompleteField methodsFor: 'private-streaming' stamp: 'janko 9/19/2011 14:31'!
prepareAttributesToPrintOn: aSession
	"if choiceAspect is set, use it!! "
	super prepareAttributesToPrintOn: aSession.
	self choiceAspect isNil ifTrue: [^super prepareAttributesToPrintOn: aSession].
	self value isNil ifTrue: [^nil].
	(self value class canUnderstand: self choiceAspect) ifFalse: [^nil].
	self attributesAt: #value put: 
		(WebFormElement autoConvertAndEncodeValue: (self value perform: self choiceAspect))! !

!WebAutocompleteField methodsFor: 'private-streaming'!
prepareAttributesToStreamOn: aSession
	"if choiceAspect is set, use it!! "
	super prepareAttributesToStreamOn: aSession.
	self choiceAspect isNil ifTrue: [^super prepareAttributesToStreamOn: aSession].
	self value isNil ifTrue: [^nil].
	(self value class canUnderstand: self choiceAspect) ifFalse: [^nil].
	self attributesAt: #value put: 
		(WebFormElement autoConvertAndEncodeValue: (self value perform: self choiceAspect))! !

!WebAutocompleteField methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	| choicesElement |
	choicesElement := (WebElement newClass: #'auto_complete') parent: self.
	self ensureId. choicesElement ensureId.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	choicesElement streamHtmlTo: aStream for: aRequest on: aSession.
	self addSetupScriptOn: aStream choicesElement: choicesElement.! !

!WebAutocompleteField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject choicesAspect: aChoicesSymbol for: aChoicesObject
	"choicesAspect method is called with our field as argument on aChoicesObject. 
	It must return a collection of strings"
	"example: myObject searchFor: aString (choicesAspect is #searchFor: )"
	^self new 
		aspect: aSymbol for: anObject;
		choicesAspect: aChoicesSymbol for: aChoicesObject! !

!WebAutocompleteField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject choicesAspect: aChoicesSymbol for: aChoicesObject choiceAspect: aTextSymbol
	"choicesAspect method is called with our field as argument on aChoicesObject. 
	It returs a collection of objects, an choice's text 
	is retrieved with a call of choiceAspect method on each"
	^self new 
		aspect: aSymbol for: anObject;
		choicesAspect: aChoicesSymbol for: aChoicesObject;
		choiceAspect: aTextSymbol! !

!WebButton methodsFor: 'private'!
acceptInputFromValue: aString! !

!WebButton methodsFor: 'accessing'!
action
	^self otherAt: #Action  ifAbsent: [nil]! !

!WebButton methodsFor: 'accessing'!
action: aSymbol
	aSymbol isSymbol ifFalse: [self error: 'button action must be a symbol'].
	self otherAt: #Action  put: aSymbol! !

!WebButton methodsFor: 'private-ajax'!
ajaxSubmit
	"submit a form by Ajax instead of normal post. Page is NOT reloaded!! " 
	self isAjaxSubmit ifTrue: [^nil].
	self onClick:  "actually submit"
		(self scriptForSubmitOnEvent: #submit context: self context).
	(self eventHandlerFor: #submit)
		addAcceptSubmittedForm.
	self onClick: 'return false'. "to break normal form submitting and full page reload"	
	self setAjaxSubmit.! !

!WebButton methodsFor: 'accessing'!
disableUntilValid
	"until form is valid and with all required fields, button will be disabled, then it will Ajax enable"
"	self otherAt: #disableUntilValid put: true. "
	self disabled.
	self wrap. "wrap in <span> to become updatable"
	self form onFormChangeDo: [:field |
		self form isComplete 
			ifTrue:  "all requered fields and valid"
				[self enabled. 
				self focus.
				self update]
			ifFalse: "disable again if form became invalid after vas already valid"
				[self disabled. 
				self update] ]! !

!WebButton methodsFor: 'private-ajax'!
ensureOnClickReturnFalseAtEnd
	"for onClick script, ensure that 'return false' (if any) will be the last sentence in the script"
	| coll new |
	coll := self attributesAt: #onClick. coll isNil ifTrue: [^nil].
	(coll isKindOf: OrderedCollection) ifFalse: [^nil].
	(coll contains: [:each | '*return false*' match: each]) ifFalse: [^nil].
	new := coll reject: [:each | '*return false*' match: each].  "also to avoid duplicates"
	new := new add: 'return false'; yourself.
	self attributesAt: #onClick put: new.! !

!WebButton methodsFor: 'accessing'!
image
	^image! !

!WebButton methodsFor: 'accessing'!
image: aWebImage
	"if button is an image"
	image := aWebImage! !

!WebButton methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	self type: 'submit'.! !

!WebButton methodsFor: 'testing'!
isAjaxSubmit
	"this button will submit a form with Ajax request and a page will not be reloaded"
	^(self otherAt: #AjaxSubmit) = true! !

!WebButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isButton
	^true! !

!WebButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	^true! !

!WebButton methodsFor: 'private'!
isValid
	"nothing to validate on a button"
	^true! !

!WebButton methodsFor: 'events-ajax'!
noSubmit
	"do not submit a form when this button is pressed"! !

!WebButton methodsFor: 'private-ajax'!
onSubmitAnswer
	"Answer when button is clicked and form submitted.Answer to the currenty executing context"
	"Part of tree-like control flow, see WebDemoApp for example "
	^self otherAt: #OnSubmitAnswer ifAbsent: [nil]! !

!WebButton methodsFor: 'events-ajax'!
onSubmitAnswer: anObject
	"answer anObject as result when button is clicked and form submitted.Answer to the currenty executing context."
	"Answer is copied to parent context when widget and therefore context is closed"
	"Part of tree-like control flow, see WebDemoApp for example "
	self ajaxSubmit.
	(self eventHandlerFor: #submit) 
		addAnswer: anObject.! !

!WebButton methodsFor: 'events-ajax'!
onSubmitClose
	"Ajax submit then current window (if popup) is closed, its context also"
	self ajaxSubmit.
	(self eventHandlerFor: #submit) 
		addCloseWindow.! !

!WebButton methodsFor: 'events-ajax'!
onSubmitDo: aBlock
	"execute that block when this button is pressed and after form is Ajax posted"
	self ajaxSubmit.
	(self eventHandlerFor: #submit) 
		addActionBlock: aBlock.! !

!WebButton methodsFor: 'events-ajax'!
onSubmitUpdate: aWebElement
	"Ajax submit the update that element"
	^self onSubmitUpdate: aWebElement with: nil! !

!WebButton methodsFor: 'events-ajax'!
onSubmitUpdate: aWebElement with: anArgObject
	"Ajax submit the update that element"
	aWebElement isNil ifTrue: [self error: 'no element to update!!'].
	aWebElement ensureId. 
	self ajaxSubmit. "which will stop normal submit and page reload"
	(self eventHandlerFor: #submit) 
		addUpdate: aWebElement with: anArgObject.! !

!WebButton methodsFor: 'private'!
prepareAttributesToStreamOn: aSession
	"prepare multilingual button text, if needed"
	super prepareAttributesToStreamOn: aSession.
	((self attributes includesKey: #value) 
		and: [(self attributes at: #value) aidaIsAssociation]) ifTrue:
			[self attributes 
				at: #value 
				put: (self textFromMultilang: (self attributes at: #value) on: aSession)
		]! !

!WebButton methodsFor: 'private'!
prepareImageAttributeOn: aSession
	self attributesAt: #src put:  (self image urlOnSession: aSession)! !

!WebButton methodsFor: 'model adapting'!
save
	"nothing to save for button"! !

!WebButton methodsFor: 'private-ajax'!
scriptForEvent: anEventSymbol context: aWebContext
	^'aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''')'! !

!WebButton methodsFor: 'private-ajax'!
scriptForSubmitOnEvent: anEventSymbol context: aWebContext
	"send serialized form values as value"
	^'aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''',',
		'aidaSerializeForm(''', self form id asString, '''))'! !

!WebButton methodsFor: 'private-ajax'!
setAjaxSubmit
	"this button will submit a form with Ajax request and a page will not be reloaded"
	^self otherAt: #AjaxSubmit put: true! !

!WebButton methodsFor: 'testing'!
shouldAjaxSubmit
	"in popup window and widgets always Ajax submit!! "
	| form |
	form := self form.
	form parent isPureWidget ifTrue: [^true].
	form parent isWebPage "and not a popup window" 
		ifTrue: [^false]. "can submit normally"
	^true! !

!WebButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebButton methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	(self isAjaxSubmit not "yet" and: [self shouldAjaxSubmit]) 
		ifTrue: [self ajaxSubmit].
	self ensureOnClickReturnFalseAtEnd. "for ajaxSubmit"
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	self image notNil ifTrue: [self prepareImageAttributeOn: aSession].
	self prepareToHtmlStreamingOn: aSession.
	aStream nextPutAll: self ident, '<input'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: self tagClosing.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebButton methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
text
	^self attributesAt: #value! !

!WebButton methodsFor: 'accessing' stamp: 'janko 9/12/2011 20:39'!
text: aStringOrAssociation
	"set the text to be shown in a button, It is actually a value attribute in input tag"
	| txt |
	"slovene csz are converted if char ^ is after such a char"
	txt := (aStringOrAssociation aidaIsAssociation not and: [aStringOrAssociation includes: $^ ]) 
		ifTrue: [aStringOrAssociation convertToSloveneChars] 
		ifFalse: [aStringOrAssociation].
	self attributesAt: #value put: txt. "txt can be a multilingual association"
	self addText: txt! !

!WebButton class methodsFor: 'instance creation'!
image: aWebImage
	^self new 
		type: #image; 
		image: aWebImage! !

!WebButton class methodsFor: 'instance creation'!
image: aWebImage action: aSymbol
	^self new 
		type: #image; 
		image: aWebImage;
		action: aSymbol! !

!WebButton class methodsFor: 'instance creation'!
text: aString
	^self new
		type: #submit;
		text: aString! !

!WebButton class methodsFor: 'instance creation'!
text: aString action: aSymbol
	^self new 
		type: #submit;
		text: aString;
		action: aSymbol! !

!WebCache methodsFor: 'private-cache' stamp: 'np 3/16/2009 12:33'!
addObject: anObject view: aViewSymbol content: aByteStringOrArray timeout: aSeconds
	| views |
	views := self objects at: anObject ifAbsentPut: [Dictionary new].
	views at: aViewSymbol put: 
		(WebCacheEntry new content: aByteStringOrArray; timeout: aSeconds)! !

!WebCache methodsFor: 'settings' stamp: 'np 3/16/2009 12:34'!
cacheTimeout
	"in seconds, how long cache entry lives until is invalidated"
	"default is one day"
	^self settingsAt: #CacheDuration ifAbsentPut: [24*3600]! !

!WebCache methodsFor: 'settings' stamp: 'np 3/16/2009 12:34'!
cacheTimeout: aSeconds
	"in seconds, how long cache entry lives until is invalidated"
	^self settingsAt: #CacheDuration put: aSeconds! !

!WebCache methodsFor: 'private-cache' stamp: 'np 3/16/2009 12:34'!
entryForObject: anObject view: aViewSymbol
	^(self objects at: anObject ifAbsent: [^nil])
		at: aViewSymbol ifAbsent: [nil]! !

!WebCache methodsFor: 'initialize-release' stamp: 'np 3/16/2009 12:34'!
initObjects
	objects := Dictionary new! !

!WebCache methodsFor: 'initialize-release' stamp: 'np 3/16/2009 12:34'!
initOther
	other := Dictionary new! !

!WebCache methodsFor: 'initialize-release' stamp: 'np 3/16/2009 12:34'!
initSettings
	settings := Dictionary new! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 12:35'!
invalidateObject: anObject
	"if exist then cache entries for that object are not valid anymore and shall be refreshed"
	self removeObject: anObject! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 12:35'!
isCached: anObject to: aRequest on: aWebSession
	| entry |
	entry := ((self objects at: anObject ifAbsent: [^false])
		at: aRequest view ifAbsent: [^false]).
	entry isTimedOut 
		ifTrue: [self removeObject: anObject view: aRequest view. ^false].
	^true! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:35'!
objects
	"a dictionary of cache entries per domain object per view"
	objects isNil ifTrue: [self initObjects].
	^objects! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:35'!
other
	^other! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:36'!
otherAt: aSymbol
	"other values"
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:36'!
otherAt: aSymbol ifAbsent: aBlock
	"other values"
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:36'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:36'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebCache methodsFor: 'accessing' stamp: 'np 3/16/2009 12:36'!
parent
	^parent! !

!WebCache methodsFor: 'accessing' stamp: 'np 3/16/2009 12:36'!
parent: anObject
	parent := anObject! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 13:00'!
purgeCache
	"invalidate all timed-out cache entries"
	"run it from time to time, like every day from SwazooServer>>watchogOther"
	self objects associations do: [:assoc |
		assoc value associations do: [:vassoc | vassoc value isTimedOut 
			ifTrue: [self removeObject: assoc key view: vassoc key] ] ]! !

!WebCache methodsFor: 'private-cache' stamp: 'np 3/16/2009 12:36'!
removeObject: anObject
	self objects removeKey: anObject ifAbsent: [nil]! !

!WebCache methodsFor: 'private-cache' stamp: 'np 3/16/2009 12:36'!
removeObject: anObject view: aViewSymbol
	| views |
	views := self objects at: anObject ifAbsent: [^nil].
	views removeKey: aViewSymbol ifAbsent: [^nil].
	views isEmpty ifTrue: [self removeObject: anObject].! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 12:37'!
respond: anObject to: aRequest on: aWebSession
	| response |
	response := HTTPResponse ok.
	aRequest task response: response.
	self site addResponseHeadersTo: response forPage: nil on: aWebSession.
	response entity: (self entryForObject: anObject view: aRequest view) content. 
	self site log: ' cached done'.
	^response! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:37'!
settings
	settings isNil ifTrue: [self initSettings].
	^settings! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:37'!
settingsAt: aSymbol
	^self settingsAt: aSymbol ifAbsent: [nil]! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:37'!
settingsAt: aSymbol ifAbsent: aBlock
	^self settings at: aSymbol ifAbsent: aBlock! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:37'!
settingsAt: aSymbol ifAbsentPut: aValue
	^self settings at: aSymbol ifAbsentPut: aValue! !

!WebCache methodsFor: 'private' stamp: 'np 3/16/2009 12:37'!
settingsAt: aSymbol put: aValue
	^self settings at: aSymbol put: aValue! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 12:37'!
shouldCache: anObject to: aRequest on: aWebSession
	^anObject aidaCacheView: aRequest view on: aWebSession! !

!WebCache methodsFor: 'accessing' stamp: 'np 3/16/2009 12:37'!
site	
	^self parent! !

!WebCache methodsFor: 'caching' stamp: 'np 3/16/2009 12:38'!
store: aByteStringOrArray for: anObject to: aRequest on: aWebSession
	| timeout |
	timeout := anObject aidaCacheTimeout notNil
		ifTrue: [anObject aidaCacheTimeout notNil] "per domain object cache timeout"
		ifFalse: [self cacheTimeout]. 		"global cache timeout"
	self addObject: anObject view: aRequest view 
		content: aByteStringOrArray timeout: timeout! !

!WebCache class methodsFor: 'instance creation' stamp: 'np 3/16/2009 12:33'!
newOn: anAIDASite
	^super new
		parent: anAIDASite! !

!WebCacheEntry methodsFor: 'accessing' stamp: 'np 3/16/2009 12:38'!
content
	"cached content"
	^content! !

!WebCacheEntry methodsFor: 'accessing' stamp: 'np 3/16/2009 12:39'!
content: aByteStringOrArray
	"cached content"
	content := aByteStringOrArray! !

!WebCacheEntry methodsFor: 'accessing' stamp: 'np 3/16/2009 12:39'!
created
	"when the cahce entry was created"
	^SpTimestamp fromSeconds: self createdAsSeconds! !

!WebCacheEntry methodsFor: 'private' stamp: 'np 3/16/2009 12:39'!
createdAsSeconds
	"when the cahce entry was created"
	^created! !

!WebCacheEntry methodsFor: 'testing' stamp: 'np 3/16/2009 12:39'!
isTimedOut
	^(SpTimestamp now asSeconds - self createdAsSeconds) > self timeout! !

!WebCacheEntry methodsFor: 'private' stamp: 'np 3/16/2009 12:39'!
setCreated
	created := SpTimestamp now asSeconds! !

!WebCacheEntry methodsFor: 'accessing' stamp: 'np 3/16/2009 12:39'!
timeout
	"how many seconds this cached content is valid"
	^timeout! !

!WebCacheEntry methodsFor: 'accessing' stamp: 'np 3/16/2009 12:39'!
timeout: aSeconds
	"how many seconds this cached content is valid"
	timeout := aSeconds! !

!WebCacheEntry class methodsFor: 'instance creation' stamp: 'np 3/16/2009 12:40'!
new
	^super new setCreated! !

!WebCanvas methodsFor: 'attributes'!
height: anInteger
	self attributesAt: #height put: anInteger printString! !

!WebCanvas methodsFor: 'attributes'!
size: aPoint
	"set the size of a canvas in format width@height"
	self width: aPoint x.
	self height: aPoint y.! !

!WebCanvas methodsFor: 'private'!
tag
	^#canvas! !

!WebCanvas methodsFor: 'attributes'!
width: anInteger
	self attributesAt: #width put: anInteger printString! !

!WebCaptcha methodsFor: 'accessing'!
aidaContentType
	^'image/png'.! !

!WebCaptcha methodsFor: 'private' stamp: 'janko 4/25/2012 10:58'!
aidaIsRespondingStreamed
	^false! !

!WebCaptcha methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	^self! !

!WebCaptcha methodsFor: 'defaults' stamp: 'janko 3/22/2008 01:16'!
backgroundImageFilename
	^'captcha-background.png'! !

!WebCaptcha methodsFor: 'private-streaming'!
contentsOfCaptcha
	^self filename contentsOfEntireFileBinary asString! !

!WebCaptcha methodsFor: 'defaults' stamp: 'janko 3/22/2008 15:11'!
fontName
	^'Andy'! !

!WebCaptcha methodsFor: 'defaults' stamp: 'janko 3/22/2008 23:23'!
imageSize
	^150@30	! !

!WebCaptcha methodsFor: 'private' stamp: 'janko 3/22/2008 16:26'!
isExpired
	"it exists more than few hours"
	^(SpTimestamp now asSeconds - self preparedTimestamp asSeconds) > (10*3600)! !

!WebCaptcha methodsFor: 'converting' stamp: 'janko 7/18/2008 17:52'!
prepareCaptchaImage
	| textFName captchaFName |
	textFName := 'captchatext', self random, '.png'. captchaFName := 'captcha', self random, '.png'.
	OSProcess waitForCommand: 
		'convert -size 150x30 xc:transparent -font ', self fontName, ' -pointsize 25 -draw "text 40,23 ''', 
		self text, ''' " ', textFName.
	OSProcess waitForCommand: 'composite -gravity center ', 
		textFName, ' ', self backgroundImageFilename, ' ',  captchaFName.
	(SpFilename named: textFName) delete.
	self filename: captchaFName.
	self setPreparedTimestamp.! !

!WebCaptcha methodsFor: 'private' stamp: 'janko 3/22/2008 16:07'!
preparedTimestamp
	^self timestamps at: #prepared ifAbsent: [nil]! !

!WebCaptcha methodsFor: 'converting' stamp: 'janko 7/18/2008 17:53'!
random
	random isNil ifTrue: 
		[random := (AIDASite random next * 1000) truncated printString].
	^random
! !

!WebCaptcha methodsFor: 'accessing' stamp: 'janko 3/22/2008 18:35'!
randomCharacter
	"from 25 lowercase, 25 upercase, 10 numbers"
	| rnum |
	rnum := (Random new next * 60) truncated.
	rnum <= 25 ifTrue: [^($a asInteger + rnum) asCharacter].
	rnum <= 50 ifTrue: [^($A asInteger + rnum-25) asCharacter].
	^($0 asInteger + rnum-50) asCharacter
! !

!WebCaptcha methodsFor: 'accessing' stamp: 'janko 3/22/2008 18:40'!
randomCharacterOnGen: aRandom
	"from 25 lowercase, 25 upercase, 10 numbers"
	| rnum |
	rnum := (aRandom next * 60) truncated.
	rnum <= 25 ifTrue: [^($a asInteger + rnum) asCharacter].
	rnum <= 50 ifTrue: [^($A asInteger + rnum-25) asCharacter].
	^($0 asInteger + rnum-50) asCharacter
! !

!WebCaptcha methodsFor: 'private' stamp: 'janko 3/22/2008 16:08'!
setPreparedTimestamp
	^self timestamps at: #prepared put: SpTimestamp now.! !

!WebCaptcha methodsFor: 'accessing' stamp: 'janko 3/22/2008 18:42'!
setRandomText
	"5 characters or numbers"
	| rnd rgen |
	rnd := ByteString new: 5. rgen := Random new.
	1 to: 5 do: [:inx | rnd at: inx put: (self randomCharacterOnGen: rgen)].
	self text: rnd.
! !

!WebCaptcha methodsFor: 'private' stamp: 'janko 3/22/2008 15:59'!
size
	^self filename fileSize! !

!WebCaptcha methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession 
	self prepareCaptchaImage.
	aStream nextPutAll: self contentsOfCaptcha.
	self filename delete.
	self class
		addToCache: self ;
		releaseExpiredCaptchas! !

!WebCaptcha methodsFor: 'accessing' stamp: 'janko 3/22/2008 18:27'!
text
	"string to be converted into captcha image"
	text isNil ifTrue: [^''].
	^text! !

!WebCaptcha methodsFor: 'accessing' stamp: 'janko 3/22/2008 18:27'!
text: aString
	"string to be converted into captcha image"
	text := aString! !

!WebCaptcha class methodsFor: 'private-cache' stamp: 'janko 3/22/2008 16:29'!
addToCache: aCaptcha
	self cache add: aCaptcha! !

!WebCaptcha class methodsFor: 'private-cache' stamp: 'janko 3/22/2008 16:28'!
cache
	Cache isNil ifTrue: [self initCache].
	^Cache! !

!WebCaptcha class methodsFor: 'private-cache' stamp: 'janko 3/22/2008 16:28'!
initCache
	Cache := Set new.! !

!WebCaptcha class methodsFor: 'instance creation' stamp: 'janko 3/22/2008 18:38'!
new
	"prepare a CAPTCHA with random string"
	| session |
	session := self firstSessionFromStack. "on which we are building this captcha"
	^super new 
		site: (session notNil ifTrue: [session site] ifFalse: [nil]);
		setRandomText! !

!WebCaptcha class methodsFor: 'instance creation' stamp: 'janko 3/22/2008 18:39'!
newFor: aString
	"prepare a CAPTCHA image for that string"
	^self new 
		text: aString! !

!WebCaptcha class methodsFor: 'private-cache' stamp: 'janko 3/22/2008 16:30'!
releaseExpiredCaptchas
	self cache do: [:each | 
		each isExpired ifTrue: [each removeYourself "from url resolver"]]! !

!WebChat methodsFor: 'adding-removing'!
addLine: aString
	self lines add: aString.
	self removeOlderLines.
	self announceChange! !

!WebChat methodsFor: 'changes'!
announceChange
	self announcers associations do: [:assoc |
		assoc key "app" isActive 
			ifTrue: [assoc value value]
			ifFalse: [self announcers removeKey: assoc key] ] "self cleanup of released application state"! !

!WebChat methodsFor: 'private'!
announcers
	"actually blocks to be executed when change occurs. A weak dictionary with an App as key, so that sesion app 
	state cleanup also removes the block from here"
	announcers isNil ifTrue: [self initAnnouncers].
	^announcers! !

!WebChat methodsFor: 'initialize-release'!
initAnnouncers
	announcers := "Weak"Dictionary new.! !

!WebChat methodsFor: 'initialize-release'!
initLines
	lines := OrderedCollection new.! !

!WebChat methodsFor: 'accessing'!
last4Lines
	"empty lines in front, if less than 4 lines exist"
	| last |
	last := OrderedCollection new.
	((4 - self lines size) max: 0) timesRepeat: [last add: ''].
	((self lines size - 4) max: 1) to: self lines size do: [:inx | last add: (self lines at: inx)].
	^last! !

!WebChat methodsFor: 'private'!
lines
	lines isNil ifTrue: [self initLines].
	^lines! !

!WebChat methodsFor: 'private'!
removeOlderLines
	(self lines size - 4) timesRepeat: [self lines removeFirst]! !

!WebChat methodsFor: 'changes'!
whenChangedDo: aBlock on: aWebApplication
	"register a block to be executed when new chat line was entered"
	self announcers at: aWebApplication put: aBlock! !

!WebChat class methodsFor: 'accessing'!
singleton
	Singleton isNil ifTrue: [Singleton := self new].
	^Singleton! !

!WebChatApp methodsFor: 'views'!
chatElement
	| e le |
	e := WebElement newDiv.
	e addTextH1: 'Multi-user Chat'.
	le := self linesElement.
	e add: le;  addBreak.
	(e addInputFieldAspect: #line for: self) focus.
	(e addButtonText: 'Send')
		onSubmitDo:   "Ajax submit then execute this block"
			[self observee addLine: self line. self line: ''.
			e update].  "update lines and input field"
	self observee whenChangedDo: [le update] on: self.
	^e! !

!WebChatApp methodsFor: 'accessing'!
line
	line isNil ifTrue: [^''].
	^line! !

!WebChatApp methodsFor: 'accessing'!
line: aString
	line := aString! !

!WebChatApp methodsFor: 'views'!
linesElement
	| e  |
	e:= WebElement newDiv.
	self observee last4Lines do: [:line |
		e addNbSp: 4; addText: line.
		e addBreak].
	^e! !

!WebChatApp methodsFor: 'views'!
viewMain
	self add: self chatElement! !

!WebCheckBox methodsFor: 'private-events'!
acceptInputFromValue: aBooleanOrString
	"true/false comes from WebEvent, 'on' or '' from form post"
	(aBooleanOrString = true or: [aBooleanOrString = 'on'])
		ifTrue: [self checkValue]
		ifFalse: [self uncheckValue]! !

!WebCheckBox methodsFor: 'private-events'!
addObjectToSelected
	(self selected includes: self object) ifFalse: 
		[self selected add: self object.
		self adaptor setChanged]! !

!WebCheckBox methodsFor: 'private-events'!
checkValue
	self aspect notNil ifTrue: [self setAspectTrue].
	self selected notNil ifTrue: [self addObjectToSelected]! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checked
	^checked! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checked: aBoolean
	checked := aBoolean! !

!WebCheckBox methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self type: 'checkbox'.
	self checked: false.! !

!WebCheckBox methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isCheckBox
	^true! !

!WebCheckBox methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isChecked
	| value |
	self aspect notNil ifTrue:
		[value := self object perform: self aspect.
		^value == true].  "so that false will be returned even if value is not so"
	self selected notNil ifTrue: [^self selected includes: self object]. 
	^self checked! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
joinToForm: aWebForm
	aWebForm fields keysAndValuesDo: [:fname :element | 
		element == self ifTrue: [self name: fname]. ^self]! !

!WebCheckBox methodsFor: 'private'!
object: anObject from: aCollection
	"if checked, this object will be put in collection. If object is initially in collection, 
	checkbox will be checked"
	"Usefull for easy selection among many objects"
	self adaptor: (AidaModelAdaptor new subject: anObject).
	self selected: aCollection.! !

!WebCheckBox methodsFor: 'private-events'!
removeObjectFromSelected
	(self selected includes: self object) ifTrue: 
		[self selected remove: self object.
		self adaptor setChanged]! !

!WebCheckBox methodsFor: 'private-events'!
scriptForEvent: anEventSymbol context: aWebContext
	"send if chekbox checked or not after event"
	^'aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''',',
		'this.checked);'! !

!WebCheckBox methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selected
	^selected! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
selected: aCollection
	"checked objects"
	selected := aCollection! !

!WebCheckBox methodsFor: 'private-events'!
setAspectFalse
	self adaptor value: false! !

!WebCheckBox methodsFor: 'private-events'!
setAspectTrue
	self adaptor value: true! !

!WebCheckBox methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setChecked
	self checked: true! !

!WebCheckBox methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setUnchecked
	self checked: false! !

!WebCheckBox methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebCheckBox methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	aStream nextPutAll: self ident, '<input'.
	self streamAttributesTo: aStream for: aSession.
	self isChecked ifTrue: [aStream nextPutAll: ' checked'].
	aStream nextPutAll: self tagClosing.! !

!WebCheckBox methodsFor: 'private-events'!
uncheckValue
	self aspect notNil ifTrue: [self setAspectFalse].
	self selected notNil ifTrue: [self removeObjectFromSelected]! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
value
	^self attributesAt: 'value'! !

!WebCheckBox methodsFor: 'private' stamp: ' 21/4/07 22:07'!
value: aString
	"set the value name  of the  check box"
	^self attributesAt: 'value' put: aString! !

!WebCheckBox class methodsFor: 'obsolete'!
aspect: aSymbol for: anObject
	"obsolete!!"
	^self newAspect: aSymbol for: anObject! !

!WebCheckBox class methodsFor: 'instance creation'!
newAspect: aSymbol for: anObject
	"this method will be called and true/false will be set/clear on an object"
	^self new aspect: aSymbol for: anObject! !

!WebCheckBox class methodsFor: 'instance creation'!
newForObject: anObject from: aCollection
	"if checked, this object will be put in collection. If object is initially in collection, 
	checkbox will be checked"
	"Usefull for easy selection among many objects"
	^self new object: anObject from: aCollection! !

!WebClipboard methodsFor: 'converting' stamp: ' 21/4/07 22:07'!
asDocLink
	"return clipboard contents as a new DocLink"
	^DocLink new
		title: self title;
		url: self url;
		object: self object! !

!WebClipboard methodsFor: 'converting' stamp: ' 21/4/07 22:07'!
copyFromDocLink: aDocLink
	self title: aDocLink title.
	self url: aDocLink url.
	self object: aDocLink object! !

!WebClipboard methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	^(self url isNil or: [self url isEmpty]) and: [self object isNil].! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object
	^object! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object: anObject
	object := anObject! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title
	^title! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title: anObject
	title := anObject! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
url
	^url! !

!WebClipboard methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
url: anObject
	url := anObject! !

!WebCommand methodsFor: 'accessing'!
app
	^self element notNil
		ifTrue: [self element app]	"on which app this element was built"
		ifFalse: [nil]! !

!WebCommand methodsFor: 'converting'!
asJSON
	| dict |
	dict := Dictionary new. "will become a JS object on client side"
	self command notNil ifTrue: [dict at: 'command' put: self command asString].
	self context notNil ifTrue: [dict at: 'context' put: self context].
	self element notNil ifTrue: [dict at: 'id' put: self element id].
	self value notNil ifTrue: [dict at: 'value' put: self value].
	self other notNil ifTrue:
		[self at: 'other' put: self other]. "should be with string/number/boolean/nil values ony"
	^WebJSON stringify: dict! !

!WebCommand methodsFor: 'accessing'!
command
	" #update, ..."
	^command! !

!WebCommand methodsFor: 'private'!
command: aSymbol
	command := aSymbol! !

!WebCommand methodsFor: 'accessing'!
context
	^context! !

!WebCommand methodsFor: 'accessing'!
context: aContextIdString
	context := aContextIdString! !

!WebCommand methodsFor: 'accessing'!
element
	"web element for which is that command (like update this element)"
	^element! !

!WebCommand methodsFor: 'accessing'!
element: aWebElement
	element := aWebElement! !

!WebCommand methodsFor: 'initialize-release'!
initOther
	other := Dictionary new.! !

!WebCommand methodsFor: 'testing'!
isUpdate
	"command to update some element?"
	^self command = #update! !

!WebCommand methodsFor: 'private-other'!
other
	^other! !

!WebCommand methodsFor: 'private-other'!
otherAt: aSymbol
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebCommand methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebCommand methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebCommand methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebCommand methodsFor: 'private'!
printString
	^'aWebCommand 
	command: ', self command printString, '
	context: ', self context printString, '
	app: ', (self app notNil ifTrue: [self app class name] ifFalse: ['unknown']), '
	view: ', self view printString, '
	element: ', (self element notNil 
		ifTrue: [self element class name, ' ', self element id printString] ifFalse: ['nil']), '
	value: ', (self value notNil ifTrue: [self value size printString, ' bytes'] ifFalse: ['nil'])! !

!WebCommand methodsFor: 'accessing'!
value
	^value! !

!WebCommand methodsFor: 'accessing'!
value: aString
	value := aString! !

!WebCommand methodsFor: 'accessing'!
view
	"on which app view this element was created"
	self element isNil ifTrue: [^nil].
	^self element creationContext notNil
		ifTrue: [self element creationContext view]
		ifFalse: [self element app view]! !

!WebCommand class methodsFor: 'instance creation'!
newLoadUrl: aString
	"command to load in current browser window some other page or reload current one"
	^self new 
		command: #load;
		value: aString! !

!WebCommand class methodsFor: 'instance creation'!
newUpdate: aWebElement with: aString
	"command to update some element on webpage"
	^self new 
		command: #update;
		element: aWebElement;
		value: aString! !

!WebComment methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	text := ''.! !

!WebComment methodsFor: 'private' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebComment methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	aStream nextPutAll: self ident, '<!!-- '.
	aStream nextPutAll: self text.
	aStream nextPutAll: ' -->', self eol.! !

!WebComment methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
text
	^text! !

!WebComment methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
text: aString
	text := aString.! !

!WebComment class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebComment class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString
	^self new text: aString

"WebText text: 'test'"! !

!WebContext methodsFor: 'accessing'!
activeContext
	"active is always the last context in the chain"
	^self isLast
		ifTrue: [self]
		ifFalse: [self child activeContext]! !

!WebContext methodsFor: 'accessing-other'!
afterCloseUpdate
	"used for temporary reference to the element to update after some popup will be closed. 
	See WebElement onClickPopup:thenClose, and WebElement>>addClosingLinkText: "
	^self otherAt: #AfterCloseUpdate ifAbsent: [nil]! !

!WebContext methodsFor: 'accessing-other'!
afterCloseUpdate: anElement
	"used for temporary reference to the element to update after some popup will be closed. 
	See WebElement onClickPopup:thenClose, and WebElement>>addClosingLinkText: "
	^self otherAt: #AfterCloseUpdate put: anElement! !

!WebContext methodsFor: 'private-ids'!
announceReplacementWith: anOldElement
	"next creation of WebElement (see class #new) will replace its id by that from anOldElement"
	"for robustness we store also the process it announced that!! "
	self replacementAnnouncements at: Processor activeProcess put: anOldElement! !

!WebContext methodsFor: 'accessing'!
answer
	"answer by the widget called in #onSubmitAnswer: or similar methods"
	^answer! !

!WebContext methodsFor: 'private'!
answer: anObject
	"answer by the widget called in #ask: or similar methods"
	answer := anObject! !

!WebContext methodsFor: 'accessing'!
app
	"the instance of WebApplication on which this context is executing"
	^self parent app! !

!WebContext methodsFor: 'private-ids'!
cancelReplacement
	"cancel next #registerId to replace the next element with old one in ids"
	self replacementAnnouncements removeKey: Processor activeProcess ifAbsent: []! !

!WebContext methodsFor: 'private-process'!
checkProcessState
	"this is temporary, it must be improved!! "
	"called from #executeRequest: to check if process is in a state to be closed and initialized instead"
	self isInterrupted ifTrue: 
		[self isLast not ifTrue: [self child close].
		self stopProcess; startProcess].! !

!WebContext methodsFor: 'accessing'!
child
	"another context in the chain, if any"
	^child! !

!WebContext methodsFor: 'private'!
child: aContext
	"add another context in the chain"
	(child notNil and: [aContext notNil]) ifTrue: [child close]. "and remove from app contexts etc."
	child := aContext.
	aContext notNil ifTrue: [aContext parent: self]! !

!WebContext methodsFor: 'executing'!
close
	"close process if any and pass control to parent context, which will continue executing itrs process if any" 
	"It also removes itself from context chain"
	self app removeContext: self.
	self isFirst not ifTrue: 
		[self parent child: nil.
		self event notNil ifTrue: 	  " parent context will now continue executing our req (and its old req if different)"
			[self event context: self parent.    "just to be sure" 
			self parent event notNil ifTrue: [self parent event context: self parent]]. 
		self parent isInterrupted 
			ifTrue: [self parent signal] ]. "to continue executing there"
	self event: nil; answer: nil.
	self stopProcess. "can accidentally terminate process on which we are right now executing?"
	self setClosed.! !

!WebContext methodsFor: 'executing'!
createNewContext
	"create and add as a child to receiver, also to the app"
	| ctx |
	ctx := WebContext newOn: self.
	self child: ctx.
	self app addContext: ctx.
	^ctx! !

!WebContext methodsFor: 'private-ids'!
currentReplacement
	"an old element to be replaced with a new one"
	^self replacementAnnouncements at:  Processor activeProcess ifAbsent: [nil]! !

!WebContext methodsFor: 'private-ids'!
elementId: aSymbol
	"search in a whole context chain, not only in current context!! "
	^self ids at: aSymbol ifAbsent: 
		[self isFirst not
			ifTrue: [self parent elementId: aSymbol]
			ifFalse: [nil]].! !

!WebContext methodsFor: 'accessing'!
event
	"current, later last event (a WebEvent or HTTPRequest) executed on that context"
	^event! !

!WebContext methodsFor: 'accessing'!
event: aWebEventOrRequest
	"current, later last event (a WebEvent or HTTPRequest) executed on that context"
	^event := aWebEventOrRequest! !

!WebContext methodsFor: 'executing'!
executeRequest: aRequest
	self checkProcessState. "and init processes if deadlocked or something. TEMPORARY!! "
	aRequest context: self. self event: aRequest. "to be sure!!"
	self signal "to wakeup the process which will execute it, see #processLoop"! !

!WebContext methodsFor: 'private-ids'!
existsId: aSymbol
	"check in a whole context chain, not only in current context!! "
	^(self elementId: aSymbol) notNil! !

!WebContext methodsFor: 'executing'!
finalizeExecutionOf: aRequest
	"do all necessary cleanup after request was composed and HTML streamed to response"
	self event: nil.   
	aRequest context: nil.	
	self answer: nil; result: nil.! !

!WebContext methodsFor: 'accessing'!
first
	"first context up in the chain"
	^self parent first! !

!WebContext methodsFor: 'accessing'!
form
	"a web form with input fields of this context"
	^self window form! !

!WebContext methodsFor: 'accessing'!
id
	"unique identifier of the context inside the app instance"
	id isNil ifTrue: [self setId].
	^id! !

!WebContext methodsFor: 'private-ids'!
ids
	"dictionary of elements which have id defined, for fast access to them from AJAX requests"
	ids isNil ifTrue: [self initIds].
	^ids! !

!WebContext methodsFor: 'private'!
idt
	"id text, with f at start if first/top context. For debugging"
	^(self isFirst ifTrue: ['f'] ifFalse: ['']), self id printString! !

!WebContext methodsFor: 'initialize-release'!
initIds
	ids := Dictionary new.! !

!WebContext methodsFor: 'initialize-release'!
initOther
	other := Dictionary new.! !

!WebContext methodsFor: 'initialize-release'!
initRegisteredSet
	^self ids at: #setOfRegisteredElements put: Set new.! !

!WebContext methodsFor: 'initialize-release'!
initReplacementAnnouncements
	^self ids at: #replacementAnnouncements put: Dictionary new.! !

!WebContext methodsFor: 'initialize-release'!
initSemaphore
	self semaphore: Semaphore new.! !

!WebContext methodsFor: 'initialize-release'!
initWindow
	self window: (WebWindow new parent: self)! !

!WebContext methodsFor: 'testing'!
isBusy
	^self isExecuting | self isInterrupted! !

!WebContext methodsFor: 'testing-states'!
isClosed
	"a context is already closed"
	^self state = #closed! !

!WebContext methodsFor: 'testing-states'!
isExecuting
	"a context's process is executing the request"
	^self state = #executing! !

!WebContext methodsFor: 'testing'!
isExecutingInOwnProcess
	"context's process will execute the request only if needed, that is, if we have two (or more)
	contexts because first is waiting for second to return some value (like in confirmation dialog)"
	^self process notNil! !

!WebContext methodsFor: 'testing'!
isFirst
	"is this first/upper context in the chain?"
	^false! !

!WebContext methodsFor: 'testing-states'!
isIdle
	"a context's process is in idle state, waiting to get a signal to execute next request"
	^self state = #idle! !

!WebContext methodsFor: 'testing-states'!
isInterrupted
	"a context's process is in an interrupted state, waiting for subcontext to finish and close"
	^self state = #interrupted! !

!WebContext methodsFor: 'testing'!
isLast
	"is this last/lower context in the chain?"
	^self child isNil! !

!WebContext methodsFor: 'testing-states'!
isNoProcess
	"a context doesn't haveits own process to execute a request"
	^self state = #noprocess! !

!WebContext methodsFor: 'private-ids'!
isRegistered: anElement
	^self registeredSet includes: anElement! !

!WebContext methodsFor: 'testing'!
isWebElement
	"because some elements (like WebWindow, WebPage)  have a context as the parent"
	^false! !

!WebContext methodsFor: 'accessing'!
level
	"on which level this context is in context chain. First one has level 0"
	^self parent level + 1! !

!WebContext methodsFor: 'private-ids'!
nextId
	" example: #id9. 
	Consider also already registered ids in contexts above in chain if any "
	^'id', (self nextIdNumber printString) asSymbol! !

!WebContext methodsFor: 'private-ids'!
nextIdNumber
	"considering also already registered ids on above contexts"
	| nr |
	nextId isNil ifTrue: [nextId := self ids size + 1].
	nr := self isFirst not ifTrue: [self parent nextIdNumber - 1] ifFalse: [0].
	nr := nr + nextId + 1.
	nextId := nextId + 1.
	^nr! !

!WebContext methodsFor: 'private-other'!
other
	^other! !

!WebContext methodsFor: 'private-other'!
otherAt: aSymbol
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebContext methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebContext methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebContext methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebContext methodsFor: 'accessing'!
page
	"a web page on which we are executing. This is always a window of first context in hte chain"
	^self first window! !

!WebContext methodsFor: 'accessing'!
parent
	"parent context up in the chain, but an app on the first context"
	^parent! !

!WebContext methodsFor: 'private'!
parent: aContext
	parent := aContext! !

!WebContext methodsFor: 'private'!
printString
	^'aWebContext id ', self id printString! !

!WebContext methodsFor: 'private-process'!
process
	"a process which executes the request in this context. It can be interrupted and handled to a process from 
	child context. In such case this process is waiting on semaphore for child process to finish and return 
	some value"
	^process! !

!WebContext methodsFor: 'private-process'!
process: aProcess
	process := aProcess! !

!WebContext methodsFor: 'private-process'!
processLoop
	[true] whileTrue:
		[self setIdleState.
		self semaphore wait.
		self setExecutingState.
		self request context: self. "to be sure"
		self result: (self app composeWebPageStepTwoFor: self request).
		self isFirst
			ifTrue: [self first mainSemaphore signal] "for main connection's process to proceed"
			ifFalse: [self parent answer notNil "if any answer, close me and signal parent"
				ifTrue: [self close] "which will also signal interrupted parent context to continue"		ifFalse: [
					self first mainSemaphore signal]] ] "for main connection's process to proceed"! !

!WebContext methodsFor: 'private-process'!
processPriority
	^Processor userBackgroundPriority! !

!WebContext methodsFor: 'private-ids'!
registerIdFor: anElement
	anElement id isNil ifTrue: [anElement id: self nextId]. "auto id if not manually defined!! "
	(self isRegistered: anElement) ifTrue: [^nil].
	(self ids includesKey: anElement id) ifTrue: 
		[self registeredSet remove: (self ids at: anElement id)]. "to replace with a new one"
	self ids at: anElement id put: anElement.
	self registeredSet add: anElement.! !

!WebContext methodsFor: 'private-ids'!
registeredSet
	^self ids at: #setOfRegisteredElements ifAbsent: [self initRegisteredSet]! !

!WebContext methodsFor: 'private-ids'!
removeId: aSymbol
	| element |
	element := self ids at: aSymbol ifAbsent: [^nil].
	self ids removeKey: aSymbol.
	self registeredSet remove: element ifAbsent: [].! !

!WebContext methodsFor: 'private-ids'!
replaceIdIn: anElement with: anOldElement
	"new anElement should have same id as an old one"
	anOldElement isNil ifTrue: [^nil].
	self registeredSet 
		remove: anOldElement ifAbsent: []; 
		add: anElement.
	self ids removeKey: anOldElement id ifAbsent: [].
	anElement attributesAt: #id put: anOldElement id. "anElement id: would deadlock!! "
	self ids at: anElement id put: anElement.! !

!WebContext methodsFor: 'private-ids'!
replacementAnnouncements
	"current elememnt id replacement announcements"
	^self ids at: #replacementAnnouncements ifAbsent: [self initReplacementAnnouncements]! !

!WebContext methodsFor: 'private-obsolete'!
request
	"OBSOLETE, use #event: instead!! "
	"current, later last request executed on that context"
	^self event! !

!WebContext methodsFor: 'private-obsolete'!
request: aRequest
	"OBSOLETE, use #event: instead!! "
	"current, later last request executed on that context"
	self event: aRequest! !

!WebContext methodsFor: 'accessing'!
result
	"resulted web element of executing the context"
	^result! !

!WebContext methodsFor: 'private'!
result: aWebElement
	result := aWebElement! !

!WebContext methodsFor: 'private-process'!
semaphore
	"on this semaphore the context process is waiting for child process to signal finishing its execution and 
	returning a result value"
	semaphore isNil ifTrue: [self initSemaphore].
	^semaphore! !

!WebContext methodsFor: 'private-process'!
semaphore: aSemaphore
	semaphore := aSemaphore! !

!WebContext methodsFor: 'executing'!
serialize: aRequest
	"Serialize execution if some other request is already executing"
	"for now just wait until previous request finish execution"
	[self isBusy ] 
		whileTrue: [(Delay forMilliseconds: 200) wait].! !

!WebContext methodsFor: 'accessing'!
session
	^self app session! !

!WebContext methodsFor: 'private-states'!
setClosed
	"a context is already closed"
	self state:  #closed! !

!WebContext methodsFor: 'private-states'!
setExecutingState
	"a context's process is executing the request"
	self state: #executing! !

!WebContext methodsFor: 'initialize-release'!
setId
	"set a random number and check it for uniquines"
	id := (AIDASite random next * 100000) truncated.
	(self app contexts includesKey: self id) ifTrue: [^self setId]  "repeat until unique"! !

!WebContext methodsFor: 'private-states'!
setIdleState
	"a context's process is in idle state, waiting to get a signal to execute next request"
	self state: #idle! !

!WebContext methodsFor: 'private-states'!
setInterruptedState
	"a context's process is in an interrupted state, waiting for subcontext to finish and close"
	self state: #interrupted! !

!WebContext methodsFor: 'private-states'!
setNoProcessState
	"a context doesn't haveits own process to execute a request"
	self state: #noprocess! !

!WebContext methodsFor: 'private-process'!
signal
	"signal a process to continue"
	self semaphore signal! !

!WebContext methodsFor: 'private-process'!
startProcess
	self process notNil ifTrue: [^nil].
	self process: ([self processLoop] forkAt: self processPriority)! !

!WebContext methodsFor: 'private-states'!
state
	" #noprocess #idle #executing #interrupted "
	state isNil ifTrue: [self setNoProcessState].
	^state! !

!WebContext methodsFor: 'private-states'!
state: aSymbol
	" #noprocess #idle #interrupted "
	state := aSymbol! !

!WebContext methodsFor: 'private-process'!
stopProcess
	self process isNil ifTrue: [^nil].
	self process terminate.
	self process: nil; semaphore: nil.
	self setNoProcessState! !

!WebContext methodsFor: 'accessing'!
view
	"view on which context is executed"
	^self first view! !

!WebContext methodsFor: 'private-process'!
wait
	"a process will be interrupted here until the next signal come"
	self setInterruptedState.
	self initSemaphore. "otherwise it doesn't wait, why?"
	self semaphore wait.
	self setExecutingState.! !

!WebContext methodsFor: 'accessing'!
window
	"a window (or web page) in which this context execute the request"
	window isNil ifTrue: [self initWindow].
	^window! !

!WebContext methodsFor: 'private'!
window: aWebWindow
	"a window (or web page) in which this context execute the request"
	window := aWebWindow! !

!WebContext class methodsFor: 'accessing'!
contextIdName
	"query name for contexts in in URLs: 'aidaCtx=1456' "
	^'aidaCtx'! !

!WebContext class methodsFor: 'instance creation'!
newOn: aContext
	^super new 
		parent: aContext;
		setNoProcessState "an initial state"! !

!WebContextFirst methodsFor: 'accessing'!
app
	"the instance of WebApplication on which this context is executing"
	^self parent! !

!WebContextFirst methodsFor: 'executing'!
close
	"close process if any, and release other things. It also removes itself from context chain"
	super close.! !

!WebContextFirst methodsFor: 'accessing'!
first
	"first context up in the chain. In this case is me"
	^self! !

!WebContextFirst methodsFor: 'initialize-release'!
initMainSemaphore
	mainSemaphore := Semaphore new.! !

!WebContextFirst methodsFor: 'initialize-release'!
initWindow
	window := WebPage new  "as subclass of WebWindow"
		parent: self! !

!WebContextFirst methodsFor: 'testing'!
isFirst
	"is this first/upper context in the chain?"
	^true! !

!WebContextFirst methodsFor: 'accessing'!
level
	"on which level this context is in context chain. First one has level 0"
	^0! !

!WebContextFirst methodsFor: 'private-process'!
mainSemaphore
	"main process is waiting on this semaphire for context's process to signaling back the finishment"
	mainSemaphore isNil ifTrue: [self initMainSemaphore].
	^mainSemaphore! !

!WebContextFirst methodsFor: 'accessing'!
parent: aWebApplication
	parent := aWebApplication! !

!WebContextFirst methodsFor: 'private'!
printString
	^'aWebContextFirst 
	view: ' , self view printString , '
	id: ', self id printString! !

!WebContextFirst methodsFor: 'accessing'!
view
	"view on which context is executed"
	^view! !

!WebContextFirst methodsFor: 'accessing'!
view: aSymbol
	"view on which context is executed. #main is default"
	view := aSymbol isNil 
		ifTrue: [#main] 
		ifFalse: [aSymbol]! !

!WebContextFirst class methodsFor: 'instance creation'!
newOn: aWebApplication
	^super new 
		parent: aWebApplication;
		setNoProcessState "an initial state"! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addArray: aFirstArray to: aSecondArray

	1 to: aFirstArray size do: [:index |
		aSecondArray
			at: index
			put: (aFirstArray at: index) + (aSecondArray at: index)]! !

!WebCounter methodsFor: 'adding' stamp: ' 21/4/07 22:07'!
addCounter: aWebCounter
	"add counts from specified counter"
	aWebCounter year = self year ifTrue: 
		[self addArray: aWebCounter dailyCounts to: self dailyCounts].
	self addArray: aWebCounter hourlyCounts to: self hourlyCounts.
	self total: self total + aWebCounter total.
	aWebCounter yearlyHistory keysAndValuesDo: [:yr :array |
		self addArray: array to: (self yearlyHistory at: yr ifAbsentPut: [Array new: 366 withAll: 0]) ].

"WebCounter new addCounter: WebCounter new"! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allCountsInYear: aYearNumber

	aYearNumber = self year 
		ifTrue: [^self dailyCounts copy]
		ifFalse: 
			[^(self yearlyHistory 
				at: aYearNumber 
				ifAbsent: [^Array new: 366 withAll: 0]) copy]! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allCountsThatYear
	
	"return array of counts for each day in current year"

	^self allCountsInYear: Date today year! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allHourlyCounts

	^self hourlyCounts copy! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allTodayHourlyCounts

	^self todayHourlyCounts copy! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkIfNewYear

	(Date today year = (self year + 1)) ifTrue:
		[self yearlyHistory
			at: self year
			put: self dailyCounts.
		self initDailyCounts.
		self year: Date today year].! !

!WebCounter methodsFor: 'counting' stamp: ' 21/4/07 22:07'!
countRequest: aWebRequest

	"register a request by incrementing daily, hourly and total counter."

	self incCounterOnTimestamp: aWebRequest timestamp! !

!WebCounter methodsFor: 'accessing' stamp: 'mivsek 1/10/2008 19:19'!
countsFrom: aStartDate to: anEndDate

	| collection |
	collection := OrderedCollection new.
	aStartDate asDays to: anEndDate asDays do: [:days | 
		collection add: (self countsOnDate: (SpDate fromDays: days))].
	^collection! !

!WebCounter methodsFor: 'accessing' stamp: 'JM 4/26/2007 21:38'!
countsMonthlyFromDate: aDate
	| date collection |
	date := SpDate newDay: 1
		month: aDate monthIndex
		year: aDate year.
	collection := OrderedCollection new.
	[date < SpDate today] whileTrue:
		[collection add: (self countsOnMonth: date monthIndex year: date year).
		date := SpDate newDay: 1
			month: (date + 31) monthIndex
			year: (date + 31) year].
	^collection

"AIDASite default totalCounter countsMonthlyFromDate: Date today - 6"! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
countsMonthlyOnYear: aYear

	^(1 to: 12) collect: [:month | self countsOnMonth: month year: aYear]

"WebServer default totalCounter countsMonthlyOnYear: 1999"! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
countsOnDate: aDate

	| counts |
	counts := self allCountsInYear: aDate year.
	^counts at: aDate day! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
countsOnHour: aNumber

	^self hourlyCounts at: aNumber! !

!WebCounter methodsFor: 'accessing' stamp: 'JM 4/26/2007 21:32'!
countsOnMonth: aMonth year: aYear

	| counts date |
	date := SpDate newDay: 1 month: aMonth year: aYear.
	counts := self allCountsInYear: date year.
	^(date day to: date day + date daysInMonth - 1)
		inject: 0 into: [:sum :dy | sum + (counts at: dy)]

"WebServer default totalCounter countsOnMonth: 10 year: 1999"! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
countsTodayOnHour: aNumber

	^self todayHourlyCounts at: aNumber! !

!WebCounter methodsFor: 'accessing'!
currentWeekCounts
	"counts for every day in current week"
	| firstDay collection |
	firstDay := SpDate today subtractDays: SpDate today weekdayIndex + 1.
	collection := OrderedCollection new.
	firstDay asDays to: firstDay asDays + 6 do: [:days |
		collection add: (self countsOnDate: (SpDate fromDays: days))].
	^collection! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
dailyCounts
	"array of counters for each day in current year. When new year arrives, counters are 
	copied in a yearlyHistory"

	dailyCounts isNil ifTrue: [self initDailyCounts].
	^dailyCounts! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
day
	day isNil ifTrue: [self day: Date today dayOfYear].
	^day! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
day: aNumber
	day := aNumber! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
hourlyCounts
	"array of counters for each hour in a day."

	hourlyCounts isNil ifTrue: [self initHourlyCounts].
	^hourlyCounts! !

!WebCounter methodsFor: 'counting' stamp: 'JM 4/25/2007 21:22'!
incCounter

	"increment daily, hourly and total counter with date and time now"

	self incCounterOnTimestamp: SpTimestamp now! !

!WebCounter methodsFor: 'counting' stamp: ' 21/4/07 22:07'!
incCounterOnTimestamp: aTimestamp

	"increment daily, hourly and total counter with date and time defined"

	
	self incDailyCounterOnDate: aTimestamp asDate.
	self incHourlyCounterOnTimestamp: aTimestamp.
	self incTotal.! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incDailyCounterOnDate: aDate
	aDate year = self year 
		ifTrue: 
			[self dailyCounts at: aDate day put: (self  dailyCounts at: aDate day) + 1]
		ifFalse:
			[self checkIfNewYear.
			self incHistoryCounterOnDate: aDate].! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incHistoryCounterOnDate: aDate
	| array |
	aDate year < self year ifTrue: [^self error: 'future years not allowed'].
	array := (self yearlyHistory at: aDate year ifAbsentPut: [Array new: 366 withAll: 0] ).
	array at: aDate day put: (array at: aDate day)+1! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incHourlyCounterOnTime: aTime
	| hours |
	hours := aTime hours.
	self hourlyCounts at: hours+1 	put: (self  hourlyCounts at: hours+1) + 1.! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incHourlyCounterOnTimestamp: aTimestamp
	| hours |
	hours := aTimestamp asTime hours.
	self hourlyCounts at: hours+1 put: (self  hourlyCounts at: hours+1) + 1.
	self incTodayHourlyCounterOnTimestamp: aTimestamp! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incTodayHourlyCounterOnTimestamp: aTimestamp

	| hours dayOfYear |
	dayOfYear := aTimestamp asDate day.
	self day ~= dayOfYear 	ifTrue: 
		[self initTodayHourlyCounts.
		self day: dayOfYear].
	hours := aTimestamp asTime hours.
	self todayHourlyCounts 
		at: hours+1
		put: (self  todayHourlyCounts at: hours+1) + 1.! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
incTotal

	self total: self total + 1.! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initDailyCounts
	dailyCounts := Array new: 366 withAll: 0.
	self year: Date today year.! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initHourlyCounts
	hourlyCounts := Array new: 24 withAll: 0.! !

!WebCounter methodsFor: 'initialize-release' stamp: 'JM 4/25/2007 21:22'!
initStarted
	"set a timestamp to a current time"
	started := SpTimestamp now asSeconds.! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTodayHourlyCounts

	todayHourlyCounts := Array new: 24 withAll: 0.
	self day: Date today day.! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTotal

	self total: 0.! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initYearlyHistory
	yearlyHistory := Dictionary new.! !

!WebCounter methodsFor: 'testing' stamp: 'np 10/24/2008 12:57'!
isFirstOnDate: aDate sinceDays: nrOfDays
	"a first/new count since specified nr of days, when there were no counts"
	| since current |
	current := aDate day.
	since := (day - nrOfDays) max: 1. "well what about first 7 days in new year?"
	(self dailyCounts at: current) = 0 ifTrue: [^false].
	since to: current-1 do: [:d | (self dailyCounts at: d) > 0 ifTrue: [^false] ].
	^true! !

!WebCounter methodsFor: 'private'!
printString

	^'aWebCounter total: ', self total printDotString! !

!WebCounter methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
reset

	"set all counters to zero and set started timestamp to now. YOU WILL LOOSE ALL HISTORY
	OF COUNTS !! "

	self initDailyCounts.
	self initHourlyCounts.
	self initTotal.
	self initStarted.! !

!WebCounter methodsFor: 'accessing' stamp: 'janko 10/31/2008 16:05'!
started
	"return a timestamp, from when web visits are counted"

	started isNil ifTrue: [self initStarted].
	^SpTimestamp fromSeconds: started! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
today
	
	"return number of requests today"

	^self countsOnDate: Date today! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
todayHourlyCounts
	"array of counters for each hour today."

	todayHourlyCounts isNil ifTrue: [self initTodayHourlyCounts].
	^todayHourlyCounts! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
todayHourlyCounts: anObject
	todayHourlyCounts := anObject! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
total
	"total number of visits, registered by this counter"

	total isNil ifTrue: [self initTotal].
	^total.! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
total: aNumber
	total := aNumber.! !

!WebCounter methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
weekly
	"total count in current week"
	^self currentWeekCounts inject: 0 into: [:sum :each | sum + each]! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
year
	year isNil ifTrue: [self year: Date today year].
	^year! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
year: aNumber
	year := aNumber.! !

!WebCounter methodsFor: 'private' stamp: ' 21/4/07 22:07'!
yearlyHistory
	yearlyHistory isNil ifTrue: [self initYearlyHistory].
	^yearlyHistory! !

!WebCounter methodsFor: 'accessing' stamp: 'mivsek 1/10/2008 19:19'!
yesterday
	"return number of requests yesterday"
	^self countsOnDate: (SpDate today subtractDays: 1)! !

!WebCounter class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
instVarMap
	"Gemstone odb"

	^super instVarMap,
		#( 	(todayHourlyCounts nil)	)! !

!WebCounter class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new reset! !

!WebCounter class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
replicationSpec
	"Gemstone"
	^super replicationSpec, 
	 	#( 	(started max 2)
			(day replicate)
			(year replicate)
			(dailyCounts max 2)
			(hourlyCounts max 2)
			(total replicate)
			(yearlyHistory stub)	)! !

!WebCounter class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
setupOdbStorage
	"Versant"

	self 
		store: #(started dailyCounts hourlyCounts total )
		as: #(Integer IntegerArray IntegerArray Integer).! !

!WebCounter class methodsFor: 'summing' stamp: ' 21/4/07 22:07'!
sumCounters: aCounterCollection

	"return a new counter with sum of all specified counters"
	| sumCounter |
	sumCounter := WebCounter new.
	aCounterCollection do: [:counter |
		sumCounter addCounter: counter].
	^sumCounter! !

!WebCounter class methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
throughMidnightTest

	Janko := WebCounter new.
	[100 timesRepeat: 
		[Janko incCounter.
		(Delay forSeconds: 1) wait]
	] fork.
	^Janko inspect

"WebCounter throughMidnightTest"! !

!WebCounter class methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
throughNewYearTest

	Janko := WebCounter new.
	[100 timesRepeat: 
		[Janko incCounter.
		(Delay forSeconds: 1) wait]
	] fork.
	^Janko inspect

"WebCounter throughNewYearTest"! !

!WebDateInputField methodsFor: 'private'!
addCalendarSetupScriptOn: aStream
	aStream nextPutAll: '<script type="text/javascript">Calendar.setup({ inputField : "', self inputFieldId, 		'", ifFormat : "', self inputFieldFormat, 
		'", button : "', self buttonId, '"});</script>', self eol! !

!WebDateInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
button
	^button! !

!WebDateInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
button: aWebButton
	button := aWebButton! !

!WebDateInputField methodsFor: 'private'!
buttonId
	^self button id! !

!WebDateInputField methodsFor: 'private'!
buttonImage
	"from WebStyle calendarButtonGif !! "
	| methodImage |
	methodImage := WebMethodImage
		fromMethod: #calendarButtonGif
		on: self style 
		contentType: 'image/gif' 
		site: self style site.
	^(WebImage image: methodImage)
		title: 'Choose date';
		imageAlign: #middle;
		onMouseOver: 'this.style.cursor=''pointer'' ';
		onMouseOut: 'this.style.cursor=''default'' '! !

!WebDateInputField methodsFor: 'initialize-release'!
initialize
	super initialize.
	self size: 11. 
	self app style ensureJsAndCssForCalendarInHeader.
	self app style ensureJsResourceForCalendarSetup.! !

!WebDateInputField methodsFor: 'private'!
inputFieldFormat
	"the date format"
	^'%e.%m.%Y'  "17.01.1965"! !

!WebDateInputField methodsFor: 'private'!
inputFieldId
	^self id! !

!WebDateInputField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isDateInputField
	^true! !

!WebDateInputField methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self ensureId.
	self button: self buttonImage. self button registerId.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	self button streamHtmlTo: aStream for: aRequest on: aSession.
	self addCalendarSetupScriptOn: aStream.! !

!WebDelayedField methodsFor: 'accessing' stamp: 'mivsek 6/13/2007 16:16'!
defaultDelay
	"delay before posting, in seconds"
	^1! !

!WebDelayedField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delay
	"delay before posting, in seconds"
	delay isNil ifTrue: [self delay: self defaultDelay].
	^delay! !

!WebDelayedField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delay: aNumber
	"delay before posting, in seconds"
	delay := aNumber! !

!WebDelayedField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isDelayedField
	^true! !

!WebDelayedField methodsFor: 'events-ajax'!
onChangePost
	"on key up, not on change we send a #change event with a delay after last event!! "
	self setSingleFieldPost.   "so that field will actually be saved, otherwise change will be just announced"
	self onKeyUp: 
		(self scriptForEvent: #change context: self context). "script with delayed post!!"
	(self eventHandlerFor: #change)
		addAcceptPostedInput! !

!WebDelayedField methodsFor: 'events-ajax'!
onChangePostAndUpdate: anElement with: anArgObject
	"on key up, not on change we send a #change event with a delay after last event!! "
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onChangePost.
	(self eventHandlerFor: #change)
		addUpdate: anElement with: anArgObject.! !

!WebDelayedField methodsFor: 'private'!
scriptForEvent: anEventSymbol context: aWebContext
	"send current value of this form element, but with delay after last event"
	^'aidaDelayedEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''',',
		'this.value,', (self delay*1000) printString, ');'

"	^'aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''',',
		'this.value);'
"! !

!WebDemo methodsFor: 'accessing'!
asJson
	"to return some JSON content on http://localhost:8888/demo.json"
	^WebJSON stringify: #(12 'Aida' 45)! !

!WebDemo methodsFor: 'accessing' stamp: 'np 3/15/2009 16:00'!
content
	"for Rich Editor demo"
	content isNil ifTrue: [^''].
	^content! !

!WebDemo methodsFor: 'accessing' stamp: 'np 3/15/2009 16:00'!
content: aString
	"for Rich Editor demo"
	^content := aString! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
date
	date isNil ifTrue: [^''].
	^date! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
date: aString
	date := aString! !

!WebDemo methodsFor: 'introduction' stamp: 'janko 7/8/2011 23:35'!
defaultIntroductionText

^'<b>Congratulations!!</b><br><br>
You just started your Aida/Web Smalltalk Web Application Server. Here you can look at few simple <a href=/demo?view=grid><b>demos</b></a> (see navigation bar at the left) and on top left there are links to main website, where you can find more information. <br>
<br>
You are encougared to:
<ul>
<li>look at <a href=http://www.aidaweb.si/screenshots.html><b>Screenshots</b></a> to see, what kind of complex web applications you can build with AIDA/Web,</li>
<li>see <a href=http://www.aidaweb.si/tutorial.html><b>Tutorial</b></a> to build your first web application,</li>
<li>read other <a href=http://www.aidaweb.si/documentation.html><b>Documentation</b></a> to learn more (Architecture, Administrator''s guide, Programer''s guide, Ajax, Advanced features, Articles and presentations and more),</li> 
<li>join the <a href=http://www.aidaweb.si/community.html><b>Community</b></a>.</li>
</ul>
You can also <a href=/admin?view=login><b>login</b></a> with username: <b>admin</b> and password: <b>password</b>. <br><br>

Development team wish you a lot of great moments with Aida/Web !!
'.! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delayedInput
	delayedInput isNil ifTrue: [^''].
	^delayedInput! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
delayedInput: aString
	delayedInput := aString! !

!WebDemo methodsFor: 'accessing'!
delete
	"for a control flow example"
	deleted := true.! !

!WebDemo methodsFor: 'accessing'!
deleted
	"for a control flow example"
	deleted isNil ifTrue: [self resetDelete].
	^deleted! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
editField
	"for in-place editor demo"
	editField isNil ifTrue: [^'Click me to edit!!'].
	^editField! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
editField: anObject
	editField := anObject! !

!WebDemo methodsFor: 'accessing'!
field1
	^field1! !

!WebDemo methodsFor: 'accessing'!
field1: anObject
	field1 := anObject! !

!WebDemo methodsFor: 'accessing'!
field2
	^field2! !

!WebDemo methodsFor: 'accessing'!
field2: anObject
	field2 := anObject! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
input
	input isNil ifTrue: [^''].
	^input! !

!WebDemo methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
input: aString
	input := aString! !

!WebDemo methodsFor: 'introduction' stamp: 'jm 6/28/2009 11:09'!
introduction
	"introduction text, In instvar to allow changing it by Scribo and other packages at installation"
	introduction isNil ifTrue: [self introduction: self defaultIntroductionText].
	^introduction! !

!WebDemo methodsFor: 'introduction' stamp: 'jm 6/28/2009 11:06'!
introduction: aString
	"introduction text, In instvar to allow changing it by Scribo and other packages at installation"
	introduction := aString.! !

!WebDemo methodsFor: 'accessing'!
preferredUrl
	^'/demos'! !

!WebDemo methodsFor: 'accessing'!
resetDelete
	"for a control flow example"
	deleted := false.! !

!WebDemo methodsFor: 'accessing'!
submitValue
	submitValue isNil ifTrue: [^''].
	^submitValue! !

!WebDemo methodsFor: 'accessing'!
submitValue: aString
	submitValue := aString! !

!WebDemo class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default
	^AIDASite default demo! !

!WebDemoApp methodsFor: 'actions'!
actionAjaxSomething
	"from #ajaxSubmitExample, just to test Ajax action calling"
	Transcript cr; show: 'Ajax submit'! !

!WebDemoApp methodsFor: 'actions-control flow'!
actionControlFlow
	"just for access rights setup"! !

!WebDemoApp methodsFor: 'actions-control flow'!
actionControlFlowDelete
	"tree-like control flow in action!! "
	(self ask: (WebDialog newConfirm text: 'Delete?') )
		ifTrue: [self observee delete]! !

!WebDemoApp methodsFor: 'actions-control flow'!
actionControlFlowReset
	self observee resetDelete! !

!WebDemoApp methodsFor: 'actions' stamp: 'mivsek 3/7/2008 19:17'!
actionEditMembers
	"just for security to work!!"! !

!WebDemoApp methodsFor: 'actions' stamp: ' 21/4/07 22:07'!
actionEditMembersSave
	self redirectToView: #gridSelected! !

!WebDemoApp methodsFor: 'actions' stamp: 'janko 8/1/2008 20:44'!
actionFileUpload
	self fileStream notNil ifTrue:
		[self fileStream close]. "while content were already streamed to the file before"! !

!WebDemoApp methodsFor: 'actions' stamp: 'mivsek 3/7/2008 19:16'!
actionGridSelected
	"just for security to work!!"! !

!WebDemoApp methodsFor: 'actions' stamp: ' 21/4/07 22:07'!
actionGridSelectedEditMembers
	self redirectToView: #editMembers! !

!WebDemoApp methodsFor: 'actions' stamp: ' 21/4/07 22:07'!
actionWebdav
	| stream file |
	file := self webdavExampleFilename asFilename. file exists ifTrue: [file delete].
	[stream :=  file appendStream. stream binary. 
	stream nextPutAll: self observee file asByteArray] 
		ensure: [self observee file: nil. stream close].! !

!WebDemoApp methodsFor: 'actions'!
actionrichEditor
	"just to enable setup of access rights"! !

!WebDemoApp methodsFor: 'views'!
addWebDAVVBScript
	"to open directly from web and not copy a document in local cache"
	self context page scriptBefore: '
 <SCRIPT LANGUAGE=VBScript>
   Function OpenDoc(strLocation)
   Dim objWord
      Set objWord = CreateObject("Word.Application")
      objWord.Visible = true
      objWord.Documents.Open strLocation
   End Function
 </SCRIPT>
'! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxAutocompleteExampleTo: e
	| field1 field2 result |
	e cell colspan: 2; addTextH4: 'Example: Autocomplete field with data from server'. e newRow.
	e cell valign: #top; addTextSmall: 'Type first chars of month names to select: '; addBreak.
	field1 := WebAutocompleteField 
		aspect: #field1 for: self observee choicesAspect: #monthsStarting: for: self.
	e cell add: field1.
	e newCell addTextSmall: 'Again, the choice will be posted instantly: '. e cell addBreak.
	result := self ajaxAutocompleteResult.
	field2 := WebAutocompleteField 
		aspect: #field2 for: self observee choicesAspect: #monthsStarting: for: self.
	field2 afterPostAndUpdate: result.
	e cell add: field2. e cell addBreak.
	e cell add: result.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxAutocompleteResult
	| e |
	e := WebElement new.
	e addTextBold: self observee field2.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxDelayedFieldElement
	| e |
	e := WebElement new.
	e addTextBold: self observee delayedInput.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxInPlaceEditorExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: In-place editor example'.
	e addText: 'Click text below to edit it'. e addBreak.
"	e addInPlaceEditableTextAspect: #editField for: self observee." "that's shorter way"
	e add: ((WebInPlaceEditableText aspect: #editField for: self observee)
		triggerElement: ((WebImage gif: #buttonEditGif) title: 'Edit this text') ). "image to enter edit"
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxLiveAndDelayedFieldExample
	| e element1 input1 element2 input2 |
	e := WebElement new. e table width: 1. "100%"
	e cell colspan: 2; addTextH4: 'Example: Live and Delayed input send to server'. e newRow.
	element1 := self ajaxLiveFieldElement.
	input1 := WebInputField aspect: #input for: self observee.
	input1 onKeyUpPostAndUpdate: element1.
	e cell width: 0.5; add: input1; addBreak; add: element1.
	element2 := self ajaxDelayedFieldElement.
	input2 := WebDelayedField aspect: #delayedInput for: self observee.
	input2 afterPostUpdate: element2.
	e newCell add: input2; addBreak; add: element2.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxLiveAndDelayedFieldExampleTo: e
	| element1 input1 element2 input2 |
	e cell colspan: 2; addTextH4: 'Example: Live and Delayed input send to server'. e newRow.
	element1 := self ajaxLiveFieldElement.
	input1 := WebInputField aspect: #input for: self observee.
	input1 onKeyUpPostAndUpdate: element1.
	e cell width: 0.5; add: input1; addBreak; add: element1.
	element2 := self ajaxDelayedFieldElement.
	input2 := WebDelayedField aspect: #delayedInput for: self observee.
	input2 onChangePostAndUpdate: element2.
	e newCell add: input2; addBreak; add: element2.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxLiveFieldElement
	| e |
	e := WebElement new.
	e addTextBold: self observee input.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxPeriodicUpdaterExample
	| e element |
	e := WebElement new.
	e addTextH4: 'Periodicaly update element from server'.
	element := self ajaxTimeElement.
	element updateEverySeconds: 1.
	e add: element.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxPopupDialogExample
	| e |
	e := WebElement new.
	e addTextH4: 'Popup info dialog'.
	(e addNilLinkText: 'Click me for popup')
		onClickPopup: (WebDialog newInfo text: 'Just hello!!').
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxPopupWindowExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Popup window with Ajax content from server'.
	(e addNilLinkText: 'Click me for popup')
		onClickPopup: self ajaxPopupWindowLive.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxPopupWindowLive
	| e |
	e := WebElement new.
	self context event isClassicalRequest ifTrue: [^e]. "because this method is also called while building 
		 										    main page in #ajaxPopupWindowExample"
	e addTextH1: 'Popup window with live content from server'. e addBreak.
	e addText: 'Timestamp now: ',  SpTimestamp now printString; addBreak; addBreak.
	(e addNilLinkText: 'popup one more')
		onClickPopup: self ajaxPopupWindowLive2 thenUpdate: e. "to refresh time"
	e addText: ' | '.
	e addCloseLinkText: 'close'.   "closing link, via Ajax closes also the window and context on the server"
	^e! !

!WebDemoApp methodsFor: 'views-ajax' stamp: 'janko 11/1/2011 13:07'!
ajaxPopupWindowLive2
	| e |
	e := WebElement new.
	e addText: SpTimestamp now printString; addBreak.
	e addCloseLinkText: 'close'.   "closing link"
	e addText: ' or '.
	(e addButtonText: 'Close')
		onSubmitClose.
	^e! !

!WebDemoApp methodsFor: 'views-ajax' stamp: 'janko 10/26/2011 22:41'!
ajaxSubmitExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Ajax form submit to the server'.
	e addInputFieldAspect: #submitValue for: self observee. e addSpace.
	(e addButtonText: 'Ajax submit' action: #something) "will call also call #actionAjaxSomething"
		onSubmitUpdate: e.
	e addBreak; addTextBold: self observee submitValue.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxTimeElement
	| e |
	e := WebElement newSpan.
	e style: '{background-color: #eee }'.
	e addTextBold: SpDate today shortPrintSloString, ' ', SpTimestamp now asTime printSecSloString. 
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxUpdateTimeExample
	| e element |
	e := WebElement new.
	e addTextH4: 'Example: Update element from server'.
	element := self ajaxTimeElement.
	e add: element; addBreak.
	(e addNilLinkText: 'Click me to update')
		onClickUpdate: element.
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxValidationExample
	| e field |
	e := WebElement new. e table width: 220.
	e cell colspan:2; addTextH4: 'Instant validation example'. e newRow.
	e cell width: 160; addText: 'Today''s year is: '.
	field := e cell addInputFieldAspect: #year for: self size: 4.
	field 
		onChangePost;
		validIfTrue: [:value | value isEmpty"temporary!!" or: [value asInteger = Date today year]];
		errorText: 'Wrong!!'.
	e newCell add: field errorElement. "this element will show error text in red near input field, if year is wrong"
	^e! !

!WebDemoApp methodsFor: 'views-ajax'!
ajaxVerificationExample
	| e field |
	e := WebElement new.
	e addTextH4: 'Example: instant verification example'.
	e addText: 'Today''s year is: '. e addBreak.
	field := e addInputFieldAspect: #year for: self.
	field 
		onChangePost;
		validIfTrue: [:value | value asInteger = Date today year];
		errorText: 'Wrong!!'.
	e add: field errorElement. "this element will show error text in red near input field, if year is wrong"
	^e! !

!WebDemoApp methodsFor: 'views-grid'!
classesEditElement
	| e |
	e := WebElement new.
	e addButtonText: 'Save' action: #save.
	e add: (WebGrid new
		columnNames: #('' 'Class name');
		columnAspects: #(nil #name);
		sortOn: 2;
		collection: WebApplication allWebAppClasses;
		checkboxesColumn: 1 collection: self selectedClasses;
		yourself).
	^e! !

!WebDemoApp methodsFor: 'views-grid'!
classesSelectedElement
	| e |
	e := WebElement new.
	e addButtonText: 'Select classes' action: #editMembers.
	e add: (WebGrid new
		columnNames: #('nr.' 'Class name');
		columnAspects: #(nil #name);
		setNumbering; sortOn: 2;
		collection: self selectedClasses;
		yourself).
	^e! !

!WebDemoApp methodsFor: 'views-grid'!
classesTableElement
	| e |
	e := WebElement new.
	e add: (WebGrid new
		columnNames: #('nr.' 'Class name');
		columnFilters: #(nil true);
		columnAspects: #(nil #name);
		setNumbering; sortOn: 2;
		collection: WebApplication allWebAppClasses;
		yourself).
	^e! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 21:13'!
fileContentType
	^fileContentType! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 21:14'!
fileContentType: aString
	fileContentType := aString! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 20:09'!
fileStream
	"for file upload"
	^fileStream! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 20:09'!
fileStream: aFileStream
	"for file upload"
	fileStream := aFileStream! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 21:12'!
filename
	filename isNil ifTrue: [^''].
	^filename! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 21:13'!
filename: aString
	filename := aString! !

!WebDemoApp methodsFor: 'views-control flow'!
flowConfirmDeleteExample
	"see #actionControlFlowDelete for actual control flow example"
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Delete with confirmation dialog'.
	self observee deleted not
		ifTrue: 
			[(e addButtonText: 'Delete' action: #delete) "then see #actionControlFlowDelete !! "
			"	onSubmitUpdate: e"]  "later!!"
		ifFalse: 
			[e addTextBold: 'Deleted!!'; addSpace; addButtonText: 'Reset delete' action: #reset].
	^e! !

!WebDemoApp methodsFor: 'views-grid'!
gridTabsElement
 	^ViewTabs new
		addView: #grid description: 'All App classes';
		addView: #gridSelected description: 'Selected App classes';
		yourself.! !

!WebDemoApp methodsFor: 'views'!
introductionElement
	| e |
	e := WebElement new.
	e addText: self observee introduction. "see WebDemo>>defaultIntroductionText for initial content"
	^e! !

!WebDemoApp methodsFor: 'views-jquery'!
jQueryAutocompleteExampleTo: e
	| field1 |
	e cell colspan: 2; addTextH4: 'Example: jQuery Autocomplete field with data from server'. e newRow.
	e cell valign: #top; addTextSmall: 'Type first chars of month names to select: '; addBreak.
	field1 := WebAutocomplete2Field 
		aspect: #field1 for: self observee choicesAspect: #monthsStarting: for: self.
	e cell add: field1.
	^e! !

!WebDemoApp methodsFor: 'views-jquery'!
jQueryEditableExampleTo: e
	e cell colspan: 2; addTextH4: 'Example: jQuery in-place editable field with data from server'. e newRow.
	e addText: 'Click text below to edit it'. e addBreak.
"	e addInPlaceEditableTextAspect: #editField for: self observee." "that's shorter way"
	e add: ((WebInPlaceEditable2Text aspect: #editField for: self observee)
		triggerElement: ((WebImage gif: #buttonEditGif) title: 'Edit this text') ). "image to enter edit"
	^e! !

!WebDemoApp methodsFor: 'views-javascript'!
jsShowAlertExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example 1: onClick event on some text'. e addBreak.
	e add: 
		((WebText text: 'click on me to show alert!!') onClick: 'alert(''This is an alert!!'')'). 
	^e.! !

!WebDemoApp methodsFor: 'views-javascript'!
jsShowHideToggleExample
	| e element |
	e := WebElement new.
	e addTextH4: 'Example 2: show/hide an element with a click'.
	element := WebElement new addText: 'This element is now shown'; style: '{background-color: #ccc }'.
	element hide.  "hide from the start"
	e 
		add: ((WebText text: 'show') onClickShow: element); addSpace;
		add: ((WebText text: 'hide') onClickHide: element); addSpace;
		add: ((WebText text: 'toggle') onClickToggle: element); addSpace;
	 	add: element.
	^e! !

!WebDemoApp methodsFor: 'views-javascript'!
jsShowWithMouseOverExample
	| e element |
	e := WebElement new.
	e addTextH4: 'Example 3: show/hide an element with mouse over'.
	element := WebElement new addText: 'This element is now shown'; style: '{background-color: #ccc }'.
	element hide.  "hide from the start"
	e 
		add: ((WebText text: 'mouse over to show') 
			onMouseOverShow: element; onMouseOutHide: element); addSpace;
	 	add: element.
	^e! !

!WebDemoApp methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
liveImage
	^liveImage! !

!WebDemoApp methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
liveImage: aWebLiveImage
	liveImage := aWebLiveImage! !

!WebDemoApp methodsFor: 'views-ajax'!
monthsStarting: aString
	"as choicesAspect for autocompletion demo"
	"WebDemoApp new monthsStarting: 'j' "
	| months |
	months := 
		#('januar' 'prosinec' 'sijec^anj' 'January' 
		   'februar', 'svec^an' 'veljac^a' 'February'
		   'marec', 'sus^ec' 'oz^ujak' 'Mart'
		   'april', 'mali traven' 'travanj' 'April'
		   'maj', 'veliki traven' 'svibanj' 'May'
		   'junij', 'roz^nik' 'lipanj' 'June'
		   'julij', 'mali srpen' 'srpanj' 'July'
		   'avgust', 'veliki srpen' 'kolovoz' 'August'
		   'september', 'kimavec' 'rujan' 'September'
		   'oktober', 'vinotok' 'listopad' 'October'
		   'november', 'listopad' 'studeni' 'November'
		   'december', 'gruden' 'prosinac' 'December').
	^months select: [:each | aString, '*' match: each]! !

!WebDemoApp methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selectedClasses
	selectedClasses isNil ifTrue: [self selectedClasses: OrderedCollection new].
	^selectedClasses! !

!WebDemoApp methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selectedClasses: anObject
	selectedClasses := anObject! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 20:12'!
setStartStamp
	"start timestamp of some action"
	^startStamp := SpTimestamp now! !

!WebDemoApp methodsFor: 'accessing' stamp: 'janko 8/1/2008 20:12'!
startStamp
	"start timestamp of some action"
	^startStamp! !

!WebDemoApp methodsFor: 'views-upload'!
uploadReportAndResetElement
	"report if anything then delete file and reset variables"
	| e elapsed fileSize |
	e := WebElement new.
	self filename isEmpty ifTrue: [^e].
	elapsed := SpTimestamp now asSeconds - self startStamp asSeconds.
	fileSize := (SpFilename named: self filename) fileSize.
	e addText: 'uploaded file: ', self filename, ' size: ', fileSize printDotString, ' bytes in ', 
		elapsed printDotString, ' seconds (', ((fileSize/(elapsed max: 1)) rounded) printDotString, 'bytes/s)'.
	(SpFilename named: self filename) delete.
	self filename: ''. self fileStream: nil.
	^e! !

!WebDemoApp methodsFor: 'views'!
viewAjax
	| e |
	e := WebElement new. e table width: 1. "100%"
	e cell colspan: 2; addTextH1: 'Simple AJAX examples'. e newRow. 
	e cell addText: 'See the code in method #viewAjax from WebDemoApp'. e newRow.
	e cell width: 0.6; valign: #top; add: self ajaxUpdateTimeExample. 
"	e newCell width: 0.4; valign: #top; add: self ajaxPeriodicUpdaterExample.  " e newRow. 
	self ajaxLiveAndDelayedFieldExampleTo: e. e newRow.
	self ajaxAutocompleteExampleTo: e. e newRow.
	e cell add: self ajaxInPlaceEditorExample. e newRow.
	e cell valign: #top; add: self ajaxPopupWindowExample.
	e newCell valign: #top; add: self ajaxPopupDialogExample. e newRow.
	e cell valign: #top; add: self ajaxSubmitExample. 
	e newCell valign: #top; add: self ajaxValidationExample. e newRow.
	self style pageFrameWith: e title: 'AJAX examples'! !

!WebDemoApp methodsFor: 'views'!
viewCalendar
	| e |
	e := WebElement new.
	e addTextH1: #en->'Date input with Javascript Calendar example'.	 e addBreak.
	e addDateInputFieldAspect: #date for: self observee. e addBreak.
	self style pageFrameWith: e title: 'Calendar example'! !

!WebDemoApp methodsFor: 'views'!
viewControlFlow
	| e |
	e := WebElement new.
	e cell addTextH1: 'Tree-like control flow examples'. e newRow. e newRow.
	e add: self flowConfirmDeleteExample.
	self style pageFrameWith: e title: 'Control flow examples'! !

!WebDemoApp methodsFor: 'views-grid'!
viewEditMembers
	| e |
	e := WebElement new.
	e cell addTextH1: 'WebGrid, tabs, live filtering, Ajax sorting, checkboxes...'. e newRow.
	e cell add: self classesEditElement.
	self style pageFrameWith: e title: 'Grid example'! !

!WebDemoApp methodsFor: 'views-upload'!
viewFileUpload
	| e field fname |
	e := WebElement new.
	e cell addTextH1: 'File upload example'. e newRow. e newRow.
	field := WebFileInputField 
		beforeStreamingDo: [:datum |  "datum is actually MIME part"
			fname := datum filename trimBlanks. 
			fname notEmpty ifTrue:
				[self fileStream: (SpFilename named: fname) writeStream. "will be closed in action method"
				self fileStream binary.
				datum writeStream: self fileStream.
				self setStartStamp ] ]    "for measuring upload time"
		filenameAspect: #filename 
		contentTypeAspect: #fileContentType 
		forObject: self.
	e cell add: field; addButtonText: 'Upload'. e newRow.
	e cell add: self uploadReportAndResetElement. "also deletes uploaded file!!"
	self style pageFrameWith: e title: 'File upload example'! !

!WebDemoApp methodsFor: 'views-grid'!
viewGrid
	| e |
	e := WebElement new.
	e cell addTextH1: 'WebGrid, tabs, live filtering, Ajax sorting, checkboxes...'. e newRow.
	e cell addText: 'See the code in method #viewGrid from WebDemoApp'. e newRow.
	e cell add: self gridTabsElement. e newRow.
	e cell add: self classesTableElement.
	self style pageFrameWith: e title: 'Grid example'! !

!WebDemoApp methodsFor: 'views-grid'!
viewGridSelected
	| e |
	e := WebElement new.
	e cell addTextH1: 'WebGrid, tabs, live filtering, Ajax sorting, checkboxes...'. e newRow.
	e cell add: self gridTabsElement. e newRow.
	e cell add: self classesSelectedElement.
	self style pageFrameWith: e title: 'Grid example'! !

!WebDemoApp methodsFor: 'views'!
viewImageGallery
	| e |
	e := WebElement new.
	e addText: 'This is a collection of so called <b>method images</b>, that is: images embeded in methods in class <b>WebStyle</b> or its subclasses.'.

	"filetype icons"
	e cell cell addGif: #pdfSmallGif. e cell newCell addText: 'pdfSmallGif'. e cell newRow.
	e cell cell addGif: #pdfMediumGif. e cell newCell addText: 'pdfMediumGif'. e cell newRow.
	e cell cell addGif: #pdfBigGif. e cell newCell addText: 'pdfBigGif'. e cell newRow.
	e cell cell addGif: #wordBigGif. e cell newCell addText: 'wordBigGif'. e cell newRow.
	e cell cell addGif: #excelBigGif. e cell newCell addText: 'excelBigGif'. e cell newRow.
	e cell cell addGif: #xmlBigGif. e cell newCell addText: 'xmlBigGif'. e cell newRow.
	e newCell.

	"filetype icons"
	e cell cell addGif: #arrowBigBlueGif. e cell newCell addText: 'arrowBigBlueGif'. e cell newRow.
	e cell cell addGif: #arrowBigRedGif. e cell newCell addText: 'arrowBigRedGif'. e cell newRow.
	e cell cell addGif: #arrowBigYellowGif. e cell newCell addText: 'arrowBigYellowGif'. e cell newRow.
	e cell cell addGif: #arrowDownBigRedGif. e cell newCell addText: 'arrowDownBigRedGif'. e cell newRow.
	e cell cell addGif: #arrowSmallBlackGif. e cell newCell addText: 'arrowSmallBlackGif'. e cell newRow.
	e cell cell addGif: #arrowTriangleRedGif. e cell newCell addText: 'arrowTriangleRedGif'. e cell newRow.
	e cell cell addGif: #arrowTriangleYellowGif. e cell newCell addText: 'arrowTriangleYellowGif'. e cell newRow.
	e cell cell addGif: #arrowCircledRedGif. e cell newCell addText: 'arrowCircledRedGif'. e cell newRow.
	e cell cell addGif: #arrowCircledGreyGif. e cell newCell addText: 'arrowCircledGreyGif'. e cell newRow.
	e newRow.

	e cell cell addPDFLinkTo: 'http://wiki.eranova.si/e-logis/DOWNLOAD/EAN-standards-roadmap.pdf'.
	e cell newCell addText: 'addPDFLinkTo: '.
	self style pageFrameWith: e title: 'Gallery of embedded images'! !

!WebDemoApp methodsFor: 'views-javascript'!
viewJavascript
	| e |
	e := WebElement new.
	e cell addTextH1: 'Simple Javascript examples'. e newRow. e newRow.
	e cell addText: 'See the code in method #viewJavascript from WebDemoApp'. e newRow.
	e cell add: self jsShowAlertExample. e newRow.
	e cell add: self jsShowHideToggleExample. e newRow.
	e cell add: self jsShowWithMouseOverExample. e newRow. 
	self style pageFrameWith: e title: 'Javascript examples'! !

!WebDemoApp methodsFor: 'views'!
viewJquery
	| e |
	e := WebElement new. e table width: 1. "100%"
	e cell colspan: 2; addTextH1: 'Simple jQuery examples'. e newRow. 
	self jQueryAutocompleteExampleTo: e. e newRow.
	self jQueryEditableExampleTo: e. e newRow.
	self style pageFrameWith: e title: 'AJAX examples'! !

!WebDemoApp methodsFor: 'views'!
viewLiveImage
	| e |
	self liveImage isNil ifTrue: [self liveImage: WebGraph new].  "subclass WebLiveImage"
	e := WebElement new.
	e addTextH1: 'Live image example'. e addBreak.
	e addImage: self liveImage.
	self style pageFrameWith: e title: 'Live image example'! !

!WebDemoApp methodsFor: 'views'!
viewMain
	| e |
	e := WebElement new.
	e addTextH1: 'Introduction'. e addBreak.
	e add: self introductionElement.
	self style pageFrameWith: e title: 'Aida/Web - Introduction'! !

!WebDemoApp methodsFor: 'views'!
viewRichEditor
	| e |
	e := WebElement new.
	e addTextH1: 'JavaScript HTML WYSIWYG Editor example'.	 e addBreak.
	e addRichEditorAspect: #content for: self observee size: 50@10. e addBreak.
	e addButtonText: 'Save'. e addBreak.
	e addTextH2: 'Result: '. e addBreak.
	e addText: self observee content.
	self style pageFrameWith: e title: 'Rich Editor example'! !

!WebDemoApp methodsFor: 'views'!
viewWebdav
	| e link |
	"link := '/', self webdavExampleFilename."
	link := self site uriPattern first currentUrl, '/', self webdavExampleFilename.
	self addWebDAVVBScript. "IE only!!"
	link := 'javascript:OpenDoc(''', link, ''')'. "for IE browser only!!"
	e := WebElement new. self title: 'WebDAV publishing example'.
	e cell addTextH2: self title. e newRow. e cell addNbSp. e newRow.
	e cell addText: '1. Upload  MS Word document: '.
	e cell add: (WebFileInputField aspect: #file filenameAspect: #filename 
		contentTypeAspect: #fileContentType forObject: self observee). 
	e cell addSpace; addButtonText: 'Upload'. e newRow.
	e cell addText: '2. Now open document from: '. e cell addLinkTo: link text: 'here'. e newRow.
	e cell addText: '3. Save document'. e newRow.
	e cell addText: '4. Repeat from 2 to see if changes got saved'. e newRow.
	self style pageFrameWith: e title: self title.! !

!WebDemoApp methodsFor: 'views' stamp: 'janko 10/28/2011 15:28'!
viewWidgets
	| e |
	e := WebElement new. e table width: 1. "100%"
	e cell colspan: 2; addTextH1: 'Widget examples'. e newRow. 
	e cell addText: 'See the code in method #viewWidgets from WebDemoApp'. e newRow.
	e cell width: 0.6; valign: #top; add: self widgetEmbeddedExample.  e newRow.
	e cell add: self widgetComposedExample.  e newRow.
	e cell add: self widgetPopupExample. 
	self style pageFrameWith: e title: 'Widget examples'! !

!WebDemoApp methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
webdavExampleFilename
	^'aida-webdav-example.doc'.! !

!WebDemoApp methodsFor: 'views-widgets' stamp: 'janko 10/28/2011 18:49'!
widgetComposedExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Widget composed of two widgets'.
	e add: WebDemoWidget2 new.
	^e! !

!WebDemoApp methodsFor: 'views-widgets' stamp: 'janko 10/26/2011 22:41'!
widgetEmbeddedExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Widget embeded on the page'.
	e add: WebDemoWidget new.
	^e! !

!WebDemoApp methodsFor: 'views-widgets'!
widgetPopupExample
	| e |
	e := WebElement new.
	e addTextH4: 'Example: Widget popup example'.
	e addTextSmall: 'Updated: ', Time now printString. e addBreak.
	(e addNilLinkText: 'Click to popup')
		onClickPopup: WebDemoWidget new.
	e addText: ' | '.
	(e addNilLinkText: 'Popup then update')
		onClickPopup: WebDemoWidget new thenUpdate: e.
	e addText: ' | '.
	(e addNilLinkText: 'Click to popup composed widget')
		onClickPopup: WebDemoWidget2 new.

	^e! !

!WebDemoApp methodsFor: 'accessing'!
year
	"used in #ajaxValidationExample"
	year isNil ifTrue: [^''].
	^year! !

!WebDemoApp methodsFor: 'accessing'!
year: aString
	"used in #ajaxValidationExample"
	year := aString! !

!WebDemoWidget methodsFor: 'views'!
build
	| field |
	self addTextSmall: 'Widget created: ', Time now printString. self addBreak.
	self addText: 'Password check'. 
	self cell valign: #top; addText: 'Username: '.
	field := (self newCell addInputFieldAspect: #username for: self)
		onChangePost;
		validIfTrue: [:value | self site securityManager existUserNamed: value];
		errorText: 'This username does not exist!!'.
	self cell addBreak; add: field errorElement. 
	self newRow. self cell addText: 'Password: '.
	self newCell addInputFieldAspect: #password for: self.
	self newRow.
	(self addButtonText: 'Check')
		onSubmitDo: [self checkAndSetResult. self update];
		onSubmitClose.  "just for popups, ignored elsewhere"
	(self addSpace; addNilLinkText: 'Refresh time')
		onClickDo: [self update].
	self addSpace; addTextBold: self result! !

!WebDemoWidget methodsFor: 'actions' stamp: 'janko 10/28/2011 12:01'!
checkAndSetResult
	"check userna and password"
	(self site securityManager existUserNamed: self username withPassword: self password)
		ifTrue: [self result: 'Correct!!']
		ifFalse: [self result: 'Wrong!!']! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 14:06'!
password
	^ password! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 14:06'!
password: aString
	password := aString! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 19:20'!
result
	result ifNil: [^''].
	^ result
! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 19:20'!
result: aString
	result := aString
! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 14:05'!
username
	^ username! !

!WebDemoWidget methodsFor: 'accessing' stamp: 'janko 10/27/2011 14:06'!
username: aString
	username := aString! !

!WebDemoWidget2 methodsFor: 'views'!
build
	"compose a widget from two subwidgets"
	self cell add: WebDemoWidget new.
	self newCell add: WebDemoWidget new.! !

!WebDialog methodsFor: 'printing' stamp: 'janko 11/1/2011 13:05'!
build
	self class: #dialog.
	self isConfirmation ifTrue: [self buildConfirmation].
	self isInfo ifTrue: [self buildInfo].! !

!WebDialog methodsFor: 'printing'!
buildConfirmation
	self addText: self text.
	self addBreak; addBreak.
	(self addButtonText: 'YES')
		class: #'dialog-button';
		onSubmitAnswer: true;
		onSubmitClose.
	self addSpace.
	(self addButtonText: 'NO')
		class: #'dialog-button';
		onSubmitAnswer: false;
		onSubmitClose.! !

!WebDialog methodsFor: 'printing'!
buildInfo
	self addText: self text.
	self addBreak; addBreak.
	(self addButtonText: 'Close')
		onSubmitClose.! !

!WebDialog methodsFor: 'testing'!
isConfirmation
	^self type = #confirmation! !

!WebDialog methodsFor: 'testing'!
isInfo
	^self type = #information! !

!WebDialog methodsFor: 'accessing'!
text
	"text to be written on a dialog, like a confirmation question"
	text isNil ifTrue: [^''].
	^text! !

!WebDialog methodsFor: 'accessing'!
text: aString
	"text to be written on a dialog, like a confirmation question"
	text := aString.! !

!WebDialog methodsFor: 'private'!
type
	"#confirmation etc."
	^type! !

!WebDialog methodsFor: 'private'!
type: aSymbol
	type := aSymbol! !

!WebDialog class methodsFor: 'instance creation'!
newConfirm
	"confirm something with YES or NO button"
	^super new
		type: #confirmation;
		build.! !

!WebDialog class methodsFor: 'instance creation'!
newInfo
	"just show some information and close button"
	^super new
		type: #information;
		build.! !

!WebElement methodsFor: 'events-effects&dragdrop'!
acceptDropsTo: aCollectionOfElements
	| script |
	"Scriptaculous specific"
	self ensureId.
	ScriptaculousLibrary ensureScriptaculous.
	script := '// <!![CDATA[ 
		Sortable.create("', self id asString,'"'.
	(self isKindOf: WebList) ifFalse: [
		self setDiv.
		script := script,  'tag: "div", '].
	script := script, ',{dropOnEmpty: true,constraint: false, containment: ['.
	aCollectionOfElements do: [:each |
		each ensureId.
		script := script, each id, ','].
	script := script,']});
	// ]]>'.
	self parent scriptAfter: script! !

!WebElement methodsFor: 'private-subelements'!
add: aWebElement
	"Include new element as one of the receiver's elements.  Answer aWebElement.
	If you nest a web page into another web page, then add only elements of it"
	self checkAndInitElements.  "if not composite element, then error"
	"if nested web pages then add elements without header"
	(aWebElement isKindOf: WebApplication) ifTrue: [^self halt].
	((aWebElement isKindOf: WebPage) and: [self isKindOf: WebPage])
		ifTrue: [^elements add: aWebElement elements].
	aWebElement parent: self.
	elements add: aWebElement.
	aWebElement postAddAction. "now the element is added to the parent, it can do some more actions"
	^aWebElement! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addAnchorName: aString
	^self add: (WebAnchor name: aString)! !

!WebElement methodsFor: 'adding form elements'!
addAspect: aSymbol for: anObject input: aBoolean size: aSizeNumberOrPoint
	"adds an auto converted text of aspect for that object. If imput argument is true, then add 
	an input field or text area, depending in size (eg. size: 5 or size: 5@5)"
	aBoolean
		ifFalse: 
			[^self addText: (WebFormElement autoConvertToString: (anObject perform: aSymbol))]
		ifTrue:
			[(aSizeNumberOrPoint isKindOf: Number) 	ifTrue: 
				[^self add: (WebInputField new
							size: aSizeNumberOrPoint;
							aspect: aSymbol for: anObject)].
			(aSizeNumberOrPoint isKindOf: Point) ifTrue: 
				[^self add: (WebTextArea new
							size: aSizeNumberOrPoint;
							aspect: aSymbol for: anObject)] 
			].! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addBreak
	^self add: (WebSeparator break).! !

!WebElement methodsFor: 'adding form buttons'!
addButtonGif: anImageSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage gif: anImageSymbol))! !

!WebElement methodsFor: 'adding form buttons'!
addButtonGif: anImageSymbol action: aSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage gif: anImageSymbol) action: aSymbol)! !

!WebElement methodsFor: 'adding form buttons'!
addButtonJpeg: anImageSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage jpeg: anImageSymbol))! !

!WebElement methodsFor: 'adding form buttons'!
addButtonJpeg: anImageSymbol action: aSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage jpeg: anImageSymbol) action: aSymbol)! !

!WebElement methodsFor: 'adding form buttons'!
addButtonPng: anImageSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage jpeg: anImageSymbol))! !

!WebElement methodsFor: 'adding form buttons'!
addButtonPng: anImageSymbol action: aSymbol
	"add a button as an image"
	^self add: (WebButton image: (WebImage png: anImageSymbol) action: aSymbol)! !

!WebElement methodsFor: 'adding form buttons'!
addButtonText: aString
	^self add: (WebButton text: aString)! !

!WebElement methodsFor: 'adding form buttons'!
addButtonText: aString action: aSymbol
	"for more than one buttons. Action method is a composed name from 'action', aView, Symbol.
	example: for view #main, action #addFolder is action method #actionMainAddFolder"
	^self add: (WebButton text: aString action: aSymbol)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addCheckboxAspect: aSymbol for: anObject
	"aspect method will be called and true/false will be set/clear on an object"
	^self add: (WebCheckBox aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding form elements'!
addCheckboxObject: anObject from: aCollection
	"if checked, this object will be put in collection. If object is initially in collection, 
	checkbox will be checked. Usefull for easy selection among many objects"
	^self add: (WebCheckBox newForObject: anObject from: aCollection)! !

!WebElement methodsFor: 'adding links'!
addCloseLinkText: aString
	"a link to close that window if popup (it also closes its execution context!!)"
	^(self addNilLinkText: aString)
		onClickClose! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addComment: aString
	^self add: (WebComment text: aString).! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addDateInputFieldAspect: aSymbol for: anObject
	"with popup calendar"
	^self add: (WebDateInputField new aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/4/07 22:07'!
addDelayedFieldAspect: aSymbol for: anObject
	"for Ajax instant posting, posting is done with a delay. Usefull for live-search fields"
	^self add: (WebDelayedField new aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/4/07 22:07'!
addDelayedFieldAspect: aSymbol for: anObject size: aNumber
	"for Ajax instant posting, posting is done with a delay. Usefull for live-search fields"
	^self add: ((WebDelayedField new aspect:  aSymbol for: anObject) size: aNumber)! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addErrorReport
	^self add: self app errorReport! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addGif: aSymbol
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	^self add: (WebImage gif: aSymbol)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addGif: aSymbol size: aPoint
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	^self add: (WebImage gif: aSymbol size: aPoint)! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addHelpLink
	"link to help page for current view and App. If not exist, then nothing, exept for 
	admin - link to creation of new help page"
	^self add: self helpLink! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addImage: anImageOrURL
	^self add: (WebImage image: anImageOrURL)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addImage: anImageOrURL imageMap: aWebImageMap
	^self add: 
		((WebImage image: anImageOrURL)
			imageMap: aWebImageMap)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addImage: anImageOrURL size: aPoint
	^self add: (WebImage image: anImageOrURL size: aPoint)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addImage: anImageOrURL size: aPoint align: aSymbol
	^self add: ((WebImage image: anImageOrURL size: aPoint) align: aSymbol)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addImage: anImageOrURL size: aPoint valign: aSymbol
	^self add: ((WebImage image: anImageOrURL size: aPoint) valign: aSymbol)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addInPlaceEditableTextAspect: aSymbol for: anObject
	^self add: (WebInPlaceEditableText aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addInPlaceEditableTextAspect: aSymbol for: anObject size: aNumberOrPoint
	^self add: (WebInPlaceEditableText aspect:  aSymbol for: anObject size: aNumberOrPoint)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addInPlaceEditableTextAspect: aSymbol for: anObject size: aNumberOrPoint allow: aBoolean
	^self add: 
		(WebInPlaceEditableText aspect:  aSymbol for: anObject size: aNumberOrPoint allow: aBoolean)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addInputFieldAspect: aSymbol for: anObject
	^self add: (WebInputField new aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addInputFieldAspect: aSymbol for: anObject size: aNumber
	^self add: ((WebInputField new aspect:  aSymbol for: anObject) size: aNumber)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addJpeg: aSymbol
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	^self add: (WebImage jpeg: aSymbol)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addJpeg: aSymbol size: aPoint
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	^self add: (WebImage jpeg: aSymbol size: aPoint)! !

!WebElement methodsFor: 'adding form elements'!
addLabelFor: anElementOrId text: aString
	"<label> tag  defines a label for related input element"
	^self add: 
		(WebLabel newFor: anElementOrId text: aString)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject gif: aGifSymbol title: aString
	^self add: ((WebLink linkTo: anObject) title: aString; addGif: aGifSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject gif: aGifSymbol title: aString size: aPoint
	^self add: ((WebLink linkTo: anObject) title: aString; addGif: aGifSymbol size: aPoint; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject gif: aGifSymbol title: aString view: aViewSymbol
	^self add: (((WebLink linkTo: anObject) title: aString; view: aViewSymbol) 
		addGif: aGifSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject gif: aGifSymbol title: aString view: aViewSymbol
	 parameter: aParmString value: aValueString

	^self add: (((WebLink linkTo: anObject) 
		title: aString; view: aViewSymbol;
		parameter: aParmString value: aValueString) 
			addGif: aGifSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject image: anImageOrURL
	^self add: ((WebLink linkTo: anObject) addImage: anImageOrURL; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject image: anImageOrURL parameter: aParmString value: aValueString
	^self add: (((WebLink linkTo: anObject)
		parameter: aParmString value: aValueString) addImage: anImageOrURL; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject image: anImageOrURL size: aPoint
	^self add: ((WebLink linkTo: anObject) addImage: anImageOrURL size: aPoint; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject image: anImageOrURL view: aViewSymbol
	^self add: (((WebLink linkTo: anObject) view: aViewSymbol) 
		addImage: anImageOrURL; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject jpeg: aSymbol title: aString
	^self add: ((WebLink linkTo: anObject) title: aString; addJpeg: aSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject jpeg: aSymbol title: aString view: aViewSymbol
	^self add: (((WebLink linkTo: anObject) title: aString; view: aViewSymbol) 
		addJpeg: aSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject png: aPngSymbol title: aString
	^self add: ((WebLink linkTo: anObject) title: aString; addPng: aPngSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject png: aPngSymbol title: aString view: aViewSymbol
	^self add: (((WebLink linkTo: anObject) title: aString; view: aViewSymbol) 
		addPng: aPngSymbol; yourself)! !

!WebElement methodsFor: 'adding links (image)' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject png: aPngSymbol title: aString view: aViewSymbol
	 parameter: aParmString value: aValueString

	^self add: (((WebLink linkTo: anObject) 
		title: aString; view: aViewSymbol;
		parameter: aParmString value: aValueString) 
			addPng: aPngSymbol; yourself)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString
	^self add: (WebLink text: aString  linkTo: anObject)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString attributes: anArray
	^self add: (WebLink text: aString  attributes: anArray linkTo: anObject)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString parameter: aParmString value: aValueString
	^self add: (WebLink text: aString  linkTo: anObject 
		parameter: aParmString value: aValueString)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString 
	parameter: a1ParmString value: a1ValueString
	parameter: a2ParmString value: a2ValueString

	^self add: (WebLink text: aString  linkTo: anObject 
		parameter: a1ParmString value: a1ValueString
		parameter: a2ParmString value: a2ValueString)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString view: aViewString
	^self add: ((WebLink text: aString  linkTo: anObject)
		view: aViewString; yourself)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString view: aViewString  parameter: aParmString value: aValueString
	^self add: ((WebLink text: aString  linkTo: anObject)
		view: aViewString;
		parameter: aParmString value: aValueString; yourself)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addLinkTo: anObject text: aString view: aViewString  
		parameter: aParm1String value: aValue1String 
		parameter: aParm2String value: aValue2String

	^self add: ((WebLink text: aString  linkTo: anObject)
		view: aViewString;
		parameter: aParm1String value: aValue1String;
		parameter: aParm2String value: aValue2String; yourself)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addLiveImage: aWebLiveImage
	^self add: 
		((WebImage image: aWebLiveImage)
			size: (aWebLiveImage width)@(aWebLiveImage height))! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addLiveImage: aWebLiveImage imageMap: aWebImageMap
	^self add: 
		((WebImage image: aWebLiveImage)
			size: (aWebLiveImage width)@(aWebLiveImage height);
			imageMap: aWebImageMap)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addMenuAspect: aSymbol collection: aCollection selected: aSelectedCollection
	"Multiple selection menu.. Aspect of every element in aColection will be shown in menu. 
	Selection will be put in aSelectedCollection. Here also an initial selection can be set"
	^self add: (WebMenu aspect: aSymbol collection: aCollection selected: aSelectedCollection)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addMenuAspect: aSymbol collection: aCollection selectedToAspect: aSymbol2 of: anObject
	"Single selection menu.. Aspect of every element in aColection will be shown in menu. 
	Single selection will be put in an seelcted aspect of object. Here also initial selection can be set"
	^self add: 
		(WebMenu aspect: aSymbol collection: aCollection selectedToAspect: aSymbol2 of: anObject)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addMenuCollection: aCollection selected: aSelectedCollection
	"Multiple selection menu..Every element (text!!) in aColection will be shown in menu. 
	Selection will be put 	in aSelectedCollection. Here also an initial selection can be set"
	^self add: (WebMenu collection: aCollection selected: aSelectedCollection)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addMenuCollection: aCollection selectedToAspect: aSymbol2 of: anObject
	"Single selection menu. Every element (text!!) in aColection will be shown in menu. 
	Single selection will be put in an seelcted aspect of object. Here also initial selection can be set"
	^self add: (WebMenu collection: aCollection selectedToAspect: aSymbol2 of: anObject)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addMethodImage: aWebMethodImage
	^self add: 
		(WebImage image: aWebMethodImage)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addMethodImage: aWebMethodImage size: aPoint
	^self add: 
		((WebImage image: aWebMethodImage) size: aPoint)! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addNbSp
	^self addText: '&nbsp;'.! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addNbSp: aNumber
	aNumber timesRepeat: [self addNbSp].! !

!WebElement methodsFor: 'adding links'!
addNilLinkText: aString
	"just to click on it and trigger some onClick event"
	^self addLinkTo: '#' text: aString! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addPDFLinkTo: anObject
	^self add: ((WebLink linkTo: anObject) addGif: #pdfBigGif)! !

!WebElement methodsFor: 'adding other elements'!
addPageBreak
	"for printing to printer, to break into a new page!!"
	self add: (WebElement newDiv class: #pageBreak).

"	^self addBreak
		class: #printOnly;
		style: 'page-break-after: always';
		yourself."! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addParagraph
	^self add: (WebSeparator paragraph).! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addPasswordFieldAspect: aSymbol for: anObject
	^self add: (WebInputField new type: #password; aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addPasswordFieldAspect: aSymbol for: anObject size: aNumber
	^self add: ((WebInputField new type: #password; aspect:  aSymbol for: anObject) size: aNumber)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addPng: aSymbol
	"this method will be called in your webStyle and this method 
	should return a png in byte array format"
	^self add: (WebImage png: aSymbol)! !

!WebElement methodsFor: 'adding images' stamp: ' 21/8/07 09:38'!
addPng: aSymbol size: aPoint
	"this method will be called in your webStyle and this method 
	should return a png in byte array format"
	^self add: (WebImage png: aSymbol size: aPoint)! !

!WebElement methodsFor: 'adding text' stamp: 'janko 7/30/2008 15:15'!
addRedStar
	"red * for mandatory fields in a form"
	^self addText: '<sup>*</sup>'! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addRichEditorAspect: aSymbol for: anObject
	"JavaScript HTML WYSIWYG editor instead of textarea"
	^self add: (WebRichEditor new aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding ajax components' stamp: ' 21/8/07 09:38'!
addRichEditorAspect: aSymbol for: anObject size: aPoint
	"JavaScript HTML WYSIWYG editor instead of textarea"
	^self add: ((WebRichEditor new aspect:  aSymbol for: anObject) size: aPoint)! !

!WebElement methodsFor: 'adding other elements'!
addRuler
	^self addRulerSize: 1! !

!WebElement methodsFor: 'adding other elements' stamp: ' 21/8/07 09:38'!
addRulerSize: aNumber
	^self add: (WebSeparator rulerSize: aNumber).! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addSecureLinkTo: anObject text: aString
	^self add: ((WebLink text: aString  linkTo: anObject) security: #grayed)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addSecureLinkTo: anObject 
	text: aString parameter: aParmString value: aValueString

	^self add: ((WebLink text: aString  linkTo: anObject 
		parameter: aParmString value: aValueString) security: #grayed)! !

!WebElement methodsFor: 'adding links' stamp: ' 21/8/07 09:38'!
addSecureLinkTo: anObject text: aString view: aViewString
	^self add: ((WebLink text: aString  linkTo: anObject 
		view: aViewString) security: #grayed)! !

!WebElement methodsFor: 'adding text' stamp: ' 21/8/07 09:38'!
addSpace
	"just a simple space, nothing more"
	^self addText: ' '! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:50'!
addText: aStringOrAssociation "multilang"
	aStringOrAssociation isNil ifTrue: [^nil].
	^self add: (WebText text: aStringOrAssociation)! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:50'!
addText: aStringOrAssociation attributes:  aSymbolArray
	aStringOrAssociation isNil ifTrue: [^nil].
	^self add: ((WebText text: aStringOrAssociation) textAttributes: aSymbolArray)! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:51'!
addText: aStringOrAssociation header: aNumber
	aStringOrAssociation isNil ifTrue: [^nil].
	^self add: ((WebText text: aStringOrAssociation) header: aNumber)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addTextAreaAspect: aSymbol for: anObject
	^self add: (WebTextArea new aspect:  aSymbol for: anObject)! !

!WebElement methodsFor: 'adding form elements' stamp: ' 21/4/07 22:07'!
addTextAreaAspect: aSymbol for: anObject size: aPoint
	^self add: ((WebTextArea new aspect:  aSymbol for: anObject) size: aPoint)! !

!WebElement methodsFor: 'adding text' stamp: ' 21/8/07 09:38'!
addTextAspect: aSymbol for: anObject
	"depening on portlet mode (#view or #edit) return only text or make an input field"
	^self app inEditMode
		ifTrue: [self addInputFieldAspect: aSymbol for: anObject]
		ifFalse: [self addText: (anObject perform: aSymbol)]! !

!WebElement methodsFor: 'adding text' stamp: ' 21/8/07 09:38'!
addTextAspect: aSymbol for: anObject attributes: aSymbolOrArray
	"depening on portlet mode (#view or #edit) return only text or make an input field"
	^self app inEditMode
		ifTrue: [self addInputFieldAspect: aSymbol for: anObject]
		ifFalse: [self addText: (anObject perform: aSymbol) attributes: aSymbolOrArray]! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:46'!
addTextBig: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #big! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:18'!
addTextBold: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #b! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextBoldAspect: aSymbol for: anObject
	"depening on portlet mode (#view or #edit) return only text or make an input field"
	^self addTextAspect: aSymbol for: anObject attributes: #b! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:47'!
addTextCode: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #code.! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextH1: aStringOrAssociation
	^self addText: aStringOrAssociation header: 1! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextH2: aStringOrAssociation
	^self addText: aStringOrAssociation header: 2! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextH3: aStringOrAssociation
	^self addText: aStringOrAssociation header: 3! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextH4: aStringOrAssociation
	^self addText: aStringOrAssociation header: 4! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:19'!
addTextH5: aStringOrAssociation
	^self addText: aStringOrAssociation header: 5! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 12:20'!
addTextItalic: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #i! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:48'!
addTextPreformated: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #pre.! !

!WebElement methodsFor: 'adding text' stamp: 'janko 9/30/2011 11:49'!
addTextSmall: aStringOrAssociation
	^self addText: aStringOrAssociation attributes: #small! !

!WebElement methodsFor: 'private-events'!
afterCloseUpdate
	"For later update, like after window close"
	^self otherAt: #afterCloseUpdate ifAbsent: [nil]! !

!WebElement methodsFor: 'private-events'!
afterCloseUpdate: anElement
	"For later update, like after window close"
	self otherAt: #afterCloseUpdate put: anElement! !

!WebElement methodsFor: 'testing' stamp: 'janko 4/25/2012 10:58'!
aidaIsRespondingStreamed
	^false! !

!WebElement methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession
	^self! !

!WebElement methodsFor: 'private-obsolete'!
ajaxCallUrl
	"relative url of an app observee object. This url is used for AJAX calls back to the server"
	| app linkTarget |
	app := self app.
	linkTarget := app isStandaloneApp 
		ifTrue: [app class] 
		ifFalse: [app observee isVersionedObject 
			ifTrue: [app observee currentVersion] ifFalse: [app observee] ].
	^AIDASite 
		convert: ( app site urlResolver halfUrlFor: linkTarget) 
		toCodepage: #utf8! !

!WebElement methodsFor: 'private-obsolete'!
ajaxCallUrlExtended
	"relative url of an app observee object. This url is used for AJAX calls back to the server"
	"also includes 'ajaxRequest' in query part, to distinguish ajax request from others"
	"Prototype specific"
	| viewParm versionParm |
	viewParm := 'view=', self context form view asString.
	versionParm := ''.
	(self app isStandaloneApp not and: [self app observee isVersionedObject]) ifTrue:
		[self app observee isCurrentVersion ifFalse: 
			[versionParm := 'version=', self app observee versionNumber, '&'] ].
	^self ajaxCallUrl, '?', viewParm, '&', versionParm, 'ajaxRequest'! !

!WebElement methodsFor: 'private-obsolete'!
ajaxCallUrlParametersFor: anElement context: aContext
	"ajax url must have 'ajaxRequest' parm in query part!! Deal also with versioned objects"
	"Prototype specific"
	| idSymbol viewParm versionParm contextParm |
	idSymbol := (anElement isNil
		ifTrue: [#nil] 
		ifFalse: [anElement ensureId. anElement id] ).
	viewParm := 'view=', aContext view asString.
	versionParm := ''.
	self app observee isVersionedObject ifTrue:
		[self app observee isCurrentVersion 
			ifFalse: [versionParm := 'version=', self app observee versionNumber, '&'] ].
	contextParm := WebContext contextIdName "aidaCtx", '=', aContext id printString.
	^viewParm, '&', 
		versionParm, 
		'ajaxRequest&ajaxGetElementId=', idSymbol asString,
		'&', contextParm! !

!WebElement methodsFor: 'attributes'!
align: aSymbol
	"element alignment #left #center #right"
	(#(left center right) includes: aSymbol) ifFalse: [self error: 'wrong align symbol'].
	self attributesAt: #align put: aSymbol asString! !

!WebElement methodsFor: 'private-subelements'!
allElements
	"get a collection of all subelements of elements down in a hierarcy of this element"
	| collection |
	collection := OrderedCollection new.
	self elements notNil ifTrue:
		[collection addAll: self elements.
		self elements do: [:each | collection addAll: each allElements] ].
	^collection

"
| el |
el := WebElement new.
el add: (WebLink image: nil  linkTo: nil).
el add: (WebText text: 'aaa').
el allElements.
"! !

!WebElement methodsFor: 'accessing'!
app
	"return anApplication on which we are composing a web page"
	| object |
	self creationObject notNil ifTrue:
		[self creationObject isWebApplication ifTrue: [^self creationObject].
		self creationObject isWebWidget ifTrue: [^self creationObject app].]. 
	self parent isNil ifTrue: 
		[object := self firstAppFromStack.
		^object isNil ifTrue: [nil] ifFalse: [object ] ].
	^parent app! !

!WebElement methodsFor: 'subelements'!
article
	"Return a current HTML5 subelement if it is of that tag. Create it if not yet exist"
	^self subelementTag: #article.! !

!WebElement methodsFor: 'accessing'!
asString
	"return only text part of the element and its subelements"
	| stream |
	elements isNil ifTrue: [^''].
	stream := WriteStream on: String new.
	self elements do: [:each | stream nextPutAll: each asString].
	^stream contents! !

!WebElement methodsFor: 'subelements'!
aside
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #aside.! !

!WebElement methodsFor: 'private-attributes' stamp: ' 21/4/07 22:07'!
attributes
	^attributes! !

!WebElement methodsFor: 'private-attributes' stamp: ' 21/4/07 22:07'!
attributesAt: aSymbol
	self attributes isNil ifTrue: [^nil].
	^self attributes at: aSymbol ifAbsent: [nil]! !

!WebElement methodsFor: 'private-attributes'!
attributesAt: aSymbol add: aString
	"some attributes can have more than one value (like javascript for events)"
	| coll |
	self attributes isNil ifTrue: [self initAttributes].
	coll := self attributes at: aSymbol ifAbsentPut: [OrderedCollection new].
	(coll isKindOf: OrderedCollection) ifFalse:
		[coll := (self attributes at: aSymbol put: 
			(OrderedCollection new add: (self attributes at: aSymbol); yourself)) ].
	coll add: aString! !

!WebElement methodsFor: 'private-attributes' stamp: ' 21/4/07 22:07'!
attributesAt: aSymbol put: aString
	self attributes isNil ifTrue: [self initAttributes].
	self attributes at: aSymbol put: aString! !

!WebElement methodsFor: 'private-attributes'!
basicId: aSymbol
	^self attributesAt: #id put: aSymbol asSymbol! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 3/31/2008 01:39'!
beDraggable
	self beDraggableAndRevert: false! !

!WebElement methodsFor: 'events-effects&dragdrop'!
beDraggableAndRevert: aBoolean
	"Scriptaculous specific"
	self ensureId.
	ScriptaculousLibrary ensureScriptaculous.
	self scriptAfter: '// <!![CDATA[ 
	new Draggable("', self id asString,'",{revert:', aBoolean asString, '});
	// ]]> 
	'! !

!WebElement methodsFor: 'events-effects&dragdrop'!
beSortable
	"Scriptaculous specific"
	| script |
	self ensureId.
	ScriptaculousLibrary ensureScriptaculous.
	script := '// <!![CDATA[ 
		Sortable.create("', self id asString,'",{'.
	(self isKindOf: WebList) ifFalse: [
		self setDiv.
		script := script,  'tag: "div", '].
	script := script, 'dropOnEmpty: true, constraint: false});
		// ]]>'.
	self scriptAfter: script! !

!WebElement methodsFor: 'private'!
canUpdate
	"only pure WebElements (not subclasses, ok, few exceptions) can Ajax/WebSocket update"
	^self class == WebElement! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
cell
	"return a current table cell"
	self initTableIfNessesary.
	^self otherAt: #currentCell! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
cell: aWebTableCell
	self initTableIfNessesary.
	self otherAt: #currentCell put: aWebTableCell.! !

!WebElement methodsFor: 'private-ajax'!
changeContextFrom: oldCtx to: newCtx
	"scan for all references to contexts and change them. Also in subelements"
	self changeContextInAttributesFrom: oldCtx to: newCtx.
	self elements do: [:each | each changeContextFrom: oldCtx to: newCtx]! !

!WebElement methodsFor: 'private-ajax'!
changeContextInAttribute: aString from: oldCtx to: newCtx
	| in out aidaCtx |
	aidaCtx := WebContext contextIdName.
	(('*', aidaCtx, '*') match: aString) ifFalse: [^nil].
	in := aString readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[out nextPutAll: (in upToAll: aidaCtx). 
		in atEnd not ifTrue: 
			[in next "=". in upTo: $&.               "& not always? "
			out nextPutAll: aidaCtx, '=', newCtx id printString, '&' ] ].   
	^out contents! !

!WebElement methodsFor: 'private-ajax'!
changeContextInAttributesFrom: oldCtx to: newCtx
	"scan for all references to contexts and change them"
	| attrToChange |
	self attributes isNil ifTrue: [^nil].
	attrToChange := #( #onClick #onDblClick #onKeyDown #onKeyPress #onKeyUp 
		#onMouseDown #onMouseMove #onMouseOut #onMouseOver #onMouseUp 
		#onSelect #onFocus #onChange #onSubmit #onReset).
	(self attributes associations select: [:each | attrToChange includes: each key]) do: [:assoc |
		assoc value class = OrderedCollection
			ifTrue: [self attributesAt: assoc key put: 
					(assoc value collect: [:each | self changeContextInAttribute: each from: oldCtx to: newCtx]) ]
			ifFalse: [self attributesAt: assoc key put: (self changeContextInAttribute: assoc value from: oldCtx to: newCtx)] ].! !

!WebElement methodsFor: 'private-ajax'!
check: anElementToUpdate on: aContext
	"check if element is updatable: it is first in a creation method. id is set and if in composition mode, set it.
	Raise error with good description to help better prepare Ajax updatable elements"
	anElementToUpdate isWebWidget ifTrue: [^anElementToUpdate registerId]. "to be sure"
	anElementToUpdate isStubElement ifTrue: [^true].
"	anElementToUpdate isFirstInMethod ifFalse:
		[^self error: 'Element to update must be first element in creation method!! Widget can be used instead']. "
	anElementToUpdate registerId. "if not already"! !

!WebElement methodsFor: 'testing'!
checkAndInitElements
	"lazy initialization od elements, when needed. Only for composite elements, else error"
	self isComposite 
		ifTrue:[(elements = nil) ifTrue: [elements := OrderedCollection new.       ]]
		ifFalse: [Smalltalk error: 'This is not a composite WebElement'].! !

!WebElement methodsFor: 'private-ajax' stamp: 'janko 1/2/2012 15:57'!
checkIfFirstInMethodOn: aContext
	"is this element created as first one in this method? Set the flag if true. Needed for checking if element is
	able to Ajax update or not"
	"this method doens't work correclty yet, it declares other elements in method as first too!!!!!!"
	| stContext request |
	stContext := thisContext . "find a context of a creation metod"
	[stContext receiver isWebApplication 
		or: [stContext receiver isWebWidget 
			or: [stContext receiver isWebStyle]] ]
		whileFalse: 
			[stContext := stContext sender. stContext isNil ifTrue: [^nil]].
	request := aContext event notNil
		ifTrue: [aContext event]
		ifFalse: [self firstRequestFromStack].
	(request isNil or: [request isAjaxRequest not])
		 ifTrue: [self otherAt: #firstInMethod put: true. ^self]. "Temporary!! in case of WebSocket message there is no request"
	(request creationStContexts includes: stContext) ifFalse:
		[self otherAt: #firstInMethod put: true.
		request creationStContexts add: stContext]! !

!WebElement methodsFor: 'attributes'!
class: aSymbolOrArray
	"one or more style classes of that element. Used for Cascaded Style Sheets"
	| clsText |
	(self class == WebElement and: [self hasTag not]) ifTrue: [self setDiv]. "ensure at least some tag"
	clsText := (aSymbolOrArray class = Array)
		ifTrue: [aSymbolOrArray
			inject: '' into: [:text :cls | cls = aSymbolOrArray first 
				ifTrue: [cls asString] ifFalse: [text, ' ', cls asString]] ] 
		ifFalse: [aSymbolOrArray asString].
	self attributesAt: #class put: clsText! !

!WebElement methodsFor: 'initialize-release'!
clear
	"remove all subelements including tables and event handlers"
	self elements do: [:each | each parent: nil].
	self initElements.
	self clearTableInfo.
	self initScripts.
"	self initEventHandlers. "! !

!WebElement methodsFor: 'initialize-release'!
clearAttributesExceptId
	self attributes keys do: [:name |
		name ~= #id ifTrue: [self attributes removeKey: name] ]! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
clearTableInfo
	"clear all table information"
	self initTable! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
colorValue: aColorSymbol
	"Hex number format is: #rrbbgg if not in that format, then it can be a color name as defined in 
	class variable Colors (class method initColorDictionary). If unknown color, then attribute is set to nil"
	| attribute |
	attribute := aColorSymbol asString asLowercase asSymbol.
	attribute := WebElement colorDictionary at: attribute ifAbsent:
		[attribute asString do: [:chr | 
			(chr isDigit or: [chr asInteger between: $a asInteger and: $f asInteger]) ifFalse: [^self] ] ].
	^'#', (attribute asString copyWithout: $# )

"WebElement new colorValue: #red"! !

!WebElement methodsFor: 'accessing'!
context
	"return a web execution context on which we are composing a web page"
	self creationContext notNil ifTrue: 	[^self creationContext].
	^self parent notNil 
		ifTrue: [self parent context] "web window/page knows the best"
		ifFalse: [	self firstContextFromStack] "slow!! "! !

!WebElement methodsFor: 'private'!
creationContext
	"a context which created this element. If element is not updatable, then nil"
	^self otherAt: #creationContext ifAbsent: nil! !

!WebElement methodsFor: 'private'!
creationContext: aWebContext
	"a context which created this updatable element"
	^self otherAt: #creationContext put: aWebContext! !

!WebElement methodsFor: 'private'!
creationMethod
	"a method which created this element, always from some App or Widget. 
	Valid only for aWebElement, never for its subclasses!!"
	^self otherAt: #creationMethod ifAbsent: [nil]! !

!WebElement methodsFor: 'private'!
creationMethod: aSymbol
	"a method which created this element, always from some App or Widget. 
	Valid only for aWebElement, never for its subclasses!!"
	self otherAt: #creationMethod put: aSymbol.! !

!WebElement methodsFor: 'private'!
creationObject
	"a Widget or App which created this element. 
	Valid only for aWebElement, never for its subclasses!!"
	^self otherAt: #creationObject ifAbsent: [nil]! !

!WebElement methodsFor: 'private'!
creationObject: aWidgetOrApp
	"a Widget or App which created this element. 
	Valid only for aWebElement, never for its subclasses!!"
	^self otherAt: #creationObject put: aWidgetOrApp! !

!WebElement methodsFor: 'subelements'!
div
	"Return a current subelement if it is div. Create it if not yet exist"
	"The same as for tables: newTable, newCell, cell, .."
	^self subelementTag: #div.! !

!WebElement methodsFor: 'private-events'!
elementToReplace
	"Usually we 'replace' itself, but  for popup windows we replace an empty stub element"
	^self otherAt: #ElementToReplace ifAbsent: [self]! !

!WebElement methodsFor: 'private-events'!
elementToReplace: aWebElement
	"For now used for popup windows, where we don't update itself but replace an empty stub element"
	^self otherAt: #ElementToReplace put: aWebElement! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
elements
	elements isNil ifTrue: [self initElements].
	^elements! !

!WebElement methodsFor: 'attributes'!
ensureId
	"ensure that this element has Id and register it in the context"
	self id isNil ifTrue: [self registerId].! !

!WebElement methodsFor: 'private-identation' stamp: ' 21/4/07 22:07'!
eol
	self setNewline.
	^String with: Character cr with: Character lf.! !

!WebElement methodsFor: 'private-events'!
eventHandlerFor: aSymbol
	^self eventHandlers 
		at: aSymbol 
		ifAbsentPut: [WebEventHandler newForEvent: aSymbol on: self]! !

!WebElement methodsFor: 'private-events'!
eventHandlers
	eventHandlers isNil ifTrue: [self initEventHandlers].
	^eventHandlers! !

!WebElement methodsFor: 'private-events'!
eventHandlers: aDictionary
	eventHandlers := aDictionary! !

!WebElement methodsFor: 'private-events'!
existScriptForEvent: anEventString
	| eventPattern |
	eventPattern := '*aidaEvent(''', anEventString, '*'.
	self attributes isNil ifTrue: [^false].
	self attributes associationsDo: [:attribute |
		attribute value class = OrderedCollection
			ifFalse: [(eventPattern match: attribute value) ifTrue: [^true]]
			ifTrue: [(attribute value contains: [:attr | eventPattern match: attr]) ifTrue: [^true] ] ].
	^false! !

!WebElement methodsFor: 'subelements'!
figCaption
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #figcaption.! !

!WebElement methodsFor: 'subelements'!
figure
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #figure.! !

!WebElement methodsFor: 'private-subelements'!
first
	"Answer the first element.  If the receiver is empty, provide an error 
	notification."

	self checkAndInitElements.  "if not composite element, then error"
	^elements first! !

!WebElement methodsFor: 'subelements'!
footer
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #footer.! !

!WebElement methodsFor: 'accessing' stamp: 'janko 10/27/2011 12:39'!
form
	"form to which belongs (or it will be) this element. it can be form on a page, popup window or widget"
	| form appOrWidget |
	self parent notNil ifTrue: 
		[form := self parent form. form notNil ifTrue: [^form] ].
	self creationObject notNil ifTrue: 
		[^self creationObject isWebWidget 
			ifTrue: [self creationObject form]	
			ifFalse: [self context form] ].
	appOrWidget := self firstWidgetOrAppFromStack.
	^(appOrWidget notNil and: [appOrWidget isWebWidget])
		ifTrue: [appOrWidget form]
		ifFalse: [self context form]! !

!WebElement methodsFor: 'subelements'!
hGroup
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #hgroup.! !

!WebElement methodsFor: 'private-events'!
handleEvent: aWebEvent
	| handler |
	handler := self eventHandlerFor: aWebEvent event.
	handler isNil ifTrue: [self error: 'handler for that event does not exist'].
	^handler handleEvent: aWebEvent! !

!WebElement methodsFor: 'tags'!
hasTag
	"is this element enclosed or not in any tag like <div> or <span>"
	^self tag notNil! !

!WebElement methodsFor: 'subelements'!
header
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #header.! !

!WebElement methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
helpLink
	^self app helpLink! !

!WebElement methodsFor: 'events'!
hide
	"hide me from web page"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').style.display=''none'' '! !

!WebElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
id
	^self attributesAt: #id! !

!WebElement methodsFor: 'attributes'!
id: aSymbol
	"set a unique id of that element on a page. Used in javascript, urls, style sheets"
	"duplicate ids not allowed, error is raised!!"
	| ctx |
	ctx := self context.
	self id notNil ifTrue: "unregister old id"
		[(ctx isRegistered: self) ifTrue: 
			[ctx removeId: self id]].
	self basicId: aSymbol asSymbol.
	(self class = WebElement and: [self hasTag not]) ifTrue: [self setDiv]. "element with id must be at least div"
	ctx registerIdFor: self.! !

!WebElement methodsFor: 'private-identation' stamp: ' 21/4/07 22:07'!
ident
	"ident this tag to its level"
	| depth eol|
	eol := ''.
	self shouldIdent & self isNewline not ifTrue: [eol := self eol]. 
	depth := (self identationLevel - self identDepth) max: 0.
	self identDepth: self identationLevel.
	^eol, (String new: depth withAll: Character tab )! !

!WebElement methodsFor: 'private-identation'!
identDepth
	"how idented we are"
	| page |
	page := self webPage.
	^page notNil ifTrue: [page identDepth] ifFalse: [0].! !

!WebElement methodsFor: 'private-identation'!
identDepth: aNumber
	"how idented we are"
	| page |
	page := self webPage.
	^page isNil ifTrue: [0] ifFalse: [page identDepth: aNumber]! !

!WebElement methodsFor: 'private-identation' stamp: ' 21/4/07 22:07'!
identMore
	"ident inside tag content to its level and one deepier"
	self isNewline ifFalse: [self eol]. 
	self identDepth: self identationLevel+1.
	^String new: self identationLevel+1 withAll: $ ! !

!WebElement methodsFor: 'private-identation'!
identationLevel	
	"How much we need to ident. Top element (web page) has level 0"
	| page |
	self isWebPage ifTrue: [^0].
	^self parent notNil
		ifTrue: 
			[page := self webPage. page isNil ifTrue: [^0].
			self shouldIdent 
				ifTrue: [page identationLevel + 1] 
				ifFalse: [page identationLevel]]
		ifFalse: [0]! !

!WebElement methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initAttributes
	attributes := Dictionary new.! !

!WebElement methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initElements
	elements := OrderedCollection new.! !

!WebElement methodsFor: 'initialize-release'!
initEventHandlers
	eventHandlers := Dictionary new.! !

!WebElement methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initOther
	other := Dictionary new.! !

!WebElement methodsFor: 'initialize-release'!
initScripts
	self other isNil ifTrue: [^nil].
	self other removeKey: #scriptBefore ifAbsent: [].
	self other removeKey: #scriptAfter ifAbsent: [].! !

!WebElement methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTable
	"just remove from other, later will be initalized lazily"
	self other isNil ifTrue: [^nil].
	self other 
		removeKey: #currentTable ifAbsent: [];
		removeKey: #currentRow ifAbsent: [];
		removeKey: #currentCell ifAbsent: [].! !

!WebElement methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTableIfNessesary
	"if not already exist"
	self otherAt: #currentTable ifAbsent: [self newTable]! !

!WebElement methodsFor: 'initialize-release'!
initialize
	"override in subclasses if needed"
	"always start with super initialize!! "! !

!WebElement methodsFor: 'testing'!
isActive
	"this element is still part of some active (displayed on the browser) App view"
	self parent isNil ifTrue: [^false].
	^self parent isActive! !

!WebElement methodsFor: 'testing'!
isComposite
	"true, if this element is allowed to be composed by subelements.
	This method should be overriden by subclasess if a new element is not a 	composite."
	^true! !

!WebElement methodsFor: 'tags'!
isDiv
	^self tag = #div! !

!WebElement methodsFor: 'private-ajax'!
isFirstInMethod
	"is this element created as first one in its creation method?"
	^(self otherAt: #firstInMethod ifAbsent: [false])! !

!WebElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isFormElement
	^false! !

!WebElement methodsFor: 'private-identation'!
isNewline
	"are we at start of new line?"
	| page |
	page := self webPage.
	^page notNil ifTrue: [page isNewline] ifFalse: [false]! !

!WebElement methodsFor: 'testing'!
isPureWidget
	"not a window or page, which are also widgets, as subclasses"
	^false! !

!WebElement methodsFor: 'tags'!
isSpan
	^self tag = #span! !

!WebElement methodsFor: 'testing' stamp: 'jm 8/26/2009 15:02'!
isStubElement
	^false! !

!WebElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebApplication
	^false! !

!WebElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebElement
	^true! !

!WebElement methodsFor: 'testing'!
isWebForm
	^false! !

!WebElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebPage
	^false! !

!WebElement methodsFor: 'testing'!
isWebWidget
	^false! !

!WebElement methodsFor: 'testing'!
isWebWindow
	^false! !

!WebElement methodsFor: 'private-events'!
isWindowPopupRequested
	"click on this element requested a popup"
	^self otherAt: #WindowPopupRequested ifAbsent: [false]! !

!WebElement methodsFor: 'testing'!
isWrapped
	"basic elements (inputs, buttons, ..) must be wrapped in <span> element to become updatable"
	^self otherAt: #Wrapped ifAbsent: [false]! !

!WebElement methodsFor: 'private-subelements'!
last
	"Answer the last element.  If the receiver is empty, create an error notification."

	self checkAndInitElements.  "if not composite element, then error"
	^elements last! !

!WebElement methodsFor: 'private-identation' stamp: ' 21/4/07 22:07'!
level	
	"How deep we are in element hierarchy. Top element has level 0"
	^self parent notNil
		ifTrue: [self parent level + 1]
		ifFalse: [0]! !

!WebElement methodsFor: 'subelements'!
list
	"Return a current list (<ul> by default) subelement if it is of that tag, error otherwise. Create it if not yet exist"
	self subelement ifNil: [^self newList].
	self subelement class == WebList ifFalse: [self error: 'Current subelement is not of desired tag'].
	^self subelement! !

!WebElement methodsFor: 'accessing'!
method
	"a method which created this element, always from some App or Widget. 
	Valid only for aWebElement, never for its subclasses!!"
	^self otherAt: #creationMethod ifAbsent: [nil]! !

!WebElement methodsFor: 'subelements'!
nav
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #nav.! !

!WebElement methodsFor: 'subelements'!
newArticle
	"New HTML5 <article> structural subelement"
	^self newSubelementTag: #article! !

!WebElement methodsFor: 'subelements'!
newAside
	"New HTML5 <aside> structural subelement"
	^self newSubelementTag: #aside! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
newCell
	"add a new cell to current table row. Return a new WebTableCell so that you can send messages
	to it immediatelly - color, width, addText etc."
	self cell: WebTableCell new.
	self row add: self cell.
	^self cell! !

!WebElement methodsFor: 'subelements'!
newDiv
	"add and immediatelly return a new DIV. I remembers it, later can be found with #div"
	"The same as for tables: newTable, newCell, cell, .."
	^self newSubelementTag: #div.! !

!WebElement methodsFor: 'subelements'!
newFigCaption
	"New HTML5 structural subelement"
	^self newSubelementTag: #figcaption! !

!WebElement methodsFor: 'subelements'!
newFigure
	"New HTML5 structural subelement"
	^self newSubelementTag: #figure! !

!WebElement methodsFor: 'subelements'!
newFooter
	"New HTML5 structural subelement"
	^self newSubelementTag: #footer! !

!WebElement methodsFor: 'subelements'!
newHGroup
	"New HTML5 structural subelement"
	^self newSubelementTag: #hgroup! !

!WebElement methodsFor: 'subelements'!
newHeader
	"New HTML5 structural subelement"
	^self newSubelementTag: #header! !

!WebElement methodsFor: 'subelements'!
newList
	"add and immediatelly return a new list (<ul> by default, send #ordered for <ol>). I remember it, later can be found 
	with #list"
	"The same as for tables: newTable, table, newCell, cell, .."
	self subelement: (WebList new unordered).
	self add: self subelement.
	^self subelement! !

!WebElement methodsFor: 'subelements'!
newNav
	"New HTML5 structural subelement"
	^self newSubelementTag: #nav! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
newRow
	"add a new row to current table. Return a new WebTableRow so that you can send messages
	to it immediatelly - color, width etc. Also reset current row and current cell to a new ones. "
	self row: WebTableRow new.
	self table add: self row.
	self newCell.
	^self row! !

!WebElement methodsFor: 'subelements'!
newSection
	"New HTML5 structural subelement"
	^self newSubelementTag: #section! !

!WebElement methodsFor: 'subelements'!
newSpan
	"add and immediatelly return a new span. I remembers it, later can be found with #span"
	"The same as for tables: newTable, newCell, cell, .."
	^self newSubelementTag: #span! !

!WebElement methodsFor: 'private-subelements'!
newSubelementTag: aTagSymbol
	"add and immediatelly return a new structural element with that tag. It remembers it, later can 
      be found with a method, like #div" "The same princliple as for tables: newTable, newCell, cell, .."
	self subelement: (WebElement new tag: aTagSymbol).
	self add: self subelement.
	^self subelement! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
newTable
	"add a new table to this element. Return a new WebTable so that you can send messages
	to it immediatelly - color, width etc. Also reset current row and current cell to a new ones. "
	self table: WebTable new.
	self add: self table.
	self newRow.
	^self table! !

!WebElement methodsFor: 'initialize-release'!
nilAttributes
	attributes := nil.! !

!WebElement methodsFor: 'tags'!
noDiv
	"remove automatically generated DIV"
	self isDiv ifTrue: [self tag: nil]! !

!WebElement methodsFor: 'attributes'!
noId
	"remove Id, usually because it is automatically generated"
	self attributes isNil ifTrue: [^nil].
	^self attributes removeKey: #id ifAbsent: [nil]! !

!WebElement methodsFor: 'private-obsolete'!
oldAddCloseLinkText: aString
	"OBSOLETE"
	"a link to close that window if popup (it also closes by Ajax its execution context!!)"
	| ctx link |
	ctx := self context.
	link := self addNilLinkText: aString.
	link
		onClick: 'closeLightboxLevel(', ctx level printString,')'; "from WebStyle>>js30Lightbox"
		onClickUpdate: nil from: nil with: nil optional: 'aidaCloseWindow'.  "to close context too"
	ctx afterCloseUpdate notNil ifTrue: "if set by WebElement>>onClickPopup:thenUpdate:"
		[link onClick: "update on parent context of the popup!! "
			(self scriptForUpdate: ctx afterCloseUpdate from: ctx afterCloseUpdate
				with: nil 	optional: nil
				context: (ctx isFirst not ifTrue: [ctx parent] ifFalse: [ctx]) )]! !

!WebElement methodsFor: 'events-actions' stamp: 'janko 11/7/2011 14:13'!
on: anEventSymbol closeAndDo: aBlock
	"first evaluate a block then close the current window (usually popup)"
	self on: anEventSymbol do: aBlock. 
	(self eventHandlerFor: anEventSymbol) 
		addCloseWindow.! !

!WebElement methodsFor: 'events-actions' stamp: 'janko 11/7/2011 14:11'!
on: anEventSymbol do: aBlock
	"execute that block when this event occurs, like #click, #mouseOver etc."
	self 
		on: anEventSymbol 
		script: (self scriptForEvent: anEventSymbol context: self context).
	(self eventHandlerFor: anEventSymbol) 
		addActionBlock: aBlock.! !

!WebElement methodsFor: 'events' stamp: 'janko 11/21/2011 13:18'!
on: anEventSymbol script: aJavascriptCode
	" on #click, #keyPress etc add a scecified script"
	"possible events (but you can add:
	#click #dblClick 
	#keyPress #keyDown #keyUp
	#mouseUp #mouseDown #mouseMove #mouseOut #mouseOver
	"
	self 
		attributesAt: ('on', anEventSymbol asString asUppercase) asSymbol 
		add: aJavascriptCode! !

!WebElement methodsFor: 'events' stamp: 'janko 11/7/2011 13:58'!
onClick: aJavascriptCode
	self on: #click script: aJavascriptCode! !

!WebElement methodsFor: 'events-ajax'!
onClickClose
	"close the window if popup"
	self onClick: 
		(self scriptForEvent: #click context: self context).
	(self eventHandlerFor: #click) 
		addCloseWindow! !

!WebElement methodsFor: 'events-actions' stamp: 'janko 11/7/2011 14:14'!
onClickCloseAndDo: aBlock
	"on click first evaluate a block then close the current window (usually popup)"
	self on: #click closeAndDo: aBlock! !

!WebElement methodsFor: 'events-actions' stamp: 'janko 11/7/2011 14:11'!
onClickDo: aBlock
	"execute that block when this link is clicked"
	self on: #click do: aBlock! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 3/31/2008 00:06'!
onClickDoEffect: aSymbol
	self onClickDoEffect: aSymbol for: self! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:04'!
onClickDoEffect: aSymbol duration: aNumber
	self onClickDoEffect: aSymbol for: self duration: aNumber! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:05'!
onClickDoEffect: aSymbol for: anElementOrId
	^self onClickDoEffect: aSymbol for: anElementOrId duration: 1.0! !

!WebElement methodsFor: 'events-effects&dragdrop'!
onClickDoEffect: aSymbol for: anElementOrId duration: aNumber
	"Scriptaculous specific"
	| idSymbol |
	ScriptaculousLibrary ensureScriptaculous.
	idSymbol := anElementOrId isSymbol 
		ifTrue: [anElementOrId] ifFalse: [anElementOrId ensureId. anElementOrId id].
	self onClick: 'new Effect.', aSymbol asString, '(''', idSymbol asString, ''', {duration:', aNumber asString,'})'.! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:03'!
onClickDoToggleEffect: aSymbol for: anElementOrId
	^self onClickDoToggleEffect: aSymbol for: anElementOrId duration: 1.0! !

!WebElement methodsFor: 'events-effects&dragdrop'!
onClickDoToggleEffect: aSymbol for: anElementOrId duration: aNumber
	"Scriptaculous specific"
	| idSymbol |
	ScriptaculousLibrary ensureScriptaculous.
	idSymbol := anElementOrId isSymbol 
		ifTrue: [anElementOrId] ifFalse: [anElementOrId ensureId. anElementOrId id].
	self onClick: 'new Effect.toggle(''', idSymbol asString, ''', ''', aSymbol asString, ''', {duration:', aNumber asString,'})'.! !

!WebElement methodsFor: 'events'!
onClickHide: anElement
	"hide specified element on mouse click on me"
	anElement ensureId.
	self onClick: 'document.getElementById(''', anElement id, ''').style.display=''none'' '.! !

!WebElement methodsFor: 'events-ajax'!
onClickPopup: anElement
	"popup a specified element (can be also a WebWidget) with fresh content from server (AJAX) in a 
       new window on the same page"
	self onClickPopup: anElement thenUpdate: nil! !

!WebElement methodsFor: 'events-ajax'!
onClickPopup: anElement thenUpdate: anElementToUpdate
	"popup a specified element (can be also a WebWidget) with fresh content from server (AJAX) in a 
       new window on the same page. Update anElementToUpdate after popup window is closed"
	| ctx |
	self ensureId. anElement ensureId.
	ctx := self context.
	anElementToUpdate notNil ifTrue: 
		[anElementToUpdate ensureId.
		anElement afterCloseUpdate: anElementToUpdate]. "will be copied ot popup window"
	(self existScriptForEvent: 'click') ifFalse: "only one script per event!!"
		[self onClick: (self scriptForEvent: #click context: self context)].
	(self eventHandlerFor: #click) 
		addPopup: anElement onStub: ctx window popupStub.
	self setWindowPopupRequested.! !

!WebElement methodsFor: 'events' stamp: 'np 10/20/2008 16:40'!
onClickReload
	"reload current page on click off that element"
	self onClick: 'window.location.reload()'.! !

!WebElement methodsFor: 'events'!
onClickShow: anElement
	"show specified element on mouse click on me"
	anElement ensureId.
	self onClick: 'document.getElementById(''', anElement id, ''').style.display=''block'' '.! !

!WebElement methodsFor: 'events' stamp: 'np 10/18/2008 13:34'!
onClickStore: aStringOrBoolean toAspect: aSymbol of: anObject
	"store the value via aspect (accessor/mutator method name) to specified object"
	^self notYetImplemented! !

!WebElement methodsFor: 'events'!
onClickToggle: anElement
	"toggle visibility of specified element on mouse click on me"
	anElement ensureId.
	self onClick: 'var e = document.getElementById(''', anElement id, '''); if (e.style.display == ''none'') a = ''block''; else a = ''none''; e.style.display = a; '! !

!WebElement methodsFor: 'events-ajax'!
onClickUpdate: anElement
	"update (and show if not yet) a specified element from server (Ajax)"
	self onClickUpdate: anElement with: nil! !

!WebElement methodsFor: 'private-obsolete'!
onClickUpdate: anElementToUpdate  from: anElementToRecreate with: anArgString optional: anArg2String
	"ElementToUpdate will be replaced with contents of the elementToRecreate after its creation method will be   
      called to recreate it. Except for popups both elements are actually the same"
	"First argument will be send as an argument of the method while second is optional"
	"Note that parameters will be sent at the time of building the element and not at the event!!" 
	"See WebApplication>>respondToAjaxRequest: and specially #ajaxUpdateOfOld:from: for more"
	anElementToUpdate notNil ifTrue: [anElementToUpdate ensureId]. 
	self onClick: 
		(self scriptForEvent: #click context: self context).
	(self eventHandlerFor: #click) addUpdate: anElementToUpdate with: anArgString.
"		(self scriptForUpdate: anElementToUpdate from: anElementToRecreate
			with: anArgString optional: anArg2String 
			context: self context)
"! !

!WebElement methodsFor: 'events-ajax'!
onClickUpdate: anElement with: anArgObject
	"Update a specified element from server (Ajax) with calling the element's creation method with an argument"
	"Creation method must be able to receive a parameter. For instance: #propertiesElementShow: aBoolean "
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	(self existScriptForEvent: 'click') ifFalse: "only one script per event!!"
		[self onClick: (self scriptForEvent: #click context: self context)].
	(self eventHandlerFor: #click) 
		addUpdate: anElement with: anArgObject.! !

!WebElement methodsFor: 'events' stamp: 'janko 11/7/2011 14:03'!
onKeyPress: aJavascriptCode
	self on: #keyPress script: aJavascriptCode! !

!WebElement methodsFor: 'events' stamp: 'janko 11/7/2011 14:04'!
onKeyUp: aJavascriptCode
	self on: #keyUp script: aJavascriptCode! !

!WebElement methodsFor: 'events' stamp: 'janko 11/7/2011 14:05'!
onMouseOut: aJavascriptCode
	self on: #mouseOut script: aJavascriptCode! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 3/31/2008 01:15'!
onMouseOutDoEffect: aSymbol
	self onMouseOutDoEffect: aSymbol for: self! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:06'!
onMouseOutDoEffect: aSymbol duration: aNumber
	self onMouseOutDoEffect: aSymbol for: self duration: aNumber! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:07'!
onMouseOutDoEffect: aSymbol for: anElementOrId
	^self onMouseOutDoEffect: aSymbol for: anElementOrId duration: 1.0! !

!WebElement methodsFor: 'events-effects&dragdrop'!
onMouseOutDoEffect: aSymbol for: anElementOrId duration: aNumber
	"Scriptaculous specific"
	| idSymbol |
	ScriptaculousLibrary ensureScriptaculous.
	idSymbol := anElementOrId isSymbol 
		ifTrue: [anElementOrId] ifFalse: [anElementOrId ensureId. anElementOrId id].
	self onMouseOut: 'new Effect.', aSymbol asString, '(''', idSymbol asString, ''', {duration: ', aNumber asString, '});'.! !

!WebElement methodsFor: 'events'!
onMouseOutHide: anElement
	"hide specified element when mouse get out of me"
	anElement ensureId.
	self onMouseOut: 'document.getElementById(''', anElement id, ''').style.display=''block'' '.! !

!WebElement methodsFor: 'events'!
onMouseOutShow: anElement
	"show specified element when mouse get out of me"
	anElement ensureId.
	self onMouseOut: 'document.getElementById(''', anElement id, ''').style.display=''block'' '.! !

!WebElement methodsFor: 'events-ajax'!
onMouseOutUpdate: anElement
	"update (and show if not yet) a specified element from server (Ajax)"
	self onMouseOutUpdate: anElement with: nil! !

!WebElement methodsFor: 'events-ajax'!
onMouseOutUpdate: anElement with: anArgObject
	"update a specified element from server wtih calling an element method with an argument"
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onMouseOut: 
		(self scriptForEvent: #mouseOut context: self context).
	(self eventHandlerFor: #mouseOut) 
		addUpdate: anElement with: anArgObject.! !

!WebElement methodsFor: 'events' stamp: 'janko 11/7/2011 14:06'!
onMouseOver: aJavascriptCode
	self on: #mouseOver script: aJavascriptCode! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 3/31/2008 01:15'!
onMouseOverDoEffect: aSymbol
	self onMouseOverDoEffect: aSymbol for: self! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:07'!
onMouseOverDoEffect: aSymbol duration: aNumber
	self onMouseOverDoEffect: aSymbol for: self duration: aNumber! !

!WebElement methodsFor: 'events-effects&dragdrop' stamp: 'np 9/24/2008 17:08'!
onMouseOverDoEffect: aSymbol for: anElementOrId
	^self onMouseOverDoEffect: aSymbol for: anElementOrId duration: 1.0! !

!WebElement methodsFor: 'events-effects&dragdrop'!
onMouseOverDoEffect: aSymbol for: anElementOrId duration: aNumber
	"Scriptaculous specific"
	| idSymbol |
	ScriptaculousLibrary ensureScriptaculous.
	idSymbol := anElementOrId isSymbol 
		ifTrue: [anElementOrId] ifFalse: [anElementOrId ensureId. anElementOrId id].
	self onMouseOver: 'new Effect.', aSymbol asString, '(''', idSymbol asString, ''', {duration: ', aNumber asString,'});'.! !

!WebElement methodsFor: 'events'!
onMouseOverHide: anElement
	"hide specified element when mouse come over me"
	anElement ensureId.
	self onMouseOver: 'document.getElementById(''', anElement id, ''').style.display=''none'' '.! !

!WebElement methodsFor: 'events'!
onMouseOverShow: anElement
	"show specified element when mouse come over me"
	anElement ensureId.
	self onMouseOver: 'document.getElementById(''', anElement id, ''').style.display=''block'' '.! !

!WebElement methodsFor: 'private-obsolete'!
onMouseOverSyncUpdate: anElement
	"update (and show if not yet) a specified element from server (AJAX)"
	"wait until AJAX response returns (synchronous update)"
	self onMouseOverSyncUpdate: anElement with: nil! !

!WebElement methodsFor: 'private-obsolete'!
onMouseOverSyncUpdate: anElement with: anArgString
	"update a specified element from server (AJAX) wtih calling an element method with an argument"
	"wait until AJAX response returns (synchronous update)"
	"Prototype specific"
	| id url parms  |
	anElement ensureId. id := anElement id.
	url := self ajaxCallUrl. 
	parms:= self ajaxCallUrlParametersFor: anElement context: self context.
	anArgString notNil ifTrue: [parms := parms, '&parm=', anArgString].
	self onMouseOver: 'new Ajax.Updater(''', id asString, ''', ''', url, 
		''', {method: ''post'', postBody: ''', parms, ''', evalScripts: true, asynchronous: false})'! !

!WebElement methodsFor: 'events-ajax'!
onMouseOverUpdate: anElement
	"update (and show if not yet) a specified element from server (Ajax)"
	self onMouseOverUpdate: anElement with: nil! !

!WebElement methodsFor: 'events-ajax'!
onMouseOverUpdate: anElement with: anArgObject
	"update a specified element from server wtih calling an element method with an argument"
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onMouseOver: 
		(self scriptForEvent: #mouseOver context: self context).
	(self eventHandlerFor: #mouseOver) 
		addUpdate: anElement with: anArgObject.! !

!WebElement methodsFor: 'private-other' stamp: ' 21/4/07 22:07'!
other
	^other! !

!WebElement methodsFor: 'private-other' stamp: ' 21/4/07 22:07'!
otherAt: aSymbol
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebElement methodsFor: 'private-other' stamp: ' 21/4/07 22:07'!
otherAt: aSymbol ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebElement methodsFor: 'private-other' stamp: ' 21/4/07 22:07'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebElement methodsFor: 'private-other' stamp: ' 21/4/07 22:07'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebElement methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
parent
	^parent! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: aWebElement
	parent := aWebElement! !

!WebElement methodsFor: 'private' stamp: 'janko 10/27/2011 11:42'!
postAddAction
	"additional actions after this element was added to another (parent)"
	"override in your elements if needed"! !

!WebElement methodsFor: 'private-streaming'!
prepareAttributesToStreamOn: aSession
	"override if you like to change or otherwise prepare attribute values"
	"don't forget to call first super prepareAttributesToPrintOn: !! "
	#('title') do: [:attrName || attrValue |
		attrValue := self attributesAt: attrName.
		attrValue notNil ifTrue:
			[attrValue aidaIsAssociation 
				ifTrue: "multilang value of this attribute"
					[self attributesAt: attrName put: (self textFromMultilang: attrValue on: aSession)]
				ifFalse: [		
					(attrValue includes: $^ ) "slovene csz are converted if char ^ is after such a char"
						ifTrue: [self attributesAt: attrName put: attrValue convertToSloveneChars] ]
			]
		]! !

!WebElement methodsFor: 'private'!
prepareForTranslation
	"if element has multilingual text, make it in-line editable for translation"
	"Sublcasses should implement editing accordingly"
	self elements do: [:each | each prepareForTranslation]! !

!WebElement methodsFor: 'private-streaming'!
prepareToHtmlStreamingOn: aSession
	"all preparations just before html rendering"
	self prepareAttributesToStreamOn: aSession.  "some pre-html preparation of values"! !

!WebElement methodsFor: 'private-obsolete'!
printHTMLPageOn: aStream for: aRequest on: aSession
	"OBSOLETE!!"
	^self streamHtmlTo: aStream for: aRequest on: aSession! !

!WebElement methodsFor: 'private'!
printString
	^'a', self class printString, 
		(self tag notNil ifTrue: [' ', self tag asString] ifFalse: ['']),
		(self id notNil ifTrue: [' id: ', self id] ifFalse: ['']),
		((self attributesAt: #class)  notNil ifTrue: [' class: ', (self attributesAt: #class) ] ifFalse: [''])! !

!WebElement methodsFor: 'private-subelements'!
registerFormElements
	"find form elements down in element hierachy and register them in an apropriate 
       form (from page, popup window or widget)"
	self registerFormElementsTo: self form! !

!WebElement methodsFor: 'private-subelements'!
registerFormElementsTo: aWebForm
	"find form elements down in element hierachy and register them in an apropriate 
       form (from page, popup window or widget). Also setup the form hierarchy"
	| form |
	form := (self isWebForm and: [self ~= aWebForm])  "another form found, change to it as a registration target"
		ifTrue: [aWebForm addSubform: self. self] 
		ifFalse: [aWebForm].
	self isFormElement ifTrue: [form registerFormElement: self].
	self elements do: [:subelement |
		subelement registerFormElementsTo: form]! !

!WebElement methodsFor: 'attributes'!
registerId
	"put into current context ids dictionary for faster search from AJAX requests"
	| ctx |
	self id notNil ifTrue: [^nil]. "is probably already registered!! "
	ctx := self context.
	ctx notNil ifTrue: 	[ctx registerIdFor: self]! !

!WebElement methodsFor: 'private-subelements'!
replace: aSubelement with: anElement
	| index |
	index := self elements indexOf: aSubelement.
	self elements at: index put: anElement.
	anElement parent: self.
	aSubelement parent: nil.! !

!WebElement methodsFor: 'private-events'!
resetShallQueue
	"in #update, shall new element be queued for sendng to browser immediatelly or later. For popups 
	it is queued after element is wrapped in popup window, see WebApplication>>handleEvent: "
	^self otherAt: #ShallQueue put: false! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
row
	"return a current table row"
	self initTableIfNessesary.
	^self otherAt: #currentRow! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
row: aWebTableRow
	self initTableIfNessesary.
	self otherAt: #currentRow put: aWebTableRow.! !

!WebElement methodsFor: 'scripts' stamp: ' 21/4/07 22:07'!
script: aString
	"add this JavaScript  to scripts executed after this element"
	self scriptAfter: aString! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
scriptAfter
	^self otherAt: #scriptAfter ifAbsent: [nil]! !

!WebElement methodsFor: 'scripts' stamp: ' 21/4/07 22:07'!
scriptAfter: aString
	"add this JavaScript  to scripts executed after this element"
	(self otherAt: #scriptAfter ifAbsentPut: [WebScript new]) script: aString! !

!WebElement methodsFor: 'scripts' stamp: 'mivsek 1/10/2008 22:19'!
scriptAfterExternal: anUrlOrObject
	"add this externalJavaScript  to scripts executed after this element"
	| url |
	url := anUrlOrObject isString
		ifTrue: [anUrlOrObject]
		ifFalse: [self site urlResolver halfUrlFor: anUrlOrObject].
	(self otherAt: #scriptAfter ifAbsentPut: [WebScript new]) source: url! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
scriptBefore
	^self otherAt: #scriptBefore ifAbsent: [nil]! !

!WebElement methodsFor: 'scripts' stamp: ' 21/4/07 22:07'!
scriptBefore: aString
	"add this JavaScript  to scripts executed before this element"
	(self otherAt: #scriptBefore ifAbsentPut: [WebScript new]) script: aString! !

!WebElement methodsFor: 'scripts' stamp: 'mivsek 1/10/2008 22:20'!
scriptBeforeExternal: anUrlOrObject
	"add this external JavaScript  to scripts executed before this element"
	| url |
	url := anUrlOrObject isString
		ifTrue: [anUrlOrObject]
		ifFalse: [self site urlResolver halfUrlFor: anUrlOrObject].
	(self otherAt: #scriptBefore ifAbsentPut: [WebScript new]) source: url! !

!WebElement methodsFor: 'private-events'!
scriptForEvent: anEventSymbol context: aWebContext
	^'aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''')'! !

!WebElement methodsFor: 'private-obsolete'!
scriptForUpdate: anElementToUpdate from: anElementToRecreate with: anArgString optional: anArg2String  context: aContext
	"OBSOLETE"
	"ElementToUpdate will be replaced with contents of the elementToRecreate after its creation method will be   
      called to recreate it. Except for popups both elements are actually the same"
	"First argument will be send as an argument of the method while second is optional"
	"If both elements are nil, only arguments will be sent, usefull for sending commands only, like close window"
	"Note that parameters will be sent at the time of building the element and not at the event!!" 
	"See WebApplication>>respondToAjaxRequest: and specially #ajaxUpdate:from: for more"
	"Prototype specific"
	| idToUpdate url parms  |
	idToUpdate := anElementToUpdate notNil 
		ifTrue: [self check: anElementToUpdate on: aContext. anElementToUpdate id]
		ifFalse: [#nothingToUpdate].  "just send arguments, if any"
	url := self ajaxCallUrl. 
	parms:= self ajaxCallUrlParametersFor: anElementToUpdate context: aContext.
	anArgString notNil ifTrue: [parms := parms, '&parm=', anArgString].
	anArg2String notNil ifTrue: [parms := parms, '&parm2=', anArg2String].
	anElementToRecreate notNil ifTrue:
		[self check: anElementToRecreate on: aContext.
		parms := parms, '&ajaxElementToRecreateId=', anElementToRecreate id asString].
	^'new Ajax.Updater(''', idToUpdate asString, ''', ''', url, 
		''', {method: ''post'', postBody: ''', parms, ''', evalScripts: true, asynchronous: false})'! !

!WebElement methodsFor: 'subelements'!
section
	"Return a current HTML5 subelement if it is of that tag, error otherwise. Create it if not yet exist"
	^self subelementTag: #section.! !

!WebElement methodsFor: 'accessing'!
session
	"return a Session for which we are composing a web page"
	^self app session! !

!WebElement methodsFor: 'tags'!
setArticle
	"HTML5 <article> structural element"
	self tag: #article! !

!WebElement methodsFor: 'tags'!
setAside
	"HTML5 <aside> structural element"
	self tag: #aside! !

!WebElement methodsFor: 'private'!
setCreationMethodAndObject
	"find a name of a method and the object (Widget, App or Style) which created me"
	| stContext |
	stContext := thisContext.
	[stContext notNil] whileTrue: [
		((stContext receiver isKindOf: WebApplication) 
			or: [(stContext receiver isKindOf: WebWidget) 
				or: [stContext receiver isKindOf: WebStyle]]) ifTrue: 
					[self creationObject: stContext receiver. "who shall receive that method when needed"
					^self creationMethod: stContext selector].
		stContext := stContext sender].! !

!WebElement methodsFor: 'tags'!
setDiv
	self tag: #div! !

!WebElement methodsFor: 'tags'!
setFigCaption
	"HTML5 <figcaption> figure caption structural element"
	self tag: #figcaption! !

!WebElement methodsFor: 'tags'!
setFigure
	"HTML5 <figure> structural element"
	self tag: #figure! !

!WebElement methodsFor: 'tags'!
setFooter
	"HTML5 <footer> structural element"
	self tag: #footer! !

!WebElement methodsFor: 'tags'!
setHGroup
	"HTML5 <hgroup> header group structural element"
	self tag: #hgroup! !

!WebElement methodsFor: 'tags'!
setHeader
	"HTML5 <header> structural element"
	self tag: #header! !

!WebElement methodsFor: 'tags'!
setNav
	"HTML5 <nav> structural element"
	self tag: #nav! !

!WebElement methodsFor: 'private-identation'!
setNewline
	"we are no longer at start of line"
	| page |
	page := self webPage.
	page notNil ifTrue: [page setNewline].! !

!WebElement methodsFor: 'tags'!
setSection
	"HTML5 <section> structural element"
	self tag: #section! !

!WebElement methodsFor: 'tags'!
setSpan
	self tag: #span! !

!WebElement methodsFor: 'private-events'!
setWindowPopupRequested
	"click on this element requests a popup"
	^self otherAt: #WindowPopupRequested put: true! !

!WebElement methodsFor: 'private-events'!
shallQueue
	"in #update, shall new element be queued for sending to browser immediatelly or later. For popups 
	it is queued after element is wrapped in popup window, see WebApplication>>handleEvent: "
	^self otherAt: #ShallQueue ifAbsent: [true]! !

!WebElement methodsFor: 'private-identation'!
shouldIdent
	"true, if this element should be idented in html page"
	^self hasTag! !

!WebElement methodsFor: 'events'!
show
	"show me (if not already) on web page"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').style.display=''block'' ' "is this good enough?"! !

!WebElement methodsFor: 'accessing'!
site
	"return a Site on which we are composing a web page"
	^self app site! !

!WebElement methodsFor: 'subelements'!
span
	"Return a current subelement if it is span. Create it if not yet exist"
	"The same as for tables: newTable, newCell, cell, .."
	^self subelementTag: #span! !

!WebElement methodsFor: 'private-streaming'!
streamAttribute: aNameSymbol value: aValue to: aStream for: aSession
	"if value is true/false, then if true, just print an atribute name, otherwise ommit both"
	"multivalue attributes are supposed to be javascript only!! "
	| multiValue |
	aStream nextPut:  $ . 
	((aValue ~= false) | (aValue == true)) ifTrue: [aStream nextPutAll: aNameSymbol asString].
	(aValue isNil or: [aValue isKindOf: Boolean]) ifTrue: [^self]. "just name"
	multiValue := aValue class == OrderedCollection.    aStream nextPutAll: '="'.
	multiValue not ifTrue: [aStream 
		nextPutAll: (AIDASite convertToWeb: aValue asString on: aSession); "UTF-8 encoding"
		nextPutAll: '"'. ^self].
	aValue do: [:value | 
		aStream nextPutAll:  (AIDASite convertToWeb: value asString on: aSession). "UTF-8"
		aStream nextPutAll: '; ']. "javascript sentence separator"
	aStream nextPutAll: '"'.! !

!WebElement methodsFor: 'private-streaming'!
streamAttributesTo: aStream for: aSession
	"start and end of tag is not my responsibility!!"
	self attributes isNil ifTrue: [^self].
	self attributes keysAndValuesDo: [:name :value |
		self streamAttribute: name value: value to: aStream for: aSession]! !

!WebElement methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	"WebElement with some attributes is enclosed inside <div> tag, for tricks with CSS"
	self prepareToHtmlStreamingOn: aSession.
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	self hasTag ifTrue: 
		[aStream nextPutAll: self ident, '<', self tag asString. self streamAttributesTo: aStream for: aSession. 
		aStream nextPutAll: '>', self eol].
	elements notNil ifTrue: [elements do: [:element | 
		element notNil ifTrue: [element streamHtmlTo: aStream for: aRequest on: aSession] ] ].
	self hasTag ifTrue: [aStream nextPutAll: self ident, '</', self tag asString, '>', self eol].
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebElement methodsFor: 'tags'!
structuralTags
	^#(
		div
		span
		article
		aside
		figure
		figcaption
		header
		footer
		hgroup
		nav
		section)! !

!WebElement methodsFor: 'accessing'!
style
	"return a WebStyle on which we are composing a web page"
	^self site style! !

!WebElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
style: aString
	"redefine a style of that element with CSS syntax, example:
	style: '{color: blue; font-style: italic}'   "
	self attributesAt: #style put: aString! !

!WebElement methodsFor: 'private-subelements'!
subelement
	"current subelement we are composing on. Similar as for tables"
	^self otherAt: #Subelement ifAbsent: [nil]! !

!WebElement methodsFor: 'private-subelements'!
subelement: aWebElement
	"current subelement we are composing on. Similar as for tables"
	^self otherAt: #Subelement put: aWebElement! !

!WebElement methodsFor: 'private-subelements'!
subelementTag: aTagSymbol
	"Return a current subelement if it is of that tag. Create it if not yet exist"
	"The same principle as for tables: newTable, newCell, cell, .."
	self subelement ifNil: [^self newSubelementTag: aTagSymbol].
	self subelement tag ~= aTagSymbol ifTrue: [self error: 'Current subelement is not of desired tag'].
	^self subelement! !

!WebElement methodsFor: 'tables' stamp: ' 21/4/07 22:07'!
table
	"return a current web table. If not yet exist, create it"
	self initTableIfNessesary.
	^self otherAt: #currentTable! !

!WebElement methodsFor: 'private' stamp: ' 21/4/07 22:07'!
table: aWebTable
	self otherAt: #currentTable put: aWebTable.! !

!WebElement methodsFor: 'tags'!
tag
	" #div, #span, ..."
	^self otherAt: #tag ifAbsent: [nil]! !

!WebElement methodsFor: 'private'!
tag: aSymbol
	" #div, #span, ..."
	self otherAt: #tag put: aSymbol! !

!WebElement methodsFor: 'private-streaming'!
tagClosing
	" /> for XHTML, > otherwise"
	| page |
	page := self webPage.
	page isNil ifTrue: [page := self app context page]. "as a last resort"
	^(page notNil and: [page isXHTML])
		ifTrue: ['/>']
		ifFalse: ['>']! !

!WebElement methodsFor: 'private-translation' stamp: 'janko 9/19/2011 14:21'!
textFromMultilang: aStringOrAssociation on: aSession
	"translate the multilang text in form #fr->'Bonjour' "
	^aSession site translator 
		translate: aStringOrAssociation
		to: aSession languageBasic
		for: self
		on: aSession! !

!WebElement methodsFor: 'attributes' stamp: 'janko 9/20/2011 09:02'!
title: aStringOrAssociation
	"title of an element. it will be shown when mouse pause over it"
	self attributesAt: #title put: aStringOrAssociation! !

!WebElement methodsFor: 'events'!
toogle
	"toogle element visibility on  web page"
	self ensureId.
	self scriptAfter: 
'var e = document.getElementById(''', self id, ''');
if (e.style.display == ''none'') a = ''block''; else a = ''none'';
e.style.display = a; ' 
"	self addText: '<script>Element.toggle(''', self id, ''')</script>'"! !

!WebElement methodsFor: 'events-ajax'!
update
	"recreate that element on app or widget and send to the browser to update itself there too"
	| new ctx |
	self canUpdate ifFalse: [self error: 'Only WebElements (not subclasses) can be updated'].
	self creationMethod isNil ifTrue: [^self]. "in form elements it will return new value!!"
	self id isNil ifTrue: [self error: 'web element to update must have id in advance, use #ensureId !!'].
	('view*' match: self creationMethod asString) ifTrue: 
		[^self error: 'Cannot update views!! View in question: #', self creationMethod].
	ctx := self context.
	ctx announceReplacementWith: self.
	new := (self creationMethod asString last = $: )
		ifTrue: [self creationObject perform: self creationMethod with: self updateArgument ]  "object method: parm"
		ifFalse: [self updateArgument notNil  "try to call the method with that argument anyway"
			ifTrue: [self creationObject perform: (self creationMethod, ':') asSymbol with: self updateArgument]
			ifFalse: [self creationObject perform: self creationMethod] ].
	ctx cancelReplacement. "if not already"
	((new isKindOf: WebElement) and: [new canUpdate]) ifFalse: [self error: 'New is not a web element!!'].
	new id isNil ifTrue: [self error: 'does creation method return created object?'].
	new registerFormElements.
	new prepareToHtmlStreamingOn: self session. "to prepare again"
	new afterCloseUpdate: self afterCloseUpdate. "if any, to signal for later update, after window close for instance"
	new eventHandlers: self eventHandlers.  "preserve handlers through updates"
	self shallQueue ifTrue:  "for popups queuing happens later after wrap in popup window"
		[self session queueUpdateElement: new]. "send immediatelly via WebSocket if open, or in Ajax response"
	^new! !

!WebElement methodsFor: 'private-events'!
updateArgument
	"an argument for an element update call, if any"
	^self otherAt: #UpdateArgument ifAbsent: [nil]! !

!WebElement methodsFor: 'private-events'!
updateArgument: anObject
	"an argument for an element update call, if any"
	self otherAt: #UpdateArgument put: anObject! !

!WebElement methodsFor: 'private-obsolete'!
updateEverySeconds: aNumber
	"OBSOLETE, use Comet techniques instead!!"
	"periodically update itself from server (AJAX) with calling an element method with a parameter"
	self updateEverySeconds: aNumber with: nil! !

!WebElement methodsFor: 'private-obsolete'!
updateEverySeconds: aNumber with: anArgString
	"OBSOLETE, use Comet techniques instead!!"
	"periodically update itself from server (AJAX) with calling an element method with an argument"
	"Prototype specific"
	| url parms  |
	self ensureId. self id.
	url := self ajaxCallUrl. 
	parms:= self ajaxCallUrlParametersFor: self context: self context.
	anArgString notNil ifTrue: [parms := parms, '&parm=', anArgString].
	parms := parms, '&ajaxElementToRecreateId=', self id asString.
	self scriptAfter: '
		function createRequest() {
			new Ajax.Request(''', url, ''', { method: ''post'', postBody: ''', parms, ''',
				onSuccess: function(transport) {
					document.getElementById(''', self id, ''').innerHTML=transport.responseText;
				}
			});
		}
		var intervalID= window.setInterval(createRequest, ', (aNumber*1000) printString, ');'.
"
	idToUpdate := anElementToUpdate notNil 
		ifTrue: [self check: anElementToUpdate on: aContext. anElementToUpdate id]
		ifFalse: [#nothingToUpdate]. 
	url := self ajaxCallUrl. 
	parms:= self ajaxCallUrlParametersFor: anElementToUpdate context: aContext.
	anArgString notNil ifTrue: [parms := parms, '&parm=', anArgString].
	anArg2String notNil ifTrue: [parms := parms, '&parm2=', anArg2String].
	anElementToRecreate notNil ifTrue:
		[self check: anElementToRecreate on: aContext.
		parms := parms, '&ajaxElementToRecreateId=', anElementToRecreate id asString].
"


"	this original Prototype one caues memory leak!! "
"	self scriptAfter: 'new Ajax.PeriodicalUpdater(''', self id asString, ''', ''', url, 
		''', {method: ''post'', postBody: ''', parms, 
		''', evalScripts: true, frequency: ', aNumber printString, '})'
"! !

!WebElement methodsFor: 'events-ajax'!
updateWith: anArgObject
	"recreate that element by calling cration method with one argument,
	and send to the browser to update itself there"
	anArgObject notNil ifTrue: [self updateArgument: anArgObject].
	^self update! !

!WebElement methodsFor: 'accessing'!
webPage
	"find a WebPage up in the hierarchy on which this element belongs"
	^(self parent notNil and: [self parent isWebElement])
		ifTrue: [self parent webPage]
		ifFalse: [nil]! !

!WebElement methodsFor: 'accessing'!
widget
	"on which widget this element is shown, if any"
	self parent isNil ifTrue: [^nil].
	^self parent widget! !

!WebElement methodsFor: 'private'!
wrap
	"wrap this element in <span> element to become updatable, if the element is basic one, 
	like button or input field"
	| wrap |
	self isWrapped ifTrue: [^nil].
	self parent isNil ifTrue: [self error: 'cannot wrap yet'].
	wrap := WebElement newSpan.
	wrap parent: self parent.
	self parent elements
		remove: self;
		add: wrap.
	wrap add: self. self parent: wrap.
	wrap ensureId.
	self otherAt: #Wrapped put: true.! !

!WebElement class methodsFor: 'color values' stamp: ' 21/4/07 22:07'!
colorDictionary
	"return a dictionary of color names as keys and hex values for colors in 
	some web elements such as page and table background, text, links etc."
	Colors isNil ifTrue: [self initColorDictionary].
	^Colors! !

!WebElement class methodsFor: 'color values' stamp: ' 21/4/07 22:07'!
initColorDictionary
	"WebElement initColorDictionary"
	"WebElement colorDictionary"
	Colors := IdentityDictionary new.
	Colors 
		at: #white				put: #'ffffff';
		at: #red					put: #'ff0000' ;
		at: #green				put: #'00ff00' ;
		at: #blue				put: #'0000ff' ;
		at: #magenda			put: #'ff00ff';
		at: #cyan				put: #'00ffff' ;
		at: #yellow				put: #'ffff00' ;
		at: #black				put: #'000000';

		at: #aquamarine			put: #'70db93';

		at: #bakerschocolade	put: #'5c3317';
		at: #blueviolet	put: #'9f5f9f';
		at: #brass		put: #'b5a642';
		at: #brightgold	put: #'d9d919';
		at: #brown		put: #'a62a2a';
		at: #bronze		put: #'8c7853';
		at: #bronzeii		put: #'a67d3d';

		at: #cadetblue		put: #'5f9f9f';
		at: #coolcooper		put: #'d98719';
		at: #cooper			put: #'b87333';
		at: #coral			put: #'ff7f00';
		at: #cornflowerblue	put: #'42426f';

		at: #darkbrown		put: #'5c4033';
		at: #darkgreen		put: #'2f4f2f';
		at: #darkgreencooper put: #'4a766e';
		at: #darkolivegreen	put: #'4f4f2f';
		at: #darkorchid		put: #'9932cd';
		at: #darkpurple		put: #'871f78';
		at: #darkslateblue	put: #'6b238e';
		at: #darkslategrey	put: #'2f4f4f';
		at: #darktan			put: #'97694f';
		at: #darkturquoise	put: #'7093db';
		at: #darkwood		put: #'855e42';
		at: #dimgrey		put: #'545454';
		at: #dustyrose		put: #'856363';

		at: #feldspar			put: #'d19275';
		at: #firebrick			put: #'8e2323';
		at: #forestgreen		put: #'238e23';

		at: #gold			put: #'cd7f32';
		at: #goldenrod		put: #'dbdb70';
		at: #grey			put: #'c0c0c0';
		at: #greencooper	put: #'527f76';
		at: #greenyellow		put: #'93db70';

		at: #huntergreen		put: #'215e21';

		at: #indianred		put: #'4e2f2f';

		at: #khaki		 	put: #'9f9f5f';

		at: #lightblue		put: #'c0d9d9';
		at: #lightgrey		put: #'a8a8a8';
		at: #lightsteelblue	put: #'8f8fbd';
		at: #lightwood		put: #'e9c2a6';
		at: #limegreen		put: #'32cd32';

		at: #mandarianorange	put: #'e47833';
		at: #maroon			put: #'8e236b';
		at: #mediumaquamarine	put: #'32cd99';
		at: #mediumblue	put: #'3232cd';
		at: #mediumforestgreen	put: #'6b8e23';
		at: #mediumgoldenrod	put: #'eaeaae';
		at: #mediumorchid	put: #'9370db';
		at: #mediumseagreen	put: #'426f42';
		at: #mediumslateblue	put: #'7f00ff';
		at: #mediumspringgreen	put: #'7fff00';
		at: #mediumturquoise	put: #'70dbdb';
		at: #mediumvioletred		put: #'db7093';
		at: #mediumwood	put: #'a68064';
		at: #midnightblue	put: #'2f2f4f';
		
		at: #navyblue		put: #'23238e ';
		at: #neonblue		put: #'4d4dff';
		at: #neonpink		put: #'ff6ec7';
		at: #newmidnightblue	put: #'00009c';
		at: #newtan			put: #'ebc79e ';
		
		at: #oldgold			put: #'cfb53b ';
		at: #orange			put: #'ff7f00';
		at: #orangered		put: #'ff2400';
		at: #orchid			put: #'db70db';

		at: #palegreen		put: #'8fbc8f';
		at: #pink			put: #'bc8f8f';
		at: #plum			put: #'eaadea';

		at: #quartz			put: #'d9d9f3';

		at: #richblue			put: #'5959ab';

		at: #salmon			put: #'6f4242';
		at: #scarlet			put: #'8c1717';
		at: #seagreen		put: #'238e68';
		at: #semiswetchocolate		put: #'6b4226';
		at: #sienna			put: #'8e6b23';
		at: #silver			put: #'e6e8fa';
		at: #skyblue			put: #'3299cc';
		at: #slateblue		put: #'007fff';
		at: #spicypink		put: #'ff1cae';
		at: #springgreen		put: #'00ff7f';
		at: #steelblue		put: #'236b8e';
		at: #summersky		put: #'38b0de';

		at: #tan				put: #'db9370';
		at: #thistle			put: #'d8bfd8';
		at: #turquoise		put: #'adeaea';

		at: #verydarkbrown	put: #'5c4033';
		at: #verylightgrey	put: #'cdcdcd';
		at: #violet			put: #'4f2f4f';
		at: #violetred		put: #'cc3299';

		at: #wheat			put: #'d8d8bf';
		at: #yellowgreen		put: #'99cc32'.! !

!WebElement class methodsFor: 'testing'!
isWebApplication
	"for tests in climbing on the stack"
	^false! !

!WebElement class methodsFor: 'testing'!
isWebWidget
	"for tests in climbing on the stack"
	^false! !

!WebElement class methodsFor: 'instance creation'!
new
	| instance ctx |
	instance := super basicNew initialize.
	self == WebElement ifTrue: 
		[instance setCreationMethodAndObject. "Widget or App"
		ctx := instance context.  "?? how this work?" "because initialy nil, it start climbing the stack?"
		instance creationContext: ctx.
		instance checkIfFirstInMethodOn: ctx.  "and set the #firsInMethod"
"		instance isFirstInMethod ifTrue:
			[instance setDiv; registerId]. " "fist elements in creation method are always DIVs and have ids"
		(ctx notNil and: [ctx currentReplacement notNil]) ifTrue: 
			"replace id from old element in Ajax updating, see WebApplication>>ajaxUpdate:from:on:"
			[ctx replaceIdIn: instance with: ctx currentReplacement. 
			ctx cancelReplacement] ].
	^instance! !

!WebElement class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newClass: aSymbol
	"new with CSS class as specified"
	^self new class: aSymbol! !

!WebElement class methodsFor: 'instance creation'!
newDiv
	"element enclosed in div tag"
	^self new 
		setDiv;
		ensureId. "let all divs have ids in advance, for potential Ajax from action blocks like 'e update' "! !

!WebElement class methodsFor: 'instance creation'!
newId: aSymbol
	"new with id as specified. Be sure that you set some tag too, otherwise this id attribute won't be shown!!"
	^self new
		setDiv;
		id: aSymbol! !

!WebElement class methodsFor: 'instance creation'!
newSpan
	"element enclosed in span tag"
	^self new 
		setSpan;
		ensureId. "let all spans have ids in advance, for potential Ajax from action blocks like 'e update' "! !

!WebElement class methodsFor: 'color values' stamp: ' 21/4/07 22:07'!
valueForColor: aColorSymbolOrString
	"return a hex value for specified color. Case of color string is not important. 
	return red if color is unknown"
	| color |
	color := aColorSymbolOrString asString asLowercase asSymbol.
	^self colorDictionary at: color ifAbsent: [^self colorDictionary at: #red].

"
WebElement valueForColor: 'blue' 
"! !

!WebEvent methodsFor: 'accessing'!
app
	^self context app! !

!WebEvent methodsFor: 'accessing'!
context
	"a context in which this element occured"
	^context! !

!WebEvent methodsFor: 'private'!
context: aWebContextOrNumber
	context := aWebContextOrNumber! !

!WebEvent methodsFor: 'accessing'!
element
	"a web element on which this handler responds to events" 
	^element! !

!WebEvent methodsFor: 'private'!
element: aWebElementOrId
	element := aWebElementOrId! !

!WebEvent methodsFor: 'accessing'!
event
	"on which event this handler responds, like #click, #mouseOver etc." 
	^event! !

!WebEvent methodsFor: 'private'!
event: aSymbol
	event := aSymbol! !

!WebEvent methodsFor: 'parsing'!
fromJSON: aString
	"get an event from JSON message"
	| dict |
	dict := WebJSON parse: aString.
	self 	event: (dict at: 'event') asSymbol. "event is mandatory"
	(dict at: 'id') notNil ifTrue: [self element: (dict at: 'id') asSymbol].
	(dict at: 'context') notNil ifTrue: [self context: (dict at: 'context') asInteger].
	self pageUrl: (AIDASite convertFromWebString: (dict at: 'pageUrl')). "also mandatory"
	(dict includesKey: 'value') ifTrue: [self value: (dict at: 'value')].! !

!WebEvent methodsFor: 'testing'!
isAjaxRequest
	^false! !

!WebEvent methodsFor: 'testing'!
isClassicalRequest
	"classical requests are non Ajax HTTPRequests, not WebEvents"
	^false! !

!WebEvent methodsFor: 'testing'!
isWebEvent
	^true! !

!WebEvent methodsFor: 'testing'!
isWebRequest
	^false! !

!WebEvent methodsFor: 'accessing'!
pageUrl
	"Url of the page on which this event occured"
	^pageUrl! !

!WebEvent methodsFor: 'private'!
pageUrl: aString
	"Url of the page on which this event occured"
	pageUrl := aString! !

!WebEvent methodsFor: 'accessing'!
pageView
	"get the view from the Url"
	| query view |
	query := self pageUrl readStream upTo: $? ; upToEnd.
	query := (query readStream upTo: $# ) trimBlanks. "skip #anchor if any"
	(query isEmpty or: [(query includesSubString: 'view=') not ]) ifTrue: [^#main].
	view := query readStream upToAll: 'view';  skip: 5 "view="; upTo: $& .
	 ^view asSymbol! !

!WebEvent methodsFor: 'accessing-value'!
postData
	"parse a submited form in value into a postData with key/value pairs"
	"From Swazoo HTTPPost>>urlencodedDataFrom:"
	| postData tokens |
	postData := HTTPPostDataArray new.
	tokens := HTTPString subCollectionsFrom: (HTTPString stringFromBytes: self value) delimitedBy: $&.
	(tokens collect: [:each | HTTPString subCollectionsFrom: each delimitedBy: $=]) 
		do: 	[:keyVal | | datum key |
			datum := HTTPPostDatum new.
			datum value: (HTTPString decodedHTTPFrom: 
 				(keyVal last collect: [:char | char = $+ ifTrue: [Character space] ifFalse: [char]])).
			key := (HTTPString decodedHTTPFrom: 
 				(keyVal first collect: [:char | char = $+ ifTrue: [Character space] ifFalse: [char]])).
			postData at: key put: datum].
	^postData

"WebEvent new value: 'a=&c=d'; postData"! !

!WebEvent methodsFor: 'accessing-value'!
postKeysAndValuesDo: aTwoArgBlock 
	self postData 
		keysAndValuesDo: [:key :each | aTwoArgBlock value: key value: each value]! !

!WebEvent methodsFor: 'private'!
printString
	^'aWebEvent
	event: ', self event printString, '
	element: ', (self element notNil 
		ifTrue: [(self element isKindOf: Symbol) 
			ifTrue: [self element printString] 
			ifFalse: [self element class name, ' id: ', self element id printString] ]
		ifFalse: ['nil']), '
	context: ', (self context notNil 
		ifTrue: [(self context isKindOf: Number)  
			ifTrue: [self context printString] 
			ifFalse: [self context class name, ' ', self context id printString] ]
		ifFalse: ['nil'] ), '
	value: ', self value printString! !

!WebEvent methodsFor: 'parsing'!
reconnectOn: aSession
	"find a right element and a context (at start we have only their ids)"
	"deal specially with page unload event"
	| object app |
	object := aSession site urlResolver objectOnUrl: self relativeUrl.
	app := aSession webAppFor: object. 
	app isNil ifTrue: [^self].
	self context: (self context notNil
		ifTrue: [app contexts at: self context]
		ifFalse: [app contextForView: self pageView]). "for unload event"
	self context isNil ifTrue: [^self].
	self context event: self.
	#unload = self event ifTrue:
		[app contexts 
			detect: [:ctx | ctx window id = self element 
				ifTrue: [self element: ctx window. ^self] ifFalse: [false] ] 
			ifNone: [self element: nil. ^self] ].
	(  #( #load #newtab) includes: self event) "page events"
		ifTrue: [self element: self context page]  "element is entire page"
		ifFalse: [self element: (self context elementId: self element)].! !

!WebEvent methodsFor: 'accessing'!
relativeUrl
	"from page Url, without host and query part"
	| stream relative ch |
	stream := self pageUrl readStream.
	stream upTo: $/; upTo: $/; upTo: $/ . "skip protocol and hostname"
	relative := WriteStream on: String new.
	[stream atEnd] whileFalse:   "up to query part or #, if any"
		[ch := stream next. 
		(ch = $? or: [ch = $#]) 
			ifTrue: [stream upToEnd]
			ifFalse: [relative nextPut: ch] ].
	^'/', relative contents! !

!WebEvent methodsFor: 'accessing-value'!
value
	"corresponding value, if any. Like field value in submit event"
	^value! !

!WebEvent methodsFor: 'private'!
value: aString
	"corresponding value, if any. Like field value in submit event"
	value := aString! !

!WebEvent class methodsFor: 'instance creation'!
fromJSON: aJSONString on: aSession
	^super new
		fromJSON: aJSONString;
		reconnectOn: aSession! !

!WebEventHandler methodsFor: 'private'!
actionBlocks
	actionBlocks isNil ifTrue: [self initActionBlocks].
	^actionBlocks! !

!WebEventHandler methodsFor: 'actions'!
addAcceptPostedInput
	"event is a post of form element input, accept it"
	^self addActionBlock: [:receivedEvent || field |
		field := receivedEvent element.
		field acceptInputFromValue: receivedEvent value.
		field announceChange.
		(field isSingleFieldPost and: [field isValid])
			ifTrue: [field save] ] "otherwise save at complete form submit"! !

!WebEventHandler methodsFor: 'actions'!
addAcceptSubmittedForm
	"event is a submit of a form, accept it"
	^self addActionBlock: [:receivedEvent || form |
		form := receivedEvent element form.
		form acceptFormInputFrom: receivedEvent.
		form isValid ifTrue: [form save].
		form allFields do: [:field | 
			field isButton ifFalse: "don't handle itself once again"
				[field handleSubmitEvent: receivedEvent] ] ]  "call #submit event blocks on all form fields "! !

!WebEventHandler methodsFor: 'actions'!
addActionBlock: aBlock
	^self actionBlocks add: aBlock! !

!WebEventHandler methodsFor: 'actions'!
addAnswer: anObject
	"set answer to current context"
	^self addActionBlock:
		[:receivedEvent |
		receivedEvent context answer: anObject].! !

!WebEventHandler methodsFor: 'actions' stamp: 'janko 10/31/2011 20:08'!
addCloseWindow
	"closes that window and also its execution context"
	| ctx parentCtx |
	^self addActionBlock:
		[:receivedEvent |
		ctx := receivedEvent context. 
		ctx isFirst ifFalse:
			[parentCtx := ctx parent.
			ctx result: WebElement basicNew.
			parentCtx result: ctx result. "just in case"
			parentCtx answer: ctx answer. "if any"
			ctx first mainSemaphore signal. " to ensure continuing main thread"
			ctx parent isFirst ifTrue: [ctx parent stopProcess].  "we don't need it anymore"
			parentCtx window popupStub update. "to actually close popup window on browser"
			self runCloseEventHandler. "to run all action blocks on #close pseudo event"
			ctx window afterCloseUpdate notNil ifTrue: [ctx window afterCloseUpdate update].
			ctx close] ] "finaly the time to safely close our context"! !

!WebEventHandler methodsFor: 'actions'!
addJsonExists
	"jsonExists event: JSON support present in user's browser "
	^self addActionBlock:
		[:receivedEvent |
		receivedEvent context session 
			setJsonExists]! !

!WebEventHandler methodsFor: 'actions'!
addNewTab
	"page opened in a new tab"
	^self addActionBlock:
		[:receivedEvent | ]! !

!WebEventHandler methodsFor: 'actions'!
addPageUnload
	"unload event: page was closed or going to another one"
	^self addActionBlock:
		[:receivedEvent |
		receivedEvent context app 
			deactivateView: receivedEvent pageView]! !

!WebEventHandler methodsFor: 'actions'!
addPopup: anElement onStub: aStubElement
	^self addActionBlock:
		[:receivedEvent |
		anElement 
			elementToReplace: aStubElement; 
			creationContext: receivedEvent context; "changed to popup in WebApplication respondToEvent:"
			resetShallQueue; "queue for sending to browser not in #update but after popup is wraped in window"
			update]! !

!WebEventHandler methodsFor: 'actions'!
addUpdate: anElement with: anArgObject
	^self addActionBlock:
		[:receivedEvent |
		anElement updateWith: anArgObject] "if any (not nil)"! !

!WebEventHandler methodsFor: 'accessing'!
context
	"a web exectution context on which element with this handler was created"
	^self element context! !

!WebEventHandler methodsFor: 'accessing'!
element
	"a web element on which this handler responds to events" 
	^element! !

!WebEventHandler methodsFor: 'private'!
element: aWebElement
	element := aWebElement! !

!WebEventHandler methodsFor: 'accessing'!
event
	"on which event this handler responds, like #click, #mouseOver etc." 
	^event! !

!WebEventHandler methodsFor: 'private'!
event: aSymbol
	event := aSymbol! !

!WebEventHandler methodsFor: 'actions'!
handleEvent: aWebEvent
	"Execute all action blocks in order and return result of the last. Result of last 
	action block should be a kind of WebElement"
	| result |
	self actionBlocks do: [:actionBlock | 
		result := actionBlock numArgs = 0 
			ifTrue: [actionBlock value]  "onClickDo: blocks have usually no argument"
			ifFalse: [actionBlock value: aWebEvent] ].
	^result  "only last result is returned, is that ok? "! !

!WebEventHandler methodsFor: 'initialize-release'!
initActionBlocks
	actionBlocks := OrderedCollection new.! !

!WebEventHandler methodsFor: 'actions'!
runCloseEventHandler
	"run all action blocks on the closed widget, on #close pseudo event"
	| handler |
	handler := self element widget eventHandlerFor: #close.
	handler notNil ifTrue:
		[^handler handleEvent: nil]. "event is not important"! !

!WebEventHandler class methodsFor: 'instance creation'!
newForEvent: aSymbol on: aWebElement 
	^super new
		element: aWebElement;
		event: aSymbol! !

!WebFieldSet methodsFor: 'private'!
hasTag
	^super hasTag! !

!WebFieldSet methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	"Initialize a newly created instance. This method must answer the receiver."

	" *** Replace this comment with the appropriate initialization code *** "
	^self! !

!WebFieldSet methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
legend
	^legend! !

!WebFieldSet methodsFor: 'accessing' stamp: 'janko 9/19/2011 14:23'!
legend: aStringOrAssociation "multilang assoc"
	"a label to be shown on left top corner of fieldset"
	legend := aStringOrAssociation! !

!WebFieldSet methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession 
	| text |
	self prepareToHtmlStreamingOn: aSession.
	aStream nextPutAll: self ident , '<fieldset'.
	self 
		streamAttributesTo: aStream
		for: aSession.
	aStream nextPutAll: '>' , self eol.
	self legend notNil ifTrue: [
		text := self legend aidaIsAssociation "multilingual"
			ifTrue: [self textFromMultilang: self legend on: aSession]
			ifFalse: [self legend].
		aStream nextPutAll: self identMore , '<legend>' , 
		(AIDASite convertToWeb: text on: aSession) , 
		'</legend>' , self eol].
	super 
		streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: self ident , '</fieldset>' , self eol! !

!WebFieldSet class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	"Answer a newly created and initialized instance."
	^super new initialize! !

!WebFieldSet class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newLegend: aString
	^self new legend: aString! !

!WebFileInputField methodsFor: 'aspect adapting' stamp: 'mu 5/5/2008 10:48'!
acceptFileAttributesFrom: aRequest field: aString
	| mutator |
	self filenameAspect notNil ifTrue:
		[| filename |
		mutator := (self filenameAspect asString, ':') asSymbol.
		filename := AIDASite convert: (aRequest postDataAt: aString) filenameWithoutPath fromCodepage: self session codePage.
		self object perform: mutator with: filename].
	self contentTypeAspect notNil ifTrue:
		[mutator := (self contentTypeAspect asString, ':') asSymbol.
		self object perform: mutator with: (aRequest postDataAt: aString) contentType]! !

!WebFileInputField methodsFor: 'aspect adapting' stamp: ' 21/4/07 22:07'!
aspect: aSymbol filenameAspect: aSymbol2 contentTypeAspect: aSymbol3 forObject: anObject
	^self aspect: aSymbol for: anObject; 
		filenameAspect: aSymbol2; 
		contentTypeAspect: aSymbol3! !

!WebFileInputField methodsFor: 'aspect adapting' stamp: ' 21/4/07 22:07'!
aspect: aSymbol filenameAspect: aSymbol2 forObject: anObject
	^self aspect: aSymbol for: anObject; filenameAspect: aSymbol2! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
contentTypeAspect
	^contentTypeAspect! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
contentTypeAspect: aSymbol
	contentTypeAspect := aSymbol! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
filenameAspect
	^filenameAspect! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
filenameAspect: aSymbol
	filenameAspect := aSymbol! !

!WebFileInputField methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self type: 'file'.! !

!WebFileInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isFileInputField
	^true! !

!WebFileInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isInputField
	^false! !

!WebFileInputField methodsFor: 'private' stamp: ' 21/8/07 09:38'!
isStreamed
	"file is received directly from request into output stream"
	^self writeStream notNil or: [self writeBlock notNil]! !

!WebFileInputField methodsFor: 'accessing'!
object: anObject
	"set or change the object of model adaptor"
	self adaptor isNil  ifTrue: [self adaptor: AidaModelAdaptor new].
	self adaptor subject: anObject! !

!WebFileInputField methodsFor: 'private'!
prepareAttributesToStreamOn: aSession
	"just override value preparation to nothing"! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
writeBlock
	^writeBlock! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
writeBlock: aBlockClosure
	"this block will be called just before start of streaming to writeStream"
	writeBlock := aBlockClosure! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
writeStream
	^writeStream! !

!WebFileInputField methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
writeStream: aStream
	"output binary stream where uploaded file will be directy writen"
	writeStream := aStream! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol filenameAspect: aSymbol2 contentTypeAspect: aSymbol3 forObject: anObject

	^self new aspect: aSymbol for: anObject; 
		filenameAspect: aSymbol2;
		contentTypeAspect: aSymbol3! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol filenameAspect: aSymbol2 forObject: anObject

	^self new aspect: aSymbol for: anObject; 
		filenameAspect: aSymbol2! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/8/07 09:38'!
beforeStreamingDo: aBlock filenameAspect: aSymbol2 contentTypeAspect: aSymbol3 forObject: anObject
	"A block will be called just before streaming begins, with a HTTPPostDatum as parameter. Block
	  must set a write stream in datum (for instance open an output file and stream on it)"
	"example block: [:datum | datum writeStream: 'myfile' writeStream binary] "
	^self new 
		writeBlock: aBlock; 
		object: anObject; 
		filenameAspect: aSymbol2;
		contentTypeAspect: aSymbol3! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/8/07 09:38'!
beforeStreamingDo: aBlock filenameAspect: aSymbol2 forObject: anObject
	"A block will be called just before streaming begins, with a HTTPPostDatum as parameter. Block
	 must set a write stream in datum (for instance open an output file and stream on it)"
	"example block: [:datum | datum writeStream: 'myfile' writeStream binary] "
	"Don't forget to close such a stream after!! This can be done in App action method"
	^self new 
		writeBlock: aBlock; 
		object: anObject; 
		filenameAspect: aSymbol2! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/8/07 09:38'!
toStream: aStream filenameAspect: aSymbol2 contentTypeAspect: aSymbol3 forObject: anObject
	"wrrite uploaded file directly to aStream, which must be binary"
	^self new 
		writeStream: aStream; 
		object: anObject; 
		filenameAspect: aSymbol2;
		contentTypeAspect: aSymbol3! !

!WebFileInputField class methodsFor: 'instance creation' stamp: ' 21/8/07 09:38'!
toStream: aStream filenameAspect: aSymbol2 forObject: anObject
	"wrrite uploaded file directly to aStream, which must be binary"
	^self new 
		writeStream: aStream; 
		object: anObject; 
		filenameAspect: aSymbol2! !

!WebFileInputTest methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
file
	^file! !

!WebFileInputTest methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
file: anObject
	file := anObject! !

!WebFileInputTest methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
filename
	^filename! !

!WebFileInputTest methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
filename: anObject
	filename := anObject! !

!WebFileInputTest methodsFor: 'testing' stamp: 'janko 7/24/2011 21:13'!
offtestFileUpload
	"this test temporarly off"
	| request session app |
	request := self postFileRequest.
	session := WebSession new. session lastRequest: request. request session: session.
	app := WebApplication new session: session.
	app ensureContextForView: #main for: request.
	app add: 
		((WebFileInputField aspect: #file filenameAspect: #filename forObject: self) name: 'field7').
	app window registerFormElements.
	"simulate receiving a request"
	app acceptInputsAndActionFrom: request.
	self assert: self filename = 'event.ical'.
	self assert: (self file readStream upTo: Character cr) = 'BEGIN:VCALENDAR'.! !

!WebFileInputTest methodsFor: 'testing' stamp: 'janko 7/24/2011 21:13'!
offtestStreamedFileUpload
	"this test temporarly off"
	| request session app stream |
	request := self postFileRequest.
	session := WebSession new. session lastRequest: request. request session: session.
	app := WebApplication new session: session.
	app ensureContextForView: #main for: request.
	stream := WriteStream on: ByteArray new.
	app add: 
		((WebFileInputField toStream: stream filenameAspect: #filename forObject: self) name: 'field7').
	app window registerFormElements.
	"simulate receiving a request"
	app context form registerStreamedFieldsInto: request. "announce where to stream uploaded file"
	app acceptInputsAndActionFrom: request. "this will trigger defered parsing of postdata and stream it to stream"
	self file: stream contents asString.
	self assert: self filename = 'event.ical'.
	self assert: (self file readStream upTo: Character cr) = 'BEGIN:VCALENDAR'.! !

!WebFileInputTest methodsFor: 'setup' stamp: ' 21/8/07 09:38'!
postFileRequest
	| requestStream |
	requestStream := SwazooStream on: String new.
	requestStream
		nextPutLine: 'POST  /document/aab.html HTTP/1.1';
		nextPutLine: 'Connection: Keep-Alive';
		nextPutLine: 'User-Agent: Mozilla/4.72 [en] (X11; I; Linux 2.3.51 i686)';
		nextPutLine: 'Host: biart.eranova.si';
		nextPutLine: 'Referer: http://www.bar.com/takeMeThere.html';
		nextPutLine: 'Content-Type: multipart/form-data; boundary= -----------------20752836116568320241700153999';
		nextPutLine: 'Content-Length: 845';
            crlf;
		nextPutLine: '-------------------20752836116568320241700153999';
		nextPutLine: 'Content-Disposition: form-data; name="id5273"';
		crlf; 
		nextPutLine: 'main';
		nextPutLine: '-------------------20752836116568320241700153999';
		nextPutLine: 'Content-Disposition: form-data; name="field2"';
		crlf; crlf;
		nextPutLine: '-------------------20752836116568320241700153999';
		nextPutLine: 'Content-Disposition: form-data; name="field7"; filename="event.ical"';
		nextPutLine: 'Content-Type: application/octet-stream';
		crlf; 
		nextPutLine: 'BEGIN:VCALENDAR';
		nextPutLine: 'PRODID:-//Squeak-iCalendar//-';
		nextPutLine: 'VERSION:2.0';
		nextPutLine: 'X-WR-CALNAME:test';
		nextPutLine: 'METHOD:PUBLISH';
		nextPutLine: 'BEGIN:VEVENT';
		nextPutLine: 'UID:an event with a start date and not date and time';
		nextPutLine: 'CATEGORIES:category1,category2';
		nextPutLine: 'CREATED:20050501T110231Z';
		nextPutLine: 'SEQUENCE:0';
		nextPutLine: 'SUMMARY:aTitle';
		nextPutLine: 'PRIORITY:5';
		nextPutLine: 'DTSTART;VALUE=DATE:20050425';
		nextPutLine: 'END:VEVENT';
		nextPutLine: 'END:VCALENDAR';
		crlf;
		nextPutLine: '-------------------20752836116568320241700153999';
		nextPutLine: 'Content-Disposition: form-data; name="attach"';
		crlf;
		nextPutLine: 'Attach';
		nextPutLine: '-------------------20752836116568320241700153999--'.

	^HTTPRequest readFrom: (SwazooStream on: requestStream writeBuffer contents)! !

!WebForm methodsFor: 'model posting'!
acceptFormInputFrom: anEventOrRequest
 	"read a post data from request or WebEvent and write values to the valueModels of fields in a form.
	For checkboxes and radiobuttons, a set of values is expected under the same name"
	| postData value |
	postData := HTTPPostDataArray new. "like Dictionary, but multiple values per key"
	self uncheckAllProperChecboxesFor: anEventOrRequest. 
	self uncheckAllProperRadioButtonsFor: anEventOrRequest.
	anEventOrRequest  postKeysAndValuesDo: [:key :vlue | postData at: key put: vlue].
	self allFieldsIncludingSubforms do: [:field | 
		(postData includesKey: field name) ifTrue:
			[value := postData at: field name.
			field isMenu 
				ifTrue: [field acceptFormInputFrom: postData]
				ifFalse: [	field isFileInputField 
					ifTrue: 
						[field isStreamed ifFalse: [field value: (postData at: field name)] "streamed already read". 
						field acceptFileAttributesFrom: anEventOrRequest field: field name]
					ifFalse: [field acceptInputFromValue: value] ] "all other form elements"
			] 
		]! !

!WebForm methodsFor: 'model posting'!
acceptInputsFrom: aRequest
	"this method read form inputs (if any) and if all values pass validation, write them to the appropriate 
	aspects of model  objects. If entire form is validated, it saves inputs to model, all at once"
	| field |
	self acceptFormInputFrom: aRequest.  "just fields which are in request, can be only a single one in Ajax!!"
	aRequest isAjaxPostWithSingleInput  "form or single field validation"
		ifTrue: 
			[field := self fieldNamed: aRequest ajaxSingleInputName. 
			field isValid ifTrue: [field save] ]
		ifFalse: [self isValid ifTrue: [self save] ].    "check in action methods for validation again!!"! !

!WebForm methodsFor: 'accessing' stamp: 'jm 4/24/2009 20:44'!
action
	"Url of where to post form inputs, it is optional"
	^action! !

!WebForm methodsFor: 'accessing' stamp: 'jm 4/24/2009 20:44'!
action: aString
	"Url of where to post form inputs, it is optional"
	action := aString! !

!WebForm methodsFor: 'private'!
addSubform: aWebForm
	subforms isNil ifTrue: [self initSubforms].
	(subforms includes: aWebForm) ifTrue: [^nil].
	subforms copy do: [:form | 
		form parent == aWebForm parent ifTrue:  "parent was updated/recreated, old form discarded"
			[self removeSubform: form] ].
	subforms add: aWebForm.
	aWebForm superform: self! !

!WebForm methodsFor: 'private-fields' stamp: ' 21/8/07 09:38'!
addToFields: aWebFormElement
	"and to tab order"
	(self alreadyRegistered: aWebFormElement) ifTrue: [^self error: 'already exist!!'].
	self fields at: aWebFormElement name put: aWebFormElement.
	self tabOrder add: aWebFormElement.
	aWebFormElement isStreamed ifTrue: [self streamedFieldSet add: aWebFormElement].
	^self fieldSet add: aWebFormElement! !

!WebForm methodsFor: 'accessing' stamp: 'jm 11/11/2010 15:44'!
allFields
	"return all fields (form elements) in this form"
	^self fields values asSet
		remove: self fieldSet ifAbsent: [];
		remove: self streamedFieldSet ifAbsent: [];
		yourself
! !

!WebForm methodsFor: 'accessing'!
allFieldsIncludingSubforms
	"return all fields (form elements) in down the form hierarchy"
	| set  |
"	count := 0.
	stContext := thisContext sender.   ""TEMPORARY, FOR DEBUGGING!!""
	[stContext notNil] whileTrue: [
		(stContext receiver isKindOf: WebForm) ifTrue: 
			[count := count +1].
		stContext := stContext sender].
	count > 20 ifTrue: [self error: 'WebForm allFields infinite recursion!!'].
"
	set := self allFields.
	self subforms do: [:subform | set addAll: subform allFieldsIncludingSubforms].
	^set! !

!WebForm methodsFor: 'private-fields' stamp: ' 21/4/07 22:07'!
alreadyRegistered: aWebFormElement
	^self fieldSet includes: aWebFormElement! !

!WebForm methodsFor: 'private-ajax'!
announceChange: aFormElement
	self announcers do: [:each | each value: aFormElement]! !

!WebForm methodsFor: 'private-ajax'!
announcers
	"whom to announce form field change. A collection of blocks to call"
	^self otherAt: #announcers ifAbsentPut: [OrderedCollection new]! !

!WebForm methodsFor: 'model adapting'!
bufferedValueAspect: aSymbol for: anObject
	"find a bufered (not yet saved) value of this aspect of domain object"
	| flds |
	flds := self allFields select: [:each | each adaptor subject == anObject].
	^(flds detect: [:each | each adaptor aspect = aSymbol] ifNone: [^nil])
		adaptor buffer! !

!WebForm methodsFor: 'model posting'!
buttonFrom: aRequest
	"return a button pressed. For defining an action method or block to be called"
	"note that image buttons send values in coordinates, like search.x search.y"
	| btname buttonNames postKeys |
	btname := aRequest postDataAt: 'ajaxPressedButton'.  "in case of Ajax form submit"
	btname notNil ifTrue: [^btname value].
	buttonNames := (self fieldSet select: [:each | each isButton]) 
		collect: [:each | each name].
	postKeys := aRequest postDataKeys collect: [:key | key copyUpTo: $. ]. "remove .x .y"
	btname := buttonNames detect: [:each | postKeys includes: each] ifNone: [''].
	^self fieldNamed: btname.! !

!WebForm methodsFor: 'validation'!
collectErrorTexts
	"collect all validation error texts, separated by <br>"
	^self invalidFields 
		inject: ''
		into: [:text :each | text, each errorText, '<br>'].! !

!WebForm methodsFor: 'private-streaming'!
ensureOnSubmitReturnFalseAtEnd
	"for onSubmit script, ensure that 'return false' (if any) will be the last sentence in the script"
	| coll new |
	coll := self attributesAt: #onSubmit. coll isNil ifTrue: [^nil].
	(coll isKindOf: OrderedCollection) ifFalse: [^nil].
	(coll contains: [:each | '*return false*' match: each]) ifFalse: [^nil].
	new := coll reject: [:each | '*return false*' match: each].  "also to avoid duplicates"
	new := new add: 'return false'; yourself.
	self attributesAt: #onSubmit put: new.! !

!WebForm methodsFor: 'accessing'!
fieldNamed: aString
	"search down to subforms too"
	^self fields at: aString ifAbsent: 
		[self subforms do: [:form || field | 
			field := form fieldNamed: aString.
			field notNil ifTrue: [^field] ].
		nil].! !

!WebForm methodsFor: 'private-fields' stamp: ' 21/4/07 22:07'!
fieldSet
	^self fields at: #set ifAbsent: [self initFieldSet].! !

!WebForm methodsFor: 'tabulation' stamp: ' 21/4/07 22:07'!
fieldWithTabIndex: aNumber	
	"return a form element with that tab index"
	^self tabOrder detect: [:field | field tabIndex = aNumber] ifNone: [nil].! !

!WebForm methodsFor: 'private-fields' stamp: ' 21/4/07 22:07'!
fields
	"return a dictionary of all fields in this form. a field name is used as a key"
	fields isNil ifTrue: [self initFields].
	^fields! !

!WebForm methodsFor: 'private'!
form
	^self! !

!WebForm methodsFor: 'private'!
hasTag
	^false "well..."! !

!WebForm methodsFor: 'accessing'!
hideFormTag
	"form tag is not shown at all"
	^self otherAt: #FormTagHidden put: true! !

!WebForm methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initFieldSet
	"with all fields for fast check, if field is already registered"
	^self fields at: #set put: Set new.! !

!WebForm methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initFields
	fields := Dictionary new.
	self initFieldSet. "with all fields for fast check, if field is already registered"
	self initStreamedFieldSet! !

!WebForm methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initStreamedFieldSet
	"all fields which demands request post data streaming directly to output stream"
	^self fields at: #streamedFields put: Set new.! !

!WebForm methodsFor: 'initialize-release'!
initSubforms
	subforms := OrderedCollection new.! !

!WebForm methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initTabOrder
	tabOrder := OrderedCollection new.! !

!WebForm methodsFor: 'accessing'!
invalidFields
	"all fields whith a not valid value, including from subforms"
	^self allFieldsIncludingSubforms reject: [:each | each isValid]! !

!WebForm methodsFor: 'validation'!
isComplete
	"all required fields entered and all all fields valid"
	^self isEntered and: [self isValid]! !

!WebForm methodsFor: 'validation'!
isEntered
	"check if all required fields (form elements) have values entered. Check also subforms"
	self allFields do: [:field | field isEntered ifFalse: [^false] ].  "local form fields"
	self subforms do: [:subform | subform isEntered ifFalse: [^false] ].
	^true! !

!WebForm methodsFor: 'testing'!
isTagHidden
	"form tag is not shown at all"
	^self otherAt: #FormTagHidden ifAbsent: [false]! !

!WebForm methodsFor: 'testing'!
isTopForm
	"top form in page or popup window"
	^self superform isNil! !

!WebForm methodsFor: 'testing'!
isTopFormOnPage
	"top form on the whole page"
	^self isTopForm and: [self parent isWebPage]! !

!WebForm methodsFor: 'validation'!
isValid
	"check if all fields (form elements) have valid values. Check also subforms"
	self allFields do: [:field | field isValid ifFalse: [^false] ].  "local form fields"
	self subforms do: [:subform | subform isValid ifFalse: [^false] ].
	^true! !

!WebForm methodsFor: 'testing'!
isWebForm
	^true! !

!WebForm methodsFor: 'private-fields'!
nextFieldNumber
	"for unique numbering of fields on all form hierachy on the whole page" 
	| number |
	number := self otherAt: #NextFieldNumber ifAbsentPut: [0].
	number := number + 1.
	self otherAt: #NextFieldNumber put: number.
	^number! !

!WebForm methodsFor: 'tabulation'!
nextFieldTabOrderIn: aFormElement
	"next element to tab into"
	| inx |
	self tabOrder isEmpty ifTrue: [^nil].
	inx := self tabOrder indexOf: aFormElement.
	inx = 0 ifTrue: [^self tabOrder first].
	inx = self tabOrder size ifTrue: [^self tabOrder first]. "rotate"
	^self tabOrder at: inx+1! !

!WebForm methodsFor: 'private-ajax'!
onFormChangeDo: aBlock
	"run a block with changed field as argument immedatelly after field change is Ajax detected"
	self announcers add: aBlock! !

!WebForm methodsFor: 'events'!
onReset: aJavascriptCode
	self attributesAt: #onReset add: aJavascriptCode! !

!WebForm methodsFor: 'events'!
onSubmit: aJavascriptCode
	"many calls will add a JS code to the exisitng one!!"
	self attributesAt: #onSubmit add: aJavascriptCode! !

!WebForm methodsFor: 'events-ajax'!
onSubmitUpdate: anElement
	"update (and show if not yet) a specified element from server (AJAX)"
	self onSubmitUpdate: anElement with: nil optional: nil! !

!WebForm methodsFor: 'events-ajax'!
onSubmitUpdate: anElement with: anArgString optional: anArg2String
	"first argument will be send as an argument of the method while second is additional"
	"See WebApplication>>respondToAjaxRequest: and specially #ajaxUpdate:from: for more"
	"Prototype specific"
	self onSubmit: 
		(self scriptForUpdate: anElement from: anElement
			with: anArgString optional: anArg2String
		 	context: self context).! !

!WebForm methodsFor: 'private' stamp: 'janko 10/31/2011 20:20'!
parent: anElement
	"temporary, for debugging!!"
	^super parent: anElement.
! !

!WebForm methodsFor: 'private-streaming'!
prepareActionStringOn: aSession
	"example of action string:  '/object.html?view=edit&aidaCtx=70413#anchor123"
	| actionString upToAnchor anchor ctx |
	actionString :=  (self action notNil 
		ifTrue: [self action "predefined action" ] ifFalse: [aSession fullUrlForCurrentPage]).
	upToAnchor := actionString readStream upTo: $#.
	anchor := actionString readStream upTo: $#; upToEnd.
	ctx := self context.
	actionString := upToAnchor, ((actionString includes: $? ) ifTrue: ['&'] ifFalse: ['?']),
		(ctx notNil ifTrue: [WebContext contextIdName "aidaCtx", '=', self context id printString] ifFalse: ['']).
	anchor notEmpty ifTrue: [actionString := actionString, '#', anchor]. "anchor always at the end!!"
	^actionString! !

!WebForm methodsFor: 'private-streaming'!
prepareToHtmlStreamingOn: aSession
	self ensureOnSubmitReturnFalseAtEnd.  "for ajaxSubmit to break normal submiting and full page reload"
	super prepareToHtmlStreamingOn: aSession.
	self reorderTabulation. "late reordering to ensure that all form elements are present"! !

!WebForm methodsFor: 'private'!
printString
	^'aWebForm', (self isTopForm ifTrue: [' top '] ifFalse: [' ']), 
			(self isTopFormOnPage ifTrue: ['on page'] ifFalse: ['on popup']), 
		(self id notNil ifTrue: 
			[(String with: Character cr), '     id: ', self id] ifFalse: ['']),
		((self attributesAt: #class)  notNil ifTrue: 
			[(String with: Character cr), '     class: ', self attributesAt: #class ] ifFalse: ['']),
		(String with: Character cr), '     valid: ', self isValid printString,
		(String with: Character cr), '     fields: ', (self fields size - 2) printString,
		(String with: Character cr), '     superform: ', (self superform isNil ifTrue: ['nil'] ifFalse: ['aWebForm']),
		(String with: Character cr), '     subforms: ', self subforms size printString,
		(String with: Character cr), '     parent: ', self parent printString! !

!WebForm methodsFor: 'model adapting'!
registerFormElement: aFormElement
	"register (add to fields and set model adaptor) element to this form"
	aFormElement isFormElement ifFalse: [self error: 'not a form element!!'].
	(self alreadyRegistered: aFormElement) ifTrue: [^nil]. 
	aFormElement hasName ifFalse:
		[aFormElement name: 'field', (self topFormOnPage nextFieldNumber) printString].
	self addToFields: aFormElement. 
	(aFormElement isRadioButton | aFormElement isCheckBox)
		ifTrue: [aFormElement joinToForm: self]
		ifFalse:	["aWebFormElement adapt" "not needed anymore!!"]! !

!WebForm methodsFor: 'model adapting' stamp: ' 21/8/07 09:38'!
registerStreamedFieldsInto: aHTTPPost
	"for streams it needs to be done before you use any post data, otherwise it is too late!!"
	self streamedFieldSet do: [:field | 
		field writeBlock notNil 
			ifTrue: [aHTTPPost postDataAt: field name beforeStreamingDo: field writeBlock].
		field writeStream notNil 
			ifTrue: [aHTTPPost postDataAt: field name streamTo: field writeStream] ]! !

!WebForm methodsFor: 'private'!
removeSubform: aWebForm
	subforms isNil ifTrue: [^nil].
	subforms remove: aWebForm ifAbsent: [nil].! !

!WebForm methodsFor: 'tabulation'!
reorderTabulation
	"builds and reorders tabOrder to match tabIndex order of form (and subforms) elements"
	| flds withTabIndex |
	self initTabOrder.
	flds := self allFieldsIncludingSubforms.
	withTabIndex := flds select: [:each | each tabIndex notNil and: [each tabIndex ~= 0] ]. "with tab index explicitly set"
	withTabIndex := SortedCollection withAll: withTabIndex sortBlock: [:a :b | a tabIndex < b tabIndex].
	self tabOrder addAll: withTabIndex.
	withTabIndex := withTabIndex asSet.
	 "those without tab index at the end"
	self tabOrder addAll: (flds reject: [:each | withTabIndex includes: each]).! !

!WebForm methodsFor: 'model posting'!
save
	"save all changed form field values to the domain model. All values must be valid unitl any value is saved. 
	Raise error if any value is not validated. To avoid exception, check with #isValid before!!
	Save the subforms down in hierarchy as well"
	self isValid ifFalse: [self error: 'form fields not all valid'].
	self allFields do: [:field | field save]. "only changed fields are saved!! See WebModelAdaptor save"
	self subforms do: [:each | each save]! !

!WebForm methodsFor: 'private-ajax'!
scriptForPostAndUpdate: anElementToUpdate from: anElementToRecreate with: anArgString  optional: anArg2String button: aWebButton for: aContext
	"Whole form post!! Form from page, popup window or standalone widget"
	"Sychronous Ajax call, it blocks until call is finished!!"
	"ElementToUpdate will be replaced with contents of the elementToRecreate after its creation method will be   
      called to recreate it. Except for popups both elements are actually the same"
	"First argument will be send as an argument of the method while second is optional"
	"If both elements are nil, only arguments will be sent, usefull for sending commands only, like close window"
	"See WebApplication>>respondToAjaxRequest: for more"
	"Prototype specific"
	| url id parms buttonName buttonValue |
	id := anElementToUpdate notNil ifTrue: [anElementToUpdate ensureId; id] ifFalse: [#nil].
	url := self ajaxCallUrl. 
	parms := self ajaxCallUrlParametersFor: anElementToUpdate context: aContext.
	anArgString notNil ifTrue: [parms := parms, '&parm=', anArgString].
	anArg2String notNil ifTrue: [parms := parms, '&parm2=', anArg2String].
	anElementToRecreate notNil ifTrue: 
		[parms := parms, '&ajaxContentElementId=', 
			[anElementToRecreate registerId. anElementToRecreate id asString] value ].
	aWebButton notNil ifTrue: 
		[buttonName := aWebButton name.  "Form.Serialize somehow doesn't add that button, so we add it manually"
		buttonValue := aWebButton text].
	^'var serializedForm = Form.serialize(''', (self form registerId "if not yet"; id) asString, "page or widget form"
        '''); new Ajax.Updater(''', id asString, 
        ''', ''', "url, ''', {method: ''get'', parameters: ''', parms, ''' + form, evalScripts: true, asynchronous: false})'" url, 
        ''', {method: ''post'', postBody: serializedForm + ''', ('&', parms),  
	(aWebButton notNil ifTrue: ['&', buttonName, '=', buttonValue, '&ajaxPressedButton=', buttonName, ''] ifFalse: ['']), 
	''', evalScripts: true, asynchronous: false})'! !

!WebForm methodsFor: 'private' stamp: ' 21/4/07 22:07'!
shouldIdent
	^true! !

!WebForm methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	self isTopForm 
		ifTrue:   "subforms don't have a method parameter"
			[self isTagHidden ifFalse: 
				[aStream nextPutAll: 
					self ident, '<form  method="post" action="', (self prepareActionStringOn: aSession),  
						'"', ' enctype="multipart/form-data"'.
				self streamAttributesTo: aStream for: aSession.
				aStream nextPutAll: '>', self eol] ]
		ifFalse: 
			[aStream nextPutAll: '<div comment="subform" '.
				self streamAttributesTo: aStream for: aSession.
				aStream nextPutAll: '>', self eol].
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll:  self ident, 
		((self isTopForm and: [self isTagHidden not]) ifTrue: ['</form>'] ifFalse: ['</div>'])
		, self eol.! !

!WebForm methodsFor: 'private-fields' stamp: ' 21/8/07 09:38'!
streamedFieldSet
	^self fields at: #streamedFields ifAbsent: [self initStreamedFieldSet].! !

!WebForm methodsFor: 'accessing'!
subforms
	"forms in next level of widgets in this page/popup window/widget  "
	subforms isNil ifTrue: [^#() ].
	^subforms! !

!WebForm methodsFor: 'accessing'!
superform
	"parent form"
	^superform! !

!WebForm methodsFor: 'private'!
superform: aWebForm
	"parent form"
	self == aWebForm ifTrue: [self error: 'superform?']. "for debugging!!"
	superform := aWebForm! !

!WebForm methodsFor: 'private' stamp: ' 21/4/07 22:07'!
tabOrder
	"return a collection of all fields in this form, ordered by tab order"
	tabOrder isNil ifTrue: [self initTabOrder].
	^tabOrder! !

!WebForm methodsFor: 'tags'!
tag
	^#form! !

!WebForm methodsFor: 'accessing'!
topForm
	"returns the first, top form in the page/popup window"
	^self isTopForm 
		ifTrue: [self]
		ifFalse: [self superform topForm]! !

!WebForm methodsFor: 'accessing'!
topFormOnPage
	"returns the first, top form in the whole page"
	self isTopFormOnPage ifTrue: [^self].
	^self context first form! !

!WebForm methodsFor: 'model posting' stamp: 'janko 11/2/2011 21:45'!
uncheckAllProperChecboxesFor: anEventOrRequest
	"for single input event just that checbox, if any"
	| toUncheck |
	toUncheck := self allFieldsIncludingSubforms. "by default, for classical form submits"
	(anEventOrRequest isWebEvent  "probably check/uncheck event over  WebSocket "
		and: [anEventOrRequest element class == WebCheckBox]) 
			ifTrue: [toUncheck := Array with: anEventOrRequest element].
	anEventOrRequest isAjaxRequest ifTrue: 
		[toUncheck := Array with: 
			(self fields at: anEventOrRequest ajaxSingleInputName ifAbsent: [^nil])].
	toUncheck do: [:each | each isCheckBox ifTrue: [each uncheckValue] ]! !

!WebForm methodsFor: 'model posting'!
uncheckAllProperRadioButtonsFor: aRequest
	"for single input Ajax posts just that radio button, if any"! !

!WebForm methodsFor: 'accessing'!
unhideFormTag
	"form tag is not shown again"
	^self otherAt: #FormTagHidden put: false! !

!WebForm methodsFor: 'accessing'!
validFields
	"all fields whith a not valid value"
	^self allFields select: [:each | each isValid]! !

!WebForm methodsFor: 'accessing'!
view
	"for which app view is that form"
	^self context view! !

!WebFormElement methodsFor: 'private'!
acceptInputFromValue: aString
	self subclassResponsibility! !

!WebFormElement methodsFor: 'events'!
activate
	"move focus and select the text in that form field. (focus+select)"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').activate' 
"	self scriptAfter: 'Field.activate(''', self id, ''')'"! !

!WebFormElement methodsFor: 'model adapting'!
adapterFor: anObject aspect: anAspectSymbolOrNumber
	"return an appropriate aspect adaptor for that element"
	((anObject isKindOf: Collection) or: [anObject isKindOf: WebTranslDict]) ifTrue:  
		"adapt to an element of collection, which must be an indexed one!! "
		[^(AidaModelAdaptor forIndex: anAspectSymbolOrNumber) subject: anObject].
	(anAspectSymbolOrNumber isKindOf: Symbol) ifTrue:
		[^(AidaModelAdaptor forAspect: anAspectSymbolOrNumber) subject: anObject].
	self error: 'innapropriate aspect'! !

!WebFormElement methodsFor: 'accessing'!
adaptor
	adaptor isNil ifTrue: [self initNullAdaptor]. "not yet connected to model, jsut to hold a value"
	^adaptor! !

!WebFormElement methodsFor: 'private'!
adaptor: aProtocolAdaptor
	adaptor := aProtocolAdaptor.! !

!WebFormElement methodsFor: 'private'!
addEnterTabScriptIfNessesary
	"allow ENTER key to be used for tabulation, like a TAB"
	"Prototype specific"
	| next nextId |
	self enterTabForm isNil ifTrue: [^nil].
	next := self enterTabForm nextFieldTabOrderIn: self.
	nextId := next notNil 
		ifTrue: [next ensureId; id]
		ifFalse: [''].  "no tabulation, but also no default ENTER action!!" 
	self scriptAfter: 'Event.observe(''', self id, ''', ''keypress'', function(event) {
  		if (event.keyCode == Event.KEY_RETURN) {  
			Event.stop(event); $(''', nextId, ''').activate(); } } )'! !

!WebFormElement methodsFor: 'private-events'!
announceChange
	self form announceChange: self! !

!WebFormElement methodsFor: 'accessing'!
aspect
	^self adaptor aspect! !

!WebFormElement methodsFor: 'model adapting'!
aspect: aSymbolOrNumber for: anObject
	"set the link between this form element and an aspect (name of instance variable) 
	of an object , which value is presented in this webFormElement. The appropriate 
	aspect adaptor is generated"
	self adaptor: 
		(self adapterFor: anObject aspect: aSymbolOrNumber)! !

!WebFormElement methodsFor: 'events'!
blockEnterKey
	"don't allow that ENTER key press trigger unwanted form submit"
	self on: #keyPress script: 'return blockEnter(event)'! !

!WebFormElement methodsFor: 'private-events'!
canUpdate
	"form elements can be Ajax updated, to disable/enable them, a button for instance"
	^true! !

!WebFormElement methodsFor: 'private'!
defaultErrorElement
	"this widget is Ajax updated with an error text in case of validation failure"
	^WebValidationError newFor: self.! !

!WebFormElement methodsFor: 'events'!
disable
	"disable (gray out) this form element"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').disabled = true'! !

!WebFormElement methodsFor: 'attributes'!
disabled
	"disable this form element for user input"
	self attributesAt: #disabled put: nil "just attribute name, no value"! !

!WebFormElement methodsFor: 'private'!
dontSanitize
	"don't sanitize input from <script> and similar possibly malicius input"
	self otherAt: #NoSanitizing put: true! !

!WebFormElement methodsFor: 'events'!
enable
	"enable again this form element"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').disabled = false'! !

!WebFormElement methodsFor: 'attributes'!
enabled
	self attributes removeKey: #disabled ifAbsent: [].! !

!WebFormElement methodsFor: 'private'!
enterTabForm
	"is tab with ENTER enabled and in which form"
	^enterTabForm! !

!WebFormElement methodsFor: 'private'!
enterTabForm: aForm
	enterTabForm := aForm! !

!WebFormElement methodsFor: 'validation'!
errorElement
	"this element is Ajax updated wit an error text in case of validation failure. Call it only once!!"
	"Styling is determined in DefaultWebStyle>>css321Validation. Red background by default"
	| e already |
	already := self otherAt: #ErrorElementAlready ifAbsent: [false].
	already ifTrue: [self error: 'Use validation error element only once!!'].
	self otherAt: #ErrorElementAlready put: true.
	e := self otherAt: #ErrorElement ifAbsentPut: [self defaultErrorElement]. "instance of WebValidationError"
	self onChangeUpdate: e.
	^e! !

!WebFormElement methodsFor: 'private'!
errorText
	"this text will be shown in errorElement in cas of validation failure"
	^self otherAt: #ErrorText ifAbsent: ['']! !

!WebFormElement methodsFor: 'validation'!
errorText: aString
	"this text will be shown in errorElement in case of validation failure"
	self otherAt: #ErrorText put: aString! !

!WebFormElement methodsFor: 'events'!
focus
	"move the input focus to that form field"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').focus()'! !

!WebFormElement methodsFor: 'accessing'!
form
	"form (from page, popup window or widget) to which belongs (or it will be) this form element"
	^super form! !

!WebFormElement methodsFor: 'accessing'!
format
	"format of the value. Dep≈°ends of value type. If nil, autoformating is used"
	"For Date can be #iso #sloDate #shortSloDate"
	^self adaptor format! !

!WebFormElement methodsFor: 'accessing'!
format: aSymbol
	"format of the value. Dep≈°ends of value type. If nil, autoformating is used"
	"For Date can be #iso #sloDate #shortSloDate"
	^self adaptor format: aSymbol! !

!WebFormElement methodsFor: 'private-events'!
handleSubmitEvent: aWebEvent
	"if there is some onSubmit action registered from that form element. Called after whole form is submitted"
	| handler |
	handler := self eventHandlerFor: #submit.
	handler isNil ifTrue: [^nil].
	^handler handleEvent: aWebEvent! !

!WebFormElement methodsFor: 'testing'!
hasName
	^self name notNil and: [self name notEmpty]! !

!WebFormElement methodsFor: 'private'!
hasTag
	"form elements have always HTML tag"
	^true! !

!WebFormElement methodsFor: 'events'!
ignoreEnterKey
	"don't allow ENTER/RETURN key to submit a form unintentionally, for instance"
	"Prototype specific"
	self scriptAfter: 'Event.observe(''', self id, ''', ''keypress'', function(event) {
  		if (event.keyCode == Event.KEY_RETURN) { Event.stop(event); } } )'! !

!WebFormElement methodsFor: 'initialize-release'!
initNullAdaptor
	"not yet connected to model, just to hold a value"
	self adaptor: AidaModelNullAdaptor new! !

!WebFormElement methodsFor: 'initialize-release' stamp: ' 26/4/07 10:37'!
initialize
	self name: ''.
"	self app form registerFormElementsIn: self "! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isAutocompleteField
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isButton
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isCheckBox
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isDateInputField
	^false! !

!WebFormElement methodsFor: 'private'!
isDiv
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	"input field is empty or nil"
	| vlue |
	vlue := self object perform: self aspect.
	^vlue isNil 
		or: [((vlue isKindOf: String) and: [vlue isEmpty])
			or: [(vlue isKindOf: Number) and: [vlue = 0] ]]! !

!WebFormElement methodsFor: 'validation'!
isEntered
	"this input field is required and not empty. If not required it is entered even if empty"
	self isRequired ifFalse: [^true].
	^self adaptor changed
		ifTrue: [self adaptor isEmpty not] "changed value"
		ifFalse: [self isEmpty not] "old value"! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isFileInputField
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isFormElement
	^true! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isInputField
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isListBox
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isMenu
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isRadioButton
	^false! !

!WebFormElement methodsFor: 'validation'!
isRequired
	"this input field is required and must not stay empty"
	^self otherAt: #name ifAbsent: [false]! !

!WebFormElement methodsFor: 'private-events'!
isSingleFieldPost
	"is field Ajax posted immediatelly after change, as single one, not entire form"
	^self otherAt: #singleFieldPost ifAbsent: [false]! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/8/07 09:38'!
isStreamed
	"Post data from web request is streamed directly into output stream. 
	Only WebFileInputField can do that for now"
	^false! !

!WebFormElement methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isTextArea
	^false! !

!WebFormElement methodsFor: 'validation'!
isValid
	"form element (field) has a valid value"
	self adaptor isNil ifTrue: [^true].
	^self adaptor isValid! !

!WebFormElement methodsFor: 'attributes'!
max: aNumber
	"maximal value"
	^self attributesAt: #max put: aNumber printString! !

!WebFormElement methodsFor: 'attributes'!
min: aNumber
	"minimal value"
	^self attributesAt: #min put: aNumber printString! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name
	^self attributesAt: #name! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name: aString
	self attributesAt: #name put: aString! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
noTab
	"skip this form element when tabulating with TAB"
	"This attribute specifies the position of the current element in the tabbing order of that form"
	self tabIndex: 0.! !

!WebFormElement methodsFor: 'accessing'!
object
	^self adaptor subject! !

!WebFormElement methodsFor: 'events'!
onBlur: aJavascriptCode
	"when a form element loses focus either by mouse or tabulation"
	self attributesAt: #onBlur add: aJavascriptCode! !

!WebFormElement methodsFor: 'events-ajax'!
onBlurUpdate: anElement
	"after field looses focus, AJAX update anElement  "
	self onBlurUpdate: anElement with: nil.! !

!WebFormElement methodsFor: 'events-ajax'!
onBlurUpdate: anElement with: anArgObject
	"after field looses focus, update anElement by calling its creation method with an argument "
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	(self existScriptForEvent: #blur) ifFalse:
		[self onChange: (self scriptForEvent: #blur context: self context)].
	(self eventHandlerFor: #blur) 
		addUpdate: anElement with: anArgObject.! !

!WebFormElement methodsFor: 'events' stamp: ' 21/4/07 22:07'!
onChange: aJavascriptCode
	self attributesAt: #onChange add: aJavascriptCode! !

!WebFormElement methodsFor: 'private-events'!
onChangeAnnounce
	"field will be posted to server but not saved, just change will be announced to form"
	"Saved will be only if setSingleFieldPost was called before"
	(self existScriptForEvent: #change) ifFalse:
		[self onChange: (self scriptForEvent: #change context: self context)].
	(self eventHandlerFor: #change)
		addAcceptPostedInput! !

!WebFormElement methodsFor: 'events-ajax'!
onChangeClose
	"Current window (if popup) is closed after element change, its context also"
	(self existScriptForEvent: #change) ifFalse:
		[self onChange: (self scriptForEvent: #change context: self context)].
	(self eventHandlerFor: #change) 
		addCloseWindow.! !

!WebFormElement methodsFor: 'events-ajax'!
onChangePost
	"after field change immediatelly post its value to server and save it to 
	domain object, if field is valid and complete"
	self setSingleFieldPost.   "so that field will actually be saved, otherwise change will be just announced"
	self onChangeAnnounce.! !

!WebFormElement methodsFor: 'events-actions' stamp: 'janko 1/2/2012 15:53'!
onChangePostAndDo: aBlock
	"execute that block when this form field is changed"
	self onChangePost.	
	(self eventHandlerFor: #change) 
		addActionBlock: aBlock.! !

!WebFormElement methodsFor: 'events-ajax'!
onChangePostAndUpdate: anElement
	"after field change, post contents to server and AJAX update anElement  "
	self onChangePostAndUpdate: anElement with: nil! !

!WebFormElement methodsFor: 'events-ajax'!
onChangePostAndUpdate: anElement with: anArgObject
	"after field change, post contents to server and AJAX update anElement  with a parameter"
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onChangePost.	
	(self eventHandlerFor: #change)
		addUpdate: anElement with: anArgObject.! !

!WebFormElement methodsFor: 'events' stamp: 'np 10/20/2008 16:41'!
onChangeReload
	"reload current page on change off that form element"
	self onChange: 'window.location.reload()'.! !

!WebFormElement methodsFor: 'events-ajax'!
onChangeUpdate: anElement
	"after field change update anElement on browser  "
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onChange: 
		(self scriptForEvent: #change context: self context).
	(self eventHandlerFor: #change) 
		addUpdate: anElement with: nil.! !

!WebFormElement methodsFor: 'events'!
onEnterTabulate
	"Prototype specific"
	"It goes to the next element in tabulation order"
	"This allows ENTER key to be used for tabulation, like a TAB. "
	ScriptaculousLibrary ensurePrototype.
	self enterTabForm: self form. "to make tabulation script late, just before htmlPrint"! !

!WebFormElement methodsFor: 'events'!
onEnterTabulateIn: aWidgetOrApp
	"Prototype specific"
	"It goes to the next element in tabulation order"
	"This allows ENTER key to be used for tabulation, like a TAB. "
	"Because widgets are nested, you can specify more exactly in which widget's form to tabulate"
	ScriptaculousLibrary ensurePrototype.
	self enterTabForm: aWidgetOrApp form. "to make tabulation script late, just before htmlPrint"! !

!WebFormElement methodsFor: 'events'!
onFocus: aJavascriptCode
	"when a form element receives a focus either by mouse or tabulation"
	self attributesAt: #onFocus add: aJavascriptCode! !

!WebFormElement methodsFor: 'events-ajax'!
onFocusUpdate: anElement
	"after field gets focus, AJAX update anElement  "
	self onFocusUpdate: anElement with: nil! !

!WebFormElement methodsFor: 'events-ajax'!
onFocusUpdate: anElement with: anArgObject
	"after field gets focus, update anElement by calling its creation method with an argument "
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self onFocus: 
		(self scriptForEvent: #focus context: self context).
	(self eventHandlerFor: #focus) 
		addUpdate: anElement with: anArgObject.! !

!WebFormElement methodsFor: 'events-ajax'!
onKeyPressPostAndUpdate: anElement
	"after any key press in a field, post input value to server and update anElement"
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self setSingleFieldPost.   "so that field will actually be saved, otherwise change will be just announced"
	self onKeyPress: 
		(self scriptForEvent: #keypress context: self context).
	(self eventHandlerFor: #keypress)
		addAcceptPostedInput;
		addUpdate: anElement with: nil.! !

!WebFormElement methodsFor: 'events-ajax'!
onKeyUpPostAndUpdate: anElement
	"after  key up in a field, post input value to server and update anElement"
	anElement isNil ifTrue: [self error: 'no element to update!!'].
	anElement ensureId. 
	self setSingleFieldPost.   "so that field will actually be saved, otherwise change will be just announced"
	self onKeyUp: 
		(self scriptForEvent: #keyup context: self context).
	(self eventHandlerFor: #keyup)
		addAcceptPostedInput;
		addUpdate: anElement with: nil.! !

!WebFormElement methodsFor: 'events'!
onSelect: aJavascriptCode
	"when some text is selected in a form element"
	self attributesAt: #onSelect add: aJavascriptCode! !

!WebFormElement methodsFor: 'attributes' stamp: 'janko 7/10/2011 19:41'!
placeHolder: aString
	"a descriptive hint what to enter in this field"
	self attributesAt: #placeholder put: aString! !

!WebFormElement methodsFor: 'private-streaming'!
prepareToHtmlStreamingOn: aSession
	super prepareToHtmlStreamingOn: aSession.
	self addEnterTabScriptIfNessesary.! !

!WebFormElement methodsFor: 'private' stamp: 'janko 11/2/2011 21:01'!
printString
	"Squeak specific"
	^'a', self class printString, 
		(self id notNil ifTrue: 
			[(String with: Character cr), '     id: ', self id] ifFalse: ['']),
		((self attributesAt: #class)  notNil ifTrue: 
			[(String with: Character cr), '     class: ', (self attributesAt: #class) printString ] ifFalse: ['']),
		(self name notNil ifTrue: 
			[(String with: Character cr), '     name: ', self name] ifFalse: ['']),
		(String with: Character cr), '     value: ' , 
			(self value printString truncateWithElipsisTo:  30),  "Squeak specific"
		(String with: Character cr), '     buffered: ' , 
			(self adaptor buffer printString truncateWithElipsisTo: 30),  "Squeak specific"
		(String with: Character cr), '     changed: ', self adaptor changed printString,
		(String with: Character cr), '     valid: ', self isValid printString! !

!WebFormElement methodsFor: 'attributes'!
readOnly
	"this form element od read only, cam be tabed in but not changed"
	self attributesAt: #readonly put: nil "just attribute name, no value"! !

!WebFormElement methodsFor: 'validation'!
required
	"this input field is requied and must not stay empty"
	self otherAt: #name put: true! !

!WebFormElement methodsFor: 'model adapting'!
save
	"save value of this form element (field) to the domain model. Check with #isValid if value pass 
	validation othervise exception is raised!!"
	self shouldSanitize ifTrue: [self adaptor sanitize]. "remove <script> with possibly malicious code"
	^self adaptor save! !

!WebFormElement methodsFor: 'private-events'!
scriptForEvent: anEventSymbol context: aWebContext
	"send current value of this form element too"
	"delay sending for few ms so that value will actuall be set"
	^'setTimeout(function() {aidaEvent(''', anEventSymbol asString, ''',''', 
		(self ensureId; id) asString, ''',''', 
		aWebContext id asString, ''',',
		'document.getElementById(''', self id asString, ''').value);}, 100);'! !

!WebFormElement methodsFor: 'events'!
select
	"select a whole input. Be sure to focut it first!!"
	self ensureId.
	self scriptAfter: 'document.getElementById(''', self id, ''').select' 
"	self scriptAfter: 'Field.select(''', self id, ''')' "! !

!WebFormElement methodsFor: 'private-events'!
setSingleFieldPost
	"field is Ajax posted immediatelly after change, as single one, not entire form"
	^self otherAt: #singleFieldPost put: true! !

!WebFormElement methodsFor: 'private'!
setValue: aString
	"preset the value of this form element, without set aspect adaptor"
	self notYetImplemented. "obsolete, just to catch senders!!"! !

!WebFormElement methodsFor: 'private'!
shouldSanitize
	"sanitize input from <script> and similar input to prevent entering XSS and similar malicious code"
	(self adaptor buffer isKindOf: String) ifFalse: [^false].
	^(self otherAt: #NoSanitizing ifAbsent: [false]) not! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
tabIndex
	"This attribute specifies the position of the current element in the tabbing order of that form"
	^(self attributes at: #tabindex ifAbsent: [^nil]) asInteger! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
tabIndex: aNumber
	"This attribute specifies the position of the current element in the tabbing order 
	for the current document"
	self attributes at: #tabindex put: aNumber printString! !

!WebFormElement methodsFor: 'private'!
tag
	^self subclassResponsibility! !

!WebFormElement methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
type: aString
	"set the type of  this form element"
	self attributesAt: #type put: aString! !

!WebFormElement methodsFor: 'events-ajax'!
update
	"basic elements don't need to be recreated, just stream them to HTML with changed attributes again"
	self id isNil ifTrue: [self error: 'web element to update must have id in advance, use #ensureId !!'].
	self prepareToHtmlStreamingOn: self session. "to prepare again"
	self session queueUpdateElement: self. "send immediatelly via WebSocket if open, or in Ajax response"
	^self! !

!WebFormElement methodsFor: 'private-events'!
updateWith: anArgumentObject
	self error: 'cannot update basic web element with an argument'! !

!WebFormElement methodsFor: 'validation'!
validIfTrue: aBlock
	"set the validation block to this form element . It accepts a value as argument and It must return true if entered 
	value is regarded as valid"
	"example for month verification block: [:value | value asInteger between: 1 and: 12 ] "
	self adaptor validationBlock: aBlock! !

!WebFormElement methodsFor: 'accessing'!
value
	^self adaptor value! !

!WebFormElement methodsFor: 'accessing'!
value: aValue
	"set the value of this form element"
	self adaptor value:  aValue.! !

!WebFormElement class methodsFor: 'auto type converting'!
autoConvertAndEncodeQuotes: aValue
	"auto convertion, character entitites encoding (just quotes) for form elements"
	"while UTF-8 encoding is done in WebElement>>printAttribute:value:on:for: !! "
	| vlue |
	vlue := WebFormElement autoConvertToString: aValue. "dates, numbers etc."
	vlue := AIDASite encodeQuoteEntitiesIn: vlue.               "char entity encoding for double quote '' "
	^vlue! !

!WebFormElement class methodsFor: 'auto type converting'!
autoConvertAndEncodeValue: aValue
	"auto convertion, character entitites encoding for form elements"
	"while UTF-8 encoding is done in WebElement>>printAttribute:value:on:for: !! "
	| vlue |
	vlue := WebFormElement autoConvertToString: aValue. "dates, numbers etc."
	vlue := AIDASite encodeCharEntitiesIn: vlue.               "char entity encoding for < > & '' "
	^vlue! !

!WebFormElement class methodsFor: 'auto type converting' stamp: 'janko 8/3/2011 18:53'!
autoConvertString: aString toObject: anObject
	"try to convert string depending on object type"
	"Squeak specific"
	(anObject isKindOf: String) ifTrue: [^aString].
	(anObject isKindOf: Integer) ifTrue: [^aString asInteger].
	(anObject isKindOf: ScaledDecimal) ifTrue: [^aString asScaledDecimal: anObject scale].
	(anObject isKindOf: Date) ifTrue: [^Date readSloFrom: aString readStream].
	anObject isNil ifTrue: [^aString].
	^aString! !

!WebFormElement class methodsFor: 'auto type converting' stamp: 'jm 4/22/2009 23:38'!
autoConvertToString: anObject
	"try to convert object to string depending on object type"
	"Squeak specific!!"
	(anObject isKindOf: String) ifTrue: [^anObject].
	(anObject isKindOf: Integer) ifTrue: [^anObject printString].
	(anObject isKindOf: Point) ifTrue: [^anObject printDotString]. "???" "Squeak specific!!"
	(anObject isKindOf: Date) ifTrue: [^anObject shorterPrintSloString].
	anObject aidaIsAssociation ifTrue: [^anObject]. "multilingual"
	^anObject printString! !

!WebFormElement class methodsFor: 'instance creation' stamp: 'JM 4/25/2007 22:23'!
new
	^super basicNew initialize! !

!WebGeolocation methodsFor: 'accessing'!
accuracy
	"accuracy of latitude and longitude, in meters"
	^accuracy! !

!WebGeolocation methodsFor: 'private'!
accuracy: anInteger
	accuracy := anInteger! !

!WebGeolocation methodsFor: 'accessing-additional'!
altitude
	"the height of the user's location, in meter"
	^altitude! !

!WebGeolocation methodsFor: 'private'!
altitude: anInteger
	altitude := anInteger! !

!WebGeolocation methodsFor: 'accessing-additional'!
altitudeAccuracy
	"altitude accuracy in meters, nil if no altitude provided"
	^altitudeAccuracy! !

!WebGeolocation methodsFor: 'private'!
altitudeAccuracy: anInteger
	altitudeAccuracy := anInteger! !

!WebGeolocation methodsFor: 'accessing-additional'!
heading
	"direction of travel, in degrees relative to true north"
	^heading! !

!WebGeolocation methodsFor: 'private'!
heading: anInteger
	heading := anInteger! !

!WebGeolocation methodsFor: 'accessing'!
latitude
	 "distance north or south of equator, in decimal degrees"
	^latitude! !

!WebGeolocation methodsFor: 'private'!
latitude: aDouble
	latitude := aDouble! !

!WebGeolocation methodsFor: 'accessing'!
longitude
	^longitude! !

!WebGeolocation methodsFor: 'private'!
longitude: aDouble
	longitude := aDouble! !

!WebGeolocation methodsFor: 'accessing-additional'!
speed
	"ground speed in meters per second"
	^speed! !

!WebGeolocation methodsFor: 'private'!
speed: anInteger
	speed := anInteger! !

!WebGeolocation methodsFor: 'accessing'!
timestamp
	"timestamp of location"
	^timestamp! !

!WebGeolocation methodsFor: 'private'!
timestamp: aSpTimestamp
	timestamp := aSpTimestamp! !

!WebGeolocation class methodsFor: 'instance creation'!
newFromJSON: aString
	| html5Position coords location |
	html5Position := WebJSON parse: aString.
	coords := html5Position at: 'coords'.
	location := self new.
	location 
		latitude: (coords at: 'latitude');
		longitude: (coords at: 'longitude');
		accuracy: (coords at: 'accuracy');
		altitude: (coords at: 'altitude' ifAbsent: [nil]);
		altitudeAccuracy: (coords at: 'altitudeAccuracy' ifAbsent: [nil]);
		speed: (coords at: 'speed' ifAbsent: [nil]);
		heading: (coords at: 'heading' ifAbsent: [nil]);
		timestamp: SpTimestamp now "(SpTimestamp fromUTCString: (html5Position at: 'timestamp'))".
	^location! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
data
	data isNil ifTrue: [data := #(120 200 500 230 90 80 200 100 40)].
	^data! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
data: anArray 
	data := anArray! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
displayOn: aGraphicsContext
	| rectangle |
	self initGraphics.
	rectangle := Rectangle origin: 2 @ 2 extent: (self width - 4) @ (self height - 4).
	self graphics add: rectangle asStroker.
	self drawAxle.
	self drawYPoints.
	self graph.
	self drawTitle.
	self graphics displayOn: aGraphicsContext.! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
distance
	^(self xRightPosition - self xLeftPosition) // self data size! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
drawAxle
	| points yAxis xAxis z c a grayLine blackLine b |
	z := self xLeftPosition.
	c := self yBottomPosition.
	b := self yTopPosition.
	a := self xRightPosition.
	points := List new: 2.
	points add: z @ (self yTopPosition - 10);
		add: z @ (c + 5).
	yAxis := Spline controlPoints: points.
	points := List new: 2.
	points add: (z - 5) @ c;
		add: a @ c.
	xAxis := Spline controlPoints: points.
	graphics add: yAxis asStroker;
		add: xAxis asStroker.
	b to: c - ((c - b) // 5)
		by: (c - b) // 5
		do: 
			[:x | 
			points := List new: 2.
			points add: (z + 1) @ x;
				add: a @ x.
			grayLine := Spline controlPoints: points.
			graphics add: ((GraphicsAttributesWrapper on: grayLine asStroker)
						attributes: (GraphicsAttributes new paint: ColorValue veryLightGray)).
			points := List new: 2.
			points add: (z - 5) @ x;
				add: z @ x.
			blackLine := Spline controlPoints: points.
			graphics add: blackLine asStroker]! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
drawGraphWindow
	"WebGraph new drawGraphWindow"
	| win rectangle |
	win := ScheduledWindow new.
	win label: 'Graf obiskov na spletno stran'.
	win minimumSize: self width @ self height.
	graphics := CompositePart new.
	rectangle := Rectangle origin: 2 @ 2 extent: (self width - 4) @ (self height - 4).
	graphics add: rectangle asStroker.
	self drawAxle.
	self drawYPoints.
	self graph.
	self drawTitle.
	win component: (BoundedWrapper on: graphics).
	win open! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
drawTitle
	| aTitle |
	aTitle:= (self title asComposedText compositionWidth: (self width-40)) centered.
	self graphics add: aTitle at: 20@10! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
drawYPoints
	| string c stepOne step mark b |
	c := self yBottomPosition.
	b := self yTopPosition.
	stepOne := 0.
	step :=self stepFor:(self getMax at: 1).
	c to: b
		by: (0-((c - b) // 5))
		do: 
			[:x | 
			string := stepOne printString.
			mark := (string asText emphasizeAllWith: #small) asComposedText.
			mark compositionWidth: 30.
			mark rightFlush.
			graphics add: mark at: (self xLeftPosition - 40) @ ( x -13).
			stepOne := stepOne + step]! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
getMax
	| b max1 maxim maxAt |
	max1 := 0.
	b := self data size.
	1 to: b
		do: [:x | (data at: x) > max1 ifTrue: 
					[max1 := data at: x.
					maxAt := x]].
	maxim := max1.
	^Array with: maxim with: maxAt.! !

!WebGraph methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
graph
	"WebGraph new drawGraph"

	| aData aRectangle z c |
	z := self xLeftPosition + 1.
	c := self yBottomPosition.
	1 to: self data size
		do: 
			[:x | 
			aData := data at: x.
			aRectangle := Rectangle left: z
						right: z + self distance - 2
						top: c - (self heightInPixelsFor: aData)
						bottom: c.
			z := z + self distance.
			graphics add: ((GraphicsAttributesWrapper on: aRectangle asFiller)
						attributes: (GraphicsAttributes new paint: ColorValue blue))]! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
graphics
	graphics isNil ifTrue: [self initGraphics].
	^graphics! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
height	
	^300! !

!WebGraph methodsFor: 'transformations' stamp: ' 21/4/07 22:07'!
heightInPixelsFor:  aNumber

	^(((self yBottomPosition - self yTopPosition) / self margin) * aNumber) truncated

"
|graf|
graf := WebGraf new.
graf data: #(10 20 30 40 50).
graf heightInPixelsFor: 15.
"! !

!WebGraph methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initGraphics
	graphics := CompositePart new! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
margin
	margin isNil ifTrue: [self margin: (self marginFor: (self getMax at: 1))].
	^margin! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
margin: aNumber

	margin := aNumber.! !

!WebGraph methodsFor: 'transformations' stamp: ' 21/4/07 22:07'!
marginFor:  aNumber

	| margin |
	aNumber < 10 ifTrue: [^10].
	margin := 10 ** ((aNumber log: 10) truncated + 1).
	margin = (aNumber * 10) ifTrue: [^margin / 10].
	aNumber > (margin / 2) ifTrue: [^margin].
	aNumber > (margin / 4) ifTrue: [^margin / 2].
	^margin / 4.

"WebGraf new marginFor: 1001"! !

!WebGraph methodsFor: 'transformations' stamp: ' 21/4/07 22:07'!
stepFor:  aNumber

	^(self marginFor: aNumber) / 5

"WebGraf new stepFor: 1001"! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title 
	title isNil ifTrue: [title := 'Here comes the title'].
	^title! !

!WebGraph methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
title: aString
	title:= aString! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
width
	^500! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
xLeftPosition
	^50! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
xRightPosition
	^self width - 20! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
yBottomPosition
	^self height - 30! !

!WebGraph methodsFor: 'constants' stamp: ' 21/4/07 22:07'!
yTopPosition
	^40! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addNewColumn
	self columns add: ((WebGridColumn newOn: self) id: (self columns size + 1))! !

!WebGrid methodsFor: 'private' stamp: 'np 10/17/2008 17:40'!
aidaDeepCopyNotIn: aDict 
	^ nil! !

!WebGrid methodsFor: 'private-building'!
ajaxUpdateWith: aParmString
	| parm |
"	(aParmString isNil and: [self aspect isNil]) ifTrue:
		[self error: 'This WebGrid not updatable, set collection with collectionAspect:for: instead!!'].
"	(aParmString notNil and: ['sort-*' match: aParmString]) ifTrue: 
		[parm := aParmString readStream upTo: $-; upToEnd.
		(self columnWithId: parm asInteger) sort. "or toogle sort order"
		self page: 1]. "always back to first page after sort change"
	(aParmString notNil and: ['page-*' match: aParmString]) ifTrue: 
		[parm := aParmString readStream upTo: $-; upToEnd.
		self page: parm asInteger]. 
	^self  "actuall update happens in second, streaming phase"! !

!WebGrid methodsFor: 'private'!
aspect
	^aspect! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
buildPageSelectionRow
	| fullLength |
	self newRow. self row class: #tablePageSelection.
	self cell colspan: self columns size; align: #center.
	fullLength := self filtered size.
	1 to: (fullLength // self rowsOnPage) + 1 do: [:inx |
		inx = self page 
			ifTrue: [self cell addTextBold: inx printString]
			ifFalse: [self cell add: (self linkForPage: inx)].
		self cell addText: ' | '].! !

!WebGrid methodsFor: 'private-building'!
buildTable
	self form initElements. 
	self initTable. "here, not in form!! But it will be added to form too"
	self table class: self cssClass. 
	self width notNil ifTrue: [self table width: self width].
	self buildTableHeader.
	self setCollectionFromAspect. "if aspect set instead of colelction directly"
	self sortColumnsIfNessesary.
	self hasFilters 
		ifTrue: [self buildTableFilterRow. self filterRows]
		ifFalse: [self filtered removeAll; addAll: self collection]. "filtered is what is shown, not collection!!"
	self buildTableRows.
	self needsSummary ifTrue: [self buildTableSummaryRow].
	self hasPages ifTrue: [self buildPageSelectionRow].
	self registerFormElements.  "registrations of grid form elements"! !

!WebGrid methodsFor: 'private-building'!
buildTableFilterRow
	| field |
	self newRow.
	self columns do: [:each | 
		each align notNil ifTrue: [self cell align: each align].
		each filter notNil ifTrue: 
			[field := WebDelayedField aspect: #filter for: each size: 10.
			each filterWidth notNil ifTrue: [field size: each filterWidth].
			(self wasFilterChangedFor: each on: field) ifTrue: [field focus].
			field onChangePostAndUpdate: self.
			field blockEnterKey.
			self cell add: field].
		each ~= self columns last ifTrue: [self newCell] ].! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
buildTableHeader
	self columns do: [:each | 
		self cell setHeader.
		each align notNil ifTrue: [self cell align: each align].
		each name notNil ifTrue: [self cell add: (self sortLinkColumn: each)].
		each isSortedAscending ifTrue: [self cell addGif: #arrowOrangeUpGif].
		each isSortedDescending ifTrue: [self cell addGif: #arrowOrangeDownGif].
		each ~= self columns last ifTrue: [self newCell] ].! !

!WebGrid methodsFor: 'private-building'!
buildTableRows
	| inx objects pageLength |
	self collection notEmpty ifTrue: [self newRow].
	objects := self filtered.
	self resetSummary. inx := 0. objects do: [:object | inx := inx + 1. "summary in advance!!"
		self columns do: [:column | self summaryForColumn: column index: inx object: object]].
	inx := 1. pageLength := self hasPages ifTrue: [self rowsOnPage] ifFalse: [objects size]. 
	(self page-1) * pageLength > objects size ifTrue: [self page: 1]. 
	objects := objects 
		copyFrom: ((self page-1) * pageLength)+1 to: (self page * pageLength min: objects size).
	objects do: [:object |
		self setRowAttributesFor: self row object: object.
		self columns do: [:column |
			(inx = 1 and: [column width notNil]) ifTrue: [self cell width: column width].
			self printColumn: column index: inx object: object in: self cell.
			column ~= self columns last ifTrue: [self newCell] ].
		inx ~= objects size ifTrue: [self newRow].
		inx := inx + 1 ]! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
buildTableSummaryRow
	self newRow. self row class: #summary.
	self columns do: [:each | 
		each align notNil ifTrue: [self cell align: each align].
		each name notNil ifTrue: [self cell addText: each summaryValue].
		each ~= self columns last ifTrue: [self newCell] ].! !

!WebGrid methodsFor: 'private-building'!
canFilterObject: anObject onColumns: aColumnsToFilter
	aColumnsToFilter do: [:column || value |
		column aspect notNil ifTrue: 
			[value := anObject perform: column aspect].
		column addBlock notNil ifTrue:   "to filter addBlocks too!!"
			[value := (column addBlock value: anObject) asString].
		value notNil ifTrue: 
			[value := WebFormElement autoConvertToString: value.
			value notNil ifTrue:
				[((column filter, '*') match: value) ifFalse: [^false]]  ] ] .
	^true! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkboxes
	"nil or column"
	^self settingsAt: #checkboxesColumn ifAbsent: [nil]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkboxes: aColumnId
	^self settingsAt: #checkboxesColumn put: aColumnId! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkboxesCollection
	"collection of checked row objects"
	^self settingsAt: #checkboxesCollection ifAbsent: [nil]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkboxesCollection: aCollection
	^self settingsAt: #checkboxesCollection put: aCollection! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
checkboxesColumn: aColumnId collection: aCollection
	"this column will have checboxes. Checked row objects will be in aCollection.
	preselected rows are done from initial aCollection"
	self checkboxes: aColumnId.
	self checkboxesCollection: aCollection! !

!WebGrid methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
collection
	collection isNil ifTrue: [^#()].
	^collection! !

!WebGrid methodsFor: 'accessing'!
collection: aCollection
	"to be Ajax updatable with fresh content use #collectionAspect:for: instead!!"
	collection := aCollection! !

!WebGrid methodsFor: 'accessing'!
collectionAspect: aCollectionMethodSymbol for: anObject
	"Wse this way for updatable grids, instread of setting a collection directy!!"
	"When Ajax update request comes, aspect of this object is called to get a fresh collection"
	aspect := aCollectionMethodSymbol.
	object := anObject.! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
column: aColumnId addBlock: aBlock
	"this block will be called with current row object as an argument. 
	It must return kind of WebElement which will be added to the table cell"
	self columns size < aColumnId ifTrue: [self addNewColumn].
	(self columns at: aColumnId) addBlock: aBlock! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
column: aColumnId viewBlock: aBlock
	"this block will be called with current row object as an argument. It must return plain string!!"
	self columns size < aColumnId ifTrue: [self addNewColumn]. "?"
	(self columns at: aColumnId) viewBlock: aBlock! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnAlign: anArrayOfSymbols
	"#left #right #center, nil if default left is used"
	| inx |
	inx := 1.
	anArrayOfSymbols do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) align: each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnAspects: anArrayOfSymbols
	"methods to be called for each column on every object in collection"
	| inx |
	inx := 1.
	anArrayOfSymbols do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) aspect: each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnFilters: anArrayOfBooleanOrNumbers
	"row with filter input fields, put true or field width on a column to add filter"
	| inx |
	inx := 1.
	anArrayOfBooleanOrNumbers do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		each notNil ifTrue: [(self columns at: inx) setFilter].
		(each notNil and: [each class ~= True "but number"])  
			ifTrue: [(self columns at: inx) filterWidth: each].
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnLinkAspects: anArrayOfSymbols
	"url link to an aspects of an object. Specify views with separate columnLinkViews: method"
	| inx |
	inx := 1.
	anArrayOfSymbols do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) linkAspect:  each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnLinkViews: anArrayOfSymbols
	"link to an aspect of object(if set with columnLinks:, otherwise to object itself) with a view 
	will be shown in thi column"
	| inx |
	inx := 1.
	anArrayOfSymbols do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) linkView:  each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnNames: anArrayOfStrings
	"set names of columns to be shown in header of table"
	| inx |
	inx := 1.
	anArrayOfStrings do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) name: each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
columnWidth: anArrayOfNumbers
	"width of column or nil."
	| inx |
	inx := 1.
	anArrayOfNumbers do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) width: each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
columnWithId: aNumber
	aNumber > self columns size ifTrue: [^nil].
	^self columns at: aNumber! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
columns
	columns isNil ifTrue: [self initColumns].
	^columns! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
cssClass
	^self settingsAt: #cssClass ifAbsent: [self defaultCssClass]! !

!WebGrid methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
defaultCssClass
	^#webGrid! !

!WebGrid methodsFor: 'accessing' stamp: 'np 5/7/2008 17:37'!
defaultWidth
	^1 "100%"! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
endTagFor: anObject
	(self rowBoldBlock notNil and: [self rowBoldBlock value: anObject]) ifTrue: [^'</b>'].
	^''! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
filterRow: anArrayOfBooleanOrNumbers
	"OBSOLETE!!"
	"row with filter input fields, put true or field width on a column to add filter"
	self columnFilters: anArrayOfBooleanOrNumbers! !

!WebGrid methodsFor: 'private-building'!
filterRows
	| columnsToFilter | 
	columnsToFilter := self columns select: [:each | each isFilterEntered]. 
	self filtered removeAll; addAll: 
		(columnsToFilter notEmpty
			ifTrue: [(self collection select: [:object | 
				self canFilterObject: object onColumns: columnsToFilter])] 
			ifFalse: [self collection])! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
filtered
	"objects which pass filter criteria. if nil, filters are not set"
	filtered isNil ifTrue: [self initFiltered].
	^filtered! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
filtered: aCollection
	filtered := aCollection! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
filteredCollection: aCollection
	"for external access to filtered rows only"
	filtered := aCollection! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
hasFilters
	"any column has a filter"
	^self columns contains: [:each | each filter notNil].! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
hasNoZeros
	"don't show zeros"
	^self settingsAt: #noZeros ifAbsent: [false]! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
hasPages
	^self rowsOnPage notNil and: [self collection size > self rowsOnPage].! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
hasShortDates
	"year in two digits only"
	^self settingsAt: #shortDates ifAbsent: [false]! !

!WebGrid methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initColumns
	columns := OrderedCollection new! !

!WebGrid methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initFiltered
	filtered isNil 
		ifTrue: [filtered := OrderedCollection new]
		ifFalse: [filtered removeAll]! !

!WebGrid methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initSettings
	settings := Dictionary new.! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
lastColumn
	^self columns notEmpty ifTrue: [self columns last] ifFalse: [nil].! !

!WebGrid methodsFor: 'private-building'!
linkForPage: aNumber
	| app linkTarget dummyLink |
	app := self app.
	linkTarget := app isStandaloneApp ifTrue: [app class] ifFalse: [app observee].
	dummyLink := WebLink text: aNumber printString linkTo: (Array with: linkTarget with: '-').
	app inDefaultView ifFalse: [dummyLink view: app view].
	dummyLink onClickUpdate: self with: 'page-', aNumber printString.
	^dummyLink! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
needsSummary
	"summary row needed or not"
	^self columns contains: [:each | each needsSummary].! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
noZeros
	"don't show if value is zero"
	^self settingsAt: #noZeros put: true! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
numbering
	"false or column"
	^self settingsAt: #numberingColumn ifAbsent: [nil]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
numbering: aColumnId
	"false or column"
	^self settingsAt: #numberingColumn put: aColumnId! !

!WebGrid methodsFor: 'private'!
object
	^object! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
page
	"number of a page currently shown"
	page isNil ifTrue: [self page: 1].
	^page! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
page: aNumber
	page := aNumber! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: aWebElement
	"self buildTable." "build just before rendering!!"
	^super parent: aWebElement! !

!WebGrid methodsFor: 'private-building'!
prepareToHtmlStreamingOn: aSession
	super prepareToHtmlStreamingOn: aSession.
	self buildTable! !

!WebGrid methodsFor: 'private-building'!
printCheckboxIndex: aNumber object: anObject in: anElement
	| field |
	field := WebCheckBox newForObject: anObject from: self checkboxesCollection.
"	self app form registerFormElementsIn: field.  "
	anElement add: field.! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
printColumn: aColumn index: aNumber object: anObject in: anElement
	| start |
	aColumn align notNil ifTrue: [anElement align: aColumn align].
	aColumn isNumbered  ifTrue: 
		[start := self hasPages ifTrue: [(self page-1) * self rowsOnPage] ifFalse: [0].
		^self printNumber: start+aNumber object: anObject in: anElement].
	aColumn isCheckboxed  ifTrue: [^self printCheckboxIndex: aNumber object: anObject in: anElement].
	aColumn hasLink ifTrue: [^self printLinkTo: anObject column: aColumn in: anElement]. 
	aColumn hasAddBlock ifTrue: [^anElement add: (aColumn addBlock value: anObject)].
	anElement addText: 
		(self startTagFor: anObject), (aColumn viewBlock value: anObject), (self endTagFor: anObject)! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
printLinkTo: anObject column: aColumn in: anElement
	| view object linkText |
	view := aColumn linkView notNil ifTrue: [aColumn linkView] ifFalse: [#main].
	object := aColumn linkAspect notNil 
		ifTrue: [anObject perform: aColumn linkAspect] ifFalse: [anObject].
	linkText := (self startTagFor: anObject), (aColumn viewBlock value: anObject), 
		(self endTagFor: anObject).
	object notNil
		ifTrue: [anElement addLinkTo: object text: linkText view: view]
		ifFalse: [anElement addText: linkText]! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
printNumber: aNumber object: anObject in: anElement
	anElement addText: 
		(self startTagFor: anObject), aNumber printDotString, '.', (self endTagFor: anObject)! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
removeLastColumn
	self columns notEmpty ifTrue: [self columns remove: self lastColumn].! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
representBinaryOn: writer
	^0! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
resetSummary
	self columns do: [:each | each resetSummary].! !

!WebGrid methodsFor: 'private-row blocks'!
rowBlueBlock
	^self settingsAt: #rowBlueBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowBlueIfTrue: aBlock
	^self settingsAt: #rowBlueBlock put: aBlock! !

!WebGrid methodsFor: 'private-row blocks'!
rowBoldBlock
	^self settingsAt: #rowBoldBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowBoldIfTrue: aBlock
	^self settingsAt: #rowBoldBlock put: aBlock! !

!WebGrid methodsFor: 'private-row blocks'!
rowGrayBlock
	^self settingsAt: #rowGrayBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowGrayIfTrue: aBlock
	^self settingsAt: #rowGrayBlock put: aBlock! !

!WebGrid methodsFor: 'private-row blocks'!
rowGreenBlock
	^self settingsAt: #rowGreenBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowGreenIfTrue: aBlock
	^self settingsAt: #rowGreenBlock put: aBlock! !

!WebGrid methodsFor: 'private-row blocks'!
rowRedBlock
	^self settingsAt: #rowRedBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowRedIfTrue: aBlock
	^self settingsAt: #rowRedBlock put: aBlock! !

!WebGrid methodsFor: 'private-row blocks'!
rowYellowBlock
	^self settingsAt: #rowYellowBlock! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
rowYellowIfTrue: aBlock
	^self settingsAt: #rowYellowBlock put: aBlock! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rowsOnPage
	^self settingsAt: #rowsOnPage! !

!WebGrid methodsFor: 'settings-row'!
rowsOnPage: anInteger
	"enables pagination of a table"
	^self settingsAt: #rowsOnPage put: anInteger! !

!WebGrid methodsFor: 'private-building'!
setCollectionFromAspect
	"if aspect set instead of colelction directly"
	self aspect isNil ifTrue: [^nil].
	self collection: (self object perform: self aspect)! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
setNumbering
	"in first column a sequential nr. of this row will be shown"
	self setNumberingOn: 1! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
setNumberingOn: aColumnId
	"in this column a sequential nr. of this row will be shown"
	self numbering: aColumnId! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
setRowAttributesFor: aWebRow object: anObject
	(self rowRedBlock notNil and: [self rowRedBlock value: anObject]) 
		ifTrue: [^aWebRow class: #red].
	(self rowGreenBlock notNil and: [self rowGreenBlock value: anObject]) 
		ifTrue: [^aWebRow class: #green].
	(self rowBlueBlock notNil and: [self rowBlueBlock value: anObject]) 
		ifTrue: [^aWebRow class: #blue].
	(self rowYellowBlock notNil and: [self rowYellowBlock value: anObject]) 
		ifTrue: [^aWebRow class: #yellow].
	(self rowGrayBlock notNil and: [self rowGrayBlock value: anObject]) 
		ifTrue: [^aWebRow class: #gray].! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
settings
	settings isNil ifTrue: [self initSettings].
	^settings! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
settingsAt: aSymbol
	^self settingsAt: aSymbol ifAbsent: [nil]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
settingsAt: aSymbol ifAbsent: aBlock
	^self settings at: aSymbol ifAbsent: aBlock! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
settingsAt: aSymbol put: aValue
	self settings at: aSymbol put: aValue! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
shortDates
	"year in two digits only"
	^self settingsAt: #shortDates put: true! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
sortAscendingOn: aColumnId
	"this column will be sorted ascending"
	self sortColumn: aColumnId.
	self sortOrder: #ascending! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
sortColumn
	"false or column"
	^self settingsAt: #sortColumn ifAbsent: [nil]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
sortColumn: aColumnId
	"false or column"
	^self settingsAt: #sortColumn put: aColumnId! !

!WebGrid methodsFor: 'private-building' stamp: 'np 9/29/2008 17:42'!
sortColumnsIfNessesary
	| column sortBlock | 
	 self sortColumn isNil ifTrue: [^nil].
	column := self columns at: self sortColumn.
	sortBlock := (self sortOrder = #ascending)
		ifTrue: [ [:a :b | (a perform: column aspect) < (b perform: column aspect)] ]
		ifFalse: [ [:a :b | (a perform: column aspect) > (b perform: column aspect)] ].
	self collection: (SortedCollection withAll: self collection sortBlock: sortBlock).! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
sortDescendingOn: aColumnId
	"this column will be sorted ascending"
	self sortColumn: aColumnId.
	self sortOrder: #descending! !

!WebGrid methodsFor: 'private-building'!
sortLinkColumn: aWebGridColumn
	| app linkTarget dummyLink |
	"Cannot sort a column which has an addBlock or is numbered"
	aWebGridColumn hasAddBlock ifTrue: [^WebText text: aWebGridColumn name].
	aWebGridColumn isNumbered ifTrue: [^WebText text: aWebGridColumn name].
	app := self app.
	linkTarget := app isStandaloneApp ifTrue: [app class] ifFalse: [app observee].
	dummyLink := WebLink text: aWebGridColumn name linkTo: (Array with: linkTarget with: '-').
	app inDefaultView ifFalse: [dummyLink view: app view].
	dummyLink onClickUpdate: self with: 'sort-', aWebGridColumn id printString.
	^dummyLink! !

!WebGrid methodsFor: 'settings-column' stamp: ' 21/4/07 22:07'!
sortOn: aColumnId
	"this column will be sorted ascending"
	self sortAscendingOn: aColumnId! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
sortOrder
	^self settingsAt: #sortOrder ifAbsent: [#ascending]! !

!WebGrid methodsFor: 'private' stamp: ' 21/4/07 22:07'!
sortOrder: aSymbol
	"#ascending or #descending"
	^self settingsAt: #sortOrder put: aSymbol! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
startTagFor: anObject
	(self rowBoldBlock notNil and: [self rowBoldBlock value: anObject]) ifTrue: [^'<b>'].
	^''! !

!WebGrid methodsFor: 'private-building'!
streamHtmlTo: aStream for: aRequest on: aSession
	"self buildTable." "not so late, build imediately after adding to some parent!!"
	self prepareToHtmlStreamingOn: aSession. "buildTable"
	aStream nextPutAll: self ident, '<div'. self streamAttributesTo: aStream for: aSession. 
	aStream nextPutAll: '>', self eol.
	elements notNil ifTrue: [elements do: [:element | 
		element notNil ifTrue: [element streamHtmlTo: aStream for: aRequest on: aSession] ] ].
	aStream nextPutAll: self ident, '</div>', self eol.! !

!WebGrid methodsFor: 'private-building' stamp: ' 21/4/07 22:07'!
summaryForColumn: aColumn index: aNumber object: anObject
	aColumn needsSummary ifFalse: [^nil].
	aColumn addToSummary: anObject.! !

!WebGrid methodsFor: 'settings-row' stamp: ' 21/4/07 22:07'!
summaryRow: anArrayOfSymbolsOrStrings
	"if you want a summary row, define for desired column: #sum, #count or 'some text' "
	| inx |
	inx := 1.
	anArrayOfSymbolsOrStrings do: [:each |
		self columns size < inx ifTrue: [self addNewColumn].
		(self columns at: inx) summaryType:  each.
		inx := inx + 1]! !

!WebGrid methodsFor: 'private-testing' stamp: ' 21/4/07 22:07'!
wasFilterChangedFor: aWebGridColumn on: anInputField
	| request vlue |
	request := self app session lastRequest.
	(request isAjaxRequest and: [request isPost]) ifFalse: [^false].
	request postKeysAndValuesDo: [:key :value |
		(('field', '*') match: key) ifTrue: [vlue := value] ].
	^vlue = aWebGridColumn filter! !

!WebGrid methodsFor: 'accessing' stamp: 'np 5/7/2008 17:37'!
width
	^self settingsAt: #width ifAbsent: [self defaultWidth]! !

!WebGrid methodsFor: 'accessing' stamp: 'np 5/7/2008 17:38'!
width: anInteger
	self settingsAt: #width put: anInteger! !

!WebGrid class methodsFor: 'instance creation' stamp: 'janko 11/21/2011 13:59'!
new
	^super basicNew
		initialize; "also build"
		creationMethod: #ajaxUpdateWith:  "this method will be called after ajax update"! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
addBlock
	^addBlock! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
addBlock: aBlock
	"result must be kind of WebElement which will be added to table cell"
	"block needs a row object as an argument"
	addBlock := aBlock! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addToSummary: anObject
	self summaryType = #count ifTrue: [^self summary: self summary + 1].
	self summaryType = #sum ifTrue:
		[^self summary: self summary + (anObject perform: self aspect)]! !

!WebGridColumn methodsFor: 'private' stamp: 'np 10/17/2008 17:40'!
aidaDeepCopyNotIn: aDict 
	^ nil! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
align
	^align! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
align: aSymbol
	align := aSymbol! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
aspect
	^aspect! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
aspect: aSymbol
	"a method to be called for this column on objects of current row in a collection"
	aspect := aSymbol! !

!WebGridColumn methodsFor: 'private' stamp: 'janko 8/8/2011 20:28'!
autoConvert: anObject
	(anObject class == Date and: [self parent hasShortDates]) 
		ifTrue: [^anObject shorterPrintSloString].
	(anObject class == SpDate) "Sport portable date"
		ifTrue: [^anObject shorterPrintSloString].
	(anObject class == SpTimestamp) "Sport portable timestamp"
		ifTrue: [^anObject printString].
	(anObject = 0 and: [self parent hasNoZeros]) ifTrue: [^''].
	^WebFormElement autoConvertToString: anObject! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
defaultViewBlock
	^[:object | 
		self aspect isNil ifTrue: [''] ifFalse: [self autoConvert: (object perform: self aspect) ] ]! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
filter
	^filter! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
filter: aString
	"show only rows with value starting with aString"
	filter := aString.
	self parent page: 1 "always to the first page after filter change!!"! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
filterWidth
	"filter input field width"
	^filterWidth! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
filterWidth: aNumber
	"filter input field width"
	filterWidth := aNumber! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
hasAddBlock
	^self addBlock notNil! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
hasLink
	^self linkAspect notNil | self linkView notNil! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
id
	^id! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
id: aSymbolOrNumber
	"by default it is a position (1st, 2nd etc.)"
	id := aSymbolOrNumber! !

!WebGridColumn methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isCheckboxed
	self parent checkboxes isNil ifTrue: [^false].
	^self parent checkboxes = self id! !

!WebGridColumn methodsFor: 'testing'!
isFilterEntered
	"filter criteria is entered"
	^self filter notNil and: [self filter trimBlanks notEmpty].! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isNumbered
	self parent numbering isNil ifTrue: [^false].
	^self parent numbering = self id! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isSortedAscending
	^(self parent sortColumn = self id) and: [self parent sortOrder = #ascending]! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isSortedDescending
	^(self parent sortColumn = self id) and: [self parent sortOrder = #descending]! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
linkAspect
	^linkAspect! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
linkAspect: aSymbol
	"if set, a link to aspect of  row object will be made"
	linkAspect := aSymbol.! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
linkView
	^linkView! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
linkView: aSymbol
	"if set, a link to aspect of  row object (spesified with linkAspect:) with that view will be shown"
	linkView := aSymbol.! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
name
	^name! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
name: aString
	"header name for that column"
	name := aString! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
needsSummary
	"summary row is needed"
	^self summaryType notNil! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
needsSummaryCount
	^self summaryType notNil and: [self summaryType = #count]! !

!WebGridColumn methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
needsSummarySum
	^self summaryType notNil and: [self summaryType = #sum]! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
parent
	^parent! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: anObject
	parent := anObject! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString
	^'aWebGridColumn id: ', self id printString! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
representBinaryOn: writer
	^0! !

!WebGridColumn methodsFor: 'private' stamp: ' 21/4/07 22:07'!
resetSummary
	(self summary notNil and: [self summary isKindOf: Number]) 
		ifTrue: [self summary: 0].! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
setFilter
	"this column will have a filter input field in a row below header"
	self filter: ''! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
sort
	self parent sortColumn == self id
		ifTrue: [self toggleSortOrder]
		ifFalse: [self sortAscending]! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
sortAscending
	self parent sortAscendingOn: self id! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
sortDescending
	self parent sortDescendingOn: self id! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
sorted
	^sorted! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
sorted: aSymbol
	"nil #ascending #descending"
	sorted := aSymbol! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
summary
	"here summary of all rows is acumulated, depending on summaryType"
	^summary! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
summary: aNumber
	"see comment in method #summary"
	summary := aNumber! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
summaryType
	"summary row is added with appropriate value, which can be:
	- #sum : sum of all cels in that column
	- #count : number of all rows, without heading and summary
	- 'some text' to be shown in this summary cell"
	^summaryType! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
summaryType: aSymbolOrString
	"see comment in method #summary"
	summaryType := aSymbolOrString.
	(aSymbolOrString = #count) | (aSymbolOrString = #sum)
		ifTrue: [self summary: 0]
		ifFalse: [self summary: aSymbolOrString].! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
summaryValue
	"for adding to a table"
	self summary isNil ifTrue: [^''].
	(self summary isKindOf: Number) ifTrue: [^self summary printDotString].
	^self summary "as text"! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
toggleSortOrder
	self parent sortColumn == self id
		ifTrue: [self parent sortOrder == #descending
			ifTrue: [self sortAscending]
			ifFalse: [self sortDescending]]
		ifFalse: [self sortAscending]! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
viewBlock
	viewBlock isNil ifTrue: [self viewBlock: self defaultViewBlock].
	^viewBlock! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
viewBlock: aBlock
	"how to show this column from collection. There is a default"
	"block needs a row object as an argument"
	viewBlock := aBlock! !

!WebGridColumn methodsFor: 'private-accessing' stamp: ' 21/4/07 22:07'!
width
	^width! !

!WebGridColumn methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
width: aNumber
	width := aNumber! !

!WebGridColumn class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newOn: aWebGrid
	^super new initialize parent: aWebGrid! !

!WebIFrame methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
frameBorder: aNumber
	"1 yes (default), 0 no"
	self attributesAt: #frameborder put: aNumber! !

!WebIFrame methodsFor: 'private'!
hasTag
	^true! !

!WebIFrame methodsFor: 'attributes' stamp: 'mivsek 1/10/2008 22:20'!
height: aNumber
	self attributesAt: #height put: aNumber printString! !

!WebIFrame methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
scrolling: aSymbol
	"#yes #no #auto (default)"
	self attributesAt: #scrolling put: aSymbol! !

!WebIFrame methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
size: aPoint
	"set the size of frame area in format width@height pixels"
	self width: aPoint x.
	self height: aPoint y.! !

!WebIFrame methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
src: anUrlString
	self attributesAt: #src put: anUrlString! !

!WebIFrame methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<iframe'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	aStream nextPutAll: '</iframe>'.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebIFrame methodsFor: 'attributes' stamp: 'mivsek 1/10/2008 22:21'!
width: aNumber
	self attributesAt: #width put: aNumber printString! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
alt: aString
	self attributes at: #alt put: aString! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
border: aNumber
	self attributesAt: #border put: aNumber printString! !

!WebImage methodsFor: 'private'!
hasTag
	^true! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
height: aNumber
	self attributesAt: #height put: aNumber printString! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
hspace: aNumber
	self attributesAt: #hspace put: aNumber printString! !

!WebImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
image
	^image! !

!WebImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
image: anImage
	"set the image object of WebImage. 
	If nil, then urlreference should exist for image somewhere else"
	image := anImage.! !

!WebImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
image: anImage align: aSymbol
	"set the image object of WebImage. and aligment"
	self image: anImage.
	self align: aSymbol! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
imageAlign: aSymbol
	"#left #center #right"
	self attributesAt: #align put: aSymbol asString! !

!WebImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
imageMap
	^imageMap! !

!WebImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
imageMap: anImageMap
	imageMap := anImageMap! !

!WebImage methodsFor: 'initialize-release' stamp: 'janko 3/21/2008 16:23'!
initialize
	self border: 0.
	self alt: ''.! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name: aString
	self attributesAt: #name put: aString! !

!WebImage methodsFor: 'private' stamp: 'janko 9/19/2011 14:30'!
prepareAttributesToPrintOn: aSession
	super prepareAttributesToPrintOn: aSession.
	self src: (self urlOnSession: aSession).
	self imageMap notNil ifTrue: [self usemap: self imageMap name].! !

!WebImage methodsFor: 'private'!
prepareAttributesToStreamOn: aSession
	super prepareAttributesToStreamOn: aSession.
	(self attributesAt: #src) notNil  "image source already set"
		ifFalse: [self src: (self urlOnSession: aSession)].
	self imageMap notNil ifTrue: [self usemap: self imageMap name].! !

!WebImage methodsFor: 'private'!
shouldIdent
	^false! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
size: aPoint
	"set the size of an image in format width@height"
	self width: aPoint x.
	self height: aPoint y.! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
src: aString
	self attributesAt: #src put: aString! !

!WebImage methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<img'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: self tagClosing.
	self imageMap notNil ifTrue: 
		[imageMap streamHtmlTo: aStream for: aRequest on: aSession].
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebImage methodsFor: 'private'!
urlForLiveImageOn: aSession
	 ^aSession site urlResolver halfUrlFor: self image! !

!WebImage methodsFor: 'private'!
urlForMethodImageOn: aSession
	 ^aSession site urlResolver halfUrlFor: self image! !

!WebImage methodsFor: 'private'!
urlOnSession: aSession
	self image isNil ifTrue: [^''].
	self image isString ifTrue: [^self image].
	(self image isKindOf: WebLiveImage) ifTrue: [^self urlForLiveImageOn: aSession].
	(self image isKindOf: WebMethodImage) ifTrue: [^self urlForMethodImageOn: aSession].
	^aSession site urlResolver halfUrlFor: self image.! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
usemap: aString
	self attributesAt: #usemap put: aString! !

!WebImage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
width: aNumber
	self attributesAt: #width put: aNumber printString! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
gif: aSymbol
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/gif' 
		site: image site.
	^image image: methodImage! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
gif: aSymbol  size: aPoint
	"this method will be called in your webStyle and this method 
	should return a gif in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/gif' 
		site: image site.
	^image image: methodImage;  size: aPoint! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
image: anImage
	^self new image: anImage! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
image: anImage align: aSymbol
	^self new image: anImage align: aSymbol! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
image: anImage size: aPoint
	^self new image: anImage; size: aPoint! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
jpeg: aSymbol
	"this method will be called in your webStyle and this method 
	should return a jpeg in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/jpeg' 
		site: image site.
	^image image: methodImage! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
jpeg: aSymbol  size: aPoint
	"this method will be called in your webStyle and this method 
	should return a jpeg in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/jpeg' 
		site: image site.
	^image image: methodImage;  size: aPoint! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
png: aSymbol
	"this method will be called in your webStyle and this method 
	should return a png in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/png' 
		site: image site.
	^image image: methodImage! !

!WebImage class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
png: aSymbol  size: aPoint
	"this method will be called in your webStyle and this method 
	should return a jpeg in byte array format"
	| methodImage image |
	image := self new.
	methodImage := WebMethodImage
		fromMethod: aSymbol 
		on: image style 
		contentType: 'image/png' 
		site: image site.
	^image image: methodImage;  size: aPoint! !

!WebImageMap methodsFor: 'adding areas' stamp: ' 21/4/07 22:07'!
addCirclePos: aPositionPoint diameter: aNumber  link: aWebLink

	| coords |
	coords := Array
		with: aPositionPoint x
		with: aPositionPoint y
		with: aNumber.
	self addShape: #circle coordinates: coords link: aWebLink! !

!WebImageMap methodsFor: 'adding areas' stamp: ' 21/4/07 22:07'!
addRectanglePos: aPositionPoint size: aSizePoint  link: aWebLink

	| coords |
	coords := Array
		with: aPositionPoint x
		with: aPositionPoint y
		with: (aPositionPoint + aSizePoint) x
		with: (aPositionPoint + aSizePoint) y.
	self addShape: #rect coordinates: coords link: aWebLink! !

!WebImageMap methodsFor: 'adding areas' stamp: ' 21/4/07 22:07'!
addShape: aShapeSymbol coordinates: anArray link: aWebLink

	self areas add: 
		(Array with: aShapeSymbol with: anArray with: aWebLink)! !

!WebImageMap methodsFor: 'private' stamp: ' 21/4/07 22:07'!
areas
	areas isNil ifTrue: [self initAreas].
	^areas! !

!WebImageMap methodsFor: 'private'!
hasTag
	^true! !

!WebImageMap methodsFor: 'initialize - release' stamp: ' 21/4/07 22:07'!
initAreas
	areas := OrderedCollection new.! !

!WebImageMap methodsFor: 'initialize - release' stamp: ' 21/4/07 22:07'!
initialize
	self name: self randomName.! !

!WebImageMap methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name
	^self attributesAt: #name! !

!WebImageMap methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
name: aString
	self attributesAt: #name put: aString.! !

!WebImageMap methodsFor: 'private' stamp: 'np 10/18/2008 13:15'!
randomName

	^'map', ((AIDASite random next * 100) truncated) printString! !

!WebImageMap methodsFor: 'private' stamp: ' 21/4/07 22:07'!
shouldIdent
	^true! !

!WebImageMap methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession 
	| link |
	self prepareToHtmlStreamingOn: aSession.
	aStream nextPutAll: self ident , '<map'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '"> ' , self eol.
	self areas do: 
			[:area | 
			aStream
				nextPutAll: self identMore , '<area shape="';
				nextPutAll: (area at: 1) asString;
				nextPutAll: '" coords="'.
			1 to: (area at: 2) size
				do: 
					[:inx | 
					inx > 1 ifTrue: [aStream nextPutAll: ','].
					aStream nextPutAll: ((area at: 2) at: inx) printString].
			link := area at: 3.
			link prepareAttributesToStreamOn: aSession.
			link streamAttributesTo: aStream for: aSession.
			aStream nextPutAll: '"> ' , self eol].
	aStream nextPutAll: self ident , '</map>' , self eol! !

!WebImageMap class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebInPlaceEditable2Text methodsFor: 'private-streaming'!
addSetupScript
	"jQuery specific"
self scriptBefore: '
$(function() {
	var $log = $( "#log" );
	function log( text ) {
		$log.append( text + "<br/>" );
	}
	$( "#', self id asString, '" )
		.bind( "editsave", function( ev, ui ) {
			log( "save: " + ui.value );
		})
		.bind( "editchange", function( ev, ui ) {
			log( "change: " + ui.value );
		})
		.bind( "editcancel", function() {
			log( "cancel" );
	})
	.editable();
}); 
'! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
allow
	"is edit allowed at all?"
	allow isNil ifTrue: [^true].
	^allow! !

!WebInPlaceEditable2Text methodsFor: 'private'!
allow: aBoolean
	allow := aBoolean! !

!WebInPlaceEditable2Text methodsFor: 'private'!
attribute
	"<b> etc"
	attribute isNil ifTrue: [^''].
	^attribute! !

!WebInPlaceEditable2Text methodsFor: 'private'!
attribute: aString
	attribute := aString! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
bold
	self attribute: '<b>'! !

!WebInPlaceEditable2Text methodsFor: 'settings'!
cancelText
	^'Preklic^i'  convertToSloveneChars! !

!WebInPlaceEditable2Text methodsFor: 'settings'!
columns
	"length of edit field or textarea"
	self size isNil ifTrue: [^20].
	self size class == Point ifTrue: [^self size x].
	^self size! !

!WebInPlaceEditable2Text methodsFor: 'private'!
endAttributeTag
	self attribute isEmpty ifTrue: [^''].
	^'</', self attribute copyFrom: 3 to: 5! !

!WebInPlaceEditable2Text methodsFor: 'private'!
externalControl
	"Scriptaculous specific"
	| idSymbol |
	self triggerElement isNil ifTrue: [^''].
	idSymbol := self triggerElement isSymbol 
		ifTrue: [self triggerElement] ifFalse: [self triggerElement ensureId. self triggerElement id].
	^', externalControl:''', idSymbol asString, ''''! !

!WebInPlaceEditable2Text methodsFor: 'initialize-release'!
initialize
	"jQuery specific"
	super initialize.
	JQueryLibrary ensureUI "in page header"! !

!WebInPlaceEditable2Text methodsFor: 'private'!
isFormated
	^formated notNil and: [formated]! !

!WebInPlaceEditable2Text methodsFor: 'settings'!
okText
	^'Zapis^i'  convertToSloveneChars! !

!WebInPlaceEditable2Text methodsFor: 'private-streaming'!
prepareClassAttribute
	self class: #( #'ui-editable' #'ui-widget')! !

!WebInPlaceEditable2Text methodsFor: 'private-streaming'!
properlyFormatedValueOn: aSession
	| vlue |
	vlue := self value.
	vlue isNil ifTrue: [^''].
	self isFormated ifTrue: [vlue := vlue asWikiHtml].
	^AIDASite convertToWeb: "UTF8 encoding"
		(WebFormElement autoConvertAndEncodeQuotes: vlue) on: aSession! !

!WebInPlaceEditable2Text methodsFor: 'settings'!
rows
	"number of lines in edit area"
	self size isNil ifTrue: [^1].
	self size class == Point ifTrue: [^self size y].
	^1! !

!WebInPlaceEditable2Text methodsFor: 'private'!
rowsCols
	^'rows:', self rows printString, ',cols:', self columns printString! !

!WebInPlaceEditable2Text methodsFor: 'settings'!
savingText
	^'...'! !

!WebInPlaceEditable2Text methodsFor: 'private'!
size
	"if number, then editor is one line, if point, it is text area!!"
	^size! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
size: aNumberOrPoint
	"if number, then editor is one line, if point, it is text area!!"
	size := aNumberOrPoint! !

!WebInPlaceEditable2Text methodsFor: 'private'!
startAttributeTag
	^self attribute! !

!WebInPlaceEditable2Text methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self ensureId. 
	self prepareClassAttribute.
	self prepareToHtmlStreamingOn: aSession.
	self allow ifTrue: [self addSetupScript].
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self startAttributeTag.
	aStream nextPutAll: '<span '. self streamAttributesTo: aStream for: aSession. aStream nextPut: $>. 
	aStream nextPutAll: (self properlyFormatedValueOn: aSession).
	aStream nextPutAll: '</span>', self endAttributeTag.
	(self allow and: [self triggerElement isKindOf: WebElement])
		ifTrue: [self triggerElement streamHtmlTo: aStream for: aRequest on: aSession].
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebInPlaceEditable2Text methodsFor: 'private'!
textOptions
	"Scriptaculous specific"
	| text |
	text := ', okText:''', self okText, ''', cancelText:''', self cancelText, ''', savingText:''', self savingText, ''''.
	^AIDASite convertToWeb: text on: self app session! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
triggerElement
	"element which triggers edit mode. If it is real element and not only id, it will be 
       added after editable text, "
	^triggerElement! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
triggerElement: aWebElementOrId
	triggerElement := aWebElementOrId! !

!WebInPlaceEditable2Text methodsFor: 'accessing'!
wikiFormated
	"source text is formated in wiki format"
	formated := true! !

!WebInPlaceEditable2Text class methodsFor: 'instance creation'!
aspect: aSymbol for: anObject
	^self new aspect: aSymbol for: anObject! !

!WebInPlaceEditable2Text class methodsFor: 'instance creation'!
aspect: aSymbol for: anObject size: aNumberOrPoint
	^self new aspect: aSymbol for: anObject; size: aNumberOrPoint! !

!WebInPlaceEditable2Text class methodsFor: 'instance creation'!
aspect: aSymbol for: anObject size: aNumberOrPoint allow: aBoolean
	^self new aspect: aSymbol for: anObject; 
		size: aNumberOrPoint;
		allow: aBoolean	"is edit allowed at all?"! !

!WebInPlaceEditableText methodsFor: 'private'!
addSetupScript
	"Scriptaculous specific"
	| url urlFormated |
	url := self ajaxCallUrl, '?', (self ajaxCallUrlParametersFor: self context: self context), '&ajaxInPlaceEditing'.
	urlFormated := self isFormated ifTrue: [url, '&wikiFormated'] ifFalse: [url].
	self scriptAfter: 'new Ajax.InPlaceEditor(''', self id asString, 
		''', ''', urlFormated, ''', {', self rowsCols, self textOptions, self externalControl, 
		(self isFormated ifTrue: [',loadTextURL:''', url, ''''] ifFalse: ['']), '})'! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allow
	"is edit allowed at all?"
	allow isNil ifTrue: [^true].
	^allow! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
allow: aBoolean
	allow := aBoolean! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
attribute
	"<b> etc"
	attribute isNil ifTrue: [^''].
	^attribute! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
attribute: aString
	attribute := aString! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
bold
	self attribute: '<b>'! !

!WebInPlaceEditableText methodsFor: 'settings' stamp: 'mivsek 1/10/2008 22:37'!
cancelText
	| app |
	app := self app.
	^app notNil 
		ifTrue: [self app style inPlaceCancelText]
		ifFalse: ['Cancel']! !

!WebInPlaceEditableText methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
columns
	"length of edit field or textarea"
	self size isNil ifTrue: [^20].
	self size class == Point ifTrue: [^self size x].
	^self size! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
endAttributeTag
	self attribute isEmpty ifTrue: [^''].
	^'</', self attribute copyFrom: 3 to: 5! !

!WebInPlaceEditableText methodsFor: 'private'!
externalControl
	"Scriptaculous specific"
	| idSymbol |
	self triggerElement isNil ifTrue: [^''].
	idSymbol := self triggerElement isSymbol 
		ifTrue: [self triggerElement] ifFalse: [self triggerElement ensureId. self triggerElement id].
	^', externalControl:''', idSymbol asString, ''''! !

!WebInPlaceEditableText methodsFor: 'initialize-release'!
initialize
	"Scriptaculous specific"
	super initialize.
	ScriptaculousLibrary ensureScriptaculous.! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isFormated
	^formated notNil and: [formated]! !

!WebInPlaceEditableText methodsFor: 'settings' stamp: 'mivsek 1/10/2008 22:37'!
okText
	| app |
	app := self app.
	^app notNil 
		ifTrue: [self app style inPlaceOkText]
		ifFalse: ['Ok']! !

!WebInPlaceEditableText methodsFor: 'private-streaming'!
properlyFormatedValueOn: aSession
	| vlue |
	vlue := self value.
	vlue isNil ifTrue: [^''].
	self isFormated ifTrue: [vlue := vlue asWikiHtml].
	^AIDASite convertToWeb: "UTF8 encoding"
		(WebFormElement autoConvertAndEncodeQuotes: vlue) on: aSession! !

!WebInPlaceEditableText methodsFor: 'settings' stamp: ' 21/4/07 22:07'!
rows
	"number of lines in edit area"
	self size isNil ifTrue: [^1].
	self size class == Point ifTrue: [^self size y].
	^1! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
rowsCols
	^'rows:', self rows printString, ',cols:', self columns printString! !

!WebInPlaceEditableText methodsFor: 'settings' stamp: 'mivsek 1/10/2008 22:37'!
savingText
	^'...'! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
size
	"if number, then editor is one line, if point, it is text area!!"
	^size! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size: aNumberOrPoint
	"if number, then editor is one line, if point, it is text area!!"
	size := aNumberOrPoint! !

!WebInPlaceEditableText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
startAttributeTag
	^self attribute! !

!WebInPlaceEditableText methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self ensureId. 
	self prepareToHtmlStreamingOn: aSession.
	self allow ifTrue: [self addSetupScript].
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self startAttributeTag.
	aStream nextPutAll: '<span '. self streamAttributesTo: aStream for: aSession. aStream nextPut: $>. 
	aStream nextPutAll: (self properlyFormatedValueOn: aSession).
	aStream nextPutAll: '</span>', self endAttributeTag.
	(self allow and: [self triggerElement isKindOf: WebElement])
		ifTrue: [self triggerElement streamHtmlTo: aStream for: aRequest on: aSession].
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebInPlaceEditableText methodsFor: 'private'!
textOptions
	"Scriptaculous specific"
	| text |
	text := ', okText:''', self okText, ''', cancelText:''', self cancelText, ''', savingText:''', self savingText, ''''.
	^AIDASite convertToWeb: text on: self app session! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
triggerElement
	"element which triggers edit mode. If it is real element and not only id, it will be 
       added after editable text, "
	^triggerElement! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
triggerElement: aWebElementOrId
	triggerElement := aWebElementOrId! !

!WebInPlaceEditableText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
wikiFormated
	"source text is formated in wiki format"
	formated := true! !

!WebInPlaceEditableText class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject
	^self new aspect: aSymbol for: anObject! !

!WebInPlaceEditableText class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumberOrPoint
	^self new aspect: aSymbol for: anObject; size: aNumberOrPoint! !

!WebInPlaceEditableText class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumberOrPoint allow: aBoolean
	^self new aspect: aSymbol for: anObject; 
		size: aNumberOrPoint;
		allow: aBoolean	"is edit allowed at all?"! !

!WebIndex methodsFor: 'searching' stamp: ' 21/8/07 09:38'!
addFreshnessRelevance: aDictionary
	"objects with newer modified date are more relevant"
	| weight |
	aDictionary keysDo: [:object |
		(object class selectors includes: #modified) ifTrue:
			[weight := 1000 - (Date today subtractDate: object modified) max: 0.
			aDictionary at: object put:  (aDictionary at: object) + weight] ]! !

!WebIndex methodsFor: 'searching' stamp: ' 21/8/07 09:38'!
addVisitsRelevance: aDictionary
	"objects with more visits are more relevant"
	| weight |
	aDictionary keysDo: [:object |
		(object class selectors includes: #modified) ifTrue:
			[weight := 1000 - (Date today subtractDate: object modified) max: 0.
			aDictionary at: object put:  (aDictionary at: object) + weight] ]! !

!WebIndex methodsFor: 'popular words' stamp: ' 21/8/07 09:38'!
allPopularWordsAndCounts
	"return a collection of words and their total counts, most popular first"
	| collection |
	collection := OrderedCollection new.
	self popularWords keysAndValuesDo: [:word :counter |  
		collection add: (Array with: word with: counter total)].
	^SortedCollection
		withAll: collection
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
allWordsAndWeights
	"return sorted collection of all words and sum of weights, biggeest weight first"
	| collection weight |
	collection := OrderedCollection new.
	self index keysDo: [:halfWord |
		(self index at: halfWord) keysDo: [:restWord |
			weight := ((self index at: halfWord) at: restWord) inject: 0 into: 
				[:sum :thirdDictWeight | sum + (thirdDictWeight)].
			collection add: (Array with: halfWord, restWord with: weight) ] ].
	^SortedCollection 
		withAll: collection
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].

" WebIndex default allWordsAndWeights "! !

!WebIndex methodsFor: 'popular words' stamp: ' 21/8/07 09:38'!
countPopularWords: anArray
	anArray do: [:word |
		(self popularWords includesKey: word) ifFalse: [self openPopularWord: word].
		(self popularWords at: word) incCounter].! !

!WebIndex methodsFor: 'private' stamp: ' 21/8/07 09:38'!
halfWordFrom: aString
	"prepare first three letters, lowercase (also slovene chars)"
	^AIDASite sloveneLowercase: (aString copyFrom: 1 to: 3).! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
index
	"index is a dictionary with first three lowercase letters of each indexed world as key and
	another dictionary for remaining letters as value. The second dictionary has remaining letters for key
      and dictionary with objects, where this word occured, as key and number of occurences as value"
	index isNil ifTrue: [self initIndex].
	^index! !

!WebIndex methodsFor: 'indexing' stamp: ' 21/8/07 09:38'!
indexObject: anObject
	"if anObject responds to a message indexText, then index all its world in index.
	 However, first 	remove indexing for that object if already exist (so, for reindexing  
	objects, use this method also). For performance reasons indexing is done in background"
	self workQueue nextPut: anObject.

"WebIndex default indexObject: WebIndex default"! !

!WebIndex methodsFor: 'indexing' stamp: ' 21/4/07 22:07'!
indexObjects: aCollection
	aCollection do: [:each | self indexObject: each].! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
indexText
	^'Search engine iskanje rezultati iskanja iskalnik'! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
indexTitle
	^'Iskalnik'! !

!WebIndex methodsFor: 'indexing' stamp: ' 21/8/07 09:38'!
indexWord: aString inObject: anObject
	"put a word in that object in index if word is valid one for indexing"
	self indexWord: aString occurences: 1 inObject: anObject! !

!WebIndex methodsFor: 'private-indexing'!
indexWord: aString occurences: aNumber inObject: anObject
	"put a aNumber occurences of a word in that object in index if word is valid one for indexing"
	| halfWord restWord secDic thirdDic num |
	(self isValidWord: aString) ifFalse: [^self].
	"put an object in indexed object, if not already exist"
	(self indexedObjects includesKey: anObject) ifFalse:
		[self indexedObjects at: anObject put: IdentitySet new].
	"prepare two parts of a words, first three letters and rest"
	halfWord := self halfWordFrom: aString.
	restWord := self restWordFrom: aString.
	"find or create a second level dictionary from first level one"
	secDic := self index at: halfWord 
		ifAbsent: [self index at: halfWord put: Dictionary new].
	"find or create last level dictionary from second level one"
	thirdDic := secDic at: restWord 
		ifAbsent: [secDic at: restWord put: Dictionary new].
	"put an object to third level dictionary and increment nr of worlds if not already exist"
	num := thirdDic at: anObject ifAbsent: [thirdDic at: anObject put: 0].
	thirdDic at: anObject put: num + aNumber.
	"make reference to the third level dictionary for a indexed word"
	(self indexedObjects at: anObject) add: thirdDic.! !

!WebIndex methodsFor: 'private-indexing'!
indexWords: aWordDictionary inObject: anObject
	self removeObject: anObject.  "if exist"
	aWordDictionary keysAndValuesDo: [:key :value | 
		self indexWord: key occurences: value inObject: anObject].! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
indexedObjects
	"return a dictionary with objects which worlds are in index as keys and a set of pointers to third 
       level dictionary in index as values"
	indexedObjects isNil ifTrue: [self initIndexedObjects].
	^indexedObjects! !

!WebIndex methodsFor: 'private' stamp: 'mivsek 6/13/2007 16:25'!
indexer
	"indexing process"
	^indexer! !

!WebIndex methodsFor: 'private' stamp: 'mivsek 6/13/2007 16:26'!
indexerProcess
	"this background process wait for objects to be indexed in workQueue and
	index them without disturbing others."
	| object |
	[true] whileTrue: 
		[object := self workQueue next.
		self privIndexObject: object.
		self reportIndexingOf: object].! !

!WebIndex methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initIndex
	index := Dictionary new.! !

!WebIndex methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initIndexedObjects
	indexedObjects := IdentityDictionary new.! !

!WebIndex methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initPopularWords
	popularWords := Dictionary new.! !

!WebIndex methodsFor: 'initialize-release' stamp: 'mivsek 6/13/2007 16:26'!
initialize
	self initIndex.
	self initIndexedObjects.
	self initPopularWords.
	workQueue := nil.
	self start.

"WebIndex default initialize"! !

!WebIndex methodsFor: 'testing'!
isValidWord: aString
	"a valid word for indexing has three or more letters, can have also numbers "
	(aString size >= 3) ifFalse: [^false].
"	aString do:[:chr | chr isDigit ifTrue: [^false] ]. " "no more!!"
	^true! !

!WebIndex methodsFor: 'searching'!
objectsForWord: aString
	"find all objects, which include this word. Return a dictionary with objects as 
       keys and weights as values" 
	"only current versions of versioned object like documents!!"
	| objDict |
	objDict := self privObjectsForWord: aString.
	objDict := objDict keysDo: [:object | 
		((object isKindOf: VersionedObject) and: [object isCurrentVersion not])
			ifTrue: [objDict removeKey: object] ].
	^objDict

"(WebIndex default objectsForWord: 'knjiga') keys "! !

!WebIndex methodsFor: 'searching' stamp: ' 21/8/07 09:38'!
objectsForWords: aString
	"find all objects, which include one or more specified words. return a sorted collection 
	of associations with found objects as keys an relevance of them as values. Most relevant 
	objects are first. Relevance means: 
		nr. of words found * 1000 + occurences of each word"
	| words hits newHits foundWords |
	Transcript show: ' search.'.
	words := (self wordsInText: aString) keys.
	words := words select: [:word | self isValidWord: word].
	hits := IdentityDictionary new.
	foundWords := OrderedCollection new. 
	words do: [:word | 
		newHits := self objectsForWord: word.
		newHits notEmpty ifTrue: [foundWords add: word].
		newHits keysAndValuesDo: [:key :value |
			(hits includesKey: key)
				ifTrue: [hits at: key put: (hits at: key)+1000]
				ifFalse: [hits at: key put: 1000+value] ] ].
	self countPopularWords: foundWords.  "count as popular only words, which exist in objects"
	self addFreshnessRelevance: hits.
	Transcript show: '.ok '.
	^SortedCollection withAll: hits associations sortBlock: [:first : second | first value > second value].

"
WebIndex instance objectsForWords: 'ljub'
"! !

!WebIndex methodsFor: 'popular words' stamp: ' 21/4/07 22:07'!
openPopularWord: aString
	self popularWords at: aString put: WebCounter new.! !

!WebIndex methodsFor: 'accessing' stamp: ' 21/8/07 09:38'!
popularWords
	"return a dictionary of words as keys and aWebCounters as values"
	popularWords isNil ifTrue: [self initPopularWords].
	^popularWords! !

!WebIndex methodsFor: 'private-indexing'!
prepareWord: aString
	"cut last char if vowel. Used for simple declension of slovene words"
	aString last isVowel 
		ifTrue: [aString size > 3
			ifTrue: [^aString copyFrom: 1 to: (aString size - 1)] ].
	^aString.

"
WebIndex new prepareWord: 'knjiga'
"! !

!WebIndex methodsFor: 'private-indexing'!
privIndexObject: anObject
	"index all words in text. Index title with weight 100 as well"
	| textDict titleDict |
	(anObject class canUnderstand: #indexText) ifTrue:
		[textDict := self wordsInText: anObject indexText.
	(anObject class canUnderstand: #indexTitle) ifTrue:
		[titleDict := self wordsInText: anObject indexTitle].
		titleDict keysDo: [:word | titleDict at: word put: (titleDict at: word)*100]. "weight words in title 100x"	
		titleDict keysDo: [:word | 
			(textDict includesKey: word) 
				ifFalse: [textDict at: word put: (titleDict at: word)]
				ifTrue: [textDict at: word put: (textDict at: word) + (titleDict at: word)] ] ].	
	self indexWords: textDict inObject: anObject! !

!WebIndex methodsFor: 'private-searching'!
privObjectsForWord: aString
	"find all objects, which include this word. Return more important objects first (more 
	occurences of worlds etc.)"
	| hits secDic searchWord keys word |
	(self isValidWord: aString) ifTrue:
		[hits := IdentityDictionary new.
		word := self prepareWord: aString.
		searchWord := (self restWordFrom: word), '*'.
		secDic := self index at: (self halfWordFrom: word) ifAbsent: [^hits].
		keys := secDic keys select: [:fkey | searchWord match: fkey].
		keys do: [:skey | 
       		(secDic at: skey) keysAndValuesDo: [:tkey :tvalue | 
				(hits includesKey: tkey) ifFalse: [hits at: tkey put: 0].
				hits at: tkey put: (hits at: tkey)+tvalue] ].
		^hits.
		] ifFalse: [^nil].

"(WebIndex default objectsForWord: 'knjiga') keys "! !

!WebIndex methodsFor: 'indexing' stamp: ' 21/8/07 09:38'!
removeObject: anObject
	"remove object from all word pointers in index"
	(self indexedObjects at: anObject ifAbsent: [^nil]) do:
		[:each | each removeKey: anObject ifAbsent: [] ].
	self indexedObjects removeKey: anObject.! !

!WebIndex methodsFor: 'private-indexing'!
reportIndexingOf: anObject
	| text site |
	[text := anObject class name.
	site := [anObject repository site name] on: Error do: [:ex | ''].
	(anObject isKindOf: Document) ifTrue: 
		[text := text, ' "', anObject title asSloveneWithoutCircumflexes,  '" on ', site.
		anObject modifiedBy notNil ifTrue:
			[text := text, ' by ', anObject modifiedBy nameSurname asSloveneWithoutCircumflexes] ].
	(anObject isKindOf: FileProxy) ifTrue: 
		[text := text, ' "', anObject filename asString, '" on ', anObject site name].
	Transcript cr; show: '(indexing  ', text, ')']
		fork. "to prevent stoping indexer in case of error"! !

!WebIndex methodsFor: 'private-indexing'!
restWordFrom: aString
	"preparerest of the word, lowercase (also slovene chars)"
	^AIDASite sloveneLowercase: (aString copyFrom: 4 to: aString size)! !

!WebIndex methodsFor: 'initialize-release' stamp: 'mivsek 6/13/2007 16:30'!
start
	self stop.
	indexer := [self indexerProcess] forkAt: Processor userBackgroundPriority.! !

!WebIndex methodsFor: 'initialize-release' stamp: 'mivsek 6/13/2007 16:30'!
stop
	self indexer notNil ifTrue: [self indexer terminate. indexer := nil].! !

!WebIndex methodsFor: 'indexing'!
wordsInText: aString
	"return a dictionary with all words as keys and number of occurences as values"
	| lastInx currInx word words |
	lastInx := 1. currInx := 1. words := Dictionary new. 
	aString do: [:chr | 
		(chr isAlphaNumeric or: [AIDASite isSloveneCharacter: chr]) ifFalse: 
			[word := aString copyFrom: lastInx to: currInx-1.
			lastInx := currInx+1.
			word := AIDASite sloveneLowercase: word.
			word notEmpty ifTrue: 
				[(words includesKey: word) ifFalse: [words at: word put: 0].
				words at: word put: (words at: word) + 1] ].
		currInx := currInx + 1].
	word := aString copyFrom: lastInx to: currInx-1.
	word := AIDASite sloveneLowercase: word.
	word notEmpty ifTrue: 
		[(words includesKey: word) ifFalse: [words at: word put: 0].
		words at: word put: (words at: word) + 1].
	^words

"
WebIndex default wordsInText: 'erot ljub'
"! !

!WebIndex methodsFor: 'private' stamp: 'mivsek 6/13/2007 16:31'!
workQueue
	"all object to be indexed goes in this queue. An indexer process (which is started first time
	someone requests indexing) then index an object in background"

	workQueue isNil ifTrue: 
		[workQueue := SharedQueue new.
		self indexer isNil ifTrue: [self start] ].
	^workQueue.! !

!WebIndex class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default
	^AIDASite default index! !

!WebIndex class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
instVarMap
	"Gemstone"

	^super instVarMap,
		#( 	(workQueue nil) )! !

!WebIndex class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize.

"WebIndex new"! !

!WebIndex class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
replicationSpec

	^super replicationSpec, 
		#(  	(index forwarder)
			(indexedObjects forwarder) 
			(popularWords forwarder)  	)! !

!WebInputField methodsFor: 'private'!
acceptInputFromValue: aString
	| vlue |
	aString isNil ifTrue: [^nil].  "error?"
	vlue :=  AIDASite convertFromWeb: aString on: self session. "ensure unicode!!"
	vlue := (WebFormElement autoConvertString:  vlue toObject: self value).
	self value: vlue.! !

!WebInputField methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumber
	^self aspect: aSymbol for: anObject; size: aNumber! !

!WebInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
hidden
	^self type = 'hidden'! !

!WebInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
hidden: aBoolean
	"make this input field hidden one"
	aBoolean ifTrue: [self type: 'hidden']! !

!WebInputField methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self type: 'text'.! !

!WebInputField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isHidden
	^self type = 'hidden'! !

!WebInputField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isInputField
	^true! !

!WebInputField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isPassword
	^self type = 'password'! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
maxLength: aNumber
	"maximum number of characters allowed in this input field"
	self attributesAt: #maxlength put: aNumber printString! !

!WebInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
password
	^self type = 'password'! !

!WebInputField methodsFor: 'private' stamp: ' 21/4/07 22:07'!
password: aBoolean
	"if true, then value will not be shown in input field"
	self type: 'password'.! !

!WebInputField methodsFor: 'private-streaming' stamp: 'janko 9/19/2011 14:30'!
prepareAttributesToPrintOn: aSession
	super prepareAttributesToPrintOn: aSession.
	self value notNil ifTrue:
		[self attributesAt: #value put: 
			(WebFormElement autoConvertAndEncodeValue: self value)]! !

!WebInputField methodsFor: 'private-streaming'!
prepareAttributesToStreamOn: aSession
	super prepareAttributesToStreamOn: aSession.
	self value isNil ifTrue: [^nil].
	self attributesAt: #value put:  
		(self adaptor format notNil
			ifTrue: [self adaptor convertedAndEncodedValue]
			ifFalse: [WebFormElement autoConvertAndEncodeValue: self adaptor value])! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
resetHidden
	self hidden: false! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
resetPassword
	self password: false! !

!WebInputField methodsFor: 'private' stamp: 'np 10/20/2008 13:29'!
saveThroughAdapterValue: aValueString
	| vlue |
	aValueString isNil ifTrue: [^nil].  "error?"
	vlue :=  AIDASite convertFromWeb: aValueString on: self session. "ensure unicode!!"
	vlue := (WebFormElement autoConvertString:  vlue toObject: self value).
	self value: vlue.! !

!WebInputField methodsFor: 'attributes-types'!
setColor
	self type: 'color'! !

!WebInputField methodsFor: 'attributes-types'!
setDate
	self type: 'date'! !

!WebInputField methodsFor: 'attributes-types'!
setDateTime
	self type: 'datetime'! !

!WebInputField methodsFor: 'attributes-types'!
setEmail
	self type: 'email'! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
setHidden
	self hidden: true! !

!WebInputField methodsFor: 'attributes-types'!
setMonth
	self type: 'month'! !

!WebInputField methodsFor: 'attributes-types'!
setNumber
	self type: 'number'! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
setPassword
	self password: true! !

!WebInputField methodsFor: 'attributes-types'!
setRange
	"HTML slider input field" 
	self type: 'range'! !

!WebInputField methodsFor: 'attributes-types'!
setSearch
	self type: 'search'! !

!WebInputField methodsFor: 'attributes-types'!
setTel
	"phone number"
	self type: 'tel'! !

!WebInputField methodsFor: 'attributes-types'!
setTime
	self type: 'time'! !

!WebInputField methodsFor: 'attributes-types'!
setUrl
	self type: 'url'! !

!WebInputField methodsFor: 'attributes-types'!
setWeek
	self type: 'week'! !

!WebInputField methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebInputField methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
size: aNumber
	"number of characters displayed in this input field"
	self attributesAt: #size put: aNumber printString! !

!WebInputField methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession.].
	aStream nextPutAll: self ident, '<input'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: self tagClosing.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
adaptIndex: aNumber ofCollection: aCollection

	^self new aspect: aNumber for: aCollection! !

!WebInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject
	^self new aspect: aSymbol for: anObject! !

!WebInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumber
	^self new aspect: aSymbol for: anObject size: aNumber! !

!WebInputField class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
size: aNumber aspect: aSymbol forObject: anObject
	"OBSOLETE!!"
	^self new size: aNumber; aspect: aSymbol for: anObject! !

!WebJSON methodsFor: 'private-parsing'!
consume: aString returning: anObject
	aString do: [:c | self next == c ifFalse: [self error: 'Expected ''', aString, ''''] ].
	^ anObject! !

!WebJSON methodsFor: 'accessing'!
ctorMap
	^ctorMap! !

!WebJSON methodsFor: 'accessing'!
ctorMap: m
	ctorMap := m! !

!WebJSON methodsFor: 'private-parsing' stamp: 'jm 12/15/2010 00:06'!
interpretStringEscape
	| c |
	c := self next.
	c == $b ifTrue: [^ Character backspace].
	c == $n ifTrue: [^ Character lf].
	c == $f ifTrue: [^ Character newPage].
	c == $r ifTrue: [^ Character cr].
	c == $t ifTrue: [^ Character tab].
	^ c.! !

!WebJSON methodsFor: 'private-serializing'!
jsonCollection: aCollection on: aStream
	| needComma |
	needComma := false.
	aStream nextPut: $[.
	aCollection do: [:element |
		needComma
			ifTrue: [ aStream nextPutAll: ', ' ]
			ifFalse: [ needComma := true ].
		self jsonObject: element on: aStream].
	aStream nextPut: $].! !

!WebJSON methodsFor: 'private-serializing'!
jsonDictionary: aDictionary  on: aStream
	| needComma |
	needComma := false.
	aStream nextPut: ${.
	aDictionary keysAndValuesDo: [:key :value |
		needComma
			ifTrue: [ aStream nextPutAll: ', ' ]
			ifFalse: [ needComma := true ].
		self jsonString: key asString on: aStream.
		aStream nextPutAll: ': '.
		self jsonObject: value on: aStream].
	aStream nextPut: $}.! !

!WebJSON methodsFor: 'private-serializing'!
jsonFalseOn: aStream
	aStream nextPutAll: 'false'! !

!WebJSON methodsFor: 'private-serializing'!
jsonNilOn: aStream
	aStream nextPutAll: 'null'! !

!WebJSON methodsFor: 'private-serializing'!
jsonNumber: aNumber on: aWriteStream 
	aWriteStream nextPutAll: aNumber asString.! !

!WebJSON methodsFor: 'private-serializing'!
jsonObject: anObject on: aStream
	(anObject isKindOf: String) ifTrue: [^self jsonString: anObject on: aStream].
	(anObject isKindOf: Number) ifTrue: [^self jsonNumber: anObject on: aStream].
	(anObject isKindOf: Dictionary) ifTrue: [^self jsonDictionary: anObject on: aStream].
	(anObject isKindOf: Collection) ifTrue: [^self jsonCollection: anObject on: aStream].
	anObject isNil ifTrue: [^self jsonNilOn: aStream].
	anObject = true ifTrue: [^self jsonTrueOn: aStream].
	anObject = false ifTrue: [^self jsonFalseOn: aStream].! !

!WebJSON methodsFor: 'private-serializing'!
jsonString: aString on: aStream
	| replacement |
	aStream nextPut: $".
	aString do: [:ch |
		replacement := self class escapeForCharacter: ch.
		replacement
			ifNil: [ aStream nextPut: ch ]
			ifNotNil: [ aStream nextPut: $\; nextPut: replacement ] ].
	aStream nextPut: $".! !

!WebJSON methodsFor: 'private-serializing'!
jsonTrueOn: aStream
	aStream nextPutAll: 'true'! !

!WebJSON methodsFor: 'private-parsing'!
next
	^ self stream next! !

!WebJSON methodsFor: 'private-parsing'!
numberFrom: aString
	"Integer, Float or Double"
	"WebJSON new numberFrom: '14.49156' "
	| nrDecimals clean pos exponent result sign |
	(aString includes: $. ) ifFalse: [^aString asNumber].
	nrDecimals := aString size - (aString indexOf: $. ).
	sign := aString detect: [:ch | ch = $- | ch isDigit].
	sign = $- ifTrue: [sign := -1] ifFalse: [sign := 1].
	clean := aString select: [:ch | ch isDigit | (ch = $. )].
	pos := clean indexOf: $. .
	pos = 0 
		ifTrue: [result := clean asInteger asFloat]
		ifFalse: 
			[exponent := pos - 2.
			clean := clean select: [:ch | ch isDigit].
			result := nrDecimals <= 4 ifTrue: [0.0] ifFalse: [0.0d].
			clean do: [:digit | 
				result := result + ((digit asInteger - $0 asInteger) * (10**exponent)).
				exponent := exponent - 1]].
	^result * sign! !

!WebJSON methodsFor: 'parsing'!
parseAny
	"This is the main entry point for the JSON parser. See also readFrom: on the class side."
	| c |
	self skipWhitespace.
	c := self peek asLowercase.
	c == ${ ifTrue: [self next. ^ self readDictionary].
	c == $[ ifTrue: [self next. ^ self readArray].
	c == $" ifTrue: [self next. ^ self readString].
	c == $t ifTrue: [^ self consume: 'true' returning: true].
	c == $f ifTrue: [^ self consume: 'false' returning: false].
	c == $n ifTrue: [^ self consume: 'null' returning: nil].
	c == $@ ifTrue: [self next. ^ self readConstructor].
	(WebJSON numbersMayContain: c) ifTrue: [^ self readNumber].
	self error: 'Unknown Json input'! !

!WebJSON methodsFor: 'parsing'!
parseFrom: aStream
	self stream: aStream.
	^ self parseAny! !

!WebJSON methodsFor: 'private-parsing'!
peek
	^ self stream peek! !

!WebJSON methodsFor: 'private-parsing'!
readArray
	| a needComma |
	a := OrderedCollection new.
	needComma := false.
	[
		self skipWhitespace.
		self peek == $] ifTrue: [self next. ^ a asArray].
		needComma
			ifTrue: [self peek == $, ifFalse: [ILJsonSyntaxError signal: 'Missing comma'].
					self next.]
			ifFalse: [needComma := true]. 
		a add: self parseAny.
	] repeat.! !

!WebJSON methodsFor: 'private-parsing'!
readConstructor
	| s c v ctor |
	s := WriteStream on: ''.
	[
		c := self peek.
		c ifNil: [ILJsonSyntaxError signal: 'Premature EOF reading constructor name'].
		((c == $.) or: [c isLetter])
			ifTrue: [s nextPut: c. self next]
			ifFalse: [
				v := self parseAny.
				s := s contents.
				ctor := ctorMap ifNotNil: [ctor := ctorMap at: s ifAbsent: [nil]].
				ctor ifNil: [ILJsonSyntaxError signal: 'Unknown ctor ', s].
				^ ctor constructFromJson: v]
	] repeat.! !

!WebJSON methodsFor: 'private-parsing'!
readDictionary
	| m k v needComma |
	m := Dictionary new.
	needComma := false.
	[
		self skipWhitespace.
		self peek == $} ifTrue: [self next. ^ m].
		needComma
			ifTrue: [self peek == $, ifFalse: [ILJsonSyntaxError signal: 'Missing comma'].
					self next. self skipWhitespace]
			ifFalse: [needComma := true.].
		self next == $" ifFalse: [ILJsonSyntaxError signal: 'Key in dictionary must be string'].
		k := self readString.
		self skipWhitespace.
		self peek == $: ifFalse: [ILJsonSyntaxError signal: 'Missing colon'].
		self next.
		v := self parseAny.
		m at: k put: v.
	] repeat.! !

!WebJSON methodsFor: 'private-parsing'!
readNumber
	| str ch |
	str := WriteStream on: String new.
	[
		ch := self peek.
		(ch isNil not and: [self class numbersMayContain: ch]) ifFalse: [
			[^self numberFrom: str contents] on: Error do: [self error: 'Invalid number']].
		str nextPut: ch.
		self next.
	] repeat.! !

!WebJSON methodsFor: 'private-parsing'!
readString
	| str ch |
	str := WriteStream on: String new.
	[
		ch := self next.
		ch == $\
			ifTrue: [str nextPut: self interpretStringEscape.]
			ifFalse: [ch == $" ifTrue: [^ str contents.].
					str nextPut: ch]
	] repeat.! !

!WebJSON methodsFor: 'private-parsing'!
skipComment
	self peek == $/ ifTrue: [
		self next.
		self peek == $/
			ifTrue: [self skipToEndOfLine]
			ifFalse: [self peek == $*
						ifTrue: [self next. self skipCommentBody]
						ifFalse: [ILJsonSyntaxError signal: 'Invalid comment syntax']]]! !

!WebJSON methodsFor: 'private-parsing'!
skipCommentBody
	[
		[self next == $*] whileFalse.
		self peek == $/
	] whileFalse.
	self next. "skip that last slash"
	self skipWhitespace.! !

!WebJSON methodsFor: 'private-parsing'!
skipToEndOfLine
	[self peek == Character cr or: [self peek == Character lf]] whileFalse: [self next].
	self skipWhitespace! !

!WebJSON methodsFor: 'private-parsing'!
skipWhitespace
	[self peek isSeparator] whileTrue: [self next].
	self skipComment.! !

!WebJSON methodsFor: 'accessing'!
stream
	"Answer the value of stream"

	^ stream! !

!WebJSON methodsFor: 'accessing'!
stream: anObject
	"Set the value of stream"

	stream := anObject! !

!WebJSON class methodsFor: 'private'!
characterEscapeMap
	"WebJSON initCharacterEscapeMap"
	CharacterEscapeMap isNil ifTrue: [self initCharacterEscapeMap].
	^CharacterEscapeMap! !

!WebJSON class methodsFor: 'private'!
escapeForCharacter: c
	^ self characterEscapeMap at: c ifAbsent: [nil]! !

!WebJSON class methodsFor: 'private'!
initCharacterEscapeMap
	"WebJSON initCharacterEscapeMap"
	CharacterEscapeMap := Dictionary new
		add: $" -> $";
		add: $\ -> $\;
		add: Character backspace -> $b;
		add: Character lf -> $n;
		add: Character newPage -> $f;
		add: Character cr -> $r;
		add: Character tab -> $t;
		yourself.! !

!WebJSON class methodsFor: 'private'!
mimeType
	^'application/json'! !

!WebJSON class methodsFor: 'private'!
newWithConstructors: aCollection
	| m |
	m := Dictionary new.
	aCollection do: [:each |
		(each isKindOf: Association)
			ifTrue: [m add: each]
			ifFalse: [m at: each name greaseString put: each]].
	^ self new ctorMap: m; yourself.! !

!WebJSON class methodsFor: 'private'!
numbersMayContain: aChar
	^ aChar isDigit or: [#($- $+ $. $e $E) includes: aChar]! !

!WebJSON class methodsFor: 'parsing'!
parse: aString
	^self parseFrom: aString readStream! !

!WebJSON class methodsFor: 'parsing'!
parseFrom: aStream
	^self new parseFrom: aStream! !

!WebJSON class methodsFor: 'serializing'!
stringify: anObject
	| stream |
	stream := WriteStream on: String new.
	self new jsonObject: anObject on: stream.
	^stream contents.! !

!WebJSONPresenter methodsFor: 'accessing'!
aidaContentType
	^'application/json'! !

!WebJSONPresenter methodsFor: 'private' stamp: 'janko 4/25/2012 10:59'!
aidaIsRespondingStreamed
	^false! !

!WebJSONPresenter methodsFor: 'initialize-release'!
initDefaultPresenterBlock
	self presenterBlock: 
		[self observee asJson]! !

!WebJSONPresenter methodsFor: 'accessing'!
observee
	"return reference to an object, for which this app acts as an observer - to make an user interface
	of them"
	^observee! !

!WebJSONPresenter methodsFor: 'private'!
observee: anObject
	"set the reference to an object, for which this app acts as an observer - to make an user interface
	of them"
	observee := anObject! !

!WebJSONPresenter methodsFor: 'accessing'!
presenterBlock
	"this block will be executed in streaming phase. [self observee asJson] is default"
	presenterBlock ifNil: [self initDefaultPresenterBlock].
	^presenterBlock! !

!WebJSONPresenter methodsFor: 'accessing'!
presenterBlock: aBlock
	presenterBlock := aBlock! !

!WebJSONPresenter methodsFor: 'accessing'!
session
	"on which this App represent the observed domain object"
	^session! !

!WebJSONPresenter methodsFor: 'private'!
session: aWebSession
	"on which this App represent the observed domain object"
	session := aWebSession! !

!WebJSONPresenter methodsFor: 'accessing'!
site
	"reference to a site on which this app shows some object. "
	^self session site! !

!WebJSONPresenter methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	"Well, we actually stream JSON!!"
	aStream nextPutAll: 
		self presenterBlock value "by default [self observee asJson] value"! !

!WebJSONPresenter class methodsFor: 'instance creation'!
newFor: anObject on: aSession
	^self new
		observee: anObject;
		session: aSession! !

!WebJSONTest methodsFor: 'support'!
json: aString parseTo: aValue
	"parse string and check if equal to value"
	| parsedValue |
	parsedValue := WebJSON parse: aString.
	self assert: parsedValue = aValue.! !

!WebJSONTest methodsFor: 'support'!
json: aString parseToDict: aValue
	"parse string and check if equal to value"
	| parsedValue |
	parsedValue := WebJSON parse: aString.
	self assert: parsedValue class == Dictionary.
	self assert: parsedValue keys size = aValue keys size.
	parsedValue keysAndValuesDo: [:key :value |
		self assert: (aValue at: key) = value]! !

!WebJSONTest methodsFor: 'support'!
json: aString stringifyFrom: aValue
	"serialize value and check if equal to json string"
	| jsonString |
	jsonString := WebJSON stringify: aValue.
	self assert: jsonString = aString.! !

!WebJSONTest methodsFor: 'support' stamp: 'jm 12/15/2010 00:16'!
json: andArrayOfStrings stringifyFromDict: aValue
	"serialize value and check if equal to one of json strings"
	| jsonString |
	jsonString := WebJSON stringify: aValue.
	self assert: (andArrayOfStrings includes: (jsonString copyWithout: $ ))! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseArray
	self json: '[]' parseTo: #().
	self json: '[[]]' parseTo: #(#()).
	self json: '[[], []]' parseTo: #(#() #()).
	self json: '["hi", "there"]' parseTo: #('hi' 'there').
	self json: '[["a", "b", null]]' parseTo: #(('a' 'b' nil)).! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseDictionary
	self json: '{}' parseToDict: (Dictionary new).
	self json: '{"a": "a"}' parseToDict: (Dictionary new at: 'a' put: 'a'; yourself).
	self json: '{"a": [[]]}' parseToDict: (Dictionary new at: 'a' put: #(#()); yourself).
	self json: '{"a":"b", "b":"a"}' parseToDict: (Dictionary new add: 'a'->'b'; add: 'b'->'a'; yourself).! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseFalse
	self json: 'false' parseTo: false.
	self json: '  false' parseTo: false.
	self json: 'false  ' parseTo: false.
	self json: '  false  ' parseTo: false.! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseNull
	self json: 'null' parseTo: nil.
	self json: '  null' parseTo: nil.
	self json: 'null  ' parseTo: nil.
	self json: '  null  ' parseTo: nil.! !

!WebJSONTest methodsFor: 'testing-parsing' stamp: 'janko 7/13/2011 22:01'!
testParseNumber
	self json: '1' parseTo: 1.
	self json: '0123' parseTo: 123.
"	self json: '1.23e2' parseTo: 123. "
	self json: '-1' parseTo: -1.
	self json: '-0' parseTo: 0.
"	self json: '[-1.2]' parseTo: #(-1.2). "! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseString
	self json: '"hi"' parseTo: 'hi'.
	self json: '"\""' parseTo: '"'.
	self json: '"\\"' parseTo: '\'.
	self json: '""' parseTo: ''.! !

!WebJSONTest methodsFor: 'testing-parsing'!
testParseTrue
	self json: 'true' parseTo: true.
	self json: '  true' parseTo: true.
	self json: 'true  ' parseTo: true.
	self json: '  true  ' parseTo: true.! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyArray
	self json: '[]' stringifyFrom: #().
	self json: '[[]]' stringifyFrom: #(#()).
	self json: '[[], []]' stringifyFrom: #(#() #()).
	self json: '["hi", "there"]' stringifyFrom: #('hi' 'there').
	self json: '[["a", "b", null]]' stringifyFrom: #(('a' 'b' nil)).! !

!WebJSONTest methodsFor: 'testing-serializing' stamp: 'jm 12/15/2010 00:17'!
testStringifyDictionary
	self json: '{}' stringifyFrom: (Dictionary new).
	self json: '{"a": "a"}' stringifyFrom: (Dictionary new at: 'a' put: 'a'; yourself).
	self json: '{"a": [[]]}' stringifyFrom: (Dictionary new at: 'a' put: #(#()); yourself).
	self json: #('{"a":"b","b":"a"}' '{"b":"a","a":"b"}') 
		stringifyFromDict: (Dictionary new add: 'a'->'b'; add: 'b'->'a'; yourself).! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyFalse
	self json: 'false' stringifyFrom: false! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyNil
	self json: 'null' stringifyFrom: nil! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyNumber
	self json: '1' stringifyFrom: 1.
	self json: '123' stringifyFrom: 123.
	self json: '-1' stringifyFrom: -1.
	self json: '[-1.2]' stringifyFrom: #(-1.2).! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyString
	self json: '"hi"' stringifyFrom: 'hi'.
	self json: '"\""' stringifyFrom: '"'.
	self json: '"\\"' stringifyFrom: '\'.
	self json: '""' stringifyFrom: ''.! !

!WebJSONTest methodsFor: 'testing-serializing'!
testStringifyTrue
	self json: 'true' stringifyFrom: true! !

!WebLabel methodsFor: 'attributes'!
for: anElementOrId
	"a related element id for which is that label"
	^self attributesAt: #for put: 
		((anElementOrId isKindOf: WebElement)
			ifTrue: [anElementOrId id]
			ifFalse: [anElementOrId])! !

!WebLabel methodsFor: 'private'!
hasTag
	^true! !

!WebLabel methodsFor: 'tags'!
tag
	^#label! !

!WebLabel methodsFor: 'attributes'!
text: aString
	self addText: aString! !

!WebLabel class methodsFor: 'instance creation'!
newFor: aWebElementOrId text: aString
	^super new
		for: aWebElementOrId;
		text: aString! !

!WebLink methodsFor: 'security'!
accessAllowedFor: aSession
	"true if for object of that link a view is allowed. Only for object links, for plain urls access is always 	allowed"
	| app view right |
	self ooReference isNil ifTrue: [^true].
	app := self ooReference aidaWebAppFor: aSession.
	app isNil ifTrue: [^true].     "is this really good?"
	view := (self parms at: 'view' ifAbsent: [app defaultView]) asSymbol.
	right := aSession site securityManager 
		isUser: aSession user allowedTo: (app class viewRightSymbolFor: view) on: app class name.
	(right not and: [aSession adminAllowed]) ifTrue: 
		[app initAdminAccess. ^true].
	^right! !

!WebLink methodsFor: 'accessing'!
accessNotAllowedText
	^#en->'You don''t have enough access rights to click this link'! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addAnchorTo: anUrlString
	| in out anch | 
	anch := (self anchor includes: $#) ifTrue: [''] ifFalse: ['#']. 
	anch := anch, self anchor.
	in := anUrlString readStream. out := WriteStream on: String new.
"
	out nextPutAll: (in upTo: $? ). out nextPutAll: anch. 
	in atEnd ifFalse: [out nextPut: $? . out nextPutAll: in upToEnd].
"
	out nextPutAll: in upToEnd. out nextPutAll: anch.
	^out contents

"(WebLink new anchor: 'activity222') addAnchorTo:	
	'http://biart.eranova.si/object/o7665965.html?view=editActivityName&uuid=1518'
"! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addSessionIdTo: aString on: aSession
	"for connection of secure seesion to nonsecure one"
	| url |
	aSession hasSecureCookie ifTrue: [^aString].
	url := (aString includes: $? ) ifTrue: [aString, '&'] ifFalse: [aString, '?'].
	^url, 'sessionId=', aSession id printString.! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
anchor

	^anchor! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
anchor: aString

	anchor := aString! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
anchorNr: aNumber

	"set hypertext link anchor in the same page in format '#anchorx', for example '#anchor4'. Use WebAnchor nr: method to add an anchor in a web page."

	^self anchor: '#anchor', aNumber printString.! !

!WebLink methodsFor: 'private'!
asWebText
	"return just a text part (with formating) of this link"
	| wtext |
	wtext := WebText new.
	wtext 
		basicText: self text copy;
		textAttributes: self textAttributes copy.
	self header notNil ifTrue: [wtext header: self header].
	self size notNil ifTrue: [wtext size: self size].
	self paragraph notNil ifTrue: [wtext paragraph: self paragraph].
	self elements do: [:each | wtext add: each].
	^wtext! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checkVersionedReference
	"if ooReference is not a current version, then point it to current and add 
	version parameter to url. Version objects have always same identity, that
	is those of current object in version chain!! "
	self ooReference isCurrentVersion ifTrue: [^self].
	self parameter: 'version' value: self ooReference versionNumber.
	ooReference := self ooReference currentVersion.! !

!WebLink methodsFor: 'private'!
composeURLOn: aSession
	"do url link only if ooReference or urlReference exists, return nil otherwise"
	| stream url |
	stream := WriteStream on: String new.
	(self ooReference notNil or: [self urlReference notNil] ) ifFalse: [^nil].
	"copy parameters to aSession parms, remove all other except session id"
	parms keysAndValuesDo: [:key :value | aSession parms at: key put: value].
	aSession parms copy keysAndValuesDo: [:key :value | 
		((parms includesKey: key) or: [key = 'id']) 
			ifFalse: [aSession parms removeKey: key ifAbsent: [nil]] ].
	"make an url reference"
	self ooReference notNil
		ifTrue:	
			[url := (aSession site urlResolver
				halfUrlFromPath:	(aSession site urlResolver halfUrlFor: self ooReference)
				andParms: aSession parms on: aSession).
			(self isEncryptedViewFor: self ooReference on: aSession) 
				ifTrue: [url := self encryptedUrl: url on: aSession] ]
		ifFalse: [url := self urlReference].
	anchor notNil ifTrue: [url := self addAnchorTo: url].
	stream nextPutAll: url.
	^self properAmpersand: stream contents " &amp; instead of mere & in XHTML!! "! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
encryptedUrl: aString on: aSession
	"https and port if not default"
	| url port sslPort stream |
	url := aSession site urlResolver urlFromHalfUrl: aString on: aSession.
	('https*' match: url) ifFalse: [url := url copyReplaceAll: 'http' with: 'https'].
	port := aSession site port.
	sslPort := aSession site sslPort.
	port = 80 & sslPort = 443 ifTrue: [^url].
	stream := url readStream.
	url := (stream upTo: $/ ), '//'.
	stream upTo: $/.
	url := url, (port = 80 ifTrue: [stream upTo: $/] ifFalse: [stream upTo: $: ]).
	port  ~= 80 ifTrue: [stream upTo: $/].
	sslPort ~= 443 ifTrue: [url := url, ':', sslPort printString].
	url := url, '/', stream upToEnd.
	aSession hasSecureCookie ifFalse: [url := self addSessionIdTo: url on: aSession].
	^url! !

!WebLink methodsFor: 'private'!
hasTag
	^false  "well .."! !

!WebLink methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
href: aString
	"url of that link"
	self attributesAt: #href put: aString! !

!WebLink methodsFor: 'initialize-release'!
initialize
	parms := Dictionary new.
	self security: #grayed.  "if access not allowed, only gray text is shown"! !

!WebLink methodsFor: 'private' stamp: 'jm 8/3/2010 10:23'!
isEncryptedViewFor: anObject on: aSession
	"check if we need to make an https link"
	| app view |
	app := anObject aidaWebAppFor: aSession.
	app isNil ifTrue: [^false].
	view := self parms at: 'view' ifAbsent: [app class defaultView].
	^app mustBeEncrypted: view! !

!WebLink methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isLink
	^true! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
linkTo: aLink
	"set hypertext link to some other object or page. If argumet is a String, then this is an url reference, 	else this is object reference, which is resolved to url with help of URLResolver"
	"to add anchor: #(object anchor) !! "
	(aLink isKindOf: String ) ifTrue: [self urlReference: aLink. ^self].
	(aLink isKindOf: Array)
		ifTrue: [self ooReference: (aLink at: 1). self anchor: (aLink at: 2)]
		ifFalse: [self ooReference: aLink].! !

!WebLink methodsFor: 'events' stamp: ' 21/4/07 22:07'!
onBlur: aJavascriptCode
	"link lost a mouse focus (when in image map)"
	self attributesAt: #onBlur add: aJavascriptCode! !

!WebLink methodsFor: 'events' stamp: ' 21/4/07 22:07'!
onFocus: aJavascriptCode
	"link got maouse focus (when in image map)"
	self attributesAt: #onFocus add: aJavascriptCode! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
ooReference
	^ooReference! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
ooReference: anObject
	"Set the hypertext link to other object. This reference is at HTML generation 
	resolved to urlReference by URLResolver.  ooReference has precedence over 
	urlReference, if both are set."
	ooReference := anObject.
	anObject isVersionedObject ifTrue: [self checkVersionedReference]! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
parameter: aParmString value: aValueString

	"set an optional parameter for query part of an URL string (e.g in http://www.eranova.si/demo.html?view=brief 'view' is a parameter and 'brief' is its value).
You can set more than one parameters by repeating this method"

	self parms at: aParmString asString put: aValueString asString.! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parms
	"return a dictionary of parameter:value pairs for a query part of an URL"
	^parms! !

!WebLink methodsFor: 'private-streaming'!
prepareAttributesToStreamOn: aSession
	super prepareAttributesToStreamOn: aSession.
	self href: (self composeURLOn: aSession).! !

!WebLink methodsFor: 'translation'!
prepareForTranslation
	"if link with multilingual text, replace it with in-place input field and add a 'link' with link on right"
	| copied onlyText |
	self isMultilingual ifFalse: [^nil].
	copied := self copy.
	super prepareForTranslation. "of WebText part of link"
	onlyText := self asWebText.  "to avoid to be link anymore"
	copied text:  '<small>link</small>'.
	onlyText addTextSmall: ' ('; add: copied; addTextSmall: ')'.
	self parent replace: self with: onlyText.! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString
	^'aWebLink to: ', (self ooReference notNil 
		ifTrue: ['a', self ooReference printString] ifFalse: [self urlReference]).! !

!WebLink methodsFor: 'private'!
properAmpersand: aString
	" &amp; instead of mere & in XHTML!! "
	| page |
	page := self webPage.
	(page isNil or: [page isXHTML]) ifFalse: [^aString].
	^aString copyReplaceAll: '&' with: '&amp;'! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
security
	"you can gray or not show a link at all if this object is not accessible - a view 
	on that aWebApplication has no access rights in SecurityManager for current user.
	possible values:
	nil - no access restrictions, always show the link,
	#grayed - show only text in gray - no link if access denied
	#invisible - don't show anything - invisible link if access denied
	"

	^security! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
security: aSymbol

	security := aSymbol! !

!WebLink methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	| url allowed |
	self prepareToHtmlStreamingOn: aSession. 
	allowed := self security notNil ifTrue: [self accessAllowedFor: aSession] ifFalse: [true].
	allowed 	ifTrue: 
		[url := self composeURLOn: aSession.
		url notNil ifTrue:
			[aStream nextPutAll: self ident, '<a'. self streamAttributesTo: aStream for: aSession. 
			aStream nextPutAll: '>'.
			super streamHtmlTo: aStream for: aRequest on: aSession.
			aStream nextPutAll: '</a>'] ]
		ifFalse: [self security = #grayed ifTrue: 
			["print a grayed text with attributes and composite elements"
			self title: self accessNotAllowedText.
			aStream nextPutAll: self ident, '<font'. self streamAttributesTo: aStream for: aSession. 
			aStream nextPutAll: 'color="#c0c0c0">'.
			super streamHtmlTo: aStream for: aRequest on: aSession.
			aStream nextPutAll: '</font>', self  eol ] ].! !

!WebLink methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
target: aString
	self attributesAt: #target put: aString! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
text: aString linkTo: aLink
	self linkTo: aLink.
	self text: aString.! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
urlReference
	^urlReference! !

!WebLink methodsFor: 'private' stamp: ' 21/4/07 22:07'!
urlReference: aString
	"Set the URL hypertext link to the other Web page.  It is used if there is no ooReference 
	to resolve. ooReference has precedence over urlReference when both are set."
	urlReference := aString.! !

!WebLink methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
view: aViewStringOrSymbol
	"for speedy additions of a view parameters to urls"
	"ignore #main, because this is default view anyway!!"
	((aViewStringOrSymbol = 'main') | (aViewStringOrSymbol = #main)) ifTrue: [^self].
	self parameter: 'view' value: aViewStringOrSymbol! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
linkTo: aLink
	"set hypertext link to some other object or page. If argumet is a String, then this is an url reference, 	else this is object reference, which is resolved to url with help of URLResolver"
	"to add anchor: #(object anchor) !! "
	^self new linkTo: aLink! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString attributes: anArray linkTo: aLink

	"set hypertext link and text to some other object or page. If argumet is a String, then this is an url reference, else this is object reference, which is resolved to url with help of URLResolver"
	| webLink |
	webLink := self linkTo: aLink.
	webLink text: aString attributes: anArray.
	^webLink

"WebLink text: 'text' linkTo: 'http://www.tris-a.si'"
"WebLink text: 'text' linkTo: Smalltalk"! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString linkTo: aLink

	"set hypertext link and text to some other object or page. If argumet is a String, then this is an url reference, else this is object reference, which is resolved to url with help of URLResolver"
	| webLink |
	webLink := self linkTo: aLink.
	webLink text: aString.
	^webLink

"WebLink text: 'text' linkTo: 'http://www.tris-a.si'"
"WebLink text: 'text' linkTo: Smalltalk"! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString linkTo: aLink parameter: aParmString value: aValueString
	"set hypertext link and text to some other object or page. If argumet is a String, then this is an url reference, else this is object reference, which is resolved to url with help of URLResolver. Add also one  parameter in query part of an URL"
	| webLink |
	webLink := self text: aString linkTo: aLink.
	webLink parameter: aParmString value: aValueString.
	^webLink

"WebLink text: 'text' linkTo: 'http://www.tris-a.si'"
"WebLink text: 'text' linkTo: Smalltalk"! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString linkTo: aLink 
	parameter: a1ParmString value: a1ValueString 
	parameter: a2ParmString value: a2ValueString
	"set hypertext link and text to some other object or page. If argumet is a String, then this is an url reference, else this is object reference, which is resolved to url with help of URLResolver. Add also one  parameter in query part of an URL"
	| webLink |
	webLink := self text: aString linkTo: aLink.
	webLink parameter: a1ParmString value: a1ValueString.
	webLink parameter: a2ParmString value: a2ValueString.
	^webLink! !

!WebLink class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
text: aString linkTo: aLink view: aViewString
	^(self text: aString linkTo: aLink) view: aViewString! !

!WebList methodsFor: 'adding/removing' stamp: ' 21/4/07 22:07'!
add: anElement
	"ensure always WebListItem as subelement of list"
	| element |
	element := (anElement class == WebListItem)
		ifTrue: [anElement] 
		ifFalse: [WebListItem newListItem add: anElement; yourself].
	^super add: element! !

!WebList methodsFor: 'adding/removing' stamp: ' 21/4/07 22:07'!
addDefinition: anElement
	"ensure always WebListItem as subelement of list"
	| element |
	element := (anElement class == WebListItem)
		ifTrue: [anElement setDefinition] 
		ifFalse: [WebListItem newDefinition add: anElement; yourself].
	^super add: element! !

!WebList methodsFor: 'adding/removing' stamp: ' 21/4/07 22:07'!
addDefinitionTerm: anElement
	"ensure always WebListItem as subelement of list"
	| element |
	element := (anElement class == WebListItem)
		ifTrue: [anElement setDefinitionTerm] 
		ifFalse: [WebListItem newDefinitionTerm add: anElement; yourself].
	^super add: element! !

!WebList methodsFor: 'adding/removing'!
addLinkTo: anObject text: aString 
	"add new line to the list with text and link to some object. Return link, not line!!" 
	| line link |
	line := WebListItem new.
	link := line addLinkTo: anObject text: aString.
	self add: line.
	^link! !

!WebList methodsFor: 'adding/removing'!
addText: aString
	"make a new element with aString. Attributes are same as previous text. Return text, not list item!!" 
	| line text |
	line := WebListItem new.
	text := line addText: aString.
	self  add: line.
	^text! !

!WebList methodsFor: 'accessing'!
definition
 	self kind: #definition! !

!WebList methodsFor: 'private'!
hasTag
	^false "well.."! !

!WebList methodsFor: 'initialize-release'!
initialize
	self unordered! !

!WebList methodsFor: 'accessing'!
kind
	"should be #ordered, #unordered, #definition"
	^kind! !

!WebList methodsFor: 'private'!
kind: aSymbol
	"should be #ordered, #unordered, #definition. By default is #unordered"
	kind := aSymbol.! !

!WebList methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
name
	^name! !

!WebList methodsFor: 'accessing'!
name:  aString
	"set the name of this list. Used for accessing the selections from WebForm or WebApplication"
	name := aString.! !

!WebList methodsFor: 'accessing'!
ordered
 	self kind: #ordered! !

!WebList methodsFor: 'private'!
shouldIdent
	^true! !

!WebList methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	| tag |
	self prepareToHtmlStreamingOn: aSession. 
	self kind == #ordered ifTrue: [tag := 'ol'].
	self kind == #unordered ifTrue: [tag := 'ul'].
	self kind == #definition ifTrue: [tag := 'dl'].
	aStream nextPutAll: self ident, '<', tag.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>', self eol.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: self ident, '</', tag, '>', self eol.! !

!WebList methodsFor: 'accessing'!
unordered
 	self kind: #unordered! !

!WebList class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
kind: aSymbol
	"should be #ordered, #unordered, #definition"

	^self new initialize kind: aSymbol! !

!WebList class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebList class methodsFor: 'instance creation'!
newDefinition
	^self new definition! !

!WebList class methodsFor: 'instance creation'!
newOrdered
	^self new ordered! !

!WebList class methodsFor: 'instance creation'!
newUnordered
	^self new unordered! !

!WebListItem methodsFor: 'private'!
hasTag
	^false "otherwise duplicate tags!!"! !

!WebListItem methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	self setListItem! !

!WebListItem methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setDefinition
	self tag: 'dd'! !

!WebListItem methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setDefinitionTerm
	self tag: 'dt'! !

!WebListItem methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setListItem
	self tag: 'li'! !

!WebListItem methodsFor: 'private'!
shouldIdent
	^true! !

!WebListItem methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident, '<', self tag.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: '</', self tag, '>', self eol.! !

!WebListItem methodsFor: 'accessing'!
tag
	tag isNil ifTrue: [self setListItem].
	^tag! !

!WebListItem methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
tag: aString
	tag := aString! !

!WebListItem class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebListItem class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newDefinition
	^self new setDefinition "dd"! !

!WebListItem class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newDefinitionTerm
	^self new setDefinitionTerm "dt"! !

!WebListItem class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newListItem
	^self new setListItem "li"! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
addToCache
	self makeRoomInCache.
	self class cache add: self.! !

!WebLiveImage methodsFor: 'private' stamp: 'jm 7/29/2010 12:16'!
aidaContentType
	"MIME type for our image"
	^'image/gif'! !

!WebLiveImage methodsFor: 'as yet unclassified' stamp: 'janko 4/25/2012 10:59'!
aidaIsRespondingStreamed
	"is this page able to stream HTML directly into response?"
	^false! !

!WebLiveImage methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	^self! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
cacheHysteresis
	"when removing from cache, make room for that number of entries"
	^10! !

!WebLiveImage methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
displayOn: aGraphicsContext

	"default painting - some hello message. Subclasses should override for some more paintings"

	| composite text |
	composite := CompositePart new.
	text := 'This is a live GIF image' asText.
	text emphasizeAllWith: (Array with: #bold with: #color -> ColorValue blue).
	text := text asComposedText.
	composite add: text at: 100 @ (height/2).
	composite displayOn: aGraphicsContext.! !

!WebLiveImage methodsFor: 'drawing' stamp: ' 21/4/07 22:07'!
drawImage
	"it paints a drawing with a painter and convert it to GIF"
	| pixmap graphicsContext image stream |
	pixmap := Pixmap extent: self width @ self height.
	graphicsContext := pixmap graphicsContext.
	self painter displayOn: graphicsContext.
	image := pixmap asImage.
	stream := GifImageStream on: ByteArray new writeStream.
	[stream nextPutImage: image. self gif: stream contents] 
		valueNowOrOnUnwindDo: [stream close].! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
gif
	"returns a representation of a image in GIF format"
	^gif! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
gif: aByteArray

	"also set a refreshed timestamp"

	gif := aByteArray.
	self refreshed: Timestamp now.! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
height
	"height of image, default is 300 pixels"
	height isNil ifTrue: [self height: 300].
	^height! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
height: anInteger
	height := anInteger.! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isComposite
	^false! !

!WebLiveImage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebElement
	^false! !

!WebLiveImage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebPage
	^true! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
lastUsed
	"timestamp of last usage. Used for caching algorithms. Set at HTML generation"

	lastUsed isNil ifTrue: [self lastUsed: Timestamp now].
	^lastUsed! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
lastUsed: aTimestamp
	"timestamp of last usage. Used for caching algorithms"

	lastUsed := aTimestamp! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
makeRoomInCache
	"if cache is full, remove least used images"
	| cached  toRemove |
	self class cache size < self maxCacheSize ifTrue: [^self].
	cached := (SortedCollection 
		withAll: self class cache
		sortBlock: [:a :b | a lastUsed < b lastUsed]) asOrderedCollection.
	self cacheHysteresis timesRepeat:
		[toRemove := cached first.
		toRemove removeFromCache.
		cached removeFirst]! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
maxCacheSize
	^50! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
painter
	"painter is an object, which actually paints an image. It must respond to message displayOn: anGraphicsContect. By default, painter is self and paints some hello message. Subclasses should override displayOn: appropriately"

	painter isNil ifTrue: [self painter: self].
	^painter! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
painter: anObject
	painter := anObject.! !

!WebLiveImage methodsFor: 'private'!
preferredUrl
	| random |
	random := (AIDASite random next * 10000) truncated printString.
	^'/image/live-', random, '.gif'! !

!WebLiveImage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
refreshNeeded
	^self gif isNil! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
refreshed
	"timestamp of last gif creation. Used for caching algorithms. Set,when calling gif: method"

	refreshed isNil ifTrue: [self refreshed: Timestamp now].
	^refreshed! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
refreshed: aTimestamp
	"timestamp of last gif creation. Used for caching algorithms"

	refreshed := aTimestamp! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
removeFromCache
	self class cache remove: self ifAbsent: [].
	self removeFromURLResolver.
	self gif: nil.! !

!WebLiveImage methodsFor: 'private-caching' stamp: ' 21/4/07 22:07'!
removeFromURLResolver
	self resolver notNil
		ifTrue: [self resolver removeObject: self]! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
resolver
	^resolver! !

!WebLiveImage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
resolver: anObject
	resolver := anObject! !

!WebLiveImage methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	"refresh gif if nesessary and put it into a HTML stream"
	Processor activeProcess priority: (Processor activeProcess priority - 3).
	self refreshNeeded ifTrue: 
		[self drawImage.
		self addToCache].
	aStream nextPutAll: self gif asByteString.
	Processor activeProcess priority: (Processor activeProcess priority + 3).
	self lastUsed: Timestamp now.

"	aSession server urlResolver removeObject: self "! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
width
	"width of image, default is 500 pixels"
	width isNil ifTrue: [self width: 500].
	^width! !

!WebLiveImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
width: anInteger
	width := anInteger.! !

!WebLiveImage class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
cache
	Cache isNil ifTrue: [self initCache].
	^Cache! !

!WebLiveImage class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
initCache
	Cache := Set new.! !

!WebLivePDFCreator methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
aidaDontCache
	"refresh content always!! "
	^true! !

!WebLivePDFCreator methodsFor: 'converting' stamp: 'np 10/18/2008 13:15'!
convertToPdf: aHtmlString
	| fname pdfname stream |
	fname := (AIDASite random new next * 1000) truncated printString, '.html'.
	pdfname := (AIDASite random new next * 1000) truncated printString, '.pdf'.
	[stream := (SpFilename named: fname) writeStream. stream nextPutAll: aHtmlString] 
		ensure: [stream close].
	OSProcess exec: 'htmldoc --batch htmldoc.book --outfile ', pdfname, ' ', fname.
	(SpFilename named: fname) delete.
	[stream := (SpFilename named: pdfname) readStream binary. ^stream contents] 
		ensure: [stream close. (SpFilename named: pdfname) delete].! !

!WebLivePDFCreator methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
expiresTimestamp
	^nil! !

!WebLivePDFCreator methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	| html pdf |
	html := AIDASite convert: (self object perform: self method) toCodepage: #'iso-8859-2'.
	pdf := self convertToPdf: html.
	aStream nextPutAll:  pdf asByteString.! !

!WebLivePDFCreator class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
fromHtmlMethod: aMethodSymbol on: anObject site: anAIDASite
	"this method should return a complete html page!! "
	| docname |
	docname := (anObject class canUnderstand: #preferedUrlName) 
		ifTrue: [anObject preferedUrlName] ifFalse: ['live'].
	^self fromMethod: aMethodSymbol on: anObject 
		contentType: 'application/pdf' preferedUrl: '/generated/', docname, '.pdf' site: anAIDASite! !

!WebMenu methodsFor: 'model adapting'!
acceptFormInputFrom: aPostDataArray
	| values |
	values := aPostDataArray class == Dictionary
		ifTrue:  [Set new add: (aPostDataArray at: self name); yourself]
		ifFalse: [(aPostDataArray allAt: self name) asSet].
	self acceptInputFromValues: values! !

!WebMenu methodsFor: 'private'!
acceptInputFromValue: aString
	self acceptInputFromValues: (Array with: aString)! !

!WebMenu methodsFor: 'model adapting'!
acceptInputFromValues: aCollection
	| option result values |
	self selected isNil ifTrue: [self selected: OrderedCollection new]. "we need a collection!! "
	self selected copy do: [:each | self selected remove: each].
	values := aCollection collect: [:each | AIDASite convert: each fromCodepage: #'UTF-8'].
	self selected addAll: 
		(self collection select:  [:each |
			option := self aspect isNil ifTrue: [each] ifFalse: [each perform: self aspect].
			option := option trimBlanks. "it should also eliminate more than one spaces together!!"
			values contains: [:value | value match: option] ] ).
	self aspectToStore notNil ifTrue: 
		[result := self selected notEmpty ifTrue: [self selected asOrderedCollection first] ifFalse: [nil].
		self adaptorToStore value: result]! !

!WebMenu methodsFor: 'accessing'!
adaptorToStore
	"an aspect - name of a method to call on object, to write down a result from selection"
	^adaptorToStore! !

!WebMenu methodsFor: 'private'!
adaptorToStore: anAIDAAspectAdaptor
	"an aspect - name of a method to call on object, to write down a result from selection"
	adaptorToStore := anAIDAAspectAdaptor! !

!WebMenu methodsFor: 'model adapting'!
aspect: aSymbol collection: aCollection selected: aSelectedCollection
	self adaptor: ((AidaModelAdaptor forAspect: aSymbol) subject: aCollection).
	self selected: aSelectedCollection.
	self setMultiple.
	self size: 4.! !

!WebMenu methodsFor: 'model adapting'!
aspect: aSymbol collection: aCollection selectedToAspect: aSymbol2 of: anObject
	self multiple: false.
	self adaptor: ((AidaModelAdaptor forAspect: aSymbol) subject: aCollection).
	self adaptorToStore: ((AidaModelAdaptor forAspect: aSymbol2) subject: anObject).! !

!WebMenu methodsFor: 'accessing'!
aspectToStore
	^self adaptorToStore notNil
		ifTrue: [self adaptorToStore aspect]
		ifFalse: [nil]! !

!WebMenu methodsFor: 'accessing'!
collection
	^self object "in adaptor"! !

!WebMenu methodsFor: 'model adapting'!
collection: aCollection selected: aSelectedCollection
	self adaptor: (AidaModelAdaptor new subject: aCollection). "just to hold our collection"
	self selected: aSelectedCollection.
	self setMultiple.
	self size: 4.! !

!WebMenu methodsFor: 'model adapting'!
collection: aCollection selectedToAspect: aSymbol of: anObject
	self multiple: false.
	self adaptor: (AidaModelAdaptor new subject: aCollection). "just to hold our collection"
	self adaptorToStore: ((AidaModelAdaptor forAspect: aSymbol) subject: anObject).! !

!WebMenu methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self resetMultiple.! !

!WebMenu methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEmpty
	"input field is empty or nil"
	| vlue |
	self objectToStore notNil ifTrue: [vlue := self objectToStore perform: self aspectToStore].
	^vlue isNil 
		or: [((vlue isKindOf: String) and: [vlue isEmpty])
			or: [(vlue isKindOf: Number) and: [vlue = 0] ]]! !

!WebMenu methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isMenu
	^true! !

!WebMenu methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isMultiple
	"multiple selection?"
	^self multiple! !

!WebMenu methodsFor: 'validation'!
isValid
	self adaptorToStore isNil ifTrue: [^true].
	^self adaptorToStore isValid! !

!WebMenu methodsFor: 'private' stamp: ' 21/4/07 22:07'!
joinToForm: aWebForm
	aWebForm fields keysAndValuesDo: [:fname :element | 
		element == self ifTrue: [self name: fname]. ^self]! !

!WebMenu methodsFor: 'private' stamp: ' 21/4/07 22:07'!
multiple
	^multiple! !

!WebMenu methodsFor: 'private' stamp: ' 21/4/07 22:07'!
multiple: aBoolean
	multiple := aBoolean! !

!WebMenu methodsFor: 'accessing'!
objectToStore
	^self adaptorToStore notNil
		ifTrue: [self adaptorToStore subject]
		ifFalse: [nil]! !

!WebMenu methodsFor: 'private-streaming'!
prepareSelected
	"add aspect of objectToStore selected result. There a preselection can reside"
	self aspectToStore isNil ifTrue: [^nil]. "multiple selections used, selected already set"
	self selected: (Set with: self adaptorToStore value)! !

!WebMenu methodsFor: 'private-streaming' stamp: 'mivsek 1/10/2008 22:25'!
printOptionsOn: aStream
	| option preselected session |
	self collection isEmpty ifTrue: [^nil].
	self prepareSelected.
	preselected := self selected notNil ifTrue: [self selected asSet] ifFalse: [#()].
	aStream nextPutAll: '<option></option>'. "empty choice"
	session := self firstSessionFromStack.
	self collection do: [:each |
		option := self aspect isNil ifTrue: [each] ifFalse: [each perform: self aspect]. 
		option := AIDASite convertToWeb: option on: session.
		aStream nextPutAll: '<option'.
		aStream nextPutAll: ((preselected includes: each) ifTrue: [' selected>'] ifFalse: ['>']).
 		aStream nextPutAll: option; nextPutAll: '</option> ' ]! !

!WebMenu methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
resetMultiple
	self multiple: false! !

!WebMenu methodsFor: 'model adapting'!
save
	^self adaptorToStore notNil ifTrue: [self adaptorToStore save]! !

!WebMenu methodsFor: 'accessing'!
selected
	"selected options wiil be stored here"
	^selected! !

!WebMenu methodsFor: 'private' stamp: ' 21/4/07 22:07'!
selected: aCollection
	selected := aCollection! !

!WebMenu methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setMultiple
	self multiple: true! !

!WebMenu methodsFor: 'private' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebMenu methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size: aRowNumber
	"number of rows visible in multiple selection menu"
	self attributesAt: #size put: aRowNumber printString! !

!WebMenu methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<select'.
	self streamAttributesTo: aStream for: aSession.
	self isMultiple ifTrue: [aStream nextPutAll: ' multiple'].
	aStream nextPutAll: '>'.
	self streamOptionsTo: aStream.
	aStream nextPutAll: '</select>'.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebMenu methodsFor: 'private-streaming'!
streamOptionsTo: aStream
	| option preselected session |
	self collection isEmpty ifTrue: [^nil].
	self prepareSelected.
	preselected := self selected notNil ifTrue: [self selected asSet] ifFalse: [#()].
	aStream nextPutAll: '<option></option>'. "empty choice"
	session := self firstSessionFromStack.
	self collection do: [:each |
		option := self aspect isNil ifTrue: [each] ifFalse: [each perform: self aspect]. 
		option := AIDASite convertToWeb: option on: session.
		aStream nextPutAll: '<option'.
		aStream nextPutAll: ((preselected includes: each) ifTrue: [' selected>'] ifFalse: ['>']).
 		aStream nextPutAll: option; nextPutAll: '</option> ' ]! !

!WebMenu class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol collection: aCollection selected: aSelectedCollection
	"Multiple selection menu. Aspect of every element in aColection will be shown in menu. 
	Multiple selections will be put in aSelectedCollection. Here also initial selections can be set"
	^self new aspect: aSymbol collection: aCollection selected: aSelectedCollection! !

!WebMenu class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol collection: aCollection selectedToAspect: aSymbol2 of: anObject
	"Single selection menu.. Aspect of every element in aColection will be shown in menu. 
	Single selection will be put in an seelcted aspect of object. Here also initial selection can be set"
	^self new aspect: aSymbol collection: aCollection  selectedToAspect: aSymbol2 of: anObject! !

!WebMenu class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
collection: aCollection selected: aSelectedCollection
	"Multiple selection menu.Every element (text!!) in aColection will be shown in menu. 
	Multiple selection will be put in aSelectedCollection. Here also initial selections can be set"
	^self new collection: aCollection selected: aSelectedCollection! !

!WebMenu class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
collection: aCollection selectedToAspect: aSymbol2 of: anObject
	"Single selection menu.. Every element (text!!) in aColection will be shown in menu. 
	Single selection will be put in an seelcted aspect of object. Here also initial selection can be set"
	^self new collection: aCollection selectedToAspect: aSymbol2 of: anObject! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
addToCache
	self makeRoomInCache.
	self class cache add: self.! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
cacheHysteresis
	"when removing from cache, make room for that number of entries"
	^10! !

!WebMethodImage methodsFor: 'accessing' stamp: 'JM 4/26/2007 17:48'!
lastUsed
	"timestamp of last usage. Used for caching algorithms. Set at HTML generation"

	lastUsed isNil ifTrue: [self lastUsed: SpTimestamp now].
	^lastUsed! !

!WebMethodImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
lastUsed: aTimestamp
	"timestamp of last usage. Used for caching algorithms"

	lastUsed := aTimestamp! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
makeRoomInCache
	"if cache is full, remove least used images"
	| cached  toRemove |
	self class cache size < self maxCacheSize ifTrue: [^self].
	cached := (SortedCollection 
		withAll: self class cache
		sortBlock: [:a :b | a lastUsed < b lastUsed]) asOrderedCollection.
	self cacheHysteresis timesRepeat:
		[toRemove := cached first.
		toRemove removeFromCache.
		cached removeFirst]! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
maxCacheSize
	^50! !

!WebMethodImage methodsFor: 'accessing'!
preferredUrl
	| ext |
	ext := self site mimeMap extensionForType: self aidaContentType.
	ext isNil ifTrue: [ext := ''].
	^'/img/' , self method asString asLowercase , ext! !

!WebMethodImage methodsFor: 'private'!
printString
	^'WebMethodImage #', self method asString, ' on ', self object class name! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
removeFromCache
	self class cache remove: self ifAbsent: [].
	self removeFromURLResolver.! !

!WebMethodImage methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
removeFromURLResolver
	self resolver notNil
		ifTrue: [self resolver removeObject: self]! !

!WebMethodImage methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
resolver
	^self site urlResolver! !

!WebMethodImage class methodsFor: 'caching' stamp: 'rob.rothwell 3/2/2009 22:00'!
cache
	cache isNil ifTrue: [self initCache].
	^cache! !

!WebMethodImage class methodsFor: 'instance creation'!
fromMethod: aSymbol on: anObject contentType: aString site: anAIDASite
	"cached one only preservers its url, but method is still called everytime image is shown!!"
	| cached | 
	cached := self imageForObject: anObject andMethod: aSymbol.
	^cached notNil 
		ifTrue: [cached] 
		ifFalse: [super new
			object: anObject;
			method: aSymbol;
			aidaContentType: aString;
			site: anAIDASite;
			addToCache]! !

!WebMethodImage class methodsFor: 'caching' stamp: ' 21/4/07 22:07'!
imageForObject: anObject andMethod: aSymbol

	^self cache detect: [:each | each object == anObject and: [each method = aSymbol] ] ifNone: [nil]! !

!WebMethodImage class methodsFor: 'caching' stamp: 'rob.rothwell 3/2/2009 22:00'!
initCache
	cache := Set new.! !

!WebMethodResource methodsFor: 'accessing' stamp: 'jm 7/29/2010 12:30'!
aidaContentType
	"MIME type for our resource"	
	contentType isNil ifTrue: [self aidaContentType: 'image/gif'].
	^contentType! !

!WebMethodResource methodsFor: 'accessing' stamp: 'jm 7/29/2010 12:30'!
aidaContentType: aString
	contentType := aString! !

!WebMethodResource methodsFor: 'testing' stamp: 'janko 4/25/2012 10:59'!
aidaIsRespondingStreamed
	"always stream method resources"
	^true! !

!WebMethodResource methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	^self! !

!WebMethodResource methodsFor: 'accessing' stamp: 'mivsek 1/10/2008 17:41'!
expiresTimestamp
	"24 hours from now, to avoid reloading of images" 
	^SpTimestamp fromSeconds: SpTimestamp now asSeconds + (24*3600)! !

!WebMethodResource methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebElement
	^false! !

!WebMethodResource methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebPage
	^true! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
method
	^method! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
method: aSymbol
	method := aSymbol! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object
	^object! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object: anObject
	object := anObject! !

!WebMethodResource methodsFor: 'accessing' stamp: 'janko 3/19/2012 13:21'!
preferredUrl
	^preferedUrl! !

!WebMethodResource methodsFor: 'accessing' stamp: 'janko 3/19/2012 21:17'!
preferredUrl: aString
	preferedUrl := aString! !

!WebMethodResource methodsFor: 'printing'!
printString
	^'aMethodResource
	method: ', self method printString, '
	preferedUrl: ', self preferredUrl, '
	content type: ', self aidaContentType! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	"a Site on which this resource will be shown"
	^site! !

!WebMethodResource methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site: anAIDASite
	site := anAIDASite! !

!WebMethodResource methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	"stream content of method resource to a response"
	| response content |
	response := aRequest streamedResponse.
	content := self object perform: self method.
	response length: content size. "to stream on HTTP/1.0 too, because chunking is not allowed"
	self site addResponseHeadersTo: response forPage: self on: aSession.
	response nextPutAll: (AIDASite properArray: content). "in case of TwoByteString or Array"
	response close.! !

!WebMethodResource class methodsFor: 'instance creation' stamp: 'janko 3/19/2012 21:17'!
fromMethod: aSymbol on: anObject contentType: aString preferedUrl: aString2 site: anAIDASite
	^super new
		object: anObject;
		method: aSymbol;
		aidaContentType: aString;
		preferredUrl: aString2;
		site: anAIDASite! !

!WebMethodResource class methodsFor: 'instance creation'!
fromMethod: aSymbol on: anObject contentType: aString site: anAIDASite
	^super new
		object: anObject;
		method: aSymbol;
		aidaContentType: aString;
		site: anAIDASite! !

!WebMobileApplication class methodsFor: 'private' stamp: 'janko 8/25/2012 12:52'!
newFromNameFor: anObject on: aSession
	"Try to create of anObjectMobileApp instance if that class exists."
	"Squeak specific!!"
	| className class |
	className := (anObject class name asString, 'MobileApp') asSymbol.
	class := [Smalltalk at: className] on: Error do: [:ex | ^nil].  "Squeak specific!!"
	(class allSuperclasses includes: WebApplication) ifFalse: [^nil].
	^class basicNew 
		observee: anObject; 
		session: aSession; 
		initialize.
													
													! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'jm 7/29/2010 12:17'!
aidaContentType
	^contentType! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'jm 7/29/2010 12:18'!
aidaContentType: anObject
	contentType := anObject ! !

!WebNonHTMLResource methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	^self! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'np 10/18/2008 13:30'!
content
	^content! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'np 10/18/2008 13:31'!
content: anObject
	content := anObject! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'np 10/18/2008 13:31'!
filename
	^filename! !

!WebNonHTMLResource methodsFor: 'accessing' stamp: 'np 10/18/2008 13:31'!
filename: anObject
	filename := anObject! !

!WebNonHTMLResource methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self filename isNil
		ifTrue: [aStream nextPutAll: self content]
		ifFalse: [aStream nextPutAll: 
			(SpFilename named: self filename) 
				underlyingFilename contentsOfEntireBinaryFile asString]! !

!WebNonHTMLResource class methodsFor: 'instance creation'!
forPDF: aByteArray
	^super new
		aidaContentType: 'application/pdf';
		content: aByteArray! !

!WebNonHTMLResource class methodsFor: 'instance creation'!
forPDFFile: aFilenameString
	^super new
		aidaContentType: 'application/pdf';
		filename: aFilenameString! !

!WebNonHTMLResource class methodsFor: 'instance creation'!
forText: aByteArray
	^super new
		aidaContentType: 'text/plain';
		content: aByteArray! !

!WebNonHTMLResource class methodsFor: 'instance creation'!
forXML: aByteArray
	^super new
		aidaContentType: 'text/xml';
		content: aByteArray! !

!WebPage methodsFor: 'private-scripts'!
addCometLoadScript
	"long polling Ajax call"
	self site cometEnabled ifTrue:
		[self onLoad: 'aidaOpenComet()' ] "will also check that WebSocket is not already open"! !

!WebPage methodsFor: 'header elements' stamp: 'janko 11/24/2008 21:56'!
addGlobalKeywords
	"global keywords to all pages on this website"
	| app |
	app := self firstAppFromStack.
	(app isNil or: [app site keywords isEmpty]) ifTrue: [^nil].
	self addMetaKeywords: app site keywords! !

!WebPage methodsFor: 'private' stamp: 'janko 8/25/2012 19:02'!
addHeader: aTagString value: aString
	| event |
	self isStreaming ifTrue: [self errorAlreadyInStreamingState]. "too late to add headers in streaming state!!"
	event := self firstContextFromStack event.
	event isClassicalRequest 
		ifFalse: [self errorCannotSetHeadersFromAjax]. "because page headers are already sent to browser"
	self headers add: (aTagString -> aString)! !

!WebPage methodsFor: 'private-scripts'!
addJSONReportScriptAndHandler
	"report existence of JSON support in browser"
	self onLoad: 'aidaJsonReport()'.
	(self eventHandlerFor: #jsonExists)
		addJsonExists! !

!WebPage methodsFor: 'header elements'!
addJavascript: aScriptString
	self addScriptWithParms: 'type="text/javascript"' script: aScriptString! !

!WebPage methodsFor: 'header elements' stamp: ' 21/4/07 22:07'!
addLinkToAlternateScreenStyleSheet: anObjectOrUrl
	| url |
	url := anObjectOrUrl isString
		ifTrue: [anObjectOrUrl]
		ifFalse: [self site urlResolver halfUrlFor: anObjectOrUrl].
	self addHeader: 'link' value: 'rel="alternate stylesheet" type="text/css" media="screen" href="', url, '" '! !

!WebPage methodsFor: 'header elements'!
addLinkToDefaultFavicon
	"WebStyle favicon (favorites icon). So far only in .ico format!!"
	self addLinkToFavicon: '/favicon.ico'! !

!WebPage methodsFor: 'header elements'!
addLinkToFavicon: aFaviconImageOrUrl
	"favicon (favorites icon). So far only in .ico format!!"
	| url |
	url := aFaviconImageOrUrl isString
		ifTrue: [aFaviconImageOrUrl]
		ifFalse: [self site urlResolver fullUrlFor: aFaviconImageOrUrl on: nil].
	self addHeader: 'link' value: 'rel="icon" type="image/x-icon" href="', url, '" '! !

!WebPage methodsFor: 'header elements' stamp: ' 21/4/07 22:07'!
addLinkToJavascript: anObjectOrUrl
	| url |
	url := anObjectOrUrl isString
		ifTrue: [anObjectOrUrl]
		ifFalse: [self site urlResolver halfUrlFor: anObjectOrUrl].
	self addScriptWithParms: ' src="', url, '" language="JavaScript" type="text/javascript"' script: ''.! !

!WebPage methodsFor: 'header elements'!
addLinkToMobileStyleSheet: anObjectOrUrl
	| url |
	url := anObjectOrUrl isString
		ifTrue: [anObjectOrUrl]
		ifFalse: [self site urlResolver halfUrlFor: anObjectOrUrl].
	self addHeader: 'link' value: 'rel="stylesheet" type="text/css" media="screen" href="', url, '" '! !

!WebPage methodsFor: 'header elements' stamp: ' 21/4/07 22:07'!
addLinkToPrintStyleSheet: anObjectOrUrl
	| url |
	url := anObjectOrUrl isString
		ifTrue: [anObjectOrUrl]
		ifFalse: [self site urlResolver halfUrlFor: anObjectOrUrl].
	self addHeader: 'link' value: 'rel="stylesheet" type="text/css" media="print" href="', url, '" '! !

!WebPage methodsFor: 'header elements' stamp: ' 21/4/07 22:07'!
addLinkToScreenStyleSheet: anObjectOrUrl
	| url |
	url := anObjectOrUrl isString
		ifTrue: [anObjectOrUrl]
		ifFalse: [self site urlResolver halfUrlFor: anObjectOrUrl].
	self addHeader: 'link' value: 'rel="stylesheet" type="text/css" media="screen" href="', url, '" '! !

!WebPage methodsFor: 'header elements' stamp: ' 21/4/07 22:07'!
addMetaContentType: aString
	"example: 'text/html; charset=iso8859-2'"
	self addHeader: 'meta' value: 'http-equiv="Content-Type"  content="', aString, '" '! !

!WebPage methodsFor: 'header elements'!
addMetaDescription: aString
	self addMetaName: 'description' content: aString! !

!WebPage methodsFor: 'header elements'!
addMetaKeywords: aString
	"keywords separated with , "
	self addMetaName: 'keywords' content: aString! !

!WebPage methodsFor: 'header elements'!
addMetaName: aNameString content: aContentString
	self addHeader: 'meta' value: 'name="', aNameString, '" content="', aContentString, '"'! !

!WebPage methodsFor: 'private-scripts'!
addNewTabScriptAndHandler
	"report opening page in new tab or window on the same page"
	self onLoad: 'aidaNewTabReport()'.
	(self eventHandlerFor: #newtab) 
		addNewTab! !

!WebPage methodsFor: 'private' stamp: 'janko 8/25/2012 19:02'!
addScriptWithParms: aString script: aScriptString
	self isStreaming ifTrue: [self errorAlreadyInStreamingState]. "too late to add headers in streaming state!!"
	self firstContextFromStack event isClassicalRequest 
		ifFalse: [self errorCannotSetHeadersFromAjax]. "because page headers are already sent to browser"
	self headers add: ('script' -> (Array with: aString with: aScriptString) )! !

!WebPage methodsFor: 'header elements' stamp: 'janko 8/25/2012 19:03'!
addStyle: aString
	"inline CSS to header of a page. It will be always the last in the header, after /screen.css, to allow overriding it"
	self isStreaming ifTrue: [self errorAlreadyInStreamingState]. "too late to add headers in streaming state!!"
	self firstContextFromStack event isClassicalRequest 
		ifFalse: [self errorCannotSetHeadersFromAjax]. "because page headers are already sent to browser"
	self headers add: ('style' -> (Array with: 'type="text/css"' with: aString) ).
	"see also #rearrangeHeaders called from #streamHtmlTo:..  "! !

!WebPage methodsFor: 'header elements'!
addTitle: aString
	self addHeader: 'title' value:  aString.! !

!WebPage methodsFor: 'private-scripts'!
addUnloadReportScriptAndHandler
	"report unloading (closing, going to another) the page"
	self onUnload: 'aidaUnloadReport()'.
	(self eventHandlerFor: #unload)
		addPageUnload! !

!WebPage methodsFor: 'private-scripts'!
addWebSocketLoadScript
	self onLoad: 'aidaOpenWebSocket()'! !

!WebPage methodsFor: 'accessing' stamp: 'jm 7/29/2010 12:28'!
aidaContentType
	"return 'text/html' as content type for web pages"
	^'text/html'! !

!WebPage methodsFor: 'testing' stamp: 'janko 4/25/2012 10:59'!
aidaIsRespondingStreamed
	"is this page able to stream HTML directly into response?"
	^false! !

!WebPage methodsFor: 'private-streaming'!
aidaPresenterFor: aRequest on: aSession 
	^self! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
alink: aSymbol
	"set the color of active link text. It can be in hex format (for example #00FF00) 
	or name of color (for example #White)"
	self attributesAt: #alink put: (self colorValue: aSymbol)! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
alinkColor: aSymbol
	self alink: aSymbol.! !

!WebPage methodsFor: 'accessing'!
app
	"return anApplication on which we are composing this web page"
	^self parent notNil 
		ifTrue: [self parent "context" app]
		ifFalse: [self firstContextFromStack app]! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
background: anImageOrURL
	"set the URL for the background image"
	self attributesAt: #background put:
		(anImageOrURL isString 
			ifTrue: [anImageOrURL]
			ifFalse: [self site urlResolver halfUrlFor: anImageOrURL]).! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
bgColor: aSymbol
	"set the color of page background)"
	self attributesAt: #bgcolor put: (self colorValue: aSymbol)! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
bgImage: anImageOrURL
	self background: anImageOrURL.! !

!WebPage methodsFor: 'initialize-release'!
checkBrowserSupport
	"if browser not supported then set a warning message in red on top of page"
	self session isBrowserSupported ifTrue: [^self warningMessage: nil].
"	Transcript cr; show: '*** browser not supported: ', self session lastRequest userAgent, ' ',
		self site name, ' ', self session user nameSurname.
" "		show: self app session lastRequest printString; cr;
		show: '       user: ', self session user nameSurname; cr."

	self warningMessage: '<b>Your browser is too old.</b><br> Please install the newest version, recommended browsers are <a href="http://www.mozilla.com/firefox/">Firefox</a>, <a href="http://www.opera.com/">Opera</a> or <a href="http://www.google.com/chrome">Chrome</a>'! !

!WebPage methodsFor: 'accessing'!
close
	"only the subwindow can be closed that way, not a main page"
	self error: 'only the subwindows can be closed!!'! !

!WebPage methodsFor: 'private-streaming' stamp: 'janko 8/25/2012 19:56'!
ensureTitleInHeader
	| app htitle |
	app := self app. app ifNil: [^nil].
	htitle := self headers detect: [:assoc | assoc key = 'title'] ifNone: [nil].
	(app title aidaIsAssociation or:  [app title isEmpty]) ifTrue: [^nil].
	htitle isNil
		ifTrue: [self addTitle: app title]
		ifFalse: [htitle value: app title]! !

!WebPage methodsFor: 'private'!
errorAlreadyInStreamingState
	self error: 'Too late to add page headers, page is already streaming to response!!'! !

!WebPage methodsFor: 'private'!
errorCannotSetHeadersFromAjax
	self error: 'Cannot set page headers from Ajax request!!'  "because page headers are already sent to browser"! !

!WebPage methodsFor: 'private'!
hasTag
	^false "well..."! !

!WebPage methodsFor: 'private' stamp: 'janko 8/25/2012 18:58'!
headers
	^self otherAt: #pageHeaders ifAbsent: [self initHeaders]! !

!WebPage methodsFor: 'accessing-doctypes'!
htmlDocType
	^self otherAt: #HTMLDocType ifAbsent: [self setDefaultDocType].! !

!WebPage methodsFor: 'private'!
htmlDocType: aString
	^self otherAt: #HTMLDocType put: aString! !

!WebPage methodsFor: 'attributes'!
htmlTagAttributes
	"attributes of HTML tag"
	^self otherAt: #HTMLTagAttributes ifAbsent: [nil].! !

!WebPage methodsFor: 'attributes'!
htmlTagAttributes: aString
	"attributes of HTML tag"
	^self otherAt: #HTMLTagAttributes put: aString.! !

!WebPage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
identDepth
	^self otherAt: #identDepth ifAbsent: [0]! !

!WebPage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
identDepth: aNumber
	"current depth of identation. If 0, the we are at the start of the line"
	self otherAt: #identDepth put: aNumber! !

!WebPage methodsFor: 'initialize-release' stamp: 'janko 8/25/2012 19:00'!
initHeaders
	^self otherAt: #pageHeaders put: OrderedCollection new.! !

!WebPage methodsFor: 'initialize-release' stamp: 'janko 8/25/2012 19:01'!
initPageHeaderLinks
	self app isNil ifTrue: [^nil].
	self addMetaContentType: 'text/html; charset=UTF-8'.
	self addTitle: self title. "should be after charset definition!! See also #ensureTitleInHeader"
	self addLinkToDefaultFavicon. "that from WebStyle favicon in imgs"
	self addGlobalKeywords. "if any"

" moved to #lateInitPageHeaderLinks to put them at the end, after app specific libraries are also put in header
	self addLinkToScreenStyleSheet: self site style screenCssResource.
	self addLinkToPrintStyleSheet: self site style printCssResource.
	self session isMobile ifTrue: 
		[self addLinkToMobileStyleSheet: self site style mobileCssResource].
	self addLinkToJavascript: self site style javascriptResource.
"! !

!WebPage methodsFor: 'initialize-release'!
initPageScripts
	"page body onLoad, onUnload, etc. scripts"
	self session existsJson ifFalse:
		[self addJSONReportScriptAndHandler]. "is native JSON support present in browser?"
"	self
		addWebSocketLoadScript." "if WebSocket supported in browser"
"		addCometLoadScript; "  "long poling Ajax, if enabled on that site and not WebSocket already open"
"		addNewTabScriptAndHandler; " "report opening page in new tab or window"
"		addUnloadReportScriptAndHandler." "report closing the page or going to another one"
			"WARNING, last two crash Safari 5.0.5 "! !

!WebPage methodsFor: 'testing'!
isActive
	"this page is (probably) still displayed on the browser"
	^self parent notNil! !

!WebPage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isComposite

	"a WebPage is a composite element"
	^true! !

!WebPage methodsFor: 'accessing-doctypes'!
isHTML5
	"is page in HTML5?"
	^self otherAt: #HTML5 ifAbsent: [false]! !

!WebPage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isNewline
	^self identDepth = 0! !

!WebPage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebApplication
	^false! !

!WebPage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebPage
	^true! !

!WebPage methodsFor: 'accessing-doctypes'!
isXHTML
	"is page in XHTML?"
	^self otherAt: #XHTML ifAbsent: [false]! !

!WebPage methodsFor: 'initialize-release'!
lateInitPageHeaderLinks
	"To put them at the end, after app specific libraries are also put in header, they are put in header just
	 before streaming phase begins"
	self app isNil ifTrue: [^nil].
	self addLinkToScreenStyleSheet: self site style screenCssResource.
	self addLinkToPrintStyleSheet: self site style printCssResource.
	self session isMobile ifTrue:  "as cascaded extension of screen CSS!!"
		[self addLinkToMobileStyleSheet: self site style mobileCssResource].
	self addLinkToJavascript: self site style javascriptResource.! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
link: aSymbol
	"set the color of link text."
	self attributesAt: #link put: (self colorValue: aSymbol).! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
linkColor: aSymbol
	self vlink: aSymbol.! !

!WebPage methodsFor: 'events'!
onLoad: aJavascriptCode
	self attributesAt: #onLoad add: aJavascriptCode! !

!WebPage methodsFor: 'events'!
onUnload: aJavascriptCode
	self attributesAt: #onUnload add: aJavascriptCode! !

!WebPage methodsFor: 'private-streaming'!
rearangeHeaders
	"put inline CSS style at the end to allow overriding /screen.css and CSS from libraries"
	| hdrs |
	hdrs := self headers copy.
	1 to: self headers size do: [:inx || header |
		header := hdrs at: inx. "header = aTagString -> aString "
		header key = 'style' ifTrue:
			[self headers removeIndex: inx.
			self headers add: header] ]! !

!WebPage methodsFor: 'redirects'!
redirectAfter: aSecondsNumber toUrl: aString
	"redirection or refresh of specified url, does not work on Mozilla!! "
	self addHeader: 'meta' value: 'http-equiv="REFRESH"  content="', 
		aSecondsNumber printString, '; url=', aString, '" '! !

!WebPage methodsFor: 'redirects'!
redirectTo: anObjectOrUrlString
	"send to browser a command to reload current page with this object or Url"
	| link cmd |
	link := WebLink text:'' linkTo: anObjectOrUrlString.
	cmd := WebCommand newLoadUrl: (link composeURLOn: self session).
	self session queueCommand: cmd! !

!WebPage methodsFor: 'redirects'!
redirectTo: anObject view: aViewSymbol
	"send to browser a command to reload current page with this object and view"
	| link cmd |
	link := WebLink text:'' linkTo: anObject view: aViewSymbol.
	cmd := WebCommand newLoadUrl: (link composeURLOn: self session).
	self session queueCommand: cmd! !

!WebPage methodsFor: 'redirects'!
redirectToView: aViewSymbol
	"send to browser a command to reload current page with this view on same object"
	| app object |
	app := self app.
	object := app observee notNil ifTrue: [app observee] ifFalse: [app].
	self redirectTo: object view: aViewSymbol! !

!WebPage methodsFor: 'accessing'!
script: aString
	"add this JavaScript  to scripts executed at the opening of page"
	self scriptBefore: aString.! !

!WebPage methodsFor: 'accessing'!
session
	"return a session on which we are composing this web page"
	^self parent notNil 
		ifTrue: [self parent "context" session]
		ifFalse: [self firstSessionFromStack]! !

!WebPage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
session: aSession
	session := aSession! !

!WebPage methodsFor: 'accessing-doctypes'!
setDefaultDocType
	^self setHTML5! !

!WebPage methodsFor: 'accessing-doctypes'!
setHTML401Strict
	^self htmlDocType: '<!!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'! !

!WebPage methodsFor: 'accessing-doctypes'!
setHTML401Transitional
	^self htmlDocType: '<!!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

'.! !

!WebPage methodsFor: 'accessing-doctypes'!
setHTML5
	"this page is in HTML5"
	self otherAt: #HTML5 put: true.
	^self htmlDocType: '<!!DOCTYPE html>'.! !

!WebPage methodsFor: 'private' stamp: ' 21/4/07 22:07'!
setNewline
	self identDepth: 0! !

!WebPage methodsFor: 'initialize-release'!
setRandomId
	"set a random id of that page to have some unique identifier for page load/unload events"
	self id: ('p', (AIDASite random next * 10000) rounded printString) asSymbol! !

!WebPage methodsFor: 'private'!
setXHTML
	"this page is in XHTML"
	^self otherAt: #XHTML put: true! !

!WebPage methodsFor: 'accessing-doctypes'!
setXHTML10Strict
	self setXHTML.
	^self htmlDocType: '<!!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'.! !

!WebPage methodsFor: 'accessing-doctypes'!
setXHTML10Transitional
	self setXHTML.
	^self htmlDocType: '<!!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'.! !

!WebPage methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebPage methodsFor: 'private-streaming' stamp: 'janko 8/25/2012 19:04'!
streamHeaderElementsTo: aStream on: aSession
	self ensureTitleInHeader. "check once more if title is really there"
	self headers do: [:assoc | 
		aStream nextPutAll: '  <', assoc key, ' '.
		((assoc key = 'script') | (assoc key = 'style')) 
			ifTrue: [| array | 
				array := assoc value class == Array 
					ifTrue: [assoc value] 
					ifFalse: [Array with: assoc value with: ''].
				aStream nextPutAll: (array at: 1), '>', (array at: 2), '</', assoc key, '>']
			ifFalse: [(assoc key = 'title')
				ifTrue: [aStream nextPutAll: '>',  
						(AIDASite convertToWeb: (self translateIfNeeded: assoc value) on: aSession), '</title>']
				ifFalse: [aStream nextPutAll: assoc value, self tagClosing] ].
		aStream nextPutAll: self eol].! !

!WebPage methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	self 
		lateInitPageHeaderLinks;
		rearangeHeaders.
	self setStateStreaming.
	aStream 
		nextPutAll: self htmlDocType, self eol.
	aStream 
		nextPutAll: '<html', (self htmlTagAttributes notNil ifTrue: [' ', self htmlTagAttributes] ifFalse: ['']), '>';
		nextPutAll: self eol, ' <head>', self eol;
		nextPutAll: '  <meta name="generator" content="Aida/Web v', AIDASite version, ', Smalltalk Web Application Server (www.aidaweb.si)"', self tagClosing, self eol.
	self streamHeaderElementsTo: aStream on: aSession. "including title"
	aStream nextPutAll: ' </head>', self eol.
	aStream nextPutAll: ' <body'. self streamAttributesTo: aStream for: aSession. 
	aStream nextPutAll: '>', self eol.
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	self streamWarningMessageTo: aStream. "if any"

	elements notNil ifTrue: [elements do: [:element | 
		element notNil ifTrue: [element streamHtmlTo: aStream for: aRequest on: aSession] ] ].

	aStream nextPutAll:  self ident, ' </body>', self eol.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll:  '</html>', self eol.
	self setStateFinished.! !

!WebPage methodsFor: 'private-streaming'!
streamWarningMessageTo: aStream
	self warningMessage isNil ifTrue: [^nil].
	aStream nextPutAll: '
<div align="center" style="background-color: red">
  <br>
  ', self warningMessage, '
  <br>
  <hr>
</div>
'! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
text: aSymbol
	"set the color of page text."
	self attributesAt: #text put: (self colorValue: aSymbol).! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
textColor: aSymbol
	self text: aSymbol.! !

!WebPage methodsFor: 'accessing'!
title
	^self otherAt: #pageTitle ifAbsent: ['']! !

!WebPage methodsFor: 'accessing'!
title: aStringOrMultilangAssociation
	self otherAt: #pageTitle put: aStringOrMultilangAssociation! !

!WebPage methodsFor: 'private-streaming'!
translateIfNeeded: aStringOrMultilangAssociation
	^aStringOrMultilangAssociation aidaIsAssociation
		ifTrue: [aStringOrMultilangAssociation value] "no translation for now, TEMPORARY!!"
		ifFalse: [aStringOrMultilangAssociation convertToSloveneChars]! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
vlink: aSymbol
	"set the color of visited link text."
	self attributesAt: #vlink put: (self colorValue: aSymbol).! !

!WebPage methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
vlinkColor: aSymbol
	self vlink: aSymbol.! !

!WebPage methodsFor: 'accessing'!
warningMessage
	"if set, this warning will be shown on top of that page in red. Usefull for 'Browser not supported' warnings etc"
	^self otherAt: #PageWarningMessage ifAbsent: [nil]! !

!WebPage methodsFor: 'accessing'!
warningMessage: aString
	"if set, this warning will be shown on top of that page in red. Usefull for 'Browser not supported' warnings etc"
	self otherAt: #PageWarningMessage put: aString! !

!WebPage methodsFor: 'accessing'!
webPage
	^self! !

!WebRadioButton methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checked
	^checked! !

!WebRadioButton methodsFor: 'private' stamp: ' 21/4/07 22:07'!
checked: aBoolean
	checked := aBoolean! !

!WebRadioButton methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self type: 'radio'.
	self checked: false.! !

!WebRadioButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isChecked
	^self checked! !

!WebRadioButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isRadioButton
	^true! !

!WebRadioButton methodsFor: 'private' stamp: ' 26/4/07 10:37'!
joinToForm: aWebForm
	"join  this checkbox to the group of them with the same name in aWebForm. 
	This method is called by aWebForm!!"
	| existing |
	existing := aWebForm fieldSet 
		detect: [:each | each isRadioButton and: [each name = self name]]
		ifNone: [self value: Dictionary new. self].
	(existing value = '') ifTrue: [existing value: Dictionary new].
	self adaptor: existing adaptor.
	(self value includesKey: self value) ifFalse:
		[self value at: self value put: false] "????"! !

!WebRadioButton methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setChecked
	self checked: true! !

!WebRadioButton methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setUnchecked
	self checked: false! !

!WebRadioButton methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebRadioButton methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	aStream nextPutAll: self ident, '<input'.
	self streamAttributesTo: aStream for: aSession.
	self isChecked ifTrue: [aStream nextPutAll: ' checked'].
	aStream nextPutAll: self tagClosing.! !

!WebRadioButton methodsFor: 'private' stamp: ' 21/4/07 22:07'!
value
	^self attributesAt: 'value'! !

!WebRadioButton methodsFor: 'private' stamp: ' 21/4/07 22:07'!
value: aString
	"set the value name  of the  radio button"
	^self attributesAt: 'value' put: aString! !

!WebRadioButton class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
name: aNameString value: aValueString 

	^(self new) name: aNameString; value: aValueString! !

!WebRawText methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	text notNil ifTrue: [aStream nextPutAll: self text].! !

!WebRawText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
text: aString
	text := aString! !

!WebRealtimeConnection methodsFor: 'accessing'!
app
	^app! !

!WebRealtimeConnection methodsFor: 'private'!
app: aWebApplication
	app := aWebApplication! !

!WebRealtimeConnection methodsFor: 'accessing'!
connection

	^connection! !

!WebRealtimeConnection methodsFor: 'private'!
connection: aHTTPOrWebSocketConnection
	connection := aHTTPOrWebSocketConnection! !

!WebRealtimeConnection methodsFor: 'accessing'!
handler
	"a parent handler of that and other realtime channels to the browser"
	^handler! !

!WebRealtimeConnection methodsFor: 'private'!
handler: aWebRealtimeHandler
	handler := aWebRealtimeHandler! !

!WebRealtimeConnection methodsFor: 'testing'!
isClosed
	"realtime channel connection is closed"
	self connection isNil ifTrue: [^true].
	^self isWebSocket 
		ifTrue: [self connection isOpen not]
		ifFalse: [self connection isClosed] "for Comet"! !

!WebRealtimeConnection methodsFor: 'testing'!
isComet
	^self type = #comet! !

!WebRealtimeConnection methodsFor: 'testing'!
isWebSocket
	^self type = #websocket! !

!WebRealtimeConnection methodsFor: 'handling'!
pageUrlFrom: aRequest
	"An url of page on which this realtime connection is open. From query part of url"
	| url |
	(aRequest queryAt: 'pageurl') isNil ifTrue: [^nil].
	url := (aRequest queryAt: 'pageurl') readStream upTo: $? .
	^url readStream upTo: $#! !

!WebRealtimeConnection methodsFor: 'handling' stamp: 'janko 7/13/2011 21:11'!
pageViewFrom: aRequest
	"A view on which this realtime connection is open. From query part of url"
	"Sqeak specific"
	| query pview |
	(aRequest queryAt: 'pageurl') isNil ifTrue: [^nil].
	query := (aRequest queryAt: 'pageurl') readStream upTo: $? ; upToEnd.
	query := (query readStream upTo: $# ) trimBlanks. "skip #anchor if any"
	(query isEmpty or: [(query includesSubString: 'view=') not ]) ifTrue: [^#main].
	pview := query readStream upToAll: 'view';  skip: 1  "="; upTo: $& . "Squeak specific"
	 ^pview asSymbol! !

!WebRealtimeConnection methodsFor: 'private'!
printString
	^'aWebRealtimeConnection 
	type: ', self type printString, '
	session: ',  (self session notNil ifTrue: [self session id printString] ifFalse: ['nil']), '
	app: ', (self app notNil ifTrue: [self app class name] ifFalse: ['nil']), '
	view: ', self view printString, '
	connection: ', (self isClosed ifFalse: ['open'] ifTrue: ['closed'])! !

!WebRealtimeConnection methodsFor: 'cleanup'!
removeIfNonactive
	"check and remove if app or view is nonactive, also if connection is already closed"
	"call that when page unload event came to close its realtime connections"
	self isClosed ifTrue: [^self removeYourself].
	(self app isNil  or: [self app isActive not])
		ifTrue: [self removeYourself]
		ifFalse: [(self app isActiveView: self view) ifFalse: [self removeYourself] ]! !

!WebRealtimeConnection methodsFor: 'cleanup'!
removeYourself
	self connection notNil ifTrue: 
		[self connection close].
	self handler notNil ifTrue:
		[self handler connections remove: self ifAbsent: [nil] ].
	self 
		handler: nil; 
		app: nil; 
		view: nil; 
		connection: nil! !

!WebRealtimeConnection methodsFor: 'handling-websocket' stamp: 'janko 8/19/2011 22:15'!
respondToWebSocketMessage: aString
	"respondss to webSocekt messages"
	"Intialized as webSocket's receiveBlock in streamWebSocketOn:for:on: "
	| event |
	[event := WebEvent fromJSON: aString on: self session.
	event app respondToEvent: event]
		on: Error
		do: [:exception | 
			"self handler site reportException: exception. "
			"exception defaultAction"]! !

!WebRealtimeConnection methodsFor: 'accessing'!
semaphore

	^semaphore! !

!WebRealtimeConnection methodsFor: 'private'!
semaphore: aSemaphore
	semaphore := aSemaphore! !

!WebRealtimeConnection methodsFor: 'handling'!
sendMesagesFromQueue
	"try to send messages to all open channels, depending on the target app on view of the connection"
	| msgs jsonString |
	msgs := self session queue select: [:msg | 
		msg app = self app and: [msg view = self view] ].
	msgs isEmpty ifTrue: [^nil].
	jsonString := self session packToJSONMessages: msgs.
	self connection send: jsonString.
	self session queue removeAll: msgs.! !

!WebRealtimeConnection methodsFor: 'accessing'!
session
	"session in which this realtime connection is open"
	^self handler notNil 
		ifTrue: [self handler session]
		ifFalse: [nil]! !

!WebRealtimeConnection methodsFor: 'handling'!
setAppAndViewFrom: aRequest
	| url object |
	self view: (self pageViewFrom: aRequest).
	url := self pageUrlFrom: aRequest.
	url notNil ifTrue:
		[object := self session site urlResolver objectOnUrl: url.
		self app: (self session webAppFor: object)]! !

!WebRealtimeConnection methodsFor: 'handling-comet'!
setCometFrom: aRequest
	self setAppAndViewFrom: aRequest! !

!WebRealtimeConnection methodsFor: 'handling-websocket'!
setWebSocketFrom: aRequest
	self connection: aRequest webSocket.
	self setAppAndViewFrom: aRequest.
	self connection receiveBlock: [:msg | self respondToWebSocketMessage: msg].! !

!WebRealtimeConnection methodsFor: 'accessing'!
type

	^type! !

!WebRealtimeConnection methodsFor: 'private'!
type: anObject

	type := anObject! !

!WebRealtimeConnection methodsFor: 'accessing'!
view

	^view! !

!WebRealtimeConnection methodsFor: 'private'!
view: aSymbol
	view := aSymbol! !

!WebRealtimeConnection class methodsFor: 'instance creation'!
newCometOn: aWebRealtimeHandler from: aRequest
	^super new
		type: #comet;
		handler: aWebRealtimeHandler;
		setCometFrom: aRequest! !

!WebRealtimeConnection class methodsFor: 'instance creation'!
newWebSocketOn: aWebRealtimeHandler from: aRequest
	^super new
		type: #websocket;
		handler: aWebRealtimeHandler;
		setWebSocketFrom: aRequest! !

!WebRealtimeHandler methodsFor: 'private'!
add: aRealtimeConnection
	^self connections add: aRealtimeConnection! !

!WebRealtimeHandler methodsFor: 'initialize-release' stamp: 'janko 7/13/2011 20:41'!
cleanup
	"remove all realtime connections with closed apps or views, etc."
	self isRealtimeChannelOpen ifFalse: [^nil].
	self connections copy do: [:conn | conn removeIfNonactive]! !

!WebRealtimeHandler methodsFor: 'handling-comet'!
cometConnections
	"open Comet connections and their sempaphores"
	^self connections select: [:each | each isComet ]! !

!WebRealtimeHandler methodsFor: 'accessing'!
connections
	"all currently open realtime connections"
	connections isNil ifTrue: [self initConnections].
	^connections! !

!WebRealtimeHandler methodsFor: 'initialize-release'!
initConnections
	connections := OrderedCollection new! !

!WebRealtimeHandler methodsFor: 'testing'!
isRealtimeChannelOpen
	"is any realtime connection open?"
	^self connections notEmpty! !

!WebRealtimeHandler methodsFor: 'initialize-release'!
removeAll
	"close and remove all realtime connections"
	self connections copy do: [:conn | conn removeYourself]! !

!WebRealtimeHandler methodsFor: 'handling-comet'!
respondToCometRequest: aRequest
	(Delay forSeconds: 5) wait. 
	^self! !

!WebRealtimeHandler methodsFor: 'serving'!
sendMesagesFromQueue
	"try to send messages to all open channels, depending on the target app on view of the connection"
	self cleanup. "remove all closed connections first"
	self connections do: [:conn | conn sendMesagesFromQueue] "also remove sent msgs from queue"! !

!WebRealtimeHandler methodsFor: 'accessing'!
session
	^session! !

!WebRealtimeHandler methodsFor: 'private'!
session: aWebSession
	session := aWebSession! !

!WebRealtimeHandler methodsFor: 'accessing'!
site
	^self session site! !

!WebRealtimeHandler methodsFor: 'handling-comet'!
streamCometOn: aStream for: aRequest on: aWebSession
	"Long polling Comet.
	This Ajax request will be blocked until some command come to queue"! !

!WebRealtimeHandler methodsFor: 'handling-websocket' stamp: 'janko 7/13/2011 17:07'!
streamWebSocketOn: aStream for: aRequest on: aWebSession
	"For web socket to become connected as bidirectional channel to browser"
	| realtimeConn response |
	aRequest isWebSocketRequest ifFalse: [^HTTPResponse forbidden].
	"put authorization check here!! "
	realtimeConn := WebRealtimeConnection newWebSocketOn: self from: aRequest.
	self cleanup; add: realtimeConn.
	response := realtimeConn connection answerTo: aRequest.
	aStream nextPutAll:  response body asString. "because of postprocessing on 
												  AIDASite answerToGetOrPost:on:"
	aRequest task response become: response. "switch with a preprepared response"! !

!WebRealtimeHandler methodsFor: 'handling-websocket'!
webSocketConnections
	"open WebSocket connections"
	^self connections select: [:each | each isWebSocket ]! !

!WebRealtimeHandler class methodsFor: 'instance creation'!
newOn: aWebSession
	^super new
		session: aWebSession! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsFirstLine
	"which buttons are in first line of toolbar"
	^self otherAt: #buttonsFirstLine ifAbsent: [self defaultButtonsFirstLine]! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsFirstLine: aString
	"which buttons are in first line of toolbar"
	^self otherAt: #buttonsFirstLine put: aString! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsSecLine
	"which buttons are in second line of toolbar"
	^self otherAt: #buttonsSecLine ifAbsent: [self defaultButtonsSecLine]! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsSecLine: aString
	"which buttons are in second line of toolbar"
	^self otherAt: #buttonsSecLine put: aString! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsThirdLine
	"which buttons are in third line of toolbar"
	^self otherAt: #buttonsThirdLine ifAbsent: [self defaultButtonsThirdLine]! !

!WebRichEditor methodsFor: 'setup parameters'!
buttonsThirdLine: aString
	"which buttons are in third line of toolbar"
	^self otherAt: #buttonsThirdLine put: aString! !

!WebRichEditor methodsFor: 'setup parameters'!
contentStyleUrl
	"where we have a CSS for content"
	^'/rich-editor.css' "as defined in WebStyle richEditorStyleSheet"
"	^'/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/content.css'" "default only" 
"	^'/tinymce/jscripts/tiny_mce/themes/advanced/skins/default/content.css, /screen.css'"! !

!WebRichEditor methodsFor: 'setup defaults'!
defaultButtonsFirstLine
	"which buttons are in first line of toolbar"
	"see http://wiki.moxiecode.com/index.php/TinyMCE:Configuration/theme_advanced_buttons_1_n"
	^'save, , | , undo, redo, | , bold, italic, underline, strikethrough, sub, sup, | , bullist, numlist, outdent, indent, | , formatselect, fontsizeselect, | , justifyleft, justifycenter, justifyright,  justifyfull'! !

!WebRichEditor methodsFor: 'setup defaults'!
defaultButtonsSecLine
	"which buttons are in second line of toolbar"
	"see http://wiki.moxiecode.com/index.php/TinyMCE:Configuration/theme_advanced_buttons_1_n"
	^'cut, copy, pastetext, pasteword, | , search, replace, hr, | , tablecontrols, | , forecolor,backcolor, | , charmap, image,  flash, link, unlink'! !

!WebRichEditor methodsFor: 'setup defaults'!
defaultButtonsThirdLine
	"no buttons by default in third line of toolbar"
	"see http://wiki.moxiecode.com/index.php/TinyMCE:Configuration/theme_advanced_buttons_1_n"
	^''! !

!WebRichEditor methodsFor: 'setup defaults'!
defaultInlinePopups
	"popup windows shown inline?"
	^true! !

!WebRichEditor methodsFor: 'setup defaults'!
defaultPlugins
	"default plugins to load"
	^'paste, table, save, autosave, searchreplace, advimage'! !

!WebRichEditor methodsFor: 'setup'!
initScript
	"See TinyMCE docs for explanation: http://tinymce.moxiecode.com/tinymce/docs/index.html"
	"beware, only one instance of editor should run at once!! "
	"WebRichEditor basicNew richEditorInitScript"
	| language |
	language := self firstAppFromStack notNil
		ifTrue: [self firstAppFromStack site style richEditorLanguage]
		ifFalse: ['en'].
	^'
tinyMCE.init({
	mode : "specific_textareas",
	textarea_trigger : "mce_editable",
	language : "', language ,  '",
	content_css : "', self contentStyleUrl, '",
	theme : "advanced",
	plugins : "', self plugins, 
		(self inlinePopups ifTrue: [', inlinepopups'] ifFalse: ['']), '",
	theme_advanced_buttons1 : "', self buttonsFirstLine, '",
	theme_advanced_buttons2 : "', self buttonsSecLine, '",
	theme_advanced_buttons3 : "', self buttonsThirdLine, '",
	theme_advanced_toolbar_location : "top",
	theme_advanced_toolbar_align : "left",
	extended_valid_elements : "a[name|href|target|title|onclick],img[class|src|border=0|alt|title|hspace|vspace|width|height|align|onmouseover|onmouseout|name],hr[class|width|size|noshade],font[face|size|color|style],span[class|align|style]",
	save_enablewhendirty: "true",
	paste_use_dialog : "false",
	button_tile_map : "true",
	gecko_spellcheck : "true" ', 
 	(self saveCallback notNil ifTrue: [',
		save_callback : "', self saveCallback, '" ' ] ifFalse: ['']),
'});
'! !

!WebRichEditor methodsFor: 'initialize-release'!
initialize
	super initialize.
	self attributesAt: 'mce_editable' put: 'true'.
	self class ensureResourcesInPageHeader "JavaScript, CSS"! !

!WebRichEditor methodsFor: 'setup parameters'!
inlinePopups
	"popup windows shown inline?"
	^self otherAt: #inlinePopups ifAbsent: [self defaultInlinePopups]! !

!WebRichEditor methodsFor: 'setup parameters'!
plugins
	"which plugins to load"
	^self otherAt: #plugins ifAbsent: [self defaultPlugins]! !

!WebRichEditor methodsFor: 'setup parameters'!
plugins: aString
	"which plugins to load"
	^self otherAt: #plugins put: aString! !

!WebRichEditor methodsFor: 'setup parameters'!
saveCallback
	"a JS script to execute when save button pressed or whole form submited"
	^self otherAt: #saveCallback ifAbsent: [nil]! !

!WebRichEditor methodsFor: 'setup parameters'!
saveCallback: aString
	"a JS script to execute when save button pressed or whole form submited"
	^self otherAt: #saveCallback put: aString! !

!WebRichEditor methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
"	aRequest isAjaxRequest ifTrue:
		[self scriptBefore: self class richEditorInitScript]." "otherwise it won't show in Ajax update"
	self scriptBefore: self initScript. "for every editor instance, is that good? "
	^super streamHtmlTo: aStream for: aRequest on: aSession! !

!WebRichEditor class methodsFor: 'ensure resources'!
ensureResourcesInPageHeader
	"JavaScript, CSS"
	" For CSS see WebStyle richEditorCssResource and richEditorStyleSheet"
	"Be carefull to add the same url in initRichEditorScript at content_css !!"
	| site |
	TinyMCELibrary ensure.
	site := self firstAppFromStack site.
	site urlResolver halfUrlFor: site style richEditorCssResource. "just to register if not yet"! !

!WebRichEditorWakeup methodsFor: 'printing' stamp: 'np 10/18/2008 16:41'!
build
	| iframe |
	self clear. self setDiv. self hide.
"	self isWakeupTimeout ifFalse: [^self]. "
	iframe := WebIFrame new src: '/admin.html?view=wakeupRichEditor'.
	self add: iframe.
	self setWakeupTimestamp.
	
"	self setDiv. self registerId.
	self session lastRequest isAjaxRequest 
		ifFalse: 
			[self hide.
			self update ] ""to call iframe below in backgrund""
		ifTrue: 
			[iframe := WebIFrame new src: '/admin.html?view=wakeupRichEditor'.
			self add: iframe.
			self setWakeupTimestamp]
"! !

!WebRichEditorWakeup methodsFor: 'timeout' stamp: 'janko 7/18/2008 17:13'!
isWakeupTimeout
	"more that one hour since last prefech?"
	"why refresh every hour?"
	| last |
	last := self session userValues at: #wakeupRichEditorTimestamp ifAbsent: [^true].
	^SpTimestamp now asSeconds - last asSeconds > 3600! !

!WebRichEditorWakeup methodsFor: 'timeout' stamp: 'janko 7/18/2008 17:11'!
setWakeupTimestamp
	"store in user's session when last wakeup was done"
	self session userValues at: #wakeupRichEditorTimestamp put: SpTimestamp now.
! !

!WebRouter methodsFor: 'adding-removing'!
addFirstRoutePattern:  aPatternString handler: aHandler
	"add a route at the start of routes"
	^self routes addFirst: (aPatternString -> aHandler)! !

!WebRouter methodsFor: 'adding-removing'!
addMethodLibrariesRoute
	"AIDASite allInstances do: [:each | each router addMethodLibrariesRoute] "
	"WebStyles holds method resources like JS, CSS, etc, while method images are dealed in URLResolver"
	(self routes contains: [:route | route value == WebMethodLibrary]) "only one lib route!!"
		ifTrue: [^nil].
	self addRoutePattern: '/*' handler: WebMethodLibrary "class directly, it will route further by itself"! !

!WebRouter methodsFor: 'adding-removing'!
addMethodResourcesRoute
	"AIDASite allInstances do: [:each | 
		each router addMethodResourcesRoute.
		each urlResolver removeObjectsOfClass: WebMethodResource] "
	"WebStyles holds method resources like JS, CSS, etc, while method images are dealed in URLResolver"
	(self routes contains: [:route | route value isKindOf: WebStyle]) "only one static server!!"
		ifTrue: [^nil].
	self addRoutePattern: '/*' handler: self site style! !

!WebRouter methodsFor: 'adding-removing'!
addRoutePattern:  aPatternString handler: aHandler
	"add a route at the end of routes"
	^self routes add: (aPatternString -> aHandler)! !

!WebRouter methodsFor: 'adding-removing'!
addSessionManagerRoute
	"routes all session related requests like Ajax and WebSocket to session manager"
	"AIDASite allInstances do: [:site | site router addSessionManagerRoute] "
	(self routes contains: [:route | route value class == WebSessionManager]) "only one route!!"
		ifTrue: [^nil].
	self addFirstRoutePattern: '/aidasession/*' handler: self site sessionManager! !

!WebRouter methodsFor: 'adding-removing'!
addStaticServerRoute
	"WebStaticServer as an one-way router to serve static files"
	(self routes contains: [:route | route value isKindOf: WebStaticServer]) "only one static server!!"
		ifTrue: [^nil].
	self addRoutePattern: '/*' handler: self site staticServer! !

!WebRouter methodsFor: 'adding-removing'!
addURLResolverRoute
	"URLResolver as a two-way router between urls and domain objects"
	(self routes contains: [:route | route value isKindOf: WebStaticServer]) "only one url resolver!!"
		ifTrue: [^nil].
	self addRoutePattern: '/*' handler: self site urlResolver! !

!WebRouter methodsFor: 'initialize-release' stamp: 'janko 8/25/2012 19:33'!
initDefaultRoutes
	self addSessionManagerRoute. "routes all session related requests like WebSocket"
	self addURLResolverRoute.
	self addMethodLibrariesRoute.
	self addMethodResourcesRoute.  "to the style (WebStyle subclass)"
	self addStaticServerRoute.! !

!WebRouter methodsFor: 'initialize-release'!
initRoutes
	routes := OrderedCollection new! !

!WebRouter methodsFor: 'initialize-release'!
initialize
	self initDefaultRoutes! !

!WebRouter methodsFor: 'routing' stamp: 'janko 8/25/2012 17:51'!
resourceFor: aRequest
	"it routes a request to appropriate handler, which returns a resource to respond to request"
	| url resource  | 
	url := AIDASite convertFromWeb: aRequest uriString on: aRequest session.  "for international Urls"
	self routes do: [:route |
		(route key "url pattern" match: url) ifTrue: 
			[resource := route value "handler" resourceFor: aRequest.
			resource notNil ifTrue: [^resource] ] ].
	^nil "no route to resource for that request"! !

!WebRouter methodsFor: 'accessing'!
routes
	routes ifNil: [self initRoutes].
	^routes! !

!WebRouter methodsFor: 'accessing'!
site
	^site! !

!WebRouter methodsFor: 'private'!
site: anAIDASite
	site := anAIDASite! !

!WebRouter class methodsFor: 'instance creation' stamp: 'jm 9/8/2010 20:48'!
newOn: anAIDASite
	^super basicNew
		site: anAIDASite;
		initialize! !

!WebScheduledEvent methodsFor: 'private' stamp: 'np 10/17/2008 17:40'!
aidaDeepCopyNotIn: aDictionary 
	^ nil! !

!WebScheduledEvent methodsFor: 'setup' stamp: ' 21/4/07 22:07'!
at: aTimestamp runBlock: aBlockClosure
	self timestamp: aTimestamp.
	self block: aBlockClosure.
	self setPeriodSingle! !

!WebScheduledEvent methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
block
	"a block to be run at event"
	^block! !

!WebScheduledEvent methodsFor: 'private' stamp: ' 21/4/07 22:07'!
block: anObject
	block := anObject! !

!WebScheduledEvent methodsFor: 'setup' stamp: 'jm 2/4/2011 20:57'!
everyDayAt: aTimeOrHour  runBlock: aBlock
	| time |
	time := aTimeOrHour class == Time 
		ifTrue: [aTimeOrHour] ifFalse: [Time fromSeconds: aTimeOrHour*60*60].
	self timestamp: (SpTimestamp fromDate: Date today andTime: time).
	self block: aBlock.
	self periodType: #day value: time! !

!WebScheduledEvent methodsFor: 'setup' stamp: 'jm 2/4/2011 20:57'!
everyHourAt: aMinuteNumber runBlock: aBlock
	self timestamp: (SpTimestamp fromDate: Date today andTime: 
		(Time fromSeconds: (Time now hours * 3600) + (aMinuteNumber * 60))).
	self block: aBlock.
	self periodType: #hour value: aMinuteNumber! !

!WebScheduledEvent methodsFor: 'setup' stamp: 'mivsek 8/22/2007 20:55'!
everyMinuteAt: aSecondNumber runBlock: aBlock
	self timestamp: (SpTimestamp fromDate: Date today andTime: 
		(Time fromSeconds: (Time now hours * 3600) + (Time now minutes * 60) + aSecondNumber)).
	self block: aBlock.
	self periodType: #minute value: aSecondNumber! !

!WebScheduledEvent methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isDayPeriod
	^self period notNil and: [self period key = #day]! !

!WebScheduledEvent methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isHourPeriod
	^self period notNil and: [self period key = #hour]! !

!WebScheduledEvent methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isMinutePeriod
	^self period notNil and: [self period key = #minute]! !

!WebScheduledEvent methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isPeriodic
	^(self period isNil or: [self period key = #single]) not! !

!WebScheduledEvent methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
method
	"a method to be called on an object at a scheduled time"
	^method! !

!WebScheduledEvent methodsFor: 'private' stamp: ' 21/4/07 22:07'!
method: aSymbol
	"a method to be called on an object at a scheduled time"
	method := aSymbol! !

!WebScheduledEvent methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
object
	"object on which a method wil be called at scheduled time"
	^object! !

!WebScheduledEvent methodsFor: 'private' stamp: ' 21/4/07 22:07'!
object: anObject
	object := anObject! !

!WebScheduledEvent methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
parent
	^parent! !

!WebScheduledEvent methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: anObject
	parent := anObject! !

!WebScheduledEvent methodsFor: 'private-periods' stamp: ' 21/4/07 22:07'!
period
	"asociation with type and parameter: #single>nil #day>aTime, ... "
	^period! !

!WebScheduledEvent methodsFor: 'private-periods' stamp: ' 21/4/07 22:07'!
periodType: aSymbol value: anObject
	period := Association key: aSymbol value: anObject! !

!WebScheduledEvent methodsFor: 'private' stamp: 'jm 2/4/2011 21:28'!
printString
	^'aScheduledEvent 
	timestamp: ', self timestamp printSloString, ':', self timestamp asTime second printString, '
	period: ', self period key printString, ' ', self period value printString, '
	method: ', self method printString, '
	object: ', self object printString, '
	block: ', self block printString! !

!WebScheduledEvent methodsFor: 'private' stamp: ' 21/4/07 22:07'!
representBinaryOn: binWriter
	"for BOSS out. Blocks are not BOSSed out correctly, therefore we cannot export evens that way!!"
	"TEMPORARY, find a better solution!!"
	^0! !

!WebScheduledEvent methodsFor: 'private' stamp: 'mivsek 8/22/2007 20:55'!
reschedule
	"calculate and set a new time to run, according to a period"
	self isDayPeriod ifTrue: 
		[self timestamp: (SpTimestamp fromSeconds: (self timestamp asSeconds + (60*60*24)))].
	self isHourPeriod ifTrue: 
		[self timestamp: (SpTimestamp fromSeconds: (self timestamp asSeconds + (60*60)))].
	self isMinutePeriod ifTrue: 
		[self timestamp: (SpTimestamp fromSeconds: (self timestamp asSeconds + 60))].
	self parent scheduleEvent: self.! !

!WebScheduledEvent methodsFor: 'running' stamp: 'jm 2/7/2011 13:08'!
run
	"run this event (in forked process), remove it from queue and reschedule if periodic"
	self block notNil 
		ifTrue: [ [self block value] forkAt: self runPriority]
		ifFalse: [ [self object perform: self method] forkAt: self runPriority].
	self parent queue removeFirst.
	self isPeriodic ifTrue: [self reschedule]
! !

!WebScheduledEvent methodsFor: 'running' stamp: ' 21/4/07 22:07'!
runPriority
	^Processor userBackgroundPriority! !

!WebScheduledEvent methodsFor: 'private-periods' stamp: ' 21/4/07 22:07'!
setPeriodSingle
	self periodType: #single value: nil! !

!WebScheduledEvent methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
timestamp
	"when this event must occur"
	^timestamp! !

!WebScheduledEvent methodsFor: 'private' stamp: 'jm 2/4/2011 21:06'!
timestamp: aSpTimestamp
	timestamp := aSpTimestamp! !

!WebScheduledEvent class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newOn: aScheduler
	^super new parent: aScheduler! !

!WebScheduler methodsFor: 'events-single' stamp: 'jm 4/26/2009 15:41'!
at: aTimestamp callMethod: aSymbol of: anObject
	| event |
	event := WebScheduledEvent newOn: self.
	event at: aTimestamp callMethod: aSymbol of: anObject.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'events-single' stamp: 'jm 4/26/2009 15:41'!
at: aTimestamp runBlock: aBlock
	| event |
	event := WebScheduledEvent newOn: self.
	event at: aTimestamp runBlock: aBlock.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
considerMissedEvents
	"events which we miss to run, eg. if scheduler didn't run for a while"
	self removeMissedEvents "and nothing more, for now"! !

!WebScheduler methodsFor: 'private'!
critical: aBlock
	"run a block in a critical section (only one block at once!!)"
	^self mutex critical: aBlock! !

!WebScheduler methodsFor: 'events-periodic' stamp: 'jm 4/26/2009 15:41'!
everyDayAt: aTimeOrHour runBlock: aBlock
	| event |
	event := WebScheduledEvent newOn: self.
	event everyDayAt: aTimeOrHour runBlock: aBlock.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'events-periodic' stamp: 'jm 4/26/2009 15:41'!
everyHourAt: aMinuteNumber  runBlock: aBlock
	| event |
	event := WebScheduledEvent newOn: self.
	event everyHourAt: aMinuteNumber  runBlock: aBlock.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'events-periodic' stamp: 'jm 4/26/2009 15:41'!
everyMinuteAt: aSecondNumber callMethod: aSymbol of: anObject
	| event |
	event := WebScheduledEvent newOn: self.
	event everyMinuteAt: aSecondNumber callMethod: aSymbol of: anObject.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'events-periodic' stamp: 'jm 4/26/2009 15:42'!
everyMinuteAt: aSecondNumber  runBlock: aBlock
	| event |
	event := WebScheduledEvent newOn: self.
	event everyMinuteAt: aSecondNumber  runBlock: aBlock.
	self scheduleEvent: event.
	^event! !

!WebScheduler methodsFor: 'events-periodic' stamp: ' 21/4/07 22:07'!
everyMonthday: aDayNumber at: aTime  runBlock: aBlock! !

!WebScheduler methodsFor: 'events-periodic' stamp: ' 21/4/07 22:07'!
everyWeekday: aDaySymbol at: aTime  runBlock: aBlock! !

!WebScheduler methodsFor: 'initialize-release'!
initMutex
	mutex := AidaMutex new! !

!WebScheduler methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initQueue
	queue := OrderedCollection new.! !

!WebScheduler methodsFor: 'private' stamp: 'jm 2/7/2011 13:39'!
insertToQueueEvent: aScheduledEvent
	self critical:
		[self queue isEmpty ifTrue: [^self queue add: aScheduledEvent].
		aScheduledEvent timestamp >= self queue last timestamp
			ifTrue: [^self queue add: aScheduledEvent].
		aScheduledEvent timestamp < self queue first timestamp 
			ifTrue: [^self queue addFirst: aScheduledEvent].
		self queue size to: 1 by: -1 do: [:inx |
			aScheduledEvent timestamp >= (queue at: inx) timestamp ifTrue: 
				[^self queue add: aScheduledEvent beforeIndex: inx+1] ].
		self error: 'rescheduling error!!'.  "in case any of above conditions don't satisfy"
		]! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isLoopRunning
	^self loop notNil! !

!WebScheduler methodsFor: 'testing'!
isScheduledBlock: aBlock
	"is this block aready scheduled in some event?"
	^self queue contains: [:event | event block = aBlock]! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
loop
	^loop! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
loop: aProcess
	loop := aProcess! !

!WebScheduler methodsFor: 'private'!
mutex
	"for protecting critical sections"
	mutex isNil ifTrue: [self initMutex].
	^mutex! !

!WebScheduler methodsFor: 'private'!
mutex: anAidaMutex
	mutex := anAidaMutex! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
printString
	^'aScheduler on site: ', (self site notNil ifTrue: [self site name] ifFalse: [''])! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
queue
	"queue of events next one to run on first place"
	queue isNil ifTrue: [self initQueue].
	^queue! !

!WebScheduler methodsFor: 'events-single' stamp: 'jm 2/7/2011 13:39'!
removeEvent: anEvent
	"stop running  this single or periodic event"
	self critical: 
		[self queue 
			remove: anEvent
			ifAbsent: [self error: 'Scheduler: this event does not exist'] ]! !

!WebScheduler methodsFor: 'private' stamp: 'jm 2/7/2011 13:39'!
removeMissedEvents
	| now event |
	self critical:
		[self queue isEmpty ifTrue: [^nil].
		now := SpTimestamp now asSeconds.
		[now > self queue first timestamp asSeconds] whileTrue:
			[event := self queue first.
			self queue removeFirst.
			event isPeriodic ifTrue: [event reschedule].
			self queue isEmpty ifTrue: [^nil] ]
		]! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
scheduleEvent: aScheduledEvent
	self insertToQueueEvent: aScheduledEvent.! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
schedulerPriority
	^Processor userInterruptPriority! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site
	^site! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site: anAIDASite
	site := anAIDASite! !

!WebScheduler methodsFor: 'start/stop' stamp: ' 21/4/07 22:07'!
start
	self considerMissedEvents.
	self startLoop! !

!WebScheduler methodsFor: 'private' stamp: 'jm 2/7/2011 13:40'!
startLoop
	"to check every second if some event is to be run"
	self isLoopRunning ifTrue: [self stopLoop].
	self loop: 
		([ [true] whileTrue: 
			[| event now |
			self critical: 
				[self queue notEmpty ifTrue:
					[event := self queue first. now := SpTimestamp now asSeconds.
				 	now = event timestamp asSeconds
						ifTrue:  [event run]  "and reschedule if periodic event"
						ifFalse: [now > event timestamp asSeconds  ifTrue: [self removeMissedEvents]].
					[self queue notEmpty and: [now = self queue first timestamp asSeconds]]  "run all events on the same time"
						whileTrue: [self queue first run]
				 ]].
			(Delay forSeconds: 1) wait]   "check every second"
		] forkAt: self schedulerPriority)! !

!WebScheduler methodsFor: 'start/stop'!
stop
	self stopLoop.
	self mutex: nil! !

!WebScheduler methodsFor: 'private' stamp: ' 21/4/07 22:07'!
stopLoop
	self loop notNil ifTrue: [self loop terminate. self loop: nil].! !

!WebScheduler class methodsFor: 'instance creation'!
newOn: anAIDASite
	^super new site: anAIDASite! !

!WebScript methodsFor: 'private'!
changeContextFrom: oldCtx to: newCtx
	"scan for all references to context ids and change them. Also in subelements"
	| in out aidaCtx sep |
	aidaCtx := WebContext contextIdName.
	(('*', aidaCtx, '*') match: self script) ifFalse: [^nil].
	in := self script readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse: 
		[out nextPutAll: (in upTo: aidaCtx). 
		in atEnd not ifTrue: 
			[in skip "=". sep := in upTo: $&.
			out nextPutAll: aidaCtx, '=', newCtx id printString, sep ] ].
	self script: out contents! !

!WebScript methodsFor: 'private'!
hasTag
	^true! !

!WebScript methodsFor: 'private'!
includesScriptTag
	"if script starts and ends with a script tag. Otherwise we add it by ourselves"
	^'<script*' match: self script! !

!WebScript methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
script
	^script! !

!WebScript methodsFor: 'accessing'!
script: aString
	"add to others if already exists, separate with JavaScript separator ; "
	script isNil ifTrue: [script := ''].
	(script notEmpty and: [script last ~= $; ]) ifTrue: [script := script, '; '].
	script := script, aString trimBlanks.! !

!WebScript methodsFor: 'accessing'!
source
	"URL of external script source, if any"
	^source! !

!WebScript methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	| existScriptTag |
	existScriptTag := self includesScriptTag. "don't add script tag if script already have it!! "
	existScriptTag ifFalse: [aStream nextPutAll: '<script type="text/javascript"'].
	self source notNil ifTrue: 
		[aStream nextPutAll: ' src="', self source, '"'].
	existScriptTag ifFalse: [aStream nextPutAll: '>']. 
	self script notNil ifTrue: [aStream nextPutAll: script].
	existScriptTag ifFalse: [aStream nextPutAll: '</script>'].
	aStream nextPutAll: self eol.! !

!WebScript class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
script: aString
	^super new script: aString! !

!WebScript class methodsFor: 'instance creation' stamp: 'mivsek 1/10/2008 19:38'!
source: anURLString
	"and external script, with an Url to it"
	^super new source: anURLString! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
accessByObject 
	"this is a dictionary of user - access level pairs for access to the object, 
	which reference is a key in dictionary"
	accessByObject isNil ifTrue: [self initAccessByObject].
	^accessByObject! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
accessRightsArray: anAccessSymbols for: aWebUserOrGroup on: anObject
	| objectRights rigthsArray |
	self site critical:
		[objectRights := self accessByObject at: anObject 
			ifAbsent: 
				[self accessByObject at: anObject put: (Dictionary new).
				self accessByObject at: anObject].
		rigthsArray := objectRights at: aWebUserOrGroup 
			ifAbsent:
				[objectRights at: aWebUserOrGroup put: IdentitySet new.
				objectRights at: aWebUserOrGroup].
		rigthsArray addAll: anAccessSymbols].! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
accessRightsFor: aWebUserOrGroup on: anObject
	"get the access rights for specified user or group on object  as literal array of 
	rights (e.g. #(#read #write). " 
	^(self accessByObject at: anObject 
		ifAbsent: [^self defaultAccessRights])
			at: aWebUserOrGroup ifAbsent:  [^self defaultAccessRights]! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
activatingGroup
	"group for users to confirm registration"
	^self groups detect: [:each | each isActivatingGroup] ifNone: [nil].! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
addActivatingUser: aWebUser
	"add this user also to group waiting for confirmation"
	self addUser: aWebUser.
	self activatingGroup addUser: aWebUser.! !

!WebSecurityManager methodsFor: 'group management'!
addGroup: aWebUserGroup
	^self addGroup: aWebUserGroup ifExist: [^nil].! !

!WebSecurityManager methodsFor: 'private'!
addGroup: aWebUserGroup ifExist: aBlock
	"add new group. If already exist ( as object or as group with the same name) do aBlock"
 	(aWebUserGroup isKindOf: WebUserGroup) ifFalse: [^self error: 'This is not aWebUserGroup'].
	(self existGroupNamed: aWebUserGroup name) ifTrue: [aBlock value].
	^self groups add: aWebUserGroup! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
addGroupNamed: aString
 	"add new group with a specified name. If already exist, error"
	self addGroup: (WebUserGroup new name: aString).! !

!WebSecurityManager methodsFor: 'user management'!
addPerson: aPerson
	"make parallel WebUser, cross-connect both and put into Registered group"
	"by default username and password are aPerson surname!!"
	| user |
	aPerson asWebUser notNil ifTrue: [^self error: 'already added!!'].
	user := self site webUserClass new.
	user username: aPerson surname.
	user password: aPerson surname.
	(self addRegisteredUser: user) notNil "no duplicates in username"
		ifTrue: [ aPerson webUser: user. user person: aPerson]
		ifFalse: [^nil].
	^aPerson! !

!WebSecurityManager methodsFor: 'user management'!
addRegisteredUser: aWebUser
	"add this user also to registered users group. Remove him from activating group"
	self addUser: aWebUser.
	self registeredGroup addUser: aWebUser.
	self activatingGroup removeUser: aWebUser.
	aWebUser setRegisteredTimestamp.! !

!WebSecurityManager methodsFor: 'user management'!
addUser: aWebUser
	"add new user also in All Users group"
	(aWebUser isKindOf: WebUser) ifFalse: [^self error: 'This is not aWebUser'].
	(self users includes: aWebUser) ifTrue: [^nil].
	(self existUserNamed: aWebUser username withPassword: aWebUser password) ifTrue: [^nil]. 
	self users add: aWebUser.
	self allUsersGroup addUser: aWebUser.
	aWebUser parent: self.
	^aWebUser! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
adminGroup
	"group for admins, those who have all acess rights !! "
	^self groups detect: [:each | each isAdminGroup] ifNone: [nil].! !

!WebSecurityManager methodsFor: 'user management'!
adminUser
	"first admin user, initialy it is with username 'admin'"
	^self users 
		detect: [:each | each isAdminUser] 
		ifNone: [self error: 'Admin user missing?']! !

!WebSecurityManager methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allGroups
	^self groups copy! !

!WebSecurityManager methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allUsers
	^self users copy! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
allUsersGroup
	"group for all users in system"
	^self groups detect: [:each | each isAllUsersGroup] ifNone: [nil].! !

!WebSecurityManager methodsFor: 'access control'!
allowViews: viewSymbols andUpdates: updateSymbols for: aWebUserOrGroup on: anAppClass
	"those views and updates(actions) are allowed for that user or group on that App class"
	| viewRightSymbols updateRightSymbols |
	viewRightSymbols := viewSymbols collect: [:each | anAppClass viewRightSymbolFor: each].
	self setAccessRights: viewRightSymbols for: aWebUserOrGroup on: anAppClass name.
	updateRightSymbols := updateSymbols collect: [:each | anAppClass updateRightSymbolFor: each].
	self setAccessRights: updateRightSymbols for: aWebUserOrGroup on: anAppClass name.! !

!WebSecurityManager methodsFor: 'settings'!
allowedIPs
	"whitelist: a collection of IP addresses, from which login is allowed. Star can be used, like 12.234.*  "
	^self settings at: #AllowedIPs ifAbsentPut: [OrderedCollection new]! !

!WebSecurityManager methodsFor: 'settings'!
allowedIPs: aCollectionOfStrings
	"whitelist: a collection of IP addresses, from which login is allowed. Star can be used, like 12.234.*  "
	^self settings at: #AllowedIPs put: aCollectionOfStrings! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
authenticationScheme
	"#Form - with WebAdminApp login form - default!!
	#HttpBasic - rfc2617 Basic authentication - passwords NOT encrypted!!
	#HttpDigest - rfc2617 Digest authentication - encrypted passwords
	#SSLClientCertificate - most secure, user needs a valid PKI certificate"
	authenticationScheme isNil ifTrue: [self setFormAuthenticationScheme].
	^authenticationScheme! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
authenticationScheme: aSymbol
	authenticationScheme := aSymbol! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
copyAccessByObject
 
|dict|
Janko := Dictionary new.
WebSecurityManager default accessByObject 
keysAndValuesDo:
	[:key :value | 
		dict := Dictionary new.
		value keysAndValuesDo: [:key1 :value1 |
			dict at: key1 put: (IdentitySet withAll: (value1 collect: [:el | el asString asSymbol] )) ].
		Janko at: key put: dict].! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
defaultAccessRights
	
	^#()! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
existGroupNamed: aString
	^(self groupNamed: aString) notNil! !

!WebSecurityManager methodsFor: 'user management'!
existUserNamed: anUsernameString 
	^(self userNamed: anUsernameString) notNil! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
existUserNamed: anUsernameString withPassword: aPasswordString
	^(self userNamed: anUsernameString withPassword: aPasswordString) notNil! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
existUserWithId: aNumber
	^self users contains: [:each | each id = aNumber].! !

!WebSecurityManager methodsFor: 'user management'!
extranetUser
	"a common extranet user, for easier setup of access rights"
	^self users detect: [:each | each isExtranetUser] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
groupNamed: aString
	aString isEmpty ifTrue: [^nil].
	^self groups detect: [:group | group name =  aString] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
groupWithUuid: aString
	" find and return a group with specified uuid. Return nil if not found" 
	^self groups detect: [:each | each uuid = aString] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
groups 
	groups isNil ifTrue: [self initGroups].
	^groups! !

!WebSecurityManager methodsFor: 'user management'!
guestUser
	"actually only one is guest user"
	^self users 
		detect: [:each | each isGuest] 
		ifNone: [self error: 'Guest user missing?']! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
has: aWebUserOrGroup rightTo: anAccessSymbol on: anObject 
	"test the access right for that object and that user or group "
	| usersAndGroups |
	usersAndGroups := self accessByObject at: anObject ifAbsent: [^false].
	(usersAndGroups includesKey: aWebUserOrGroup)	ifTrue:
		[((usersAndGroups at: aWebUserOrGroup) includes: anAccessSymbol) ifTrue: [^true] ].
	^false! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
hasFormAuthenticationScheme
	^self authenticationScheme = #Form! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
hasHttpAuthenticationScheme
	^self hasHttpBasicAuthenticationScheme | self hasHttpDigestAuthenticationScheme! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
hasHttpBasicAuthenticationScheme
	^self authenticationScheme = #HttpBasic! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
hasHttpDigestAuthenticationScheme
	^self authenticationScheme = #HttpDigest! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
hasSSLClientCertificateAuthenticationScheme
	^self authenticationScheme = #SSLClientCertificate! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
hasUser: aWebUser rightInAnyGroupTo: anAccessSymbol on: anObject 
	"test the access right for that object and in groups for that user"
	aWebUser groups do: [:group |
		(self has: group rightTo: anAccessSymbol on: anObject) ifTrue: [^true] ].
	^(self has: self allUsersGroup rightTo: anAccessSymbol on: anObject)! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initAccessByObject
	accessByObject := Dictionary new.! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: 'mivsek 6/13/2007 16:00'!
initAdminAccess
	"admin group has rights to all views and updates in all Apps!! "
	WebApplication allowAllViewsFor: self adminGroup on: self site.
	WebApplication allowAllUpdatesFor: self adminGroup  on: self site.! !

!WebSecurityManager methodsFor: 'initialize-release'!
initAdminUser
	"add default admin user"
	| user |
	(self users detect: [:each | each isAdminUser] ifNone: [nil] )
		notNil ifTrue: [^nil].
	user := WebUser newAdmin.
	user setLocked. "to avoid name/username changes"
	self addUser: user.
	self adminGroup addUser: user.! !

!WebSecurityManager methodsFor: 'initialize-release'!
initDefaultAccessRights
	"to allow login, registering new user etc"
	self allowViews: #(login logout forgoten registration passwordSent waitingConfirmation activation 
						wakeupScriptaculous wakeupRichEditor
						loginGoogle loginGoogle2 loginGoogle3 logoutGoogle) "OpenID login" 
		andUpdates: #(login registration passwordSent)
		for: self allUsersGroup on: WebAdminApp.
	self allowViews: #(main activationRequest activate) andUpdates:  #(main) 
		for: self allUsersGroup on: WebRegistrationApp.

"AIDASite allInstances do: [:each | each securityManager initDefaultAccessRights]"! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initDefaultGroups
	self addGroup: WebUserGroup newAllUsers.
	self users do: [:user | 	self allUsersGroup addUser: user].
	self addGroup: WebUserGroup newAdmin.
	self addGroup: WebUserGroup newRegistered.
	self addGroup: WebUserGroup newActivating.
	self postInitDefaultGroups.  "override this method for your own default groups"! !

!WebSecurityManager methodsFor: 'initialize-release'!
initDefaultSettings! !

!WebSecurityManager methodsFor: 'initialize-release'!
initDemoAccessRights
	"access to all for demos in WebDemoApp"
	"(AIDASite named: 'aidademo') securityManager initDemoAccessRights"
	self allowViews: WebDemoApp allViews asArray 
		andUpdates:  #(editMembers fileUpload gridSelected webdav controlFlow) 
		for: self allUsersGroup on: WebDemoApp.! !

!WebSecurityManager methodsFor: 'initialize-release'!
initExtranetAccessRights
	"for extranet user"! !

!WebSecurityManager methodsFor: 'initialize-release'!
initExtranetUser
	"add default extranet user"
	| user |
	(self users detect: [:each | each isExtranetUser and: [each name = WebUser extranetName]] 
		ifNone: [nil] )
			notNil ifTrue: [^nil].
	user := WebUser newExtranet.
	user setLocked. "to avoid name/username changes"
	self addUser: user.
	self registeredGroup addUser: user.! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initGroups
	groups := Set new.! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: 'mivsek 1/10/2008 19:22'!
initGuestAccessRights
	"for guest user"! !

!WebSecurityManager methodsFor: 'initialize-release'!
initGuestUser
	"add new user,with name 'Guest'"
	| user |
	(self users detect: [:each | each isGuest] ifNone: [nil] ) notNil ifTrue: [^nil].
	user := WebUser newGuest.
	user setLocked. "to avoid name/username changes"
	self addUser: user.
	self allUsersGroup addUser: user.! !

!WebSecurityManager methodsFor: 'initialize-release'!
initUsers
	users := Set new. 
	self groups do: [:each | each initUsers]. "to delete all potential users in those groups!!"! !

!WebSecurityManager methodsFor: 'initialize-release'!
initialize
	self initUsers.
	self initGroups.
	self initAccessByObject.
	self initDefaultGroups; lockDefaultGroups.
	self initAdminUser. self initGuestUser. self initExtranetUser.
	self initDefaultAccessRights. self initDemoAccessRights.
	self initAdminAccess. self initGuestAccessRights. self initExtranetAccessRights.! !

!WebSecurityManager methodsFor: 'settings'!
ipFilterPolicy
	"what to do if IP is on blacklist or whitelist"
	^self settings at: #ipFilterPolicy ifAbsentPut: [#warn]! !

!WebSecurityManager methodsFor: 'settings'!
ipFilterPolicy: aSymbol
	"what to do if IP is on blacklist or whitelist"
	"(AIDASite named: 'aidademo') securityManager ipFilterPolicy: #deny "
	(#(#none #warn #deny) includes: aSymbol) ifFalse: [self error: 'unkown IP filter policy'].
	^self settings at: #ipFilterPolicy put: aSymbol! !

!WebSecurityManager methodsFor: 'access control'!
isAclSetFor: aUserOrGroup on: anAppClass
	| aclDict aclSet |
	aclDict := self accessByObject at: anAppClass name ifAbsent: [^false].
	aclSet := aclDict at: aUserOrGroup ifAbsent: [^false].
	^aclSet notEmpty! !

!WebSecurityManager methodsFor: 'authentication'!
isAllowedToLoginIP: anIPString
	self allowedIPs isEmpty ifTrue: [^true].
	self isIpFilterPolicyNone ifTrue: [^true].
	^self allowedIPs contains: [:ip | ip trimBlanks notEmpty and: [ip match: anIPString] ]! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
isDefaultAllowedTo: anAccessSymbol 
	"default access right for all objects and all users"
	^self defaultAccessRights includes: anAccessSymbol! !

!WebSecurityManager methodsFor: 'filtering'!
isIpFilterPolicyDeny
	"what to do if IP is on blacklist or whitelist"
	^self ipFilterPolicy = #deny! !

!WebSecurityManager methodsFor: 'filtering'!
isIpFilterPolicyNone
	"what to do if IP is on blacklist or whitelist"
	^self ipFilterPolicy = #none! !

!WebSecurityManager methodsFor: 'filtering'!
isIpFilterPolicyWarn
	"what to do if IP is on blacklist or whitelist"
	^self ipFilterPolicy = #warn! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
isUser: aWebUser allowedTo: anAccessSymbol on: anObject 
	"test the access right for that object and that user or groups for that user"
	(self has: aWebUser rightTo: anAccessSymbol on: anObject) ifTrue: [^true].
	^(self hasUser: aWebUser rightInAnyGroupTo: anAccessSymbol on: anObject)! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
isUser: aWebUser inGroup: aWebGroup
	"test if user is member of this group"
	^aWebGroup includes: aWebUser! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
isUser: aWebUser inGroupNamed: aString
	| group |
	group := self groupNamed: aString.
	group isNil ifTrue: [^false].
	^group includes: aWebUser! !

!WebSecurityManager methodsFor: 'initialize-release'!
lockDefaultGroups
	"to avoid name change or delete of default groups"
	"AIDASite allInstances do: [:each | each securityManager lockDefaultGroups]"
	self allUsersGroup setLocked.
	self adminGroup setLocked.
	self registeredGroup setLocked.
	self activatingGroup setLocked.
	self allUsersGroup setLocked.! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
migrateAppClassessToSymbols
	"do not use app classes but their names as symbols"

	self accessByObject keys do: [:obj |
		((obj isKindOf: Behavior) and: [obj includesBehavior: WebApplication]) ifTrue: [
			self accessByObject 
				at: obj name 
				put: (self accessByObject at: obj).
			self accessByObject removeKey: obj] ].

"WebSecurityManager default migrateAppClassessToSymbols"! !

!WebSecurityManager methodsFor: 'private' stamp: 'mivsek 3/7/2008 23:03'!
migrateToEncryptedPasswords
	"if not already"
	self allUsers do: [:each | each password size ~= 48 ifTrue: [each password: each password] ]

"WebSecurityManager allInstances do: [:each | each migrateToEncryptedPasswords] "
"WebSecurityManager hashPassword: 'aaaaaaaaa' "! !

!WebSecurityManager methodsFor: 'private'!
migrateToLockedReservedUsers
	"to preserve them by not allowing changes"
	"WebSecurityManager allInstances do: [:each | each migrateToLockedReservedUsers] "	
	| user |
	user := self adminUser.
	user isNil ifTrue: [self initAdminUser. user := self adminUser].
	user setLocked.
	user := self guestUser.
	user isNil ifTrue: [self initGuestUser. user := self guestUser].
	user setLocked.
	user := self extranetUser.
	user isNil ifTrue: [self initExtranetUser. user := self extranetUser].
	user setLocked.! !

!WebSecurityManager methodsFor: 'private'!
migrateUrlsForUsersAndGroups
	"WebSecurityManager allInstances do: [:each | each migrateUrlsForUsersAndGroups] "
	self site isNil ifTrue: [^nil].	
	self users do: [:each | self site urlResolver changeToPreferredUrl: each].
	self groups do: [:each | self site urlResolver changeToPreferredUrl: each].! !

!WebSecurityManager methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
postInitDefaultGroups
	"override this method for your own default groups"! !

!WebSecurityManager methodsFor: 'private'!
preferredUrl
	^'/security'! !

!WebSecurityManager methodsFor: 'private'!
printString
	^'WebSecurityManager on: ', self site name! !

!WebSecurityManager methodsFor: 'private'!
reconnectUsersToGroups
	"if user groups don't match group users"
	"AIDASite default securityManager reconnectUsersToGroups"
	self users do: [:user |
		user groups do: [:group | (group includes: user) ifFalse: [group addUser: user] ] ].
	self groups do: [:group |
		group users do: [:user | (self users includes: user) ifFalse: [self addUser: user] ] ]! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
registeredGroup
	"group for registered users"
	^self groups detect: [:each | each isRegisteredGroup] ifNone: [nil].! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
removeAccessRightArray: anAccessSymbols for: aWebUserOrGroup and: anObject 
	"remove all specified access rigths for specified user or group on specified object"
	self site critical:
		[((self accessByObject at: anObject ifAbsent: [^self])
			at: aWebUserOrGroup ifAbsent: [^self])	removeAll: anAccessSymbols].! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
removeAccessRightArray: anAccessSymbols for: aWebUserOrGroup on: anObject 
	"remove all specified access rigths for specified user or group on specified object"
	| usrGrps rights |
	self site critical:
		[usrGrps := self accessByObject at: anObject ifAbsent: [^self].
		rights := usrGrps at: aWebUserOrGroup ifAbsent: [^self].
		anAccessSymbols do: [:each | rights remove: each ifAbsent: [] ] ].! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
removeAccessRights: anAccessSymbol for: aWebUserOrGroup on: anObject 
	"remove all specified access rigths for specified user or group on specified object"
	| access |
	(anAccessSymbol isKindOf: Array)
		ifTrue: [access := anAccessSymbol ]
		ifFalse: [access := Array with: anAccessSymbol].
	self removeAccessRightArray: access for: aWebUserOrGroup on: anObject! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
removeAllAccessRightsFor: aWebUserOrGroup 
	self accessByObject keys do: [:object |
		self 
			removeAllAccessRightsFor: aWebUserOrGroup 
			on: object]! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
removeAllAccessRightsFor: aWebUserOrGroup on: anObject 
	self site critical:
		[(self accessByObject at: anObject ifAbsent: [^self])
			removeKey: aWebUserOrGroup ifAbsent: [^self] ].! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
removeAllAccessRightsForObject: anObject 
	self site critical:
		[self accessByObject removeKey: anObject ifAbsent: []	].! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
removeGroup: aWebUserGroup
	"remove group, if exist. If not exist do nothing" 
	self removeGroup: aWebUserGroup ifAbsent: [].! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
removeGroup: aWebUserGroup ifAbsent: aBlock
	"remove group, if exist. If not exist do aBlock. You cannot remove group AllUsers!!" 
	aWebUserGroup isAllUsersGroup ifTrue: [^self error: 'group AllUsers cannot be removed!!'].
	(self groups includes: aWebUserGroup) ifFalse: [^aBlock value].
	self groups remove: aWebUserGroup.
	aWebUserGroup allUsers do: [:each | aWebUserGroup removeUser: each].
	self removeAllAccessRightsFor: aWebUserGroup! !

!WebSecurityManager methodsFor: 'group management' stamp: ' 21/4/07 22:07'!
removeGroupNamed:  aString 
	| group |
	group := self groupNamed: aString.
	group notNil ifTrue: [self removeGroup: group]! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
removeUser: aWebUser
	"remove user, if exist" 
	(self users includes: aWebUser) ifFalse: [^nil].
	self users remove: aWebUser.
	self allGroups do: [:group | group removeUser: aWebUser].
	self removeAllAccessRightsFor: aWebUser! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
removeUserNamed:  anUsername withPassword: aPassword
	| user |
	user := self userNamed: anUsername withPassword: aPassword.
	self removeUser: user! !

!WebSecurityManager methodsFor: 'access control' stamp: ' 21/4/07 22:07'!
setAccessRights: anAccessSymbols for: aWebUserOrGroup on: anObject
	"set the access rights for specified user or group on object. it can be only one right 
	or an literal array of rights (e.g.#(#read #write) ) " 
	| access |
	aWebUserOrGroup isNil ifTrue: [^self error: 'User is nil'].
	access := (anAccessSymbols isKindOf: Array) 
		ifTrue: [anAccessSymbols ] 
		ifFalse: [Array with: anAccessSymbols].
	self accessRightsArray: access for: aWebUserOrGroup on: anObject.! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
setFormAuthenticationScheme
	"AIDASite default securityManager setFormAuthenticationScheme"
	self authenticationScheme: #Form! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
setHttpBasicAuthenticationScheme
	"AIDASite default securityManager setHttpBasicAuthenticationScheme"
	self authenticationScheme: #HttpBasic! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
setHttpDigestAuthenticationScheme
	"AIDASite default securityManager setHttpDigestAuthenticationScheme"
	self authenticationScheme: #HttpDigest! !

!WebSecurityManager methodsFor: 'authentication' stamp: ' 21/4/07 22:07'!
setSSLClientCertificateAuthenticationScheme
	"AIDASite default securityManager setSSLClientCertificateAuthenticationScheme"
	self authenticationScheme: #SSLClientCertificate! !

!WebSecurityManager methodsFor: 'private'!
settings
	settings isNil ifTrue: 
		[settings := Dictionary new. 
		self initDefaultSettings].
	^settings

"WebServer default settings"! !

!WebSecurityManager methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	"a parent site using that security manager"
	^site! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
site: anAIDASite
	site := anAIDASite.! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
userNamed: anUsernameString
	" find and return a WebUser with username . Return nil if not found"
	"WebSecurityManager default userNamed: 'mivsek'"
 	(anUsernameString ~= '') ifFalse: [^nil].
	^self users 
		detect: [:user | (user username asLowercase = anUsernameString asLowercase)] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'user management' stamp: 'janko 10/28/2011 11:52'!
userNamed: anUsernameString withPassword: aPasswordString
	" find and return a WebUser with username and password. Return nil if not found"
 	(anUsernameString isNil  | aPasswordString isNil) ifTrue: [^nil].
 	((anUsernameString = '') | (aPasswordString = '')) ifTrue: [^nil].
	^self users detect: [:user | 
		(user username asLowercase = anUsernameString asLowercase) and: 
			[user password = (WebSecurityManager hashPassword: aPasswordString)]] 
				ifNone: [nil]
! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
userWithEMail: aString
	" find and return a WebUser with specified email. Return nil if not found" 
	(aString ~= '') ifFalse: [^nil]. 
	^self users detect: [:user | user email asLowercase = aString asLowercase ] ifNone: [^nil]! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
userWithId: aNumber
	^self users detect: [:each | each id = aNumber] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'user management' stamp: 'np 3/16/2009 13:04'!
userWithName: aNameString surname: aSurnameString
	" find and return a WebUser with name and surname. Return nil if not found"
 	(aNameString ~= '') | (aNameString ~= '') ifFalse: [^nil].
	^self users detect: [:user | 
		(user name asLowercase = aNameString asLowercase) and: 
			[user surname asLowercase = aSurnameString asLowercase]] 
				ifNone: [nil]! !

!WebSecurityManager methodsFor: 'user management' stamp: ' 21/4/07 22:07'!
userWithUuid: aString
	" find and return a WebUser with specified uuid. Return nil if not found" 
	^self users detect: [:each | each uuid = aString] ifNone: [nil]! !

!WebSecurityManager methodsFor: 'private' stamp: ' 21/4/07 22:07'!
users 
	users isNil ifTrue: [self initUsers].
	^users! !

!WebSecurityManager class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default 
	^AIDASite default securityManager! !

!WebSecurityManager class methodsFor: 'hashing' stamp: 'jm 12/14/2010 23:32'!
hashPassword: aString
	"Squeak specific"
	"Returns a hashed string, used to store and compare passwords in a secure way"
	^(SecureHashAlgorithm new 
			hashMessage: (AIDASite convert: aString toCodepage: #UTF8) )
				asString! !

!WebSecurityManager class methodsFor: 'instance creation' stamp: 'mivsek 1/10/2008 19:01'!
newOn: anAIDASite
	^super basicNew 
		site: anAIDASite.
		"initialize"  "do that separately, otherwise it drops in indefinitive recursion"! !

!WebSecurityTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:20'!
setUp
"TOO DANGEROUS!!!!!!
	server := Swazoo.SwazooServer singleton.
	server initialize.  ""to remove all stuff and stop it""
	site := AIDASite newNamed: 'test'.
	mgr := site securityManager.
"! !

!WebSecurityTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:20'!
tearDown
"	site := server siteNamed: 'test'.
	site stop.
	server removeSite: site.
	server := nil. site := nil. mgr := nil.
"! !

!WebSecurityTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:21'!
testGroups
"	| group |
	self assert: (mgr groups size = 2). ""AllUsers and Admins""
	group := WebUserGroup new name: 'test'.
	self deny: (mgr existGroupNamed: 'test').
	mgr addGroup: group.
	self assert: (mgr existGroupNamed: 'test').
	self assert: (mgr groups size = 3). 
	mgr addGroupNamed: 'test'. ""duplicate test""
	self assert: (mgr groups size = 3).
	mgr removeGroupNamed: 'test'.
	self assert: (mgr groups size = 2).
"! !

!WebSecurityTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:21'!
testInitialize
"	self assert: mgr users size = 1.
	self assert: mgr groups size = 2.  ""Admininstrators and AllUsers""
	self assert: (mgr existUserNamed: 'admin' withPassword: 'password').
	self assert: (mgr existGroupNamed: 'Administrators').
	self assert: (mgr existGroupNamed: 'AllUsers').
"! !

!WebSecurityTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:22'!
testMultipleAccessRights
"	| object right1 right2 user |
	right1 := #AllowThat. right2 := #AllowThatToo.
	object := #JustSomething.
	user := mgr adminUser.
	self deny: (mgr has: user rightTo: right1 on: object).
	self deny: (mgr has: user rightTo: right2 on: object).
	mgr setAccessRights: (Array with: right1 with: right2) for: mgr adminUser on: object.
	self assert: (mgr has:user rightTo: right1 on: object).
	self assert: (mgr has: user rightTo: right2 on: object).
	mgr removeAccessRights: (Array with: right1 with: right2) for: mgr adminUser on: object.
	self deny: (mgr has: user rightTo: right1 on: object).
	self deny: (mgr has: user rightTo: right2 on: object).
"! !

!WebSecurityTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:22'!
testSimpleAccessRight
"	| right object user |
	right := #AllowThat.
	object := #JustSomething.
	user := mgr adminUser.
	self deny: (mgr has: user rightTo: right on: object).
	mgr setAccessRights: right for: mgr adminUser on: object.
	self assert: (mgr has:user rightTo: right on: object).
	mgr removeAccessRights: right for: mgr adminUser on: object.
	self deny: (mgr has: user rightTo: right on: object).
"! !

!WebSecurityTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:23'!
testUsers
"	| user |
	self assert: (mgr users size = 1). ""only admin user""
	user := WebUser new username: 'test'; password: 'test'; email: 'a@a.si'.
	self deny: (mgr existUserNamed: 'test' withPassword: 'test').
	mgr addUser: user.
	self assert: (mgr existUserNamed: 'test' withPassword: 'test').
	self assert: (mgr users size = 2). 
	mgr addUser: user. ""duplicate test""
	self assert: (mgr users size = 2).
	mgr removeUserNamed: 'test' withPassword: 'test'.
	self assert: (mgr users size = 1).
"! !

!WebSeparator methodsFor: 'private'!
hasTag
	^true! !

!WebSeparator methodsFor: 'private'!
shouldIdent
	^self type ~= #break! !

!WebSeparator methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
size: aNumber
	"size of a ruler"
	self attributesAt: #size put: aNumber printString.! !

!WebSeparator methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	| tag |
	self prepareToHtmlStreamingOn: aSession. 
	type = #paragraph ifTrue: [tag := 'p'].
	type = #break ifTrue: [tag := 'br'].
	type = #ruler ifTrue: [tag := 'hr'].
	aStream nextPutAll: self ident, '<', tag.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: self tagClosing, self eol.! !

!WebSeparator methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
type
	^type! !

!WebSeparator methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
type: aSymbol
	"#ruler #paragraph #break"
	type := aSymbol.! !

!WebSeparator class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
break
	
	^ self new type: #break! !

!WebSeparator class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
paragraph
	
	^ self new type: #paragraph! !

!WebSeparator class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
rulerSize: aNumber
	
	^(self new) type: #ruler; size: aNumber! !

!WebSession methodsFor: 'private-app state'!
addApp: anApplication for: anObject type: aSymbol
	"web or wap apps, type can be #web or #wap "
	| objDict |
	objDict := self appsForObjects at: anObject ifAbsentPut: [Dictionary new].
	^objDict at: aSymbol put: anApplication! !

!WebSession methodsFor: 'private' stamp: ' 21/4/07 22:07'!
addSessionID
	"add session id to  parms dictionary. Url with session id looks like: 	http://www.tris-a.si/welcome.html?id=523453. This should be done for every automaticaly 
	generated url (WebLink printHTMLPage) to distinguish sesions among themselves."
	self parms at: 'id' put: self id printString.! !

!WebSession methodsFor: 'private-app state' stamp: ' 21/4/07 22:07'!
addWebApp: aWebApplication for: anObject
	^self addApp: aWebApplication for: anObject type: #web! !

!WebSession methodsFor: 'security-login'!
adminAllowed
	"check if general administration is allowed for user on our session"
	^self site securityManager
		isUser: self user
		inGroupNamed: self site securityManager adminGroup name! !

!WebSession methodsFor: 'private-serving' stamp: 'janko 4/25/2012 10:59'!
aidaIsRespondingStreamed
	"to simulate WebPAge, see AIDASite answer:toGetoOrPost:on:"
	^false! !

!WebSession methodsFor: 'private-serving'!
aidaPresenterFor: aRequest on: aSession
	| event |
	aRequest isWebSocketRequest ifTrue: 
		["Transcript cr; show: '** new WebSocket on ', self site name ,' from ', aRequest peer. "
		^self]. "upgrade to WebSocket request on /aidasession/websocket, see printHTMLPage.."
	 '/aidasession/comet' = aRequest uriString ifTrue: 
		[^self realtimeHandler respondToCometRequest: aRequest].
	('/aidasession/element-*' match: aRequest uriString) ifTrue: 
		[^self respondToElementDirectRequest: aRequest].  "direct Ajax request to some element of a webpage"
"	aRequest uriString = '/aidasession/ajax' ifFalse: 
		[(Delay forSeconds: 1) wait. ^self]. "  "WebSocket over Squid proxy troubles!!"
	aRequest isPost not ifTrue: [^WebPage new]. "JSON msg is in body of post request"
	event := WebEvent fromJSON: (aRequest ensureFullRead; entityBody) on: aSession.
	(event context notNil and: [event element notNil]) ifTrue:
		[event app respondToEvent: event].
	"next, streaming step occurs in printHTMLPageOnfor:to: "! !

!WebSession methodsFor: 'private-app state' stamp: ' 21/4/07 22:07'!
appFor: anObject type: aSymbol 
	^(self appsForObjects at: anObject ifAbsent: [^nil]) 
		at: aSymbol ifAbsent: [^nil]! !

!WebSession methodsFor: 'private-app state' stamp: ' 21/4/07 22:07'!
appsForObjects
	
	appsForObjects isNil ifTrue: [self initAppsForObjects].
	^appsForObjects! !

!WebSession methodsFor: 'security-login'!
authenticateFrom: aRequest
	"try to login with username and password from request (rfc2617)"
	| usr |
	aRequest username isNil ifTrue: [^nil].
	usr := self site securityManager userNamed: aRequest username.
	usr isNil ifTrue: [^nil].
	(aRequest matchUserWithPassword: usr password) 
		ifTrue: [self loginUser: usr] ifFalse: [self logout].! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
browser
	
	"try to find out, which browser a web request originator is using. It can be #Netscape, #IBM, #Microsoft, #lynx, #Mosaic.  Returns #Unknown if not possible to find out the browser type"

	| partOfString |
	self browserString = '' ifTrue: [^#Unknown].
	partOfString := self browserString copyFrom: 1 to: 6.
	partOfString = 'Mozill' ifTrue: [^#Netscape].
	partOfString = '' ifTrue: [^#Microsoft].
	partOfString = 'IBM-We' ifTrue: [^#IBM].
	partOfString = '' ifTrue: [^#Lynx].
	partOfString = '' ifTrue: [^#Mosaic].! !

!WebSession methodsFor: 'accessing'!
browserString
	"return the string, whick browser sends as identification in a web request"
	self lastRequest isNil ifTrue: [^''].
	^self lastRequest userAgent.! !

!WebSession methodsFor: 'security-login'!
checkExpirationAndPossiblyLogoutFor: aRequest
	"don't logout if request is POST on the same object (eg. after long editing)"
	self isLoggedIn ifFalse: [^self].
	(self site autoLogout or: [self user autoLogout]) ifFalse: [^self].
	(self isExpired and: [aRequest isPost not]) ifTrue: 
		[self logout.
		(self site admin aidaWebAppFor: self) 
			showError: self site style sessionTimeoutText].! !

!WebSession methodsFor: 'private-serving' stamp: 'janko 8/19/2011 22:13'!
cleanupQueue
	"remove stalled commands like those on inactive apps or views"
	self queue copy do: [:cmd |
		( (#(#update) includes: cmd command) and:
			[cmd app isNil or: 
				[cmd app isActive not or: [(cmd app isActiveView: cmd view) not]]])
					ifTrue: [self queue remove: cmd] ].
	self queue size > 1000 ifTrue: "something is wrong!!"
		[Transcript cr; show: '*** Queue too long, reinitializing on ', self user username.
		self initQueue]! !

!WebSession methodsFor: 'accessing-other'!
clipboard
	"for cut/copy/paste references to web pages to easier hyperlink them"
	^self otherAt: #clipboard ifAbsent: [self initClipboard].! !

!WebSession methodsFor: 'locale support' stamp: ' 21/4/07 22:07'!
codePage
	^#'UTF_8' "always!!"! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
cookie
	"true if web request in this nonsecure session uses cookies, false otherwise"
	^self cookies at: 1.! !

!WebSession methodsFor: 'private'!
cookie: aBoolean
	self cookies 	at: 1 put: aBoolean! !

!WebSession methodsFor: 'private' stamp: ' 21/4/07 22:07'!
cookies
	cookies isNil ifTrue: [self initCookies].
	^cookies! !

!WebSession methodsFor: 'locale support'!
country
	^self otherAt: #Country ifAbsent: [nil]! !

!WebSession methodsFor: 'locale support'!
country: aSymbol
	"set the country of a web request originator in ISO 2letter format"
	^self otherAt: #Country put: aSymbol! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
created

	"return the timestamp of a session creation."

	^created! !

!WebSession methodsFor: 'accessing'!
createdTimestampText
	^self created printSloString! !

!WebSession methodsFor: 'private'!
existsJson
	"exists JSON support in user's browser?"
	^self otherAt: #JsonExists ifAbsent: [false]! !

!WebSession methodsFor: 'private'!
fullUrlForCurrentPage
	"composes and returns a full url for a curent requested page. If parms dictionary is changed, 
	then a query string with changed parameters is generated. Usefull for presenting the same 
	page in a different way by parameteres in query string"
	^self lastRequest urlString! !

!WebSession methodsFor: 'accessing-other'!
geolocation
	"Geolocation of user's browser, if any"
	^self otherAt: #geolocation ifAbsent: [nil]! !

!WebSession methodsFor: 'private'!
geolocation: aWebGeolocation
	"Geolocation of user's browser"
	^self otherAt: #geolocation put: aWebGeolocation! !

!WebSession methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
hasSecureCookie
	"check if secure cookie is already set on secure part of session"
	^self secureCookie! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
id

	"return the unique identification of a nonsecure session to browser. This is a random generated number at session generation. It can be used for session tracking in URLs, forms, etc."

	^self ids at: 1! !

!WebSession methodsFor: 'private'!
id: aNumber
	"return the unique identification of a nonsecure session. This is a random generated number 
	at session generation. It can be used for session tracking in URLs, forms, etc."
	self ids at: 1 put: aNumber.! !

!WebSession methodsFor: 'private' stamp: ' 21/4/07 22:07'!
ids
	ids isNil ifTrue: [self initIds].
	^ids! !

!WebSession methodsFor: 'session modes'!
inAdminMode
	"is session in admin mode?"
	^(self otherAt: #sessionMode) = #admin! !

!WebSession methodsFor: 'session modes'!
inDevMode
	"is session in developers mode?"
	^(self otherAt: #sessionMode) = #dev! !

!WebSession methodsFor: 'session modes'!
inNormalMode
	"is session in normal users mode?"
	^(self otherAt: #sessionMode) = #normal! !

!WebSession methodsFor: 'session modes'!
inTranslationMode
	"should text in your Apps be in-place edited for translation?"
	^self inAdminMode or: [self inDevMode]! !

!WebSession methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initAppsForObjects
	appsForObjects := IdentityDictionary new.! !

!WebSession methodsFor: 'initialize-release'!
initClipboard
	^self otherAt: #clipboard put: WebClipboard new! !

!WebSession methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initCookies
	cookies := Array with: false with: false.! !

!WebSession methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initIds
	ids := Array new: 2.! !

!WebSession methodsFor: 'initialize-release'!
initLoginHistory
	^self otherAt: #LoginHistory put: DailyCollection new! !

!WebSession methodsFor: 'initialize-release'!
initOther
	other := Dictionary new! !

!WebSession methodsFor: 'initialize-release'!
initParms
	^self otherAt: #parms put: Dictionary new.! !

!WebSession methodsFor: 'initialize-release'!
initQueue
	"for sending commands back to browser"
	queue := OrderedCollection new.! !

!WebSession methodsFor: 'initialize-release'!
initRealtimeConnections
	^self otherAt: #RealtimeConnections put: OrderedCollection new! !

!WebSession methodsFor: 'initialize-release'!
initRequests
	^self otherAt: #requests put: OrderedCollection new.! !

!WebSession methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initUser
	self user: self site securityManager guestUser! !

!WebSession methodsFor: 'initialize-release'!
initUserValues
	userValues := Dictionary new! !

!WebSession methodsFor: 'accessing-other'!
initialIP
	"from which user came when session was created. It can change later for mobile users!!"
	^self sessionIPs notEmpty 
		ifTrue: [self sessionIPs first]
		ifFalse: ['']! !

!WebSession methodsFor: 'initialize-release'!
initialize
	self setRandomIds.
	self setCreatedTimestamp.
	self initCookies.
	self initParms.
	self initRequests.
	self initUser.
	self setNormalMode. 
	self initAppsForObjects.! !

!WebSession methodsFor: 'testing' stamp: 'np 9/4/2008 16:21'!
isActive

	"active if at least one request received last hour"

	self lastRequest isNil ifTrue: [^false].
	^(SpTimestamp now asSeconds - self lastRequest timestamp asSeconds) < 3600! !

!WebSession methodsFor: 'testing-user agent'!
isBrowserSupported
	"advanced functions like Ajax supported in this browser?"
	"Test for JSON support or IE8 and newer for now"
	| supported version |
	supported := self otherAt: #BrowserSupported ifAbsentPut:
		[supported := self existsJson ifTrue: [true] ifFalse: 
			[self isFromMSIE 
				ifTrue:
					[version := self lastRequest userAgent readStream upToAll: 'MSIE'; upTo: $ ; upTo: $. .
"					Transcript cr; show: ('*** ? browser: ', self lastRequest userAgent, ' from: ', self user username). "
					version asInteger >= 8]
				ifFalse: [true] ]. "for now"
		supported].
	supported ifFalse: [self other removeKey: #BrowserSupported]. "to always recheck"
	^supported

"
('Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; GTB6.6; .NET CLR 2.0.50727; .NET CLR 1.1.4322; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)'  readStream upToAll: 'MSIE'; upTo: $ ; upTo: $.) asInteger
"! !

!WebSession methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isEncrypted
	^self lastRequest isEncrypted "for now!! "! !

!WebSession methodsFor: 'testing' stamp: 'np 9/4/2008 16:21'!
isExpired
	"more than 15min of inactivity"
	self lastRequest isNil ifTrue: [^false].
	^(SpTimestamp now asSeconds - self lastRequest timestamp asSeconds) > (15*60)! !

!WebSession methodsFor: 'testing-user agent'!
isFromLinux
	^self lastRequest isFromLinux! !

!WebSession methodsFor: 'testing-user agent'!
isFromMSIE
	^self lastRequest isFromMSIE! !

!WebSession methodsFor: 'testing-user agent'!
isFromNetscape
	".. or Moziila or Firefox"
	^self lastRequest isFromNetscape! !

!WebSession methodsFor: 'testing-user agent'!
isFromWindows
	^self lastRequest isFromWindows! !

!WebSession methodsFor: 'testing'!
isGuest
	"user is Guest - anonymous, not logged in"
	^self user isNil or: [self user isGuest]! !

!WebSession methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isHttpAuthenticationNeeded
	"Usually we authenticate by WebAdminApp logon form. But if site is configured for HTTP 	authentication (to open a separate username/password dialog window to user), and 
	a session is not yet logged in, this method will return true"
	^self isLoggedIn not and: [self site securityManager hasHttpAuthenticationScheme]! !

!WebSession methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isLoggedIn
	^self user notNil and: [self user isGuest not]! !

!WebSession methodsFor: 'testing-user agent'!
isMobile
	"a session from mobile device: phone, tablet, .."
	| request userAgent |
	request := self lastRequest. request isNil ifTrue: [^false].
	userAgent := request userAgent.  userAgent isNil ifTrue: [^false].
	( '*Android*' match: userAgent) ifTrue: [^true]. "Android device"
	( '*Symbian*' match: userAgent) ifTrue: [^true]. "Symbian device"
	( 'BlackBerry*' match: userAgent) ifTrue: [^true]. "BlackBerry device"
	('*iPhone*' match: userAgent) ifTrue: [^true].  "iPhone"
	('*iPad*' match: userAgent) ifTrue: [^true].  "iPad"
	^false! !

!WebSession methodsFor: 'testing-user agent'!
isMobilePhone
	"a session from mobile phone"
	^self isMobileTablet not and: [self isMobile]! !

!WebSession methodsFor: 'testing-user agent'!
isMobileTablet
	"a session from mobile tablet (bigger screen than phone)"
	self lastRequest isNil ifTrue: [^false].
	( '*Android*SPH*Mobile*' match: self lastRequest userAgent) ifTrue: [^true]. "Galaxy Tab"
	('*iPad*' match: self lastRequest userAgent) ifTrue: [^true].  "iPad"
	^false! !

!WebSession methodsFor: 'testing'!
isNew
	"this is first request and cookie not set on the browser yet"
	^self cookie not "enough?"! !

!WebSession methodsFor: 'testing'!
isRemoteGuest
	"access from outside via Proxy, not yet logged in"
	^self user isGuest
		and: [self lastRequest isForwarded ]! !

!WebSession methodsFor: 'locale support'!
language
	"preferred language of a web user. Initialy set from the last request (lazily, when first needed)"
	^self otherAt: #Language ifAbsent:
		[self lastRequest notNil 
			ifTrue: [self language: (self originatorLanguageFrom: self lastRequest)]
			ifFalse: [nil] ]! !

!WebSession methodsFor: 'locale support'!
language: aLanguageCodeSymbol
	"preferred language of a web user. Initialy set from the last request (lazily, when first needed)"
	^self otherAt: #Language put: aLanguageCodeSymbol! !

!WebSession methodsFor: 'locale support'!
languageBasic
	" if a combined code (like 'en-us'), return only basic lanuage (like 'en' for 'en-us')"
	^(self language asString includes: $- )
		ifTrue: [self language asString readStream upTo: $- ]
		ifFalse: [self language]! !

!WebSession methodsFor: 'accessing-other'!
lastActivity
	"the last activity (request) timestamp"
	^self otherAt: #lastActivityTimestamp ifAbsent: [nil]! !

!WebSession methodsFor: 'accessing-other'!
lastActivityText
	"the last activity (request) timestamp"
	^self lastActivity notNil
		ifTrue: [self lastActivity printSloString]
		ifFalse: ['']! !

!WebSession methodsFor: 'accessing-other'!
lastApp
	"return WebApplication subclass which was called with last request"
	^self otherAt: #lastApp! !

!WebSession methodsFor: 'accessing-other'!
lastApp: anApplication
	self otherAt: #lastApp put: anApplication! !

!WebSession methodsFor: 'accessing-other'!
lastRequest
	"the last, actualy current request pending. also add request to the history in a request 
	if logging is on."
	"BE CAREFULL!! more than one request can be processed concurrently, so don't count 
	that last reques is actually a current one too!! It mostly is, but not always!!"
	^self otherAt: #lastRequest! !

!WebSession methodsFor: 'accessing-other'!
lastRequest: aRequest
	"remember the last, actualy current request pending. also add request to the history in a request 
	if logging is on. If first request then also try to find country, language and codePage 
	of the originator"
	self otherAt: #lastRequest put: aRequest.  
	self initParms.				      "clear old parameters"
	self newView: (aRequest queryAt: #view ifAbsent: ['']).  "default new view is view from last request"! !

!WebSession methodsFor: 'accessing-other'!
lastView
	"return a view of WebApllication, which is created in response to last request"
	^self otherAt: #lastView! !

!WebSession methodsFor: 'accessing-other'!
lastView: aSymbol
	self otherAt: #lastView put: aSymbol! !

!WebSession methodsFor: 'private' stamp: 'jm 9/8/2010 21:09'!
logLoginOf: aWebUser
	self loginHistory
		add: (Array with: #login with: aWebUser with: SpTimestamp now)
		onDate: SpDate today! !

!WebSession methodsFor: 'private' stamp: 'jm 9/8/2010 21:10'!
logLogoutOf: aWebUser
	self loginHistory 
		add: (Array with: #logout with: aWebUser with: SpTimestamp now)
		onDate: SpDate today! !

!WebSession methodsFor: 'accessing-other'!
loginHistory
	"occurences of user logged it/out. As DailyCollection of Array #login/logout, WebUser, timestamp"
	^self otherAt: #LoginHistory ifAbsent: [self initLoginHistory]! !

!WebSession methodsFor: 'accessing'!
loginStateText
	"login, logout, guest"
	(self isGuest and: [self neverLoggedIn]) ifTrue: [^'guest'].
	self isLoggedIn ifTrue: [^'login'].
	^'logout'! !

!WebSession methodsFor: 'accessing'!
loginUser
	"user logged now or in a past"
	(self isGuest and: [self neverLoggedIn]) ifTrue: [^nil].
	self isLoggedIn ifTrue: [^self user].
	^self loginHistory all first at: 2! !

!WebSession methodsFor: 'security-login'!
loginUser: aWebUser
"	(self site securityManager isAllowedToLoginIP: self lastRequest peer) 
		ifFalse: [^self error: 'From this IP not allowed to login!!'].
"	self user: aWebUser.
	self logLoginOf: aWebUser.
	aWebUser inAdminGroup ifTrue: [aWebUser escalateToAdmin]. "temporary, otherwise rather unescalate!!"
	aWebUser logLogin.! !

!WebSession methodsFor: 'security-login'!
loginUserNamed: aUsernameString withPassword: aPasswordString 
	"will fail if username or password wrong!!"
	| usr |
	usr := self site securityManager userNamed: aUsernameString withPassword: aPasswordString.
	usr isNil ifTrue: [self error: 'User withat username/password combination does not exist'].
	self loginUser: usr! !

!WebSession methodsFor: 'accessing'!
loginUserText
	"user logged now or in a past"
	| usr |
	usr := self loginUser. 
	usr isNil ifTrue: [^''].
	^usr nameSurname! !

!WebSession methodsFor: 'security-login'!
loginUserWithName: aNameString surname: aSurnameString 
	| usr |
	usr := self site securityManager userWithName: aNameString surname: aSurnameString.
	usr notNil ifTrue: [self loginUser: usr]! !

!WebSession methodsFor: 'security-login'!
logout
	"Replace logged user with Guest. Remember last page to return after login again"
	| origin usr |
	self redirectLink: nil. 	self redirectOrigin: nil.
	self isLoggedIn 
		ifTrue: 
			[usr := self user. self initUser. 
			usr isEscalatedToAdmin ifTrue: [usr unEscalateFromAdmin].
			self logLogoutOf: usr. usr logLogout] 
		ifFalse: [^nil].
	origin := usr lastAppUrl. 
	(origin isNil or: [self lastRequest notNil and: [origin = self lastRequest uriString]])  ifFalse: 
		[usr logoutFromUrl: origin]. "to jump back after login"! !

!WebSession methodsFor: 'testing'!
neverLoggedIn
	^self loginHistory isEmpty! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
newView

	"return a value of a 'view' parameter in query part of a URL to be generated. Also used for changing views in a state machine for web applications (in method actionFormForm (here is set) and method printWebPage (here is used to genererate appropriate page))"

	^self parms at: 'view' ifAbsent: [^''].! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
newView: aString
	"set a value of a 'view' parameter in query part of a URL to be generated. Also used for changing 
	views in a state machine for web applications (in method actionFormForm (here is set) and method 	printWebPage (here is used to genererate appropriate page))"
	((aString = '') or: [aString isNil]) ifFalse: [self parms at: 'view' put: aString ].! !

!WebSession methodsFor: 'initialize-release'!
nilLastApp
	self other notNil ifTrue: [self other removeKey: #lastApp ifAbsent: [nil] ]! !

!WebSession methodsFor: 'initialize-release'!
nilLastRequest
	self other notNil ifTrue: [self other removeKey: #lastRequest ifAbsent: [nil] ]! !

!WebSession methodsFor: 'private-serving'!
notifyQueueAddition
	"to send added command immediatelly if some realtime channel is open, otherwise 
	wait for current or next request"
	self cleanupQueue. "of stalled commands like those on inactive apps or views"
	self realtimeHandler sendMesagesFromQueue. "and clear sent msgs from queue"! !

!WebSession methodsFor: 'locale support' stamp: ' 21/4/07 22:07'!
originatorCountryFrom: aRequest
	"find an ISO country code from a web request"
	"not yet implemented!!"! !

!WebSession methodsFor: 'locale support' stamp: 'mu 4/6/2008 10:55'!
originatorLanguageFrom: aRequest
	"find a language from a web request"
	| defaultLang header |
	defaultLang := self site defaultLanguage.
	header := aRequest headerAt: 'Accept-Language' ifAbsent:[^defaultLang].
	header values isEmpty ifFalse: [^(header values at: 1) asSymbol].
	^defaultLang! !

!WebSession methodsFor: 'private-other'!
other
	^other! !

!WebSession methodsFor: 'private-other'!
otherAt: aSymbol
	"other values"
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebSession methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	"other values"
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebSession methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebSession methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebSession methodsFor: 'private-serving'!
packToJSONMessages: aCollection "of WebCommands"
	"convert commands to an array of JSON"
	^'[', (aCollection 
		inject: ''
		into: [:jsonString :command || separator |
			separator := command = aCollection last ifFalse: [','] ifTrue: [''].
			jsonString, command asJSON, separator]),
	  ']'! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
parent
	"a session manager !! "
	^parent! !

!WebSession methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: aWebSessionManager
	parent := aWebSessionManager.! !

!WebSession methodsFor: 'accessing-other'!
parms
	"This is a dictionary of parameters in query part of url. When web request arrives, parameters 
 	from query string are written here. When any url is dynamically generated, those parms are 
	appended to it as a query string. You can add, change or delete any parameter to better 
	suit your needs (eg. view=brief to instruct brief view of an object) "
	^self otherAt: #parms! !

!WebSession methodsFor: 'private'!
printString
^'aWebSession
	ip: ', (self lastRequest notNil ifTrue: [self lastRequest peer] ifFalse: ['']), '
	user: ', self user username, ' (', self user nameSurname, ')
	created: ', self created printSloString, '
	last:      ', (self lastRequest notNil ifTrue: [self lastRequest timestamp printSloString] ifFalse: ['']), ''! !

!WebSession methodsFor: 'private-serving'!
queue
	"for sending commands back to browser"
	queue isNil ifTrue: [self initQueue].
	^queue! !

!WebSession methodsFor: 'private-serving'!
queueCommand: aWebCommand
	self queue add: aWebCommand.
	self notifyQueueAddition.! !

!WebSession methodsFor: 'private-serving'!
queueUpdateElement: anElement
	"this element is to be updated on the browser, stream it to a WebCommand and put into waiting queue"
	| stream stripped toUpdate |
	stream := WriteStream on: String new.
	stripped := anElement isWrapped 
		ifFalse: [anElement copy noDiv; nilAttributes]  "just plain element, no div,  to send its inner html only"
		ifTrue: [anElement parent copy]. "wrapped <span> element"
	stripped streamHtmlTo: stream for: nil on: anElement app session.
	toUpdate := anElement isWrapped
		ifFalse: [anElement elementToReplace] "anElement itself, except for popups"
		ifTrue: [anElement parent].  "wrapper <span> element"
	self queueCommand: 
		(WebCommand 
			newUpdate: toUpdate
			with: stream contents).! !

!WebSession methodsFor: 'accessing-other'!
realtimeHandler
	"to handle realtime (WebSocket and Comet) channels on that session"
	^self otherAt: #RealtimeHandler ifAbsentPut: [WebRealtimeHandler newOn: self]! !

!WebSession methodsFor: 'redirection'!
redirectLink
	"if this aWebLink is set, then web browser will recreate another request with url from that link. Used, if you like, after form action in one page to show page for some other object, e.g. if you have search field in page in one object, and search result is exactly one, then you want to show result page immediately. You can do this with this method.
Atribute redirectLink is reset to nil immediately after printWebPage and before printHTMLPage in WebMediator method dicpatchClient (see WebMediator sendResponseHeaderOn:)"
	^self otherAt: #redirectLink! !

!WebSession methodsFor: 'redirection'!
redirectLink: aWebLink
	(aWebLink isKindOf: WebLink) | aWebLink isNil ifFalse: [^nil].
	self otherAt: #redirectLink put: aWebLink.! !

!WebSession methodsFor: 'redirection'!
redirectOrigin
	"this is an URL from where the redirection request originates. Used for returning back from
	exception page, for example when you want to see page without access rights, then you are
	redirected to login page. after successfull login, you are redirected back to intended page.
	Redirect origin is set up automatically by redirectLink: request."
	^self otherAt: #redirectOrigin! !

!WebSession methodsFor: 'redirection'!
redirectOrigin: anUrlString
	self otherAt: #redirectOrigin put: anUrlString.! !

!WebSession methodsFor: 'redirection'!
redirectToOrigin
	"Used for returning back from
	exception page, for example when you want to see page without access rights, then you are
      redirected to login page. after successfull login, you are redirected back to intended page.
	Redirect origin is set up automatically by redirectLink: request."
	self redirectOrigin notNil ifTrue:
		[self redirectLink: (WebLink text: '' linkTo: self redirectOrigin).
		self redirectOrigin: nil].! !

!WebSession methodsFor: 'private'!
registerIP
	"add IP address of user's computer to the list, if not there already"	
	| ip |
	self lastRequest isNil ifTrue: [^nil].
	ip := self lastRequest peer.
	self initialIP = ip ifFalse:   "new session or session from new IP (like mobile user)"
		[(self sessionIPs contains: [:existing | existing = ip])
			ifFalse: [self sessionIPs add: ip] ]! !

!WebSession methodsFor: 'releasing state'!
releaseApplicationState
	self removeAppsForObjects.
	self nilLastRequest.
	self nilLastApp.
	self initQueue.
	self initRequests.
	self initClipboard.
	self redirectLink: nil; redirectOrigin: nil.
	self realtimeHandler removeAll! !

!WebSession methodsFor: 'private-app state' stamp: ' 21/4/07 22:07'!
removeApp: anApplication for: anObject type: aSymbol
	(self appsForObjects at: anObject ifAbsent: [^nil])
		removeKey: aSymbol ifAbsent: [^nil]! !

!WebSession methodsFor: 'releasing state'!
removeAppsForObjects
	self appsForObjects keysAndValuesDo: [:object :dict |
		(dict includesKey: #web) ifTrue: [(dict at: #web) removeYourself] ].
	self initAppsForObjects! !

!WebSession methodsFor: 'releasing state'!
removeIfNewGuest
	"remove yourself if completelly fresh Guest session, used for DOS attack countermeasures"
	(self isGuest and: [(SpTimestamp now asSeconds - self created asSeconds) < 1])
		ifTrue: [self removeYourself]! !

!WebSession methodsFor: 'releasing state'!
removeYourself
	" .. from session manager"
	self parent notNil ifTrue: [self parent removeSession: self].
	self releaseApplicationState.
	self parent: nil.! !

!WebSession methodsFor: 'accessing-other'!
requestNum
	"return number of all requests up to now on this session"
	^self requests size! !

!WebSession methodsFor: 'accessing-other'!
requests
	"return the history of all requests on this session as ordered collection with the oldest as 
	first and newest as last"
	^self otherAt: #requests ifAbsent: [self initRequests].! !

!WebSession methodsFor: 'private-serving'!
respondToElementDirectRequest: aRequest
	"Direct a request to the specified element of a webpage. Element context id and is 
	found in request's Url, like /aidasession/element-id345-ctx35234"
	| stream id ctxId context element |
	stream := aRequest uriString readStream.
	id := (stream upTo: $-;  upToAll: '-ctx') asSymbol.
	ctxId := (stream next; upToEnd) asInteger.
	context := self lastApp contexts at: ctxId.
	element := context elementId: id.
	^element aidaPresenterFor: aRequest on: self! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
secureCookie
	"true if web request in this secure session uses cookies, false otherwise"
	^self cookies at: 2! !

!WebSession methodsFor: 'private'!
secureCookie: aBoolean
	self cookies at: 2 put: aBoolean! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
secureId

	"return the unique identification of a secure session to browser. This is a random generated number at session generation. It can be used for session tracking in URLs, forms, etc."

	^self ids at: 2! !

!WebSession methodsFor: 'private'!
secureId: aNumber
	"return the unique identification of a secure session. This is a random generated number 
	at session generation. It can be used for session tracking in URLs, forms, etc."
	self ids at: 2 put: aNumber.! !

!WebSession methodsFor: 'accessing-other'!
sessionIPs
	"all IP addresses of this session. Usually one, except for mobile/roaming users and those with dynamic IP"
	^self otherAt: #SessionIPs ifAbsentPut: [OrderedCollection new]! !

!WebSession methodsFor: 'session modes'!
setAdminMode
	"set session to admin mode"
	self user inAdminGroup ifFalse: [^self error: 'user not in Admininistrators group'].
	self otherAt: #sessionMode put: #admin! !

!WebSession methodsFor: 'initialize-release' stamp: 'JM 4/25/2007 21:10'!
setCreatedTimestamp
	created := SpTimestamp now.! !

!WebSession methodsFor: 'session modes'!
setDevMode
	"set session to developers mode"
	self user inAdminGroup ifFalse: [^self error: 'user not Admin!!'].
	self otherAt: #sessionMode put: #dev! !

!WebSession methodsFor: 'private-serving'!
setGeolocationFrom: aRequest
	| location |
	location := WebGeolocation newFromJSON: (aRequest ensureFullRead; entityBody).
	self geolocation: location.! !

!WebSession methodsFor: 'private'!
setJsonExists
	"JSON support exists in user's browser"
	^self otherAt: #JsonExists put: true! !

!WebSession methodsFor: 'private'!
setLastActivity
	"set the last activity (request) timestamp"
	^self otherAt: #lastActivityTimestamp put: SpTimestamp now! !

!WebSession methodsFor: 'session modes'!
setNormalMode
	"set session to normal users mode"
	self otherAt: #sessionMode put: #normal! !

!WebSession methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
setRandomIds
	self id: (Random new next * 1000000000) asInteger.
	self secureId: (Random new next * 1000000000) asInteger.! !

!WebSession methodsFor: 'testing'!
shouldCountRequests
	| policy |
	policy := self site countingPolicy.
	policy = #all ifTrue: [^true].
	policy = #none ifTrue: [^false].
	policy = #onlyGuests ifTrue: [^self user isGuest].
	policy = #excludeAdmins ifTrue: [^self user inAdminGroup not].
	^true! !

!WebSession methodsFor: 'testing'!
shouldLogRequests
	| policy |
	policy := self site loggingPolicy.
	policy = #all ifTrue: [^true].
	policy = #none ifTrue: [^false].
	policy = #onlyGuests ifTrue: [^self user isGuest].
	policy = #excludeAdmins ifTrue: [^self user inAdminGroup not].
	^true! !

!WebSession methodsFor: 'redirection'!
shouldRedirect
	^self redirectLink notNil! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	"a session manager !! "
	^self parent site! !

!WebSession methodsFor: 'private-serving'!
streamAjaxResponseOn: aStream for: aRequest on: aWebSession
	| jsonString |
	jsonString := self packToJSONMessages: self queue.
	aStream nextPutAll:  jsonString.
"	aStream nextPutAll:  (AIDASite convert: jsonString toCodepage: #UTF8). "
	self initQueue.! !

!WebSession methodsFor: 'private-serving'!
streamEmptyResponseOn: aStream for: aRequest on: aWebSession
	"respond only 200 ok"! !

!WebSession methodsFor: 'private-serving'!
streamHtmlTo: aStream for: aRequest on: aWebSession
	| url |
	url := aRequest urlString readStream upTo: $? .
	url = '/aidasession/ajax' ifTrue:    "Ajax response with JSON commands"
		[^self streamAjaxResponseOn: aStream for: aRequest on: aWebSession]. 
	url = '/aidasession/websocket' ifTrue:   "upgrade to WebSocket request"
		[^self realtimeHandler streamWebSocketOn: aStream for: aRequest on: aWebSession]. 
	url = '/aidasession/comet' ifTrue:   "long polling Ajax Comet"
		[^self realtimeHandler streamCometOn: aStream for: aRequest on: aWebSession]. 
	url = '/aidasession/geolocation' ifTrue:   "geolocation of browser received"
		[self setGeolocationFrom: aRequest.
		^self streamEmptyResponseOn: aStream for: aRequest on: aWebSession]. 
	^self error: 'unknown request'.! !

!WebSession methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
user
	user isNil ifTrue: [self initUser].
	^user! !

!WebSession methodsFor: 'private'!
user: aWebUser
	"set a reference to aWebUser, who is logged into this session"
	user := aWebUser.! !

!WebSession methodsFor: 'user values' stamp: ' 21/4/07 22:07'!
userValueAt: aSymbol
	"anything you need to share among Apps in that seesion, like last selected stuff, etc."
	^self userValueAt: aSymbol ifAbsent: [nil]! !

!WebSession methodsFor: 'user values' stamp: ' 21/4/07 22:07'!
userValueAt: aSymbol ifAbsent: aBlock
	^self userValues at: aSymbol ifAbsent: aBlock! !

!WebSession methodsFor: 'user values' stamp: ' 21/4/07 22:07'!
userValueAt: aSymbol put: anObject
	^self userValues at: aSymbol put: anObject! !

!WebSession methodsFor: 'private'!
userValues
	"return a dictionary with user defined values, which scope is this session. Usr can use it for such 
	things as global navigation, remembering views etc."
	userValues isNil ifTrue: [self initUserValues].
	^userValues! !

!WebSession methodsFor: 'testing'!
wasLoggedInUser: aWebUser
	"or still is"
	self user = aWebUser ifTrue: [^true].
	^self loginHistory all contains: [:record | (record at: 2) = aWebUser]! !

!WebSession methodsFor: 'private-app state' stamp: ' 21/4/07 22:07'!
webAppFor: anObject
	^self appFor: anObject type: #web! !

!WebSession class methodsFor: 'instance creation' stamp: 'mivsek 8/22/2007 21:17'!
new
	^super basicNew.
! !

!WebSession class methodsFor: 'instance creation' stamp: 'JM 4/25/2007 21:21'!
newOn: aWebSessionManager
	"new web session on a specified session manager"
	| session |
	session := super basicNew.
	session parent: aWebSessionManager.
	session initialize.
	^session! !

!WebSessionManager methodsFor: 'accessing'!
activeSessionsForUsername: aString
	"find active sessions for a user with that username"
	"(AIDASite named: 'wikib') sessionManager activeSessionsForUsername: 'mivsek' "
	^self allActiveSessions select: [:each | each user username = aString]! !

!WebSessionManager methodsFor: 'adding-removing' stamp: ' 7/6/08 18:41'!
addSession: aWebSession
	self site critical:
		[self sessions 
			at: aWebSession id put: aWebSession;
			at: aWebSession secureId put: aWebSession]! !

!WebSessionManager methodsFor: 'accessing' stamp: 'np 10/20/2008 13:54'!
allActiveSessions
	^self allSessions select: [:each | each isActive]! !

!WebSessionManager methodsFor: 'accessing'!
allGuestSessions
	"guest and never logged in"
	^self allSessions select: [:each | 
		(each user isNil or: [each user isGuest]) and: [each neverLoggedIn] ].! !

!WebSessionManager methodsFor: 'accessing'!
allLoggedInSessions
	^self allSessions select: [:each | each isLoggedIn]! !

!WebSessionManager methodsFor: 'accessing' stamp: 'janko 10/31/2008 16:04'!
allNonactiveGuestSessions
	"guest sessions nonactive more that one hour"
	^self allGuestSessions select: [:each | each isActive not].! !

!WebSessionManager methodsFor: 'accessing' stamp: ' 7/6/08 18:41'!
allSessions
	^self sessions values asSet  "to remove duplicates because the session id can be double, 
							     one for ssl too!!"! !

!WebSessionManager methodsFor: 'accessing'!
allSessionsForUser: aWebUser
	"all sessions (logged-in or not) for that user"
	^self allSessions select: [:each | 
		each user = aWebUser or: 
			[each isLoggedIn not and: [each wasLoggedInUser: aWebUser] ] ]! !

!WebSessionManager methodsFor: 'accessing'!
allWereLoggedSessions
	"all sessions which were or still are logged in"
	^self allSessions select: [:each |
		each isLoggedIn or: [each neverLoggedIn not] ] "was or still is logged in"! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
bindSSLSessionFor: aRequest
	"Try to find a session among currently live sessions. It helps with a session id in a query 
	part of url. If not found, or id not in query string, then make a new session"
	| session id |
	id := aRequest queryAt: 'sessionId' ifAbsent: [self error: 'no session id!!'].
	session := (self existSessionWithID: id asInteger)
		ifTrue: [self findSessionWithID: id asInteger]
		ifFalse: [self error: 'no session with that id'].
	session requests size = 1
		ifTrue: [self countNewVisitor]
		ifFalse: 	[self checkAndCountReturningVisitor: session].
	session lastRequest: aRequest.
	(aRequest includesQuery:  'setLanguage') ifTrue:
		[session language: (aRequest queryAt: 'setLanguage') asSymbol].
	^session.! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
checkAndCountReturningVisitor: aSession
	"returning visitor is those who is not active more than 1h"
	(aSession isActive not and: [aSession requests size > 1]) ifTrue:
		[self site critical: [self site returningVisitorsCounter incCounter] ]! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
countNewVisitor
	self site critical:
		[self site newVisitorsCounter incCounter]! !

!WebSessionManager methodsFor: 'testing' stamp: ' 7/6/08 18:41'!
existSessionWithID: anIDNumber
	^self sessions includesKey: anIDNumber.
! !

!WebSessionManager methodsFor: 'accessing'!
findAllSessionsWithUsername: aString
	^self sessions values select: [:each | each user username = aString]! !

!WebSessionManager methodsFor: 'adding-removing'!
findOrCreateSessionFor: aRequest
	"Try to find a session among currently live sessions. It helps with a session id in a query 
	part of url. If not found, or id not in query string, then make a new session"
	| session id cookie |
	(self hasSSLBinding: aRequest) ifTrue: [^self bindSSLSessionFor: aRequest].
	(aRequest hasCookie and: [aRequest idFromCookie notNil])
		ifTrue: [id := aRequest idFromCookie. cookie := true. self site log: ' cookie ' ]
		ifFalse: 
			[cookie := false. id := aRequest queryAt: 'id' ifAbsent: [(self newSessionCookie: cookie) id] ].
	session := (self existSessionWithID: id asInteger)
		ifTrue: [self findSessionWithID: id asInteger] 
		ifFalse: [self newSessionCookie: cookie id: id asInteger].
	session requests size = 1 
		ifTrue: [self countNewVisitor] ifFalse: 	[self checkAndCountReturningVisitor: session].
	session checkExpirationAndPossiblyLogoutFor: aRequest.
	session lastRequest: aRequest.  
	session registerIP; setLastActivity.
	session cookie: cookie. 
	(cookie not and: [self site urlsWithSessionId]) ifTrue: [session addSessionID].

	(aRequest includesQuery:  'setLanguage') ifTrue:
		[session language: (aRequest queryAt: 'setLanguage') asSymbol].
	^session.! !

!WebSessionManager methodsFor: 'accessing' stamp: ' 7/6/08 18:41'!
findSessionWithID: anIDNumber
	^self sessions at: anIDNumber ifAbsent: [nil].
! !

!WebSessionManager methodsFor: 'accessing'!
findSessionWithUsername: aString
	^self sessions detect: [:each | each user username = aString] ifNone: [nil].! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
hasSSLBinding: aRequest
	"if sessionId=456546464 exist in query part of request. This means that this is 
	a SSL session with its own cookie and must be bind to a normal session with sessionId"

	^aRequest isEncrypted and: [aRequest includesQuery: 'sessionId']! !

!WebSessionManager methodsFor: 'initialize-release' stamp: ' 7/6/08 18:41'!
initSessions
	sessions := Dictionary new.! !

!WebSessionManager methodsFor: 'initialize-release' stamp: ' 7/6/08 18:41'!
initialize
	self initSessions.

"WebSessionManager default initialize"! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
newSessionCookie: aBoolean
	"open and return a fresh new session"
	^self newSessionCookie: aBoolean id: nil! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
newSessionCookie: aBoolean id: aSessionID
	"open and return a fresh new session"
	| session |
	session := WebSession newOn: self.
	aSessionID notNil ifTrue: [session id: aSessionID].
	self site log: ' new session '.
	self addSession: session.
	session cookie: aBoolean.
	^session! !

!WebSessionManager methodsFor: 'private' stamp: 'janko 3/19/2012 13:21'!
preferredUrl
	^'/sessions'! !

!WebSessionManager methodsFor: 'private'!
printString
	^'WebSessionManager on: ', self site name! !

!WebSessionManager methodsFor: 'adding-removing'!
releaseApplicationState
	"release all application state of sessions"
	^self allSessions do: [:each | each releaseApplicationState].! !

!WebSessionManager methodsFor: 'adding-removing'!
removeGuestSessions
	"all guest (never logged in) sessions"
	^self allGuestSessions do: [:each | 
		each parent == self 
			ifTrue: [each removeYourself] 
			ifFalse: [self removeSession: each] ]. "in which case?"! !

!WebSessionManager methodsFor: 'adding-removing'!
removeNonactiveGuestSessions
	"all guest (never logged in) sessions inactive more than one hour"
	^self allNonactiveGuestSessions do: [:each | 
		each parent == self 
			ifTrue: [each removeYourself] 
			ifFalse: [self removeSession: each] ]. "in which case?"! !

!WebSessionManager methodsFor: 'adding-removing' stamp: ' 7/6/08 18:41'!
removeSession: aWebSession
	"remove from sessions"
	self site critical:
		[self sessions 
			removeKey: aWebSession id ifAbsent: [];
			removeKey: aWebSession secureId ifAbsent: [] ].! !

!WebSessionManager methodsFor: 'private-serving'!
resourceFor: aRequest
	"from router to know, where to route a request. Route it to request's session"
	^aRequest session! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
sessions
	"dictionary of sessions by session id as the key. Not that session can have two ids, for ssl too!!"
	sessions isNil ifTrue: [self initSessions].
	^sessions! !

!WebSessionManager methodsFor: 'accessing' stamp: ' 7/6/08 18:41'!
site
	^site! !

!WebSessionManager methodsFor: 'private' stamp: ' 7/6/08 18:41'!
site: anAIDASite
	site := anAIDASite.! !

!WebSessionManager class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default
	^AIDASite default sessionManager! !

!WebSessionManager class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newOn: aSite
	^super new 
		initialize; 
		site: aSite! !

!WebSessionMgmtTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:24'!
setUp
"TOO DANGEROUS!!!!!!
	server := Swazoo.SwazooServer singleton.
	server initialize.  ""to remove all stuff and stop it""
	site := AIDASite newNamed: 'test'.
	session := WebSession newOn: site sessionManager.
"! !

!WebSessionMgmtTest methodsFor: 'running' stamp: 'mivsek 8/22/2007 21:24'!
tearDown
"	site := server siteNamed: 'test'.
	site stop.
	server removeSite: site.
	server := nil. site := nil. session := nil.
"! !

!WebSessionMgmtTest methodsFor: 'testing' stamp: 'mivsek 8/22/2007 21:24'!
testSetUp
"	self assert: session notNil "! !

!WebStaticServer methodsFor: 'serving'!
fileProxyForURL: aString
	" Try to find a html file for a specified URL and make aHTMLFileProxy. 
	Returns nil if such a file does not exist. Index content in default WebIndex"
	| add home fname proxy |
	aString isEmpty ifTrue: [^nil].
	(aString last = $/) ifTrue: [add := 'index.htm'] ifFalse: [add := ''].
	home := self site homeDirectory.
	(home last = $/ ) | (home last = $\ ) ifTrue: [home := home copyFrom: 1 to: home size-1].
	fname := home, aString, add.
	SpEnvironment onWindows ifTrue: [fname := fname copyReplaceAll: '/' with: '\'].
	((SpFilename named: fname) exists and: [(SpFilename named: fname) isDirectory not]) ifFalse:
		[fname := fname, 'l'.   ".html instead just .htm"
		(SpFilename named: fname) exists ifFalse: [^nil] ].
	proxy := FileProxy from: fname onSite: self site.
	proxy indexContent.
	^proxy! !

!WebStaticServer methodsFor: 'accessing'!
files
	"a dictionary of urls as keys  and FileProxies as values"
	files ifNil: [self initFiles].
	^files! !

!WebStaticServer methodsFor: 'initialize-release'!
initFiles
	files := Dictionary new! !

!WebStaticServer methodsFor: 'initialize-release'!
initialize
	"put yoursef in a router and remove all files from urlResolver, where are not needed anymore"
	self site router addStaticServerRoute.
	self site urlResolver removeObjectsOfClass: FileProxy.! !

!WebStaticServer methodsFor: 'serving'!
resourceFor: aHTTPRequest
	"returns or creates an instance of FileProxy for requested file. Nil if not exist"
	| url proxy |
	url := AIDASite convertFromWeb: aHTTPRequest uriString on: aHTTPRequest session.  "for international Urls"
	url = '/' ifTrue: [^self resourceForRootUrl].
	^self files at: url ifAbsentPut:
		[proxy := self fileProxyForURL: url.
		proxy ifNil: [^nil].
		proxy]! !

!WebStaticServer methodsFor: 'serving'!
resourceForRootUrl
	"returns or creates an instance of FileProxy for root index.htm or index.html"
	| url proxy |
	url := '/index.htm'.
	proxy := self files at: url ifAbsent: 
		[proxy := self fileProxyForURL: url.
		proxy notNil ifTrue: 
			[self files at: url put: proxy. 
			^proxy]].
	url := '/index.html'.
	^self files at: url ifAbsentPut: 
		[proxy := self fileProxyForURL: url.
		proxy isNil ifTrue: [^nil].
		proxy].! !

!WebStaticServer methodsFor: 'accessing'!
site
	^site! !

!WebStaticServer methodsFor: 'private'!
site: anAIDASite
	site := anAIDASite! !

!WebStaticServer class methodsFor: 'instance creation' stamp: 'jm 9/8/2010 20:49'!
newOn: anAIDASite
	^super basicNew
		site: anAIDASite! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
addNewReferer: anUrlString

	"add new counter to referers dictionary"

	self referers 
		at: anUrlString
		put: WebCounter new.! !

!WebStatistics methodsFor: 'referers' stamp: 'janko 10/31/2008 16:11'!
allRefererCounts
	"return a collection of all referers and their total counts, most counted first"
	| collection |
	collection := OrderedCollection new.
	self referers keysAndValuesDo: [:referer :counter |  
		collection add: (Array 
			with: referer
			with: counter total)].
	^SortedCollection
		withAll: collection
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].

"WebStatistics default allRefererCounts size"! !

!WebStatistics methodsFor: 'referers' stamp: ' 21/8/07 09:38'!
allRefererCountsToday
	"return a collection of today referers and their total counts, most counted first"
	| collection |
	collection := OrderedCollection new.
	self referers keysAndValuesDo: [:referer :counter |  
		collection add: (Array 
			with: referer
			with: counter today)].
	^SortedCollection
		withAll: (collection select: [:each | each value last > 0])
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].

"WebStatistics default allReferersAndCounts"! !

!WebStatistics methodsFor: 'referers' stamp: ' 21/8/07 09:38'!
allRefererCountsWeekly
	"return a collection of current week referers and their total counts, most counted first"
	| collection |
	collection := OrderedCollection new.
	self referers keysAndValuesDo: [:referer :counter |  
		collection add: (Array 
			with: referer
			with: counter weekly)].
	^SortedCollection
		withAll: (collection select: [:each | each value last > 0])
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].

"WebStatistics default allReferersAndCounts"! !

!WebStatistics methodsFor: 'referers' stamp: ' 21/8/07 09:38'!
allRefererCountsYesterday
	"return a collection of yesterday referers and their total counts, most counted first"
	| collection |
	collection := OrderedCollection new.
	self referers keysAndValuesDo: [:referer :counter |  
		collection add: (Array 
			with: referer
			with: counter yesterday)].
	^SortedCollection
		withAll: (collection select: [:each | each value last > 0])
		sortBlock: [:a :b | (a at: 2) > (b at: 2)].

"WebStatistics default allReferersAndCounts"! !

!WebStatistics methodsFor: 'referers' stamp: 'janko 10/31/2008 16:05'!
allReferersJustOneHit
	"return a collection of all referers with just one hit and older that one week"
	| collection secBefore7days |
	secBefore7days := SpTimestamp now asSeconds - (7 * 3600 * 24).
	collection := OrderedCollection new.
	self referers keysAndValuesDo: [:referer :counter |
		(counter total = 1 and: [secBefore7days >= counter started asSeconds ]) ifTrue:
			[collection add: referer] ].
	^collection

"WebStatistics default allReferersJustOneHit size"! !

!WebStatistics methodsFor: 'collecting' stamp: 'mu 4/6/2008 10:16'!
collectStatsFrom: aWebRequest
	| referer |
	referer := AIDASite convert: aWebRequest referer fromCodepage: #UTF8.
	(referer notNil and: [(self isLocalUrl: referer) not]) 
		ifTrue: [self countReferer: referer]! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
countReferer: anUrlString
	| url |
	url := self prepareReferer: anUrlString.
	url isEmpty ifTrue: [^self].
	(self refererOnStopList: url) ifTrue: [^self].
	(self referers includesKey: url)
		ifFalse: [self addNewReferer: url].
	(self referers at: url) incCounter! !

!WebStatistics methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initRefererStopList
	refererStopList := Set new.
	refererStopList
		add: '[unknown origin]';
		add: 'bookmarks';
		add: 'http://lw2fd.hotmail.msn.com/cgi-bin/getmsg';
		add: 'http://mobitel.sux.nu/cgi-bin/tabla/showpost.pl'.
"AIDASite default statistics initRefererStopList"! !

!WebStatistics methodsFor: 'initialize-release' stamp: ' 21/8/07 09:38'!
initReferers
	referers := Dictionary new.

"AIDASite default statistics initReferers"! !

!WebStatistics methodsFor: 'private' stamp: ' 21/8/07 09:38'!
isLocalUrl: anUrlString
	"true, if this url points to page from this server"
	^self site uriPattern contains: [:siteIdentifier | 
		('http://', siteIdentifier host, '*') match: anUrlString].! !

!WebStatistics methodsFor: 'private' stamp: 'np 10/24/2008 12:52'!
isNewReferer: anUrlString onDate: aDate
	"this referer is new if it occurs for a first time in last 7 days"
	| counter |
	counter := self refererCounterFor: anUrlString.
	^counter isFirstOnDate: aDate sinceDays: 7! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
prepareReferer: anUrlString

	"ingnore all parameters in url"

	^(anUrlString copyUpTo: $?)! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
refererCounterFor: anUrlString

	^self referers at: anUrlString ifAbsent: [^nil]! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
refererOnStopList: anUrlString

	| |
	^self refererStopList includes: anUrlString! !

!WebStatistics methodsFor: 'referers' stamp: ' 21/4/07 22:07'!
refererStopList
	refererStopList isNil ifTrue: [self initRefererStopList].
	^refererStopList! !

!WebStatistics methodsFor: 'referers' stamp: 'janko 10/31/2008 16:07'!
referers
	referers isNil ifTrue: [self initReferers].
	^referers! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
removeReferer: anUrlString

	self referers removeKey: anUrlString ifAbsent: [^self].! !

!WebStatistics methodsFor: 'referers' stamp: 'janko 10/31/2008 16:11'!
removeReferersJustOneHit
	"..and older that 7 days"
	self allReferersJustOneHit do: [:each | self referers removeKey: each]
	
"WebStatistics default removeReferersJustOneHit"! !

!WebStatistics methodsFor: 'private-referers' stamp: ' 21/8/07 09:38'!
removeReferersOnStopList

	self refererStopList do: [:referer |
		self removeReferer: referer]

"WebStatistics default  removeReferersOnStopList"! !

!WebStatistics methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
site
	^site! !

!WebStatistics methodsFor: 'private' stamp: ' 21/8/07 09:38'!
site: anAIDASite
	site := anAIDASite.! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
analyzeAndStoreLine: aLineAsArray into: aDictionary forDate:aDate

	| datum |
	((aLineAsArray at: 2) > ' ' ) ifTrue:
		[(aLineAsArray at: 2) = '#Date:'
			ifTrue: [datum := self parseDatum: (aLineAsArray at: 3).]
			ifFalse: [datum:=aDate.].
		((aLineAsArray at: 2) copyFrom: 1 to: 1) = '#' ifFalse: 
			[aLineAsArray at: 2 put: 
				(Time readFrom: (ReadStream on: (aLineAsArray at: 2))).
			aLineAsArray at: 1 put: 
				(Timestamp new fromDate: datum andTime: (aLineAsArray at: 2)).
			(aDictionary at:  (aLineAsArray at: 3) ifAbsentPut: [WebCounter new  ] )
				 incCounterOnTimestamp: (aLineAsArray at: 1).
			].
		].
	^datum! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
bossCountersFromIISLogsIn: aDirectoryString

	" WebStatistics bossCountersFromIISLogsIn: 'h:\winnt\system32\logfiles\w3svc3\temp'  "
	| file boss |
	file := 'LogDict.boss'.
	boss := BinaryObjectStorage onNew: file asFilename writeStream.
	boss nextPut: 
		(self countersFromIISLogsIn: aDirectoryString).
	boss close.! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
convertFromGMT: aTimestamp

	"IIS logs have time in GMT timezone. Return local time"
	TimeZone reference
		convertGMT: aTimestamp asSeconds
		do: [:date :sec | 	^Timestamp fromDate: date andTime: (Time fromSeconds: sec)]! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
countUrlsIn: aFileString to: anUrlDictionary

self parseFile: aFileString into: anUrlDictionary.! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
countersFromIISLogsIn: aDirectoryString

	"return a dictionary (url as key) of counters for urls in all IIS log files in specified directory"
	" WebStatistics countersFromIISLogsIn: 'h:\winnt\system32\logfiles\w3svc8'  "

	| logFiles urlCounters |
	logFiles := aDirectoryString asFilename directoryContents.
	logFiles := SortedCollection
		withAll: logFiles 	sortBlock: [:a :b | a < b].
	urlCounters := Dictionary new.
	logFiles do: [:logFile | 
		" self halt. "
		self countUrlsIn: (aDirectoryString, '\', logFile) to: urlCounters].
	^urlCounters! !

!WebStatistics class methodsFor: 'log analysis' stamp: 'JM 4/26/2007 21:34'!
dateFromFilename: aFilename

	^SpDate 
		newDay: (aFilename tail copyFrom: 7 to: 8) asInteger
		month:(aFilename tail copyFrom: 5 to: 6) asInteger
		year: ((aFilename tail copyFrom: 3 to: 4) asInteger + 2000)! !

!WebStatistics class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
default

	^AIDASite default statistics! !

!WebStatistics class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newOn: anAIDASite
	^super new site: anAIDASite! !

!WebStatistics class methodsFor: 'log analysis' stamp: 'JM 4/26/2007 21:35'!
parseDatum: stringDatum 
	"pretvorimo datum iz formata LLLL-MM-DD v date format
	| tmp | 
	 tmp := DelimitedFile new. 
	Transcript show: (tmp parseDatum: '1999-12-11') printString ; cr  
	"

	| datumStream leto mesec dan |
	datumStream := (stringDatum copyReplaceAll: '-' with: ' ') readStream.
	leto := (self  parseWords: datumStream) asNumber.
	mesec := (self  parseWords: datumStream) asNumber.
	dan := (self  parseWords: datumStream) asNumber.
	^SpDate newDay: dan
		month: mesec
		year: leto! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
parseFile: aFile 
	"
 	Trenutno opusceno, osnova za parseFile: into:
	WebStatistics parseFile: 'h:\winnt\system32\logfiles\w3svc8\ex990506.log' 
	"

	| logFile stream cr besedeVrstice vrstica stevecBesed |
	cr := Character cr.	" self halt. "
	logFile := aFile asFilename.
	stream := logFile readStream.
	[stream atEnd] whileFalse: 
			[besedeVrstice := Array new: 15.
			stevecBesed := 1.
			vrstica := (stream throughAll: (String with: cr)) readStream.
			[vrstica atEnd] whileFalse: 
					[besedeVrstice at: stevecBesed put: vrstica parseWordsIntoArray.
					stevecBesed := stevecBesed + 1].
			vrstica close].
	stream close! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
parseFile: aFile into: URLCountDictionary 
	| stream besedeVrstice vrstica stevecBesed datum |
	datum := Date today.
	stream := aFile asFilename readStream.
	[stream atEnd] whileFalse: 
		[besedeVrstice := Array new: 15.
		stevecBesed := 2.
		vrstica := (stream throughAll: (String with: Character cr)) readStream.
		[vrstica atEnd] whileFalse: 
			[besedeVrstice at: stevecBesed put: (self parseWords: vrstica) .
			stevecBesed := stevecBesed + 1].
 		datum:= self analyzeAndStoreLine: besedeVrstice 
			into: URLCountDictionary forDate:datum.
		vrstica close.].
	stream close

	" test lines : 
	Xx := Dictionary new.
	WebStatistics parseFile: 'h:\winnt\system32\logfiles\w3svc8\ex990506.log' into: Xx.
	Transcript show: Xx printString
	"! !

!WebStatistics class methodsFor: 'log analysis' stamp: ' 21/4/07 22:07'!
parseWords: inputStream 
	"Answer the contents of the receiver, up to the next separator  character."

	| aStream |
	aStream := (String new: 200) writeStream.
	inputStream skipSeparators.
	inputStream class endOfStreamSignal handle: [:ex | ex return]
		do: 
			[
			[| char |
			char := inputStream next.
			char isSeparator ifTrue: [^aStream contents] ifFalse: [aStream nextPut: char]]
					repeat].
	^aStream contents! !

!WebStubElement methodsFor: 'printing'!
build
	self clear.
	self setDiv.
	self addComment: 'stub'.! !

!WebStubElement methodsFor: 'testing'!
canUpdate
	"stub element needs to be updated back when closing a popup window"
	^true! !

!WebStubElement methodsFor: 'testing' stamp: 'jm 8/26/2009 15:02'!
isStubElement
	^true! !

!WebStubElement methodsFor: 'attributes'!
noDiv
	"ignore that, stub element must be always DIV"! !

!WebStubElement class methodsFor: 'instance creation'!
newOn: aWebContext
	| instance |
	instance := super new.
	instance 
		creationMethod: #build;
		creationObject: instance;
		creationContext: aWebContext;
		setDiv;
		registerId;
		build.
	^instance! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
addHelpText
	^'Add help page'! !

!WebStyle methodsFor: 'styles-mobile'!
addMobileSuperStyles
	"if false, don't add cssMobile methods from superclasses"
	^true! !

!WebStyle methodsFor: 'styles-print' stamp: 'np 4/2/2008 23:30'!
addPrintSuperStyles
	"if false, don't add cssPrint methods from superclasses"
	^true! !

!WebStyle methodsFor: 'styles-screen' stamp: 'np 4/2/2008 23:30'!
addSuperStyles
	"if false, don't add css methods from superclasses"
	^true! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/2/2008 23:19'!
adjustCSSLink: aString
	" '../images/arrow_left.gif' to '/img/arrowLeftGif.gif' "
	| in name extension |
	in := aString readStream.
	[in atEnd] whileFalse: [name := in upTo: $/]. "to find filename only"
	extension := name readStream upTo: $. ; upToEnd.
	name := self adjustImageName: name.
	^'/img/', name, '.', extension.! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/2/2008 23:19'!
adjustImageName: aFilenameString
	"left_arrow.gif = leftArrowGif"
	| in out |
	in := aFilenameString readStream. out := WriteStream on: String new.
	in peek isDigit ifTrue: [out nextPut: $a]. "method cannot start with digit!!"
	[in atEnd] whileFalse: 
		[(#($- $_ $. ) includes:  in peek) 
			ifTrue: [in next "skip". out nextPut: in next asUppercase] 
			ifFalse: [out nextPut: in next] ].
	^out contents! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/2/2008 23:19'!
adjustLinksInCSSMethod: aMethodSymbol
	"external image links in CSS are changed to format, eg. for arrow.gif  '/img/arrowGif.gif' "
	"this method is then recompiled back in 'styles-screen' !! "
	"WebStyle new adjustLinksInCSSMethod: #css1Body"
	| method in out chunk link dd |
	method := self class compiledMethodAt: aMethodSymbol. method := method getSource asString.
	in := method readStream. out := WriteStream on: String new.
	[in atEnd] whileFalse:
		[chunk := in upToAll: 'url('. in atEnd not ifTrue: [in skip: 4]. link := in upTo: $). 
		dd := (link includes: $") ifTrue: [link := link copyWithout: $". '"'] ifFalse: [''].
		out nextPutAll: chunk. 
		link notEmpty ifTrue: 
			[link := self adjustCSSLink: link.  out nextPutAll: 'url(', dd, link, dd, ')'] ].
	out contents = method ifFalse:
		[self class compile: out contents classified: 'styles-screen'].
	^out contents! !

!WebStyle methodsFor: 'private-css' stamp: 'janko 8/15/2011 11:50'!
allCssMobileMethods
	"WebStyle new allCssMobileMethods"
	| selectors methods |
	self addMobileSuperStyles 
		ifTrue: [selectors := self allWebStyleMethods] "From superclasses too"
		ifFalse: [selectors := self class selectors]. 
	methods := selectors select: [:each | 'cssMobile*' match:each asString].
	^SortedCollection withAll: methods sortBlock: [:a :b | a < b]! !

!WebStyle methodsFor: 'private-css' stamp: 'janko 8/15/2011 11:50'!
allCssPrintMethods
	"WebStyle new allCssPrintMethods"
	| selectors methods |
	self addPrintSuperStyles 
		ifTrue: [selectors := self allWebStyleMethods] "From superclasses too"
		ifFalse: [selectors := self class selectors].
	methods := selectors select: [:each | 'cssPrint*' match:each asString].
	^SortedCollection withAll: methods sortBlock: [:a :b | a < b]! !

!WebStyle methodsFor: 'private-css' stamp: 'janko 8/15/2011 11:50'!
allCssScreenMethods
	"for screen styles, all css* except cssPrint* , sorted alphabeticaly"
	"WebStyle new allCssScreenMethods"
	| selectors methods print mobile |
	self addSuperStyles 
		ifTrue: [selectors := self allWebStyleMethods] "From superclasses too"
		ifFalse: [selectors := self class selectors].
	methods := selectors select: [:each | 'css*' match:each asString].
	print := self allCssPrintMethods asSet.
	mobile := self allCssMobileMethods asSet.
	^SortedCollection 
		withAll: (methods reject: [:each | (print includes: each) or: [mobile includes: each] ])
		sortBlock: [:a :b | a < b]! !

!WebStyle methodsFor: 'private-javascript'!
allJavascriptMethods
	"for javascript, all js* sorted alphabeticaly (sort is not realy needed, just for convenience)"
	"WebStyle new allJavascriptMethods"
	| methods |
	methods := self allWebStyleMethods select: [:each | 'js*' match:each asString].
	^SortedCollection withAll: methods sortBlock: [:a :b | a < b]! !

!WebStyle methodsFor: 'private'!
allWebStyleMethods
	"all methods in WebStyle class and sublcasses down to my class"
	"WebStyle new allWebStyleMethods"
	| styleClasses |
	styleClasses := self class allSuperclasses asSet
		add: self class; 
		removeAll: WebStyle allSuperclasses; "only WebStyle and subclasses down to my class"
		yourself. 
	^styleClasses 
		inject: Set new 
		into: [:set :each | set addAll: each selectors; yourself].! !

!WebStyle methodsFor: 'accessing' stamp: 'np 4/2/2008 23:19'!
app
	"try to find a first sender up in calling stack, who is  WebApplication"
	^self firstAppFromStack! !

!WebStyle methodsFor: 'scripts-components'!
calendarCSS
	"/jscalendar/calendar.css"
	^'
/*calendar-brown.css*/
/* The main calendar widget.  DIV containing a table. */

div.calendar { position: relative; }

.calendar, .calendar table {
  border: 1px solid #655;
  font-size: 11px;
  color: #000;
  cursor: default;
  background: #ffd;
  font-family: tahoma,verdana,sans-serif;
  z-index: 9999;
}

/* Header part -- contains navigation buttons and day names. */

.calendar .button { /* "<<", "<", ">", ">>" buttons have this class */
  text-align: center;    /* They are the navigation buttons */
  padding: 2px;          /* Make the buttons seem like they are pressing */
}

.calendar .nav {
/*  background: #edc url(menuarrow.gif) no-repeat 100% 100%; */
  background: #edc no-repeat 100% 100%;
}

.calendar thead .title { /* This holds the current "month, year" */
  font-weight: bold;      /* Pressing it will take you to the current date */
  text-align: center;
  background: #654;
  color: #fed;
  padding: 2px;
}

.calendar thead .headrow { /* Row <TR> containing navigation buttons */
  background: #edc;
  color: #000;
}

.calendar thead .name { /* Cells <TD> containing the day names */
  border-bottom: 1px solid #655;
  padding: 2px;
  text-align: center;
  color: #000;
}

.calendar thead .weekend { /* How a weekend day name shows in header */
  color: #f00;
}

.calendar thead .hilite { /* How do the buttons in header appear when hover */
  background-color: #faa;
  color: #000;
  border: 1px solid #f40;
  padding: 1px;
}

.calendar thead .active { /* Active (pressed) buttons in header */
  background-color: #c77;
  padding: 2px 0px 0px 2px;
}

.calendar thead .daynames { /* Row <TR> containing the day names */
  background: #fed;
}

/* The body part -- contains all the days in month. */

.calendar tbody .day { /* Cells <TD> containing month days dates */
  width: 2em;
  text-align: right;
  padding: 2px 4px 2px 2px;
}
.calendar tbody .day.othermonth {
  font-size: 80%;
  color: #bbb;
}
.calendar tbody .day.othermonth.oweekend {
  color: #fbb;
}

.calendar table .wn {
  padding: 2px 3px 2px 2px;
  border-right: 1px solid #000;
  background: #fed;
}

.calendar tbody .rowhilite td {
  background: #ddf;
}

.calendar tbody .rowhilite td.wn {
  background: #efe;
}

.calendar tbody td.hilite { /* Hovered cells <TD> */
  background: #ffe;
  padding: 1px 3px 1px 1px;
  border: 1px solid #bbb;
}

.calendar tbody td.active { /* Active (pressed) cells <TD> */
  background: #ddc;
  padding: 2px 2px 0px 2px;
}

.calendar tbody td.selected { /* Cell showing today date */
  font-weight: bold;
  border: 1px solid #000;
  padding: 1px 3px 1px 1px;
  background: #fea;
}

.calendar tbody td.weekend { /* Cells showing weekend days */
  color: #f00;
}

.calendar tbody td.today { font-weight: bold; }

.calendar tbody .disabled { color: #999; }

.calendar tbody .emptycell { /* Empty cells (the best is to hide them) */
  visibility: hidden;
}

.calendar tbody .emptyrow { /* Empty row (some months need less than 6 rows) */
  display: none;
}

/* The footer part -- status bar and "Close" button */

.calendar tfoot .footrow { /* The <TR> in footer (only one right now) */
  text-align: center;
  background: #988;
  color: #000;
}

.calendar tfoot .ttip { /* Tooltip (status bar) cell <TD> */
  border-top: 1px solid #655;
  background: #dcb;
  color: #840;
}

.calendar tfoot .hilite { /* Hover style for buttons in footer */
  background: #faa;
  border: 1px solid #f40;
  padding: 1px;
}

.calendar tfoot .active { /* Active (pressed) style for buttons in footer */
  background: #c77;
  padding: 2px 0px 0px 2px;
}

/* Combo boxes (menus that display months/years for direct selection) */

.calendar .combo {
  position: absolute;
  display: none;
  top: 0px;
  left: 0px;
  width: 4em;
  cursor: default;
  border: 1px solid #655;
  background: #ffe;
  color: #000;
  font-size: 90%;
  z-index: 100;
}

.calendar .combo .label,
.calendar .combo .label-IEfix {
  text-align: center;
  padding: 1px;
}

.calendar .combo .label-IEfix {
  width: 4em;
}

.calendar .combo .hilite {
  background: #fc8;
}

.calendar .combo .active {
  border-top: 1px solid #a64;
  border-bottom: 1px solid #a64;
  background: #fee;
  font-weight: bold;
}

.calendar td.time {
  border-top: 1px solid #a88;
  padding: 1px 0px;
  text-align: center;
  background-color: #fed;
}

.calendar td.time .hour,
.calendar td.time .minute,
.calendar td.time .ampm {
  padding: 0px 3px 0px 4px;
  border: 1px solid #988;
  font-weight: bold;
  background-color: #fff;
}

.calendar td.time .ampm {
  text-align: center;
}

.calendar td.time .colon {
  padding: 0px 2px 0px 3px;
  font-weight: bold;
}

.calendar td.time span.hilite {
  border-color: #000;
  background-color: #866;
  color: #fff;
}

.calendar td.time span.active {
  border-color: #f00;
  background-color: #000;
  color: #0f0;
}
'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarCSSResource
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarCSSResource"
	^self resources at: #jsCalendarCSS ifAbsentPut:
		[WebMethodResource 
			fromMethod: #calendarCSS on: self 
			contentType: 'text/css' preferedUrl: '/jscalendar/calendar.css' site: self site].! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarJavascript
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarJavascript"
	^'
/*  Copyright Mihai Bazon, 2002-2005  |  www.bazon.net/mishoo
 * -----------------------------------------------------------
 *
 * The DHTML Calendar, version 1.0 "It is happening again"
 *
 * Details and latest version at:
 * www.dynarch.com/projects/calendar
 *
 * This script is developed by Dynarch.com.  Visit us at www.dynarch.com.
 *
 * This script is distributed under the GNU Lesser General Public License.
 * Read the entire license text here: http://www.gnu.org/licenses/lgpl.html
 */

// $Id: calendar.js,v 1.51 2005/03/07 16:44:31 mishoo Exp $

/** The Calendar object constructor. */
Calendar = function (firstDayOfWeek, dateStr, onSelected, onClose) {
	// member variables
	this.activeDiv = null;
	this.currentDateEl = null;
	this.getDateStatus = null;
	this.getDateToolTip = null;
	this.getDateText = null;
	this.timeout = null;
	this.onSelected = onSelected || null;
	this.onClose = onClose || null;
	this.dragging = false;
	this.hidden = false;
	this.minYear = 1970;
	this.maxYear = 2050;
	this.dateFormat = Calendar._TT["DEF_DATE_FORMAT"];
	this.ttDateFormat = Calendar._TT["TT_DATE_FORMAT"];
	this.isPopup = true;
	this.weekNumbers = true;
	this.firstDayOfWeek = typeof firstDayOfWeek == "number" ? firstDayOfWeek : Calendar._FD; // 0 for Sunday, 1 for Monday, etc.
	this.showsOtherMonths = false;
	this.dateStr = dateStr;
	this.ar_days = null;
	this.showsTime = false;
	this.time24 = true;
	this.yearStep = 2;
	this.hiliteToday = true;
	this.multiple = null;
	// HTML elements
	this.table = null;
	this.element = null;
	this.tbody = null;
	this.firstdayname = null;
	// Combo boxes
	this.monthsCombo = null;
	this.yearsCombo = null;
	this.hilitedMonth = null;
	this.activeMonth = null;
	this.hilitedYear = null;
	this.activeYear = null;
	// Information
	this.dateClicked = false;

	// one-time initializations
	if (typeof Calendar._SDN == "undefined") {
		// table of short day names
		if (typeof Calendar._SDN_len == "undefined")
			Calendar._SDN_len = 3;
		var ar = new Array();
		for (var i = 8; i > 0;) {
			ar[--i] = Calendar._DN[i].substr(0, Calendar._SDN_len);
		}
		Calendar._SDN = ar;
		// table of short month names
		if (typeof Calendar._SMN_len == "undefined")
			Calendar._SMN_len = 3;
		ar = new Array();
		for (var i = 12; i > 0;) {
			ar[--i] = Calendar._MN[i].substr(0, Calendar._SMN_len);
		}
		Calendar._SMN = ar;
	}
};

// ** constants

/// "static", needed for event handlers.
Calendar._C = null;

/// detect a special case of "web browser"
Calendar.is_ie = ( /msie/i.test(navigator.userAgent) &&
		   !!/opera/i.test(navigator.userAgent) );

Calendar.is_ie5 = ( Calendar.is_ie && /msie 5\.0/i.test(navigator.userAgent) );

/// detect Opera browser
Calendar.is_opera = /opera/i.test(navigator.userAgent);

/// detect KHTML-based browsers
Calendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);

// BEGIN: UTILITY FUNCTIONS; beware that these might be moved into a separate
//        library, at some point.

Calendar.getAbsolutePos = function(el) {
	var SL = 0, ST = 0;
	var is_div = /^div$/i.test(el.tagName);
	if (is_div && el.scrollLeft)
		SL = el.scrollLeft;
	if (is_div && el.scrollTop)
		ST = el.scrollTop;
	var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST };
	if (el.offsetParent) {
		var tmp = this.getAbsolutePos(el.offsetParent);
		r.x += tmp.x;
		r.y += tmp.y;
	}
	return r;
};

Calendar.isRelated = function (el, evt) {
	var related = evt.relatedTarget;
	if (!!related) {
		var type = evt.type;
		if (type == "mouseover") {
			related = evt.fromElement;
		} else if (type == "mouseout") {
			related = evt.toElement;
		}
	}
	while (related) {
		if (related == el) {
			return true;
		}
		related = related.parentNode;
	}
	return false;
};

Calendar.removeClass = function(el, className) {
	if (!!(el && el.className)) {
		return;
	}
	var cls = el.className.split(" ");
	var ar = new Array();
	for (var i = cls.length; i > 0;) {
		if (cls[--i] !!= className) {
			ar[ar.length] = cls[i];
		}
	}
	el.className = ar.join(" ");
};

Calendar.addClass = function(el, className) {
	Calendar.removeClass(el, className);
	el.className += " " + className;
};

// FIXME: the following 2 functions totally suck, are useless and should be replaced immediately.
Calendar.getElement = function(ev) {
	var f = Calendar.is_ie ? window.event.srcElement : ev.currentTarget;
	while (f.nodeType !!= 1 || /^div$/i.test(f.tagName))
		f = f.parentNode;
	return f;
};

Calendar.getTargetElement = function(ev) {
	var f = Calendar.is_ie ? window.event.srcElement : ev.target;
	while (f.nodeType !!= 1)
		f = f.parentNode;
	return f;
};

Calendar.stopEvent = function(ev) {
	ev || (ev = window.event);
	if (Calendar.is_ie) {
		ev.cancelBubble = true;
		ev.returnValue = false;
	} else {
		ev.preventDefault();
		ev.stopPropagation();
	}
	return false;
};

Calendar.addEvent = function(el, evname, func) {
	if (el.attachEvent) { // IE
		el.attachEvent("on" + evname, func);
	} else if (el.addEventListener) { // Gecko / W3C
		el.addEventListener(evname, func, true);
	} else {
		el["on" + evname] = func;
	}
};

Calendar.removeEvent = function(el, evname, func) {
	if (el.detachEvent) { // IE
		el.detachEvent("on" + evname, func);
	} else if (el.removeEventListener) { // Gecko / W3C
		el.removeEventListener(evname, func, true);
	} else {
		el["on" + evname] = null;
	}
};

Calendar.createElement = function(type, parent) {
	var el = null;
	if (document.createElementNS) {
		// use the XHTML namespace; IE won''t normally get here unless
		// _they_ "fix" the DOM2 implementation.
		el = document.createElementNS("http://www.w3.org/1999/xhtml", type);
	} else {
		el = document.createElement(type);
	}
	if (typeof parent !!= "undefined") {
		parent.appendChild(el);
	}
	return el;
};

// END: UTILITY FUNCTIONS

// BEGIN: CALENDAR STATIC FUNCTIONS

/** Internal -- adds a set of events to make some element behave like a button. */
Calendar._add_evs = function(el) {
	with (Calendar) {
		addEvent(el, "mouseover", dayMouseOver);
		addEvent(el, "mousedown", dayMouseDown);
		addEvent(el, "mouseout", dayMouseOut);
		if (is_ie) {
			addEvent(el, "dblclick", dayMouseDblClick);
			el.setAttribute("unselectable", true);
		}
	}
};

Calendar.findMonth = function(el) {
	if (typeof el.month !!= "undefined") {
		return el;
	} else if (typeof el.parentNode.month !!= "undefined") {
		return el.parentNode;
	}
	return null;
};

Calendar.findYear = function(el) {
	if (typeof el.year !!= "undefined") {
		return el;
	} else if (typeof el.parentNode.year !!= "undefined") {
		return el.parentNode;
	}
	return null;
};

Calendar.showMonthsCombo = function () {
	var cal = Calendar._C;
	if (!!cal) {
		return false;
	}
	var cal = cal;
	var cd = cal.activeDiv;
	var mc = cal.monthsCombo;
	if (cal.hilitedMonth) {
		Calendar.removeClass(cal.hilitedMonth, "hilite");
	}
	if (cal.activeMonth) {
		Calendar.removeClass(cal.activeMonth, "active");
	}
	var mon = cal.monthsCombo.getElementsByTagName("div")[cal.date.getMonth()];
	Calendar.addClass(mon, "active");
	cal.activeMonth = mon;
	var s = mc.style;
	s.display = "block";
	if (cd.navtype < 0)
		s.left = cd.offsetLeft + "px";
	else {
		var mcw = mc.offsetWidth;
		if (typeof mcw == "undefined")
			// Konqueror brain-dead techniques
			mcw = 50;
		s.left = (cd.offsetLeft + cd.offsetWidth - mcw) + "px";
	}
	s.top = (cd.offsetTop + cd.offsetHeight) + "px";
};

Calendar.showYearsCombo = function (fwd) {
	var cal = Calendar._C;
	if (!!cal) {
		return false;
	}
	var cal = cal;
	var cd = cal.activeDiv;
	var yc = cal.yearsCombo;
	if (cal.hilitedYear) {
		Calendar.removeClass(cal.hilitedYear, "hilite");
	}
	if (cal.activeYear) {
		Calendar.removeClass(cal.activeYear, "active");
	}
	cal.activeYear = null;
	var Y = cal.date.getFullYear() + (fwd ? 1 : -1);
	var yr = yc.firstChild;
	var show = false;
	for (var i = 12; i > 0; --i) {
		if (Y >= cal.minYear && Y <= cal.maxYear) {
			yr.innerHTML = Y;
			yr.year = Y;
			yr.style.display = "block";
			show = true;
		} else {
			yr.style.display = "none";
		}
		yr = yr.nextSibling;
		Y += fwd ? cal.yearStep : -cal.yearStep;
	}
	if (show) {
		var s = yc.style;
		s.display = "block";
		if (cd.navtype < 0)
			s.left = cd.offsetLeft + "px";
		else {
			var ycw = yc.offsetWidth;
			if (typeof ycw == "undefined")
				// Konqueror brain-dead techniques
				ycw = 50;
			s.left = (cd.offsetLeft + cd.offsetWidth - ycw) + "px";
		}
		s.top = (cd.offsetTop + cd.offsetHeight) + "px";
	}
};

// event handlers

Calendar.tableMouseUp = function(ev) {
	var cal = Calendar._C;
	if (!!cal) {
		return false;
	}
	if (cal.timeout) {
		clearTimeout(cal.timeout);
	}
	var el = cal.activeDiv;
	if (!!el) {
		return false;
	}
	var target = Calendar.getTargetElement(ev);
	ev || (ev = window.event);
	Calendar.removeClass(el, "active");
	if (target == el || target.parentNode == el) {
		Calendar.cellClick(el, ev);
	}
	var mon = Calendar.findMonth(target);
	var date = null;
	if (mon) {
		date = new Date(cal.date);
		if (mon.month !!= date.getMonth()) {
			date.setMonth(mon.month);
			cal.setDate(date);
			cal.dateClicked = false;
			cal.callHandler();
		}
	} else {
		var year = Calendar.findYear(target);
		if (year) {
			date = new Date(cal.date);
			if (year.year !!= date.getFullYear()) {
				date.setFullYear(year.year);
				cal.setDate(date);
				cal.dateClicked = false;
				cal.callHandler();
			}
		}
	}
	with (Calendar) {
		removeEvent(document, "mouseup", tableMouseUp);
		removeEvent(document, "mouseover", tableMouseOver);
		removeEvent(document, "mousemove", tableMouseOver);
		cal._hideCombos();
		_C = null;
		return stopEvent(ev);
	}
};

Calendar.tableMouseOver = function (ev) {
	var cal = Calendar._C;
	if (!!cal) {
		return;
	}
	var el = cal.activeDiv;
	var target = Calendar.getTargetElement(ev);
	if (target == el || target.parentNode == el) {
		Calendar.addClass(el, "hilite active");
		Calendar.addClass(el.parentNode, "rowhilite");
	} else {
		if (typeof el.navtype == "undefined" || (el.navtype !!= 50 && (el.navtype == 0 || Math.abs(el.navtype) > 2)))
			Calendar.removeClass(el, "active");
		Calendar.removeClass(el, "hilite");
		Calendar.removeClass(el.parentNode, "rowhilite");
	}
	ev || (ev = window.event);
	if (el.navtype == 50 && target !!= el) {
		var pos = Calendar.getAbsolutePos(el);
		var w = el.offsetWidth;
		var x = ev.clientX;
		var dx;
		var decrease = true;
		if (x > pos.x + w) {
			dx = x - pos.x - w;
			decrease = false;
		} else
			dx = pos.x - x;

		if (dx < 0) dx = 0;
		var range = el._range;
		var current = el._current;
		var count = Math.floor(dx / 10) % range.length;
		for (var i = range.length; --i >= 0;)
			if (range[i] == current)
				break;
		while (count-- > 0)
			if (decrease) {
				if (--i < 0)
					i = range.length - 1;
			} else if ( ++i >= range.length )
				i = 0;
		var newval = range[i];
		el.innerHTML = newval;

		cal.onUpdateTime();
	}
	var mon = Calendar.findMonth(target);
	if (mon) {
		if (mon.month !!= cal.date.getMonth()) {
			if (cal.hilitedMonth) {
				Calendar.removeClass(cal.hilitedMonth, "hilite");
			}
			Calendar.addClass(mon, "hilite");
			cal.hilitedMonth = mon;
		} else if (cal.hilitedMonth) {
			Calendar.removeClass(cal.hilitedMonth, "hilite");
		}
	} else {
		if (cal.hilitedMonth) {
			Calendar.removeClass(cal.hilitedMonth, "hilite");
		}
		var year = Calendar.findYear(target);
		if (year) {
			if (year.year !!= cal.date.getFullYear()) {
				if (cal.hilitedYear) {
					Calendar.removeClass(cal.hilitedYear, "hilite");
				}
				Calendar.addClass(year, "hilite");
				cal.hilitedYear = year;
			} else if (cal.hilitedYear) {
				Calendar.removeClass(cal.hilitedYear, "hilite");
			}
		} else if (cal.hilitedYear) {
			Calendar.removeClass(cal.hilitedYear, "hilite");
		}
	}
	return Calendar.stopEvent(ev);
};

Calendar.tableMouseDown = function (ev) {
	if (Calendar.getTargetElement(ev) == Calendar.getElement(ev)) {
		return Calendar.stopEvent(ev);
	}
};

Calendar.calDragIt = function (ev) {
	var cal = Calendar._C;
	if (!!(cal && cal.dragging)) {
		return false;
	}
	var posX;
	var posY;
	if (Calendar.is_ie) {
		posY = window.event.clientY + document.body.scrollTop;
		posX = window.event.clientX + document.body.scrollLeft;
	} else {
		posX = ev.pageX;
		posY = ev.pageY;
	}
	cal.hideShowCovered();
	var st = cal.element.style;
	st.left = (posX - cal.xOffs) + "px";
	st.top = (posY - cal.yOffs) + "px";
	return Calendar.stopEvent(ev);
};

Calendar.calDragEnd = function (ev) {
	var cal = Calendar._C;
	if (!!cal) {
		return false;
	}
	cal.dragging = false;
	with (Calendar) {
		removeEvent(document, "mousemove", calDragIt);
		removeEvent(document, "mouseup", calDragEnd);
		tableMouseUp(ev);
	}
	cal.hideShowCovered();
};

Calendar.dayMouseDown = function(ev) {
	var el = Calendar.getElement(ev);
	if (el.disabled) {
		return false;
	}
	var cal = el.calendar;
	cal.activeDiv = el;
	Calendar._C = cal;
	if (el.navtype !!= 300) with (Calendar) {
		if (el.navtype == 50) {
			el._current = el.innerHTML;
			addEvent(document, "mousemove", tableMouseOver);
		} else
			addEvent(document, Calendar.is_ie5 ? "mousemove" : "mouseover", tableMouseOver);
		addClass(el, "hilite active");
		addEvent(document, "mouseup", tableMouseUp);
	} else if (cal.isPopup) {
		cal._dragStart(ev);
	}
	if (el.navtype == -1 || el.navtype == 1) {
		if (cal.timeout) clearTimeout(cal.timeout);
		cal.timeout = setTimeout("Calendar.showMonthsCombo()", 250);
	} else if (el.navtype == -2 || el.navtype == 2) {
		if (cal.timeout) clearTimeout(cal.timeout);
		cal.timeout = setTimeout((el.navtype > 0) ? "Calendar.showYearsCombo(true)" : "Calendar.showYearsCombo(false)", 250);
	} else {
		cal.timeout = null;
	}
	return Calendar.stopEvent(ev);
};

Calendar.dayMouseDblClick = function(ev) {
	Calendar.cellClick(Calendar.getElement(ev), ev || window.event);
	if (Calendar.is_ie) {
		document.selection.empty();
	}
};

Calendar.dayMouseOver = function(ev) {
	var el = Calendar.getElement(ev);
	if (Calendar.isRelated(el, ev) || Calendar._C || el.disabled) {
		return false;
	}
	if (el.ttip) {
		if (el.ttip.substr(0, 1) == "_") {
			el.ttip = el.caldate.print(el.calendar.ttDateFormat) + el.ttip.substr(1);
		}
		el.calendar.tooltips.innerHTML = el.ttip;
	}
	if (el.navtype !!= 300) {
		Calendar.addClass(el, "hilite");
		if (el.caldate) {
			Calendar.addClass(el.parentNode, "rowhilite");
		}
	}
	return Calendar.stopEvent(ev);
};

Calendar.dayMouseOut = function(ev) {
	with (Calendar) {
		var el = getElement(ev);
		if (isRelated(el, ev) || _C || el.disabled)
			return false;
		removeClass(el, "hilite");
		if (el.caldate)
			removeClass(el.parentNode, "rowhilite");
		if (el.calendar)
			el.calendar.tooltips.innerHTML = _TT["SEL_DATE"];
		return stopEvent(ev);
	}
};

/**
 *  A generic "click" handler :) handles all types of buttons defined in this
 *  calendar.
 */
Calendar.cellClick = function(el, ev) {
	var cal = el.calendar;
	var closing = false;
	var newdate = false;
	var date = null;
	if (typeof el.navtype == "undefined") {
		if (cal.currentDateEl) {
			Calendar.removeClass(cal.currentDateEl, "selected");
			Calendar.addClass(el, "selected");
			closing = (cal.currentDateEl == el);
			if (!!closing) {
				cal.currentDateEl = el;
			}
		}
		cal.date.setDateOnly(el.caldate);
		date = cal.date;
		var other_month = !!(cal.dateClicked = !!el.otherMonth);
		if (!!other_month && !!cal.currentDateEl)
			cal._toggleMultipleDate(new Date(date));
		else
			newdate = !!el.disabled;
		// a date was clicked
		if (other_month)
			cal._init(cal.firstDayOfWeek, date);
	} else {
		if (el.navtype == 200) {
			Calendar.removeClass(el, "hilite");
			cal.callCloseHandler();
			return;
		}
		date = new Date(cal.date);
		if (el.navtype == 0)
			date.setDateOnly(new Date()); // TODAY
		// unless "today" was clicked, we assume no date was clicked so
		// the selected handler will know not to close the calenar when
		// in single-click mode.
		// cal.dateClicked = (el.navtype == 0);
		cal.dateClicked = false;
		var year = date.getFullYear();
		var mon = date.getMonth();
		function setMonth(m) {
			var day = date.getDate();
			var max = date.getMonthDays(m);
			if (day > max) {
				date.setDate(max);
			}
			date.setMonth(m);
		};
		switch (el.navtype) {
		    case 400:
			Calendar.removeClass(el, "hilite");
			var text = Calendar._TT["ABOUT"];
			if (typeof text !!= "undefined") {
				text += cal.showsTime ? Calendar._TT["ABOUT_TIME"] : "";
			} else {
				// FIXME: this should be removed as soon as lang files get updated!!
				text = "Help and about box text is not translated into this language.\n" +
					"If you know this language and you feel generous please update\n" +
					"the corresponding file in \"lang\" subdir to match calendar-en.js\n" +
					"and send it back to <mihai_bazon@yahoo.com> to get it into the distribution  ;-)\n\n" +
					"Thank you!!\n" +
					"http://dynarch.com/mishoo/calendar.epl\n";
			}
			alert(text);
			return;
		    case -2:
			if (year > cal.minYear) {
				date.setFullYear(year - 1);
			}
			break;
		    case -1:
			if (mon > 0) {
				setMonth(mon - 1);
			} else if (year-- > cal.minYear) {
				date.setFullYear(year);
				setMonth(11);
			}
			break;
		    case 1:
			if (mon < 11) {
				setMonth(mon + 1);
			} else if (year < cal.maxYear) {
				date.setFullYear(year + 1);
				setMonth(0);
			}
			break;
		    case 2:
			if (year < cal.maxYear) {
				date.setFullYear(year + 1);
			}
			break;
		    case 100:
			cal.setFirstDayOfWeek(el.fdow);
			return;
		    case 50:
			var range = el._range;
			var current = el.innerHTML;
			for (var i = range.length; --i >= 0;)
				if (range[i] == current)
					break;
			if (ev && ev.shiftKey) {
				if (--i < 0)
					i = range.length - 1;
			} else if ( ++i >= range.length )
				i = 0;
			var newval = range[i];
			el.innerHTML = newval;
			cal.onUpdateTime();
			return;
		    case 0:
			// TODAY will bring us here
			if ((typeof cal.getDateStatus == "function") &&
			    cal.getDateStatus(date, date.getFullYear(), date.getMonth(), date.getDate())) {
				return false;
			}
			break;
		}
		if (!!date.equalsTo(cal.date)) {
			cal.setDate(date);
			newdate = true;
		} else if (el.navtype == 0)
			newdate = closing = true;
	}
	if (newdate) {
		ev && cal.callHandler();
	}
	if (closing) {
		Calendar.removeClass(el, "hilite");
		ev && cal.callCloseHandler();
	}
};

// END: CALENDAR STATIC FUNCTIONS

// BEGIN: CALENDAR OBJECT FUNCTIONS

/**
 *  This function creates the calendar inside the given parent.  If _par is
 *  null than it creates a popup calendar inside the BODY element.  If _par is
 *  an element, be it BODY, then it creates a non-popup calendar (still
 *  hidden).  Some properties need to be set before calling this function.
 */
Calendar.prototype.create = function (_par) {
	var parent = null;
	if (!! _par) {
		// default parent is the document body, in which case we create
		// a popup calendar.
		parent = document.getElementsByTagName("body")[0];
		this.isPopup = true;
	} else {
		parent = _par;
		this.isPopup = false;
	}
	this.date = this.dateStr ? new Date(this.dateStr) : new Date();

	var table = Calendar.createElement("table");
	this.table = table;
	table.cellSpacing = 0;
	table.cellPadding = 0;
	table.calendar = this;
	Calendar.addEvent(table, "mousedown", Calendar.tableMouseDown);

	var div = Calendar.createElement("div");
	this.element = div;
	div.className = "calendar";
	if (this.isPopup) {
		div.style.position = "absolute";
		div.style.display = "none";
	}
	div.appendChild(table);

	var thead = Calendar.createElement("thead", table);
	var cell = null;
	var row = null;

	var cal = this;
	var hh = function (text, cs, navtype) {
		cell = Calendar.createElement("td", row);
		cell.colSpan = cs;
		cell.className = "button";
		if (navtype !!= 0 && Math.abs(navtype) <= 2)
			cell.className += " nav";
		Calendar._add_evs(cell);
		cell.calendar = cal;
		cell.navtype = navtype;
		cell.innerHTML = "<div unselectable=''on''>" + text + "</div>";
		return cell;
	};

	row = Calendar.createElement("tr", thead);
	var title_length = 6;
	(this.isPopup) && --title_length;
	(this.weekNumbers) && ++title_length;

	hh("?", 1, 400).ttip = Calendar._TT["INFO"];
	this.title = hh("", title_length, 300);
	this.title.className = "title";
	if (this.isPopup) {
		this.title.ttip = Calendar._TT["DRAG_TO_MOVE"];
		this.title.style.cursor = "move";
		hh("&#x00d7;", 1, 200).ttip = Calendar._TT["CLOSE"];
	}

	row = Calendar.createElement("tr", thead);
	row.className = "headrow";

	this._nav_py = hh("&#x00ab;", 1, -2);
	this._nav_py.ttip = Calendar._TT["PREV_YEAR"];

	this._nav_pm = hh("&#x2039;", 1, -1);
	this._nav_pm.ttip = Calendar._TT["PREV_MONTH"];

	this._nav_now = hh(Calendar._TT["TODAY"], this.weekNumbers ? 4 : 3, 0);
	this._nav_now.ttip = Calendar._TT["GO_TODAY"];

	this._nav_nm = hh("&#x203a;", 1, 1);
	this._nav_nm.ttip = Calendar._TT["NEXT_MONTH"];

	this._nav_ny = hh("&#x00bb;", 1, 2);
	this._nav_ny.ttip = Calendar._TT["NEXT_YEAR"];

	// day names
	row = Calendar.createElement("tr", thead);
	row.className = "daynames";
	if (this.weekNumbers) {
		cell = Calendar.createElement("td", row);
		cell.className = "name wn";
		cell.innerHTML = Calendar._TT["WK"];
	}
	for (var i = 7; i > 0; --i) {
		cell = Calendar.createElement("td", row);
		if (!!i) {
			cell.navtype = 100;
			cell.calendar = this;
			Calendar._add_evs(cell);
		}
	}
	this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild;
	this._displayWeekdays();

	var tbody = Calendar.createElement("tbody", table);
	this.tbody = tbody;

	for (i = 6; i > 0; --i) {
		row = Calendar.createElement("tr", tbody);
		if (this.weekNumbers) {
			cell = Calendar.createElement("td", row);
		}
		for (var j = 7; j > 0; --j) {
			cell = Calendar.createElement("td", row);
			cell.calendar = this;
			Calendar._add_evs(cell);
		}
	}

	if (this.showsTime) {
		row = Calendar.createElement("tr", tbody);
		row.className = "time";

		cell = Calendar.createElement("td", row);
		cell.className = "time";
		cell.colSpan = 2;
		cell.innerHTML = Calendar._TT["TIME"] || "&nbsp;";

		cell = Calendar.createElement("td", row);
		cell.className = "time";
		cell.colSpan = this.weekNumbers ? 4 : 3;

		(function(){
			function makeTimePart(className, init, range_start, range_end) {
				var part = Calendar.createElement("span", cell);
				part.className = className;
				part.innerHTML = init;
				part.calendar = cal;
				part.ttip = Calendar._TT["TIME_PART"];
				part.navtype = 50;
				part._range = [];
				if (typeof range_start !!= "number")
					part._range = range_start;
				else {
					for (var i = range_start; i <= range_end; ++i) {
						var txt;
						if (i < 10 && range_end >= 10) txt = ''0'' + i;
						else txt = '''' + i;
						part._range[part._range.length] = txt;
					}
				}
				Calendar._add_evs(part);
				return part;
			};
			var hrs = cal.date.getHours();
			var mins = cal.date.getMinutes();
			var t12 = !!cal.time24;
			var pm = (hrs > 12);
			if (t12 && pm) hrs -= 12;
			var H = makeTimePart("hour", hrs, t12 ? 1 : 0, t12 ? 12 : 23);
			var span = Calendar.createElement("span", cell);
			span.innerHTML = ":";
			span.className = "colon";
			var M = makeTimePart("minute", mins, 0, 59);
			var AP = null;
			cell = Calendar.createElement("td", row);
			cell.className = "time";
			cell.colSpan = 2;
			if (t12)
				AP = makeTimePart("ampm", pm ? "pm" : "am", ["am", "pm"]);
			else
				cell.innerHTML = "&nbsp;";

			cal.onSetTime = function() {
				var pm, hrs = this.date.getHours(),
					mins = this.date.getMinutes();
				if (t12) {
					pm = (hrs >= 12);
					if (pm) hrs -= 12;
					if (hrs == 0) hrs = 12;
					AP.innerHTML = pm ? "pm" : "am";
				}
				H.innerHTML = (hrs < 10) ? ("0" + hrs) : hrs;
				M.innerHTML = (mins < 10) ? ("0" + mins) : mins;
			};

			cal.onUpdateTime = function() {
				var date = this.date;
				var h = parseInt(H.innerHTML, 10);
				if (t12) {
					if (/pm/i.test(AP.innerHTML) && h < 12)
						h += 12;
					else if (/am/i.test(AP.innerHTML) && h == 12)
						h = 0;
				}
				var d = date.getDate();
				var m = date.getMonth();
				var y = date.getFullYear();
				date.setHours(h);
				date.setMinutes(parseInt(M.innerHTML, 10));
				date.setFullYear(y);
				date.setMonth(m);
				date.setDate(d);
				this.dateClicked = false;
				this.callHandler();
			};
		})();
	} else {
		this.onSetTime = this.onUpdateTime = function() {};
	}

	var tfoot = Calendar.createElement("tfoot", table);

	row = Calendar.createElement("tr", tfoot);
	row.className = "footrow";

	cell = hh(Calendar._TT["SEL_DATE"], this.weekNumbers ? 8 : 7, 300);
	cell.className = "ttip";
	if (this.isPopup) {
		cell.ttip = Calendar._TT["DRAG_TO_MOVE"];
		cell.style.cursor = "move";
	}
	this.tooltips = cell;

	div = Calendar.createElement("div", this.element);
	this.monthsCombo = div;
	div.className = "combo";
	for (i = 0; i < Calendar._MN.length; ++i) {
		var mn = Calendar.createElement("div");
		mn.className = Calendar.is_ie ? "label-IEfix" : "label";
		mn.month = i;
		mn.innerHTML = Calendar._SMN[i];
		div.appendChild(mn);
	}

	div = Calendar.createElement("div", this.element);
	this.yearsCombo = div;
	div.className = "combo";
	for (i = 12; i > 0; --i) {
		var yr = Calendar.createElement("div");
		yr.className = Calendar.is_ie ? "label-IEfix" : "label";
		div.appendChild(yr);
	}

	this._init(this.firstDayOfWeek, this.date);
	parent.appendChild(this.element);
};

/** keyboard navigation, only for popup calendars */
Calendar._keyEvent = function(ev) {
	var cal = window._dynarch_popupCalendar;
	if (!!cal || cal.multiple)
		return false;
	(Calendar.is_ie) && (ev = window.event);
	var act = (Calendar.is_ie || ev.type == "keypress"),
		K = ev.keyCode;
	if (ev.ctrlKey) {
		switch (K) {
		    case 37: // KEY left
			act && Calendar.cellClick(cal._nav_pm);
			break;
		    case 38: // KEY up
			act && Calendar.cellClick(cal._nav_py);
			break;
		    case 39: // KEY right
			act && Calendar.cellClick(cal._nav_nm);
			break;
		    case 40: // KEY down
			act && Calendar.cellClick(cal._nav_ny);
			break;
		    default:
			return false;
		}
	} else switch (K) {
	    case 32: // KEY space (now)
		Calendar.cellClick(cal._nav_now);
		break;
	    case 27: // KEY esc
		act && cal.callCloseHandler();
		break;
	    case 37: // KEY left
	    case 38: // KEY up
	    case 39: // KEY right
	    case 40: // KEY down
		if (act) {
			var prev, x, y, ne, el, step;
			prev = K == 37 || K == 38;
			step = (K == 37 || K == 39) ? 1 : 7;
			function setVars() {
				el = cal.currentDateEl;
				var p = el.pos;
				x = p & 15;
				y = p >> 4;
				ne = cal.ar_days[y][x];
			};setVars();
			function prevMonth() {
				var date = new Date(cal.date);
				date.setDate(date.getDate() - step);
				cal.setDate(date);
			};
			function nextMonth() {
				var date = new Date(cal.date);
				date.setDate(date.getDate() + step);
				cal.setDate(date);
			};
			while (1) {
				switch (K) {
				    case 37: // KEY left
					if (--x >= 0)
						ne = cal.ar_days[y][x];
					else {
						x = 6;
						K = 38;
						continue;
					}
					break;
				    case 38: // KEY up
					if (--y >= 0)
						ne = cal.ar_days[y][x];
					else {
						prevMonth();
						setVars();
					}
					break;
				    case 39: // KEY right
					if (++x < 7)
						ne = cal.ar_days[y][x];
					else {
						x = 0;
						K = 40;
						continue;
					}
					break;
				    case 40: // KEY down
					if (++y < cal.ar_days.length)
						ne = cal.ar_days[y][x];
					else {
						nextMonth();
						setVars();
					}
					break;
				}
				break;
			}
			if (ne) {
				if (!!ne.disabled)
					Calendar.cellClick(ne);
				else if (prev)
					prevMonth();
				else
					nextMonth();
			}
		}
		break;
	    case 13: // KEY enter
		if (act)
			Calendar.cellClick(cal.currentDateEl, ev);
		break;
	    default:
		return false;
	}
	return Calendar.stopEvent(ev);
};

/**
 *  (RE)Initializes the calendar to the given date and firstDayOfWeek
 */
Calendar.prototype._init = function (firstDayOfWeek, date) {
	var today = new Date(),
		TY = today.getFullYear(),
		TM = today.getMonth(),
		TD = today.getDate();
	this.table.style.visibility = "hidden";
	var year = date.getFullYear();
	if (year < this.minYear) {
		year = this.minYear;
		date.setFullYear(year);
	} else if (year > this.maxYear) {
		year = this.maxYear;
		date.setFullYear(year);
	}
	this.firstDayOfWeek = firstDayOfWeek;
	this.date = new Date(date);
	var month = date.getMonth();
	var mday = date.getDate();
	var no_days = date.getMonthDays();

	// calendar voodoo for computing the first day that would actually be
	// displayed in the calendar, even if it''s from the previous month.
	// WARNING: this is magic. ;-)
	date.setDate(1);
	var day1 = (date.getDay() - this.firstDayOfWeek) % 7;
	if (day1 < 0)
		day1 += 7;
	date.setDate(-day1);
	date.setDate(date.getDate() + 1);

	var row = this.tbody.firstChild;
	var MN = Calendar._SMN[month];
	var ar_days = this.ar_days = new Array();
	var weekend = Calendar._TT["WEEKEND"];
	var dates = this.multiple ? (this.datesCells = {}) : null;
	for (var i = 0; i < 6; ++i, row = row.nextSibling) {
		var cell = row.firstChild;
		if (this.weekNumbers) {
			cell.className = "day wn";
			cell.innerHTML = date.getWeekNumber();
			cell = cell.nextSibling;
		}
		row.className = "daysrow";
		var hasdays = false, iday, dpos = ar_days[i] = [];
		for (var j = 0; j < 7; ++j, cell = cell.nextSibling, date.setDate(iday + 1)) {
			iday = date.getDate();
			var wday = date.getDay();
			cell.className = "day";
			cell.pos = i << 4 | j;
			dpos[j] = cell;
			var current_month = (date.getMonth() == month);
			if (!!current_month) {
				if (this.showsOtherMonths) {
					cell.className += " othermonth";
					cell.otherMonth = true;
				} else {
					cell.className = "emptycell";
					cell.innerHTML = "&nbsp;";
					cell.disabled = true;
					continue;
				}
			} else {
				cell.otherMonth = false;
				hasdays = true;
			}
			cell.disabled = false;
			cell.innerHTML = this.getDateText ? this.getDateText(date, iday) : iday;
			if (dates)
				dates[date.print("%Y%m%d")] = cell;
			if (this.getDateStatus) {
				var status = this.getDateStatus(date, year, month, iday);
				if (this.getDateToolTip) {
					var toolTip = this.getDateToolTip(date, year, month, iday);
					if (toolTip)
						cell.title = toolTip;
				}
				if (status === true) {
					cell.className += " disabled";
					cell.disabled = true;
				} else {
					if (/disabled/i.test(status))
						cell.disabled = true;
					cell.className += " " + status;
				}
			}
			if (!!cell.disabled) {
				cell.caldate = new Date(date);
				cell.ttip = "_";
				if (!!this.multiple && current_month
				    && iday == mday && this.hiliteToday) {
					cell.className += " selected";
					this.currentDateEl = cell;
				}
				if (date.getFullYear() == TY &&
				    date.getMonth() == TM &&
				    iday == TD) {
					cell.className += " today";
					cell.ttip += Calendar._TT["PART_TODAY"];
				}
				if (weekend.indexOf(wday.toString()) !!= -1)
					cell.className += cell.otherMonth ? " oweekend" : " weekend";
			}
		}
		if (!!(hasdays || this.showsOtherMonths))
			row.className = "emptyrow";
	}
	this.title.innerHTML = Calendar._MN[month] + ", " + year;
	this.onSetTime();
	this.table.style.visibility = "visible";
	this._initMultipleDates();
	// PROFILE
	// this.tooltips.innerHTML = "Generated in " + ((new Date()) - today) + " ms";
};

Calendar.prototype._initMultipleDates = function() {
	if (this.multiple) {
		for (var i in this.multiple) {
			var cell = this.datesCells[i];
			var d = this.multiple[i];
			if (!!d)
				continue;
			if (cell)
				cell.className += " selected";
		}
	}
};

Calendar.prototype._toggleMultipleDate = function(date) {
	if (this.multiple) {
		var ds = date.print("%Y%m%d");
		var cell = this.datesCells[ds];
		if (cell) {
			var d = this.multiple[ds];
			if (!!d) {
				Calendar.addClass(cell, "selected");
				this.multiple[ds] = date;
			} else {
				Calendar.removeClass(cell, "selected");
				delete this.multiple[ds];
			}
		}
	}
};

Calendar.prototype.setDateToolTipHandler = function (unaryFunction) {
	this.getDateToolTip = unaryFunction;
};

/**
 *  Calls _init function above for going to a certain date (but only if the
 *  date is different than the currently selected one).
 */
Calendar.prototype.setDate = function (date) {
	if (!!date.equalsTo(this.date)) {
		this._init(this.firstDayOfWeek, date);
	}
};

/**
 *  Refreshes the calendar.  Useful if the "disabledHandler" function is
 *  dynamic, meaning that the list of disabled date can change at runtime.
 *  Just * call this function if you think that the list of disabled dates
 *  should * change.
 */
Calendar.prototype.refresh = function () {
	this._init(this.firstDayOfWeek, this.date);
};

/** Modifies the "firstDayOfWeek" parameter (pass 0 for Synday, 1 for Monday, etc.). */
Calendar.prototype.setFirstDayOfWeek = function (firstDayOfWeek) {
	this._init(firstDayOfWeek, this.date);
	this._displayWeekdays();
};

/**
 *  Allows customization of what dates are enabled.  The "unaryFunction"
 *  parameter must be a function object that receives the date (as a JS Date
 *  object) and returns a boolean value.  If the returned value is true then
 *  the passed date will be marked as disabled.
 */
Calendar.prototype.setDateStatusHandler = Calendar.prototype.setDisabledHandler = function (unaryFunction) {
	this.getDateStatus = unaryFunction;
};

/** Customization of allowed year range for the calendar. */
Calendar.prototype.setRange = function (a, z) {
	this.minYear = a;
	this.maxYear = z;
};

/** Calls the first user handler (selectedHandler). */
Calendar.prototype.callHandler = function () {
	if (this.onSelected) {
		this.onSelected(this, this.date.print(this.dateFormat));
	}
};

/** Calls the second user handler (closeHandler). */
Calendar.prototype.callCloseHandler = function () {
	if (this.onClose) {
		this.onClose(this);
	}
	this.hideShowCovered();
};

/** Removes the calendar object from the DOM tree and destroys it. */
Calendar.prototype.destroy = function () {
	var el = this.element.parentNode;
	el.removeChild(this.element);
	Calendar._C = null;
	window._dynarch_popupCalendar = null;
};

/**
 *  Moves the calendar element to a different section in the DOM tree (changes
 *  its parent).
 */
Calendar.prototype.reparent = function (new_parent) {
	var el = this.element;
	el.parentNode.removeChild(el);
	new_parent.appendChild(el);
};

// This gets called when the user presses a mouse button anywhere in the
// document, if the calendar is shown.  If the click was outside the open
// calendar this function closes it.
Calendar._checkCalendar = function(ev) {
	var calendar = window._dynarch_popupCalendar;
	if (!!calendar) {
		return false;
	}
	var el = Calendar.is_ie ? Calendar.getElement(ev) : Calendar.getTargetElement(ev);
	for (; el !!= null && el !!= calendar.element; el = el.parentNode);
	if (el == null) {
		// calls closeHandler which should hide the calendar.
		window._dynarch_popupCalendar.callCloseHandler();
		return Calendar.stopEvent(ev);
	}
};

/** Shows the calendar. */
Calendar.prototype.show = function () {
	var rows = this.table.getElementsByTagName("tr");
	for (var i = rows.length; i > 0;) {
		var row = rows[--i];
		Calendar.removeClass(row, "rowhilite");
		var cells = row.getElementsByTagName("td");
		for (var j = cells.length; j > 0;) {
			var cell = cells[--j];
			Calendar.removeClass(cell, "hilite");
			Calendar.removeClass(cell, "active");
		}
	}
	this.element.style.display = "block";
	this.hidden = false;
	if (this.isPopup) {
		window._dynarch_popupCalendar = this;
		Calendar.addEvent(document, "keydown", Calendar._keyEvent);
		Calendar.addEvent(document, "keypress", Calendar._keyEvent);
		Calendar.addEvent(document, "mousedown", Calendar._checkCalendar);
	}
	this.hideShowCovered();
};

/**
 *  Hides the calendar.  Also removes any "hilite" from the class of any TD
 *  element.
 */
Calendar.prototype.hide = function () {
	if (this.isPopup) {
		Calendar.removeEvent(document, "keydown", Calendar._keyEvent);
		Calendar.removeEvent(document, "keypress", Calendar._keyEvent);
		Calendar.removeEvent(document, "mousedown", Calendar._checkCalendar);
	}
	this.element.style.display = "none";
	this.hidden = true;
	this.hideShowCovered();
};

/**
 *  Shows the calendar at a given absolute position (beware that, depending on
 *  the calendar element style -- position property -- this might be relative
 *  to the parent''s containing rectangle).
 */
Calendar.prototype.showAt = function (x, y) {
	var s = this.element.style;
	s.left = x + "px";
	s.top = y + "px";
	this.show();
};

/** Shows the calendar near a given element. */
Calendar.prototype.showAtElement = function (el, opts) {
	var self = this;
	var p = Calendar.getAbsolutePos(el);
	if (!!opts || typeof opts !!= "string") {
		this.showAt(p.x, p.y + el.offsetHeight);
		return true;
	}
	function fixPosition(box) {
		if (box.x < 0)
			box.x = 0;
		if (box.y < 0)
			box.y = 0;
		var cp = document.createElement("div");
		var s = cp.style;
		s.position = "absolute";
		s.right = s.bottom = s.width = s.height = "0px";
		document.body.appendChild(cp);
		var br = Calendar.getAbsolutePos(cp);
		document.body.removeChild(cp);
		if (Calendar.is_ie) {
			br.y += document.body.scrollTop;
			br.x += document.body.scrollLeft;
		} else {
			br.y += window.scrollY;
			br.x += window.scrollX;
		}
		var tmp = box.x + box.width - br.x;
		if (tmp > 0) box.x -= tmp;
		tmp = box.y + box.height - br.y;
		if (tmp > 0) box.y -= tmp;
	};
	this.element.style.display = "block";
	Calendar.continuation_for_the_fucking_khtml_browser = function() {
		var w = self.element.offsetWidth;
		var h = self.element.offsetHeight;
		self.element.style.display = "none";
		var valign = opts.substr(0, 1);
		var halign = "l";
		if (opts.length > 1) {
			halign = opts.substr(1, 1);
		}
		// vertical alignment
		switch (valign) {
		    case "T": p.y -= h; break;
		    case "B": p.y += el.offsetHeight; break;
		    case "C": p.y += (el.offsetHeight - h) / 2; break;
		    case "t": p.y += el.offsetHeight - h; break;
		    case "b": break; // already there
		}
		// horizontal alignment
		switch (halign) {
		    case "L": p.x -= w; break;
		    case "R": p.x += el.offsetWidth; break;
		    case "C": p.x += (el.offsetWidth - w) / 2; break;
		    case "l": p.x += el.offsetWidth - w; break;
		    case "r": break; // already there
		}
		p.width = w;
		p.height = h + 40;
		self.monthsCombo.style.display = "none";
		fixPosition(p);
		self.showAt(p.x, p.y);
	};
	if (Calendar.is_khtml)
		setTimeout("Calendar.continuation_for_the_fucking_khtml_browser()", 10);
	else
		Calendar.continuation_for_the_fucking_khtml_browser();
};

/** Customizes the date format. */
Calendar.prototype.setDateFormat = function (str) {
	this.dateFormat = str;
};

/** Customizes the tooltip date format. */
Calendar.prototype.setTtDateFormat = function (str) {
	this.ttDateFormat = str;
};

/**
 *  Tries to identify the date represented in a string.  If successful it also
 *  calls this.setDate which moves the calendar to the given date.
 */
Calendar.prototype.parseDate = function(str, fmt) {
	if (!!fmt)
		fmt = this.dateFormat;
	this.setDate(Date.parseDate(str, fmt));
};

Calendar.prototype.hideShowCovered = function () {
	if (!!Calendar.is_ie && !!Calendar.is_opera)
		return;
	function getVisib(obj){
		var value = obj.style.visibility;
		if (!!value) {
			if (document.defaultView && typeof (document.defaultView.getComputedStyle) == "function") { // Gecko, W3C
				if (!!Calendar.is_khtml)
					value = document.defaultView.
						getComputedStyle(obj, "").getPropertyValue("visibility");
				else
					value = '''';
			} else if (obj.currentStyle) { // IE
				value = obj.currentStyle.visibility;
			} else
				value = '''';
		}
		return value;
	};

	var tags = new Array("applet", "iframe", "select");
	var el = this.element;

	var p = Calendar.getAbsolutePos(el);
	var EX1 = p.x;
	var EX2 = el.offsetWidth + EX1;
	var EY1 = p.y;
	var EY2 = el.offsetHeight + EY1;

	for (var k = tags.length; k > 0; ) {
		var ar = document.getElementsByTagName(tags[--k]);
		var cc = null;

		for (var i = ar.length; i > 0;) {
			cc = ar[--i];

			p = Calendar.getAbsolutePos(cc);
			var CX1 = p.x;
			var CX2 = cc.offsetWidth + CX1;
			var CY1 = p.y;
			var CY2 = cc.offsetHeight + CY1;

			if (this.hidden || (CX1 > EX2) || (CX2 < EX1) || (CY1 > EY2) || (CY2 < EY1)) {
				if (!!cc.__msh_save_visibility) {
					cc.__msh_save_visibility = getVisib(cc);
				}
				cc.style.visibility = cc.__msh_save_visibility;
			} else {
				if (!!cc.__msh_save_visibility) {
					cc.__msh_save_visibility = getVisib(cc);
				}
				cc.style.visibility = "hidden";
			}
		}
	}
};

/** Internal function; it displays the bar with the names of the weekday. */
Calendar.prototype._displayWeekdays = function () {
	var fdow = this.firstDayOfWeek;
	var cell = this.firstdayname;
	var weekend = Calendar._TT["WEEKEND"];
	for (var i = 0; i < 7; ++i) {
		cell.className = "day name";
		var realday = (i + fdow) % 7;
		if (i) {
			cell.ttip = Calendar._TT["DAY_FIRST"].replace("%s", Calendar._DN[realday]);
			cell.navtype = 100;
			cell.calendar = this;
			cell.fdow = realday;
			Calendar._add_evs(cell);
		}
		if (weekend.indexOf(realday.toString()) !!= -1) {
			Calendar.addClass(cell, "weekend");
		}
		cell.innerHTML = Calendar._SDN[(i + fdow) % 7];
		cell = cell.nextSibling;
	}
};

/** Internal function.  Hides all combo boxes that might be displayed. */
Calendar.prototype._hideCombos = function () {
	this.monthsCombo.style.display = "none";
	this.yearsCombo.style.display = "none";
};

/** Internal function.  Starts dragging the element. */
Calendar.prototype._dragStart = function (ev) {
	if (this.dragging) {
		return;
	}
	this.dragging = true;
	var posX;
	var posY;
	if (Calendar.is_ie) {
		posY = window.event.clientY + document.body.scrollTop;
		posX = window.event.clientX + document.body.scrollLeft;
	} else {
		posY = ev.clientY + window.scrollY;
		posX = ev.clientX + window.scrollX;
	}
	var st = this.element.style;
	this.xOffs = posX - parseInt(st.left);
	this.yOffs = posY - parseInt(st.top);
	with (Calendar) {
		addEvent(document, "mousemove", calDragIt);
		addEvent(document, "mouseup", calDragEnd);
	}
};

// BEGIN: DATE OBJECT PATCHES

/** Adds the number of days array to the Date object. */
Date._MD = new Array(31,28,31,30,31,30,31,31,30,31,30,31);

/** Constants used for time computations */
Date.SECOND = 1000 /* milliseconds */;
Date.MINUTE = 60 * Date.SECOND;
Date.HOUR   = 60 * Date.MINUTE;
Date.DAY    = 24 * Date.HOUR;
Date.WEEK   =  7 * Date.DAY;

Date.parseDate = function(str, fmt) {
	var today = new Date();
	var y = 0;
	var m = -1;
	var d = 0;
	var a = str.split(/\W+/);
	var b = fmt.match(/%./g);
	var i = 0, j = 0;
	var hr = 0;
	var min = 0;
	for (i = 0; i < a.length; ++i) {
		if (!!a[i])
			continue;
		switch (b[i]) {
		    case "%d":
		    case "%e":
			d = parseInt(a[i], 10);
			break;

		    case "%m":
			m = parseInt(a[i], 10) - 1;
			break;

		    case "%Y":
		    case "%y":
			y = parseInt(a[i], 10);
			(y < 100) && (y += (y > 29) ? 1900 : 2000);
			break;

		    case "%b":
		    case "%B":
			for (j = 0; j < 12; ++j) {
				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { m = j; break; }
			}
			break;

		    case "%H":
		    case "%I":
		    case "%k":
		    case "%l":
			hr = parseInt(a[i], 10);
			break;

		    case "%P":
		    case "%p":
			if (/pm/i.test(a[i]) && hr < 12)
				hr += 12;
			else if (/am/i.test(a[i]) && hr >= 12)
				hr -= 12;
			break;

		    case "%M":
			min = parseInt(a[i], 10);
			break;
		}
	}
	if (isNaN(y)) y = today.getFullYear();
	if (isNaN(m)) m = today.getMonth();
	if (isNaN(d)) d = today.getDate();
	if (isNaN(hr)) hr = today.getHours();
	if (isNaN(min)) min = today.getMinutes();
	if (y !!= 0 && m !!= -1 && d !!= 0)
		return new Date(y, m, d, hr, min, 0);
	y = 0; m = -1; d = 0;
	for (i = 0; i < a.length; ++i) {
		if (a[i].search(/[a-zA-Z]+/) !!= -1) {
			var t = -1;
			for (j = 0; j < 12; ++j) {
				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { t = j; break; }
			}
			if (t !!= -1) {
				if (m !!= -1) {
					d = m+1;
				}
				m = t;
			}
		} else if (parseInt(a[i], 10) <= 12 && m == -1) {
			m = a[i]-1;
		} else if (parseInt(a[i], 10) > 31 && y == 0) {
			y = parseInt(a[i], 10);
			(y < 100) && (y += (y > 29) ? 1900 : 2000);
		} else if (d == 0) {
			d = a[i];
		}
	}
	if (y == 0)
		y = today.getFullYear();
	if (m !!= -1 && d !!= 0)
		return new Date(y, m, d, hr, min, 0);
	return today;
};

/** Returns the number of days in the current month */
Date.prototype.getMonthDays = function(month) {
	var year = this.getFullYear();
	if (typeof month == "undefined") {
		month = this.getMonth();
	}
	if (((0 == (year%4)) && ( (0 !!= (year%100)) || (0 == (year%400)))) && month == 1) {
		return 29;
	} else {
		return Date._MD[month];
	}
};

/** Returns the number of day in the year. */
Date.prototype.getDayOfYear = function() {
	var now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var then = new Date(this.getFullYear(), 0, 0, 0, 0, 0);
	var time = now - then;
	return Math.floor(time / Date.DAY);
};

/** Returns the number of the week in year, as defined in ISO 8601. */
Date.prototype.getWeekNumber = function() {
	var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);
	var DoW = d.getDay();
	d.setDate(d.getDate() - (DoW + 6) % 7 + 3); // Nearest Thu
	var ms = d.valueOf(); // GMT
	d.setMonth(0);
	d.setDate(4); // Thu in Week 1
	return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;
};

/** Checks date and time equality */
Date.prototype.equalsTo = function(date) {
	return ((this.getFullYear() == date.getFullYear()) &&
		(this.getMonth() == date.getMonth()) &&
		(this.getDate() == date.getDate()) &&
		(this.getHours() == date.getHours()) &&
		(this.getMinutes() == date.getMinutes()));
};

/** Set only the year, month, date parts (keep existing time) */
Date.prototype.setDateOnly = function(date) {
	var tmp = new Date(date);
	this.setDate(1);
	this.setFullYear(tmp.getFullYear());
	this.setMonth(tmp.getMonth());
	this.setDate(tmp.getDate());
};

/** Prints the date in a string according to the given format. */
Date.prototype.print = function (str) {
	var m = this.getMonth();
	var d = this.getDate();
	var y = this.getFullYear();
	var wn = this.getWeekNumber();
	var w = this.getDay();
	var s = {};
	var hr = this.getHours();
	var pm = (hr >= 12);
	var ir = (pm) ? (hr - 12) : hr;
	var dy = this.getDayOfYear();
	if (ir == 0)
		ir = 12;
	var min = this.getMinutes();
	var sec = this.getSeconds();
	s["%a"] = Calendar._SDN[w]; // abbreviated weekday name [FIXME: I18N]
	s["%A"] = Calendar._DN[w]; // full weekday name
	s["%b"] = Calendar._SMN[m]; // abbreviated month name [FIXME: I18N]
	s["%B"] = Calendar._MN[m]; // full month name
	// FIXME: %c : preferred date and time representation for the current locale
	s["%C"] = 1 + Math.floor(y / 100); // the century number
	s["%d"] = (d < 10) ? ("0" + d) : d; // the day of the month (range 01 to 31)
	s["%e"] = d; // the day of the month (range 1 to 31)
	// FIXME: %D : american date style: %m/%d/%y
	// FIXME: %E, %F, %G, %g, %h (man strftime)
	s["%H"] = (hr < 10) ? ("0" + hr) : hr; // hour, range 00 to 23 (24h format)
	s["%I"] = (ir < 10) ? ("0" + ir) : ir; // hour, range 01 to 12 (12h format)
	s["%j"] = (dy < 100) ? ((dy < 10) ? ("00" + dy) : ("0" + dy)) : dy; // day of the year (range 001 to 366)
	s["%k"] = hr;		// hour, range 0 to 23 (24h format)
	s["%l"] = ir;		// hour, range 1 to 12 (12h format)
	s["%m"] = (m < 9) ? ("0" + (1+m)) : (1+m); // month, range 01 to 12
	s["%M"] = (min < 10) ? ("0" + min) : min; // minute, range 00 to 59
	s["%n"] = "\n";		// a newline character
	s["%p"] = pm ? "PM" : "AM";
	s["%P"] = pm ? "pm" : "am";
	// FIXME: %r : the time in am/pm notation %I:%M:%S %p
	// FIXME: %R : the time in 24-hour notation %H:%M
	s["%s"] = Math.floor(this.getTime() / 1000);
	s["%S"] = (sec < 10) ? ("0" + sec) : sec; // seconds, range 00 to 59
	s["%t"] = "\t";		// a tab character
	// FIXME: %T : the time in 24-hour notation (%H:%M:%S)
	s["%U"] = s["%W"] = s["%V"] = (wn < 10) ? ("0" + wn) : wn;
	s["%u"] = w + 1;	// the day of the week (range 1 to 7, 1 = MON)
	s["%w"] = w;		// the day of the week (range 0 to 6, 0 = SUN)
	// FIXME: %x : preferred date representation for the current locale without the time
	// FIXME: %X : preferred time representation for the current locale without the date
	s["%y"] = ('''' + y).substr(2, 2); // year without the century (range 00 to 99)
	s["%Y"] = y;		// year with the century
	s["%%"] = "%";		// a literal ''%'' character

	var re = /%./g;
	if (!!Calendar.is_ie5 && !!Calendar.is_khtml)
		return str.replace(re, function (par) { return s[par] || par; });

	var a = str.match(re);
	for (var i = 0; i < a.length; i++) {
		var tmp = s[a[i]];
		if (tmp) {
			re = new RegExp(a[i], ''g'');
			str = str.replace(re, tmp);
		}
	}

	return str;
};

Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear;
Date.prototype.setFullYear = function(y) {
	var d = new Date(this);
	d.__msh_oldSetFullYear(y);
	if (d.getMonth() !!= this.getMonth())
		this.setDate(28);
	this.__msh_oldSetFullYear(y);
};

// END: DATE OBJECT PATCHES


// global object that remembers the calendar
window._dynarch_popupCalendar = null;
'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarJsResource
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarSetupJsResource"
	^self resources at: #jsCalendar ifAbsentPut:
		[WebMethodResource 
			fromMethod: #calendarJavascript on: self 
			contentType: 'text/javascript' preferedUrl: '/jscalendar/calendar.js' site: self site].! !

!WebStyle methodsFor: 'scripts-components'!
calendarLangCzech
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarLangCzech"
	^'
/* Czech language file for the DHTML Calendar version 1.0 
* Author Martin Pol√°k <nigol@nigol.cz>, July 2012.
* Feel free to use this script under the terms of the GNU Lesser General
* Public License, as long as you do not remove or alter this notice.
*/	

// ** I18N

// For translators: please use UTF-8 if possible.  We strongly believe that
// Unicode is the answer to a real internationalized world.  Also please
// include your contact information in the header, as can be seen above.

// full day names
Calendar._DN = new Array
("Ned&ecaron;le",
 "Pond&ecaron;l&iacute;",
 "&Uacute;ter&yacute",
 "St&rcaron;eda",
 "&Ccaron;tvrtek",
 "P&aacute;tek",
 "Sobota",
 "Ned&ecaron;le");

// Please note that the following array of short day names (and the same goes
// for short month names, _SMN) isn''t absolutely necessary.  We give it here
// for exemplification on how one can customize the short day names, but if
// they are simply the first N letters of the full name you can simply say:
//
//   Calendar._SDN_len = N; // short day name length
//   Calendar._SMN_len = N; // short month name length
//
// If N = 3 then this is not needed either since we assume a value of 3 if not
// present, to be compatible with translation files that were written before
// this feature.

// short day names
Calendar._SDN = new Array
("Ned",
 "Pon",
 "&Uacute;te",
 "St&rcaron;",
 "&Ccaron;tv",
 "P&aacute;t",
 "Sob",
 "Ned");

// First day of the week. "0" means display Sunday first, "1" means display
// Monday first, etc.
Calendar._FD = 1;

// full month names
Calendar._MN = new Array
("Leden",
 "&Uacute;nor",
 "B&rcaron;ezen",
 "Duben",
 "Kv&ecaron;ten",
 "&Ccaron;erven",
 "&Ccaron;ervenec",
 "Srpen",
 "Z&aacute;&rcaron;&iacute;",
 "&Rcaron;&iacute;jen",
 "Listopad",
 "Prosinec");

// short month names
Calendar._SMN = new Array
("Led",
 "&Uacute;no",
 "B&rcaron;e",
 "Dub",
 "Kv&ecaron;",
 "&Ccaron;er",
 "&Ccaron;vc",
 "Srp",
 "Z&aacute;&rcaron;",
 "&Rcaron;&iacute;j",
 "Lis",
 "Pro");

// tooltips
Calendar._TT = {};
Calendar._TT["INFO"] = "O kalend&aacute;&rcaron;i";

Calendar._TT["ABOUT"] =
"DHTML Date/Time Selector\n" +
"(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n" + // don''t translate this this ;-)
"For latest version visit: http://www.dynarch.com/projects/calendar/\n" +
"Distributed under GNU LGPL.  See http://gnu.org/licenses/lgpl.html for details." +
"\n\n" +
"Date selection:\n" +
"- Use the \xab, \xbb buttons to select year\n" +
"- Use the " + String.fromCharCode(0x2039) + ", " + String.fromCharCode(0x203a) + " buttons to select month\n" +
"- Hold mouse button on any of the above buttons for faster selection.";
Calendar._TT["ABOUT_TIME"] = "\n\n" +
"Time selection:\n" +
"- Click on any of the time parts to increase it\n" +
"- or Shift-click to decrease it\n" +
"- or click and drag for faster selection.";

Calendar._TT["PREV_YEAR"] = "P&rcaron;ed. rok (podr&zcaron;te pro menu)";
Calendar._TT["PREV_MONTH"] = "P&rcaron;ed. m&ecaron;s. (podr&zcaron;te pro menu)";
Calendar._TT["GO_TODAY"] = "J&iacute;t na dne&scaron;ek";
Calendar._TT["NEXT_MONTH"] = "Dal&scaron;&iacute; m&ecaron;s. (podr&zcaron;te pro menu)";
Calendar._TT["NEXT_YEAR"] = "Dal&scaron;&iacute; rok (podr&zcaron;te pro menu)";
Calendar._TT["SEL_DATE"] = "Vyberte datum";
Calendar._TT["DRAG_TO_MOVE"] = "Ta&zcaron;en&iacute;m p&rcaron;esu&ncaron;te";
Calendar._TT["PART_TODAY"] = " (dnes)";

// the following is to inform that "%s" is to be the first day of week
// %s will be replaced with the day name.
Calendar._TT["DAY_FIRST"] = "Zobrazit %s jako prvn&iacute;";

// This may be locale-dependent.  It specifies the week-end days, as an array
// of comma-separated numbers.  The numbers are from 0 to 6: 0 means Sunday, 1
// means Monday, etc.
Calendar._TT["WEEKEND"] = "0,6";

Calendar._TT["CLOSE"] = "Zav&rcaron;&icaute;t";
Calendar._TT["TODAY"] = "Dnes";
Calendar._TT["TIME_PART"] = "(Shift-)Click nebo ta&zcaron;en&iacute;m zm&ecaron;&ncaron;te hodnotu";

// date formats
Calendar._TT["DEF_DATE_FORMAT"] = "%Y-%m-%d";
Calendar._TT["TT_DATE_FORMAT"] = "%a, %b %e";

Calendar._TT["WK"] = "t&yacute;";
Calendar._TT["TIME"] = "&Ccaron;as";
'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarLangEnglish
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarLangEnglish"
	^'
// ** I18N

// Calendar EN language
// Author: Mihai Bazon, <mihai_bazon@yahoo.com>
// Encoding: any
// Distributed under the same terms as the calendar itself.

// For translators: please use UTF-8 if possible.  We strongly believe that
// Unicode is the answer to a real internationalized world.  Also please
// include your contact information in the header, as can be seen above.

// full day names
Calendar._DN = new Array
("Sunday",
 "Monday",
 "Tuesday",
 "Wednesday",
 "Thursday",
 "Friday",
 "Saturday",
 "Sunday");

// Please note that the following array of short day names (and the same goes
// for short month names, _SMN) isn''t absolutely necessary.  We give it here
// for exemplification on how one can customize the short day names, but if
// they are simply the first N letters of the full name you can simply say:
//
//   Calendar._SDN_len = N; // short day name length
//   Calendar._SMN_len = N; // short month name length
//
// If N = 3 then this is not needed either since we assume a value of 3 if not
// present, to be compatible with translation files that were written before
// this feature.

// short day names
Calendar._SDN = new Array
("Sun",
 "Mon",
 "Tue",
 "Wed",
 "Thu",
 "Fri",
 "Sat",
 "Sun");

// First day of the week. "0" means display Sunday first, "1" means display
// Monday first, etc.
Calendar._FD = 0;

// full month names
Calendar._MN = new Array
("January",
 "February",
 "March",
 "April",
 "May",
 "June",
 "July",
 "August",
 "September",
 "October",
 "November",
 "December");

// short month names
Calendar._SMN = new Array
("Jan",
 "Feb",
 "Mar",
 "Apr",
 "May",
 "Jun",
 "Jul",
 "Aug",
 "Sep",
 "Oct",
 "Nov",
 "Dec");

// tooltips
Calendar._TT = {};
Calendar._TT["INFO"] = "About the calendar";

Calendar._TT["ABOUT"] =
"DHTML Date/Time Selector\n" +
"(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n" + // don''t translate this this ;-)
"For latest version visit: http://www.dynarch.com/projects/calendar/\n" +
"Distributed under GNU LGPL.  See http://gnu.org/licenses/lgpl.html for details." +
"\n\n" +
"Date selection:\n" +
"- Use the \xab, \xbb buttons to select year\n" +
"- Use the " + String.fromCharCode(0x2039) + ", " + String.fromCharCode(0x203a) + " buttons to select month\n" +
"- Hold mouse button on any of the above buttons for faster selection.";
Calendar._TT["ABOUT_TIME"] = "\n\n" +
"Time selection:\n" +
"- Click on any of the time parts to increase it\n" +
"- or Shift-click to decrease it\n" +
"- or click and drag for faster selection.";

Calendar._TT["PREV_YEAR"] = "Prev. year (hold for menu)";
Calendar._TT["PREV_MONTH"] = "Prev. month (hold for menu)";
Calendar._TT["GO_TODAY"] = "Go Today";
Calendar._TT["NEXT_MONTH"] = "Next month (hold for menu)";
Calendar._TT["NEXT_YEAR"] = "Next year (hold for menu)";
Calendar._TT["SEL_DATE"] = "Select date";
Calendar._TT["DRAG_TO_MOVE"] = "Drag to move";
Calendar._TT["PART_TODAY"] = " (today)";

// the following is to inform that "%s" is to be the first day of week
// %s will be replaced with the day name.
Calendar._TT["DAY_FIRST"] = "Display %s first";

// This may be locale-dependent.  It specifies the week-end days, as an array
// of comma-separated numbers.  The numbers are from 0 to 6: 0 means Sunday, 1
// means Monday, etc.
Calendar._TT["WEEKEND"] = "0,6";

Calendar._TT["CLOSE"] = "Close";
Calendar._TT["TODAY"] = "Today";
Calendar._TT["TIME_PART"] = "(Shift-)Click or drag to change value";

// date formats
Calendar._TT["DEF_DATE_FORMAT"] = "%Y-%m-%d";
Calendar._TT["TT_DATE_FORMAT"] = "%a, %b %e";

Calendar._TT["WK"] = "wk";
Calendar._TT["TIME"] = "Time:";
'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarLangJavascript
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarLangavascript"
	^self calendarLangEnglish! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarLangJsResource
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarSetupJsResource"
	^self resources at: #jsCalendarLang ifAbsentPut:
		[WebMethodResource 
			fromMethod: #calendarLangJavascript on: self 
			contentType: 'text/javascript' preferedUrl: '/jscalendar/calendar-lang.js' site: self site].! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarLangSlovenian
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarLangSlovenian"
	| text |
	text := '
/* Slovenian language file for the DHTML Calendar version 1.0 
* Author David Milost <mercy@volja.net>, January 2004.
* Corrected by Janko Mivs^ek <janko.mivsek@eranova.si>, November 2005.
* Feel free to use this script under the terms of the GNU Lesser General
* Public License, as long as you do not remove or alter this notice.
*/
// ** I18N

// For translators: please use UTF-8 if possible.  We strongly believe that
// Unicode is the answer to a real internationalized world.  Also please
// include your contact information in the header, as can be seen above.

 // full day names
Calendar._DN = new Array
("Nedelja",
 "Ponedeljek",
 "Torek",
 "Sreda",
 "C^etrtek",
 "Petek",
 "Sobota",
 "Nedelja");
 // short day names
 Calendar._SDN = new Array
("Ned",
 "Pon",
 "Tor",
 "Sre",
 "C^et",
 "Pet",
 "Sob",
 "Ned");
// First day of the week. "0" means display Sunday first, "1" means display
// Monday first, etc.
Calendar._FD = 1;

// short month names
Calendar._SMN = new Array
("Jan",
 "Feb",
 "Mar",
 "Apr",
 "Maj",
 "Jun",
 "Jul",
 "Avg",
 "Sep",
 "Okt",
 "Nov",
 "Dec");
  // full month names
Calendar._MN = new Array
("Januar",
 "Februar",
 "Marec",
 "April",
 "Maj",
 "Junij",
 "Julij",
 "Avgust",
 "September",
 "Oktober",
 "November",
 "December");

// tooltips
Calendar._TT = {};
Calendar._TT["INFO"] = "O koledarju";

Calendar._TT["ABOUT"] =
"DHTML izbira datuma in c^asa\n" +
"(c) dynarch.com 2002-2005 / Avtor: Mihai Bazon\n" + // don''t translate this this ;-)
"Zadnjo razlic^ico dobite na http://www.dynarch.com/projects/calendar/\n" +
"Licenca GNU LGPL.  Vec^ na http://gnu.org/licenses/lgpl.html." +
"\n\n" +
"Izbira datuma:\n" +
"- Za izbiro leta uporabite gumbe \xab, \xbb \n" +
"- Za izbiro meseca uporabite gumbe " + String.fromCharCode(0x2039) + ", " + String.fromCharCode(0x203a) + "\n" +
"- Zadrz^ite klik mis^ke na katerem koli od zgornjih gumbov za hitrejs^o izbiro.";
Calendar._TT["ABOUT_TIME"] = "\n\n" +
"Izbira c^asa:\n" +
"- Kliknite na katerikoli del c^asa za povec^anje\n" +
"- ali Shift-klik za zmanjs^anje\n" +
"- ali klik in povlek za hitrejs^o izbiro.";

Calendar._TT["PREV_YEAR"] = "Predhodno leto (dolg klik za meni)";
Calendar._TT["PREV_MONTH"] = "Predhodni mesec (dolg klik za meni)";
Calendar._TT["GO_TODAY"] = "Na danes";
Calendar._TT["NEXT_MONTH"] = "Naslednji mesec (dolg klik za meni)";
Calendar._TT["NEXT_YEAR"] = "Naslednje leto (dolg klik za meni)";
Calendar._TT["SEL_DATE"] = "Izberite datum";
Calendar._TT["DRAG_TO_MOVE"] = "Povlecite za premik";
Calendar._TT["PART_TODAY"] = " (danes)";

// the following is to inform that "%s" is to be the first day of week
// %s will be replaced with the day name.
Calendar._TT["DAY_FIRST"] = "Prikaz^i %s kot prvi dan";

// This may be locale-dependent.  It specifies the week-end days, as an array
// of comma-separated numbers.  The numbers are from 0 to 6: 0 means Sunday, 1
// means Monday, etc.
Calendar._TT["WEEKEND"] = "0,6";

Calendar._TT["CLOSE"] = "Zapri";
Calendar._TT["TODAY"] = "Danes";
Calendar._TT["TIME_PART"] = "(Shift-)Klikni ali povleci za spremembo vrednosti";

// date formats
Calendar._TT["DEF_DATE_FORMAT"] = "%d.%m.%Y";
Calendar._TT["TT_DATE_FORMAT"] = "%a, %e.%b";

Calendar._TT["WK"] = "ted";
Calendar._TT["TIME"] = "C^as:";
'.
 
	^AIDASite convert: text  convertToSloveneChars toCodepage: #'iso-8859-2'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarSetupJavascript
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarSetupJavascript"
	^'
/*  Copyright Mihai Bazon, 2002, 2003  |  http://dynarch.com/mishoo/
 * ---------------------------------------------------------------------------
 *
 * The DHTML Calendar
 *
 * Details and latest version at:
 * http://dynarch.com/mishoo/calendar.epl
 *
 * This script is distributed under the GNU Lesser General Public License.
 * Read the entire license text here: http://www.gnu.org/licenses/lgpl.html
 *
 * This file defines helper functions for setting up the calendar.  They are
 * intended to help non-programmers get a working calendar on their site
 * quickly.  This script should not be seen as part of the calendar.  It just
 * shows you what one can do with the calendar, while in the same time
 * providing a quick and simple method for setting it up.  If you need
 * exhaustive customization of the calendar creation process feel free to
 * modify this code to suit your needs (this is recommended and much better
 * than modifying calendar.js itself).
 */

// $Id: calendar-setup.js,v 1.25 2005/03/07 09:51:33 mishoo Exp $

/**
 *  This function "patches" an input field (or other element) to use a calendar
 *  widget for date selection.
 *
 *  The "params" is a single object that can have the following properties:
 *
 *    prop. name   | description
 *  -------------------------------------------------------------------------------------------------
 *   inputField    | the ID of an input field to store the date
 *   displayArea   | the ID of a DIV or other element to show the date
 *   button        | ID of a button or other element that will trigger the calendar
 *   eventName     | event that will trigger the calendar, without the "on" prefix (default: "click")
 *   ifFormat      | date format that will be stored in the input field
 *   daFormat      | the date format that will be used to display the date in displayArea
 *   singleClick   | (true/false) wether the calendar is in single click mode or not (default: true)
 *   firstDay      | numeric: 0 to 6.  "0" means display Sunday first, "1" means display Monday first, etc.
 *   align         | alignment (default: "Br"); if you don''t know what''s this see the calendar documentation
 *   range         | array with 2 elements.  Default: [1900, 2999] -- the range of years available
 *   weekNumbers   | (true/false) if it''s true (default) the calendar will display week numbers
 *   flat          | null or element ID; if not null the calendar will be a flat calendar having the parent with the given ID
 *   flatCallback  | function that receives a JS Date object and returns an URL to point the browser to (for flat calendar)
 *   disableFunc   | function that receives a JS Date object and should return true if that date has to be disabled in the calendar
 *   onSelect      | function that gets called when a date is selected.  You don''t _have_ to supply this (the default is generally okay)
 *   onClose       | function that gets called when the calendar is closed.  [default]
 *   onUpdate      | function that gets called after the date is updated in the input field.  Receives a reference to the calendar.
 *   date          | the date that the calendar will be initially displayed to
 *   showsTime     | default: false; if true the calendar will include a time selector
 *   timeFormat    | the time format; can be "12" or "24", default is "12"
 *   electric      | if true (default) then given fields/date areas are updated for each move; otherwise they''re updated only on close
 *   step          | configures the step of the years in drop-down boxes; default: 2
 *   position      | configures the calendar absolute position; default: null
 *   cache         | if "true" (but default: "false") it will reuse the same calendar object, where possible
 *   showOthers    | if "true" (but default: "false") it will show days from other months too
 *
 *  None of them is required, they all have default values.  However, if you
 *  pass none of "inputField", "displayArea" or "button" you''ll get a warning
 *  saying "nothing to setup".
 */
Calendar.setup = function (params) {
	function param_default(pname, def) { if (typeof params[pname] == "undefined") { params[pname] = def; } };

	param_default("inputField",     null);
	param_default("displayArea",    null);
	param_default("button",         null);
	param_default("eventName",      "click");
	param_default("ifFormat",       "%Y/%m/%d");
	param_default("daFormat",       "%Y/%m/%d");
	param_default("singleClick",    true);
	param_default("disableFunc",    null);
	param_default("dateStatusFunc", params["disableFunc"]);	// takes precedence if both are defined
	param_default("dateText",       null);
	param_default("firstDay",       null);
	param_default("align",          "Br");
	param_default("range",          [1900, 2999]);
	param_default("weekNumbers",    true);
	param_default("flat",           null);
	param_default("flatCallback",   null);
	param_default("onSelect",       null);
	param_default("onClose",        null);
	param_default("onUpdate",       null);
	param_default("date",           null);
	param_default("showsTime",      false);
	param_default("timeFormat",     "24");
	param_default("electric",       true);
	param_default("step",           2);
	param_default("position",       null);
	param_default("cache",          false);
	param_default("showOthers",     false);
	param_default("multiple",       null);

	var tmp = ["inputField", "displayArea", "button"];
	for (var i in tmp) {
		if (typeof params[tmp[i]] == "string") {
			params[tmp[i]] = document.getElementById(params[tmp[i]]);
		}
	}
	if (!!(params.flat || params.multiple || params.inputField || params.displayArea || params.button)) {
		alert("Calendar.setup:\n  Nothing to setup (no fields found).  Please check your code");
		return false;
	}

	function onSelect(cal) {
		var p = cal.params;
		var update = (cal.dateClicked || p.electric);
		if (update && p.inputField) {
			p.inputField.value = cal.date.print(p.ifFormat);
			if (typeof p.inputField.onchange == "function")
				p.inputField.onchange();
		}
		if (update && p.displayArea)
			p.displayArea.innerHTML = cal.date.print(p.daFormat);
		if (update && typeof p.onUpdate == "function")
			p.onUpdate(cal);
		if (update && p.flat) {
			if (typeof p.flatCallback == "function")
				p.flatCallback(cal);
		}
		if (update && p.singleClick && cal.dateClicked)
			cal.callCloseHandler();
	};

	if (params.flat !!= null) {
		if (typeof params.flat == "string")
			params.flat = document.getElementById(params.flat);
		if (!!params.flat) {
			alert("Calendar.setup:\n  Flat specified but can''t find parent.");
			return false;
		}
		var cal = new Calendar(params.firstDay, params.date, params.onSelect || onSelect);
		cal.showsOtherMonths = params.showOthers;
		cal.showsTime = params.showsTime;
		cal.time24 = (params.timeFormat == "24");
		cal.params = params;
		cal.weekNumbers = params.weekNumbers;
		cal.setRange(params.range[0], params.range[1]);
		cal.setDateStatusHandler(params.dateStatusFunc);
		cal.getDateText = params.dateText;
		if (params.ifFormat) {
			cal.setDateFormat(params.ifFormat);
		}
		if (params.inputField && typeof params.inputField.value == "string") {
			cal.parseDate(params.inputField.value);
		}
		cal.create(params.flat);
		cal.show();
		return false;
	}

	var triggerEl = params.button || params.displayArea || params.inputField;
	triggerEl["on" + params.eventName] = function() {
		var dateEl = params.inputField || params.displayArea;
		var dateFmt = params.inputField ? params.ifFormat : params.daFormat;
		var mustCreate = false;
		var cal = window.calendar;
		if (dateEl)
			params.date = Date.parseDate(dateEl.value || dateEl.innerHTML, dateFmt);
		if (!!(cal && params.cache)) {
			window.calendar = cal = new Calendar(params.firstDay,
							     params.date,
							     params.onSelect || onSelect,
							     params.onClose || function(cal) { cal.hide(); });
			cal.showsTime = params.showsTime;
			cal.time24 = (params.timeFormat == "24");
			cal.weekNumbers = params.weekNumbers;
			mustCreate = true;
		} else {
			if (params.date)
				cal.setDate(params.date);
			cal.hide();
		}
		if (params.multiple) {
			cal.multiple = {};
			for (var i = params.multiple.length; --i >= 0;) {
				var d = params.multiple[i];
				var ds = d.print("%Y%m%d");
				cal.multiple[ds] = d;
			}
		}
		cal.showsOtherMonths = params.showOthers;
		cal.yearStep = params.step;
		cal.setRange(params.range[0], params.range[1]);
		cal.params = params;
		cal.setDateStatusHandler(params.dateStatusFunc);
		cal.getDateText = params.dateText;
		cal.setDateFormat(dateFmt);
		if (mustCreate)
			cal.create();
		cal.refresh();
		if (!!params.position)
			cal.showAtElement(params.button || params.displayArea || params.inputField, params.align);
		else
			cal.showAt(params.position[0], params.position[1]);
		return false;
	};

	return cal;
};
'! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
calendarSetupJsResource
	"For Javascript calendar input fields , see WebDateInputField"
	"WebStyle new calendarSetupJsResource"
	^self resources at: #jsCalendarSetup ifAbsentPut:
		[WebMethodResource 
			fromMethod: #calendarSetupJavascript on: self 
			contentType: 'text/javascript' preferedUrl: '/jscalendar/calendar-setup.js' site: self site].! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/2/2008 23:19'!
changeToSqueakArraysIn: aFileoutName
	"change method images to sqeak syntax, example: #(12 34 56) to  #(12 34 56)"
	"WebStyle new changeToSqueakArraysIn: 'WebStyle.st' "
	| in out chunk fstream |
	[in := aFileoutName asFilename readStream.
	out := WriteStream on: String new.
	[in atEnd] whileFalse:
		[chunk := in upToAll: '#('. 
		out nextPutAll: chunk. in atEnd not ifTrue: [out nextPutAll: '#(' . in next: 2 ].
		chunk := in upTo: $] . 
		out nextPutAll: chunk. out nextPutAll: ')'].
	] ensure: [in close].
	aFileoutName asFilename delete.
	[fstream := aFileoutName asFilename writeStream.
	fstream nextPutAll: out contents] 
		ensure: [fstream close].
	^out contents! !

!WebStyle methodsFor: 'styles-screen'!
css52Jtalk
	"for Jtalk http://jtalk-project.org, see http://www.aidaweb.si/jtalk"
	^'
body.jtalkBody {
    margin-bottom: 320px;
}

#jtalkTabs {
    position: fixed;
    font-family: helvetica,arial,sans;
    font-size: 12px;
    line-height: 1;
    background: white;
    z-index: 1001;
    bottom: 0;
    left: 0;
    right: 0;
    margin: 0;
    padding: 0 0 3px 0;
    height: 20px;
    background: white;
}
#jtalkTabs li {
    list-style-type: none;
    display: inline;
    background: #c8c8c8;
    font-weight: bold;
    color: #414141;
    padding: 4px;
    border: 1px solid #acacac;
    cursor: pointer;
    line-height: 14px;
    margin: 0;
}

#jtalkTabs li.selected {
    background: #dbdbdb;
    border-top: 0 none;
    padding: 5px 4px;
    color: #222;
}

#jtalkTabs li span.close {
    margin-left: 10px;
}

#jtalkTabs li.closeAll {
    -moz-border-radius: 10px;
    -webkit-border-radius: 10px;
    border-radius: 10px;
    background: #ef3b3b;
    color: #e3e3e3;
    font-weight: bold;
    border: 1px solid #ac1616;
    margin: 4px;
    padding: 2px 6px;
    font-size: 10px;
}

#jtalkTabs li.closeAll:hover {		
    background: #e72a2a;
}

#jtalk {
       position: fixed;
       bottom: 27px;
       left: 0;
       right: 0;
       height: 300px;
       z-index: 1000;
}

#jtalk .ui-resizable-handle {
    background-color: #a8a8a8;
    top: 0;
    cursor: row-resize;
    height: 4px;
    left: 0;
    position: absolute;
    right: 0;
    width: auto !!important;
}

.jtalkTool {
    width: 98%;
    background: #dbdbdb;
    border-style: solid;
    border-width: 1px;
    border-color: #a8a8a8;
    color: @dark;
    font-family: Arial, Helvetica, sans;
    font-size: 12px;
    line-height: 1.5em;
    padding: 15px 1%;
    position: absolute;
    bottom: 0;
    left: 0;
    top: 4px;
    z-index: 1000;
}

.jtalkTool .jt_box {
    width: 98%;
    margin: 0;
    position: absolute;
    top: 15px;
    bottom: 45px;
}

.jtalkTool .jt_buttons {
    position: absolute;
    bottom: 15px;    
}

.jtalkTool .important {
    font-weight: bold;
}

.jtalkTool li {
    margin: 0;
    padding: 0;
}
    
.jtalkTool .jt_buttons button,
.jtalkTool .jt_buttons select {
    font-size: 12px;
}

.jtalkTool textarea {
    border: 1px solid;
    border-color: #a8a8a8;
    font-family: Arial, Helvetica, sans;
    line-height: 1.2em;
    font-size: 13px;
    position: relative;
    padding: 0;
}

.jtalkTool .jt_clear {	 
    clear: both;
}

.jtalkTool .jt_transcript,
.jtalkTool .jt_workspace {
    width: 100%;
    height: 100%;
}

.jtalkTool .jt_commit {
    position: absolute;
    top: 110px;
    left: 0;
    font-size: 12px;
}

.jtalkTool .jt_column {
    width: 24%;
    padding: 0;
    margin: 0;
    float: left;
    border: 1px solid;
    border-color: #a8a8a8;
    height: 130px;
    overflow-y: scroll;
    background: white;
    position: absolute;
    top: 0;
}

.jtalkTool .jt_column.value {
    left: 25.2%;
    width: 74.8%;
}

.jtalkTool .jt_column.categories {
    left: 0%;
    height: 105px;
}

.jtalkTool .jt_column.classes {
    height: 105px;
    left: 25.2%
}

.jtalkTool .jt_column.protocols {
    left: 50.4%
}

.jtalkTool .jt_column.methods {
    left: 75.6%
}

.jtalkTool .jt_column li {
    list-style-type: none;
    padding-left: 5px;
    cursor: pointer;
}

.jtalkTool .jt_column li.selected {
	background: #e3e3e3;
	color: #222;
}

.jtalkTool .jt_column li:hover {
    background: #08c;
    color: white;
}

.jtalkTool .jt_tabs {
    top: 106px;
    position: absolute;
    left: 25.2%;
    padding: 0;
    margin: 0;
}

.jtalkTool .jt_tabs li {
    color: #8c8c8c;
    cursor: pointer;
    list-style-type: none;
    float: left;
    padding: 2px 4px;
    margin-right: 2px;
    background: #ccc;
    border: 1px solid #a8a8a8;
    -moz-border-radius-bottomleft: 8px;
    -moz-border-radius-bottomright: 8px;
    -webkit-border-bottom-left-radius: 8px;
    -webkit-border-bottom-right-radius: 8px;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
    height: 20px;
    line-height: 18px;
}

.jtalkTool .jt_tabs li:hover {
    background: #08c;
    color: white;
    border-color: #08c;
}

.jtalkTool .jt_tabs li.selected,
.jtalkTool .jt_tabs li.selected:hover {
    background: white;
    border: 1px solid #b3b3b3;
    border-top: 1px solid white;
    color: #222;
}


.jtalkTool .jt_sourceCode {
    position: absolute;
    top: 145px;
    bottom: 0;
    left: 0;
    right: 0;
}

.jtalkTool .jt_sourceCode textarea.source {
    width: 100%;
    height: 100%;
}

/***** IDE - ReferencesBrowser ******/

.jtalkTool .jt_box .implementors {
	width: 100%
}

.jtalkTool .jt_box .jt_column.implementors,
.jtalkTool .jt_box .jt_column.senders,
.jtalkTool .jt_box .jt_column.referenced_classes {
	top: 30px;
	height: 100%;
	bottom: 0px;
	width: 33%;
}

.jtalkTool .jt_box .jt_column.senders {
	left: 33.6%
}

.jtalkTool .jt_box .jt_column.referenced_classes {
        left: 67.3%
}

.jtalkTool .jt_box .jt_column.implementors .column_label, 
.jtalkTool .jt_box .jt_column.senders .column_label,
.jtalkTool .jt_box .jt_column.referenced_classes .column_label {
	background: #dbdbdb
}

.jtalkTool .jt_box .jt_column.implementors .column_label:hover,
.jtalkTool .jt_box .jt_column.senders .column_label:hover,
.jtalkTool .jt_box .jt_column.referenced_classes .column_label:hover {
	font-weight: bold;
	color: #000;
	cursor: default
}
'! !

!WebStyle methodsFor: 'scripts-components'!
ensureJsAndCssForCalendarInHeader
	| page url headerValue |
	self ensureJsResourceForCalendarSetup.
	page := self app context page.
	url := '/jscalendar/calendar.js'.
	headerValue := ' src="', url, '" language="JavaScript" type="text/javascript"'.
	(page headers contains: [:each | each key = 'script' and: [each value = headerValue] ]) ifFalse: 
		[page addLinkToScreenStyleSheet: '/jscalendar/calendar.css'.
		page addHeader: 'script' value: headerValue.
		page addLinkToJavascript: '/jscalendar/calendar-lang.js'.
		page addLinkToJavascript: '/jscalendar/calendar-setup.js'.
		].! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
ensureJsResourceForCalendarSetup
	self site urlResolver halfUrlFor: self calendarJsResource.
	self site urlResolver halfUrlFor: self calendarSetupJsResource. 
	self site urlResolver halfUrlFor: self calendarLangJsResource.
	self site urlResolver halfUrlFor: self calendarCSSResource.! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
fontSizeText
	^'font size:'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
galleryNextText
	^'Next'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
galleryPrevText
	^'Previous'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
guestUserText
	^'Guest'! !

!WebStyle methodsFor: 'layout'!
headerElement
	^WebElement new "subclasses should be more detailed"! !

!WebStyle methodsFor: 'texts'!
helpText
	^'Help'! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/2/2008 23:19'!
importImage: aName from: aFilenameString
	"reads an image, converts it to a method named aName and make that method in 
       method protocol 'imgs'"
	"WebStyle new importImage: 'infoGif' from: 'imgs/info.gif' "
	| fname method |
	fname := (SpFilename named: aFilenameString).
	method := fname contentsAsMethod.
	method := aName, (String with: Character cr), method.
	self class compile: method classified: 'imgs'! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 4/3/2008 05:00'!
importImageFrom: aFilenameString
	"reads an image, converts it to a method and make that method in method protocol 'imgs'"
	"name of a method is composed from a name of a file: arrow.gif = arrowGif"
	"WebStyle new importImageFrom: 'imgs/info.gif' "
	| iname |
	iname := self adjustImageName: (SpFilename named: aFilenameString) tail. 
	self importImage: iname from: aFilenameString! !

!WebStyle methodsFor: 'maintenance' stamp: 'np 6/11/2008 05:11'!
importImagesFromDirectory: aDirectoryString
	"reads alss image, converts them to methods and put them in protocol 'imgs'"
	"name of a method is composed from a name of a file: arrow.gif = arrowGif"
	"WebStyle new importImagesFromDirectory: 'imgs/crystalsvg/64' "
	| fnames fname |
	fnames := (SpFilename named: aDirectoryString) directoryContents.
	fnames do: [:each |
		fname := aDirectoryString, (SpFilename named: aDirectoryString) separator asString, each.
		(SpFilename named: fname) isDirectory ifFalse: [self importImageFrom: fname] ]! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
inPlaceCancelText
	^'Cancel'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
inPlaceOkText
	^'Ok'! !

!WebStyle methodsFor: 'private' stamp: 'np 4/2/2008 23:24'!
initResources
	resources := Dictionary new! !

!WebStyle methodsFor: 'testing' stamp: 'np 4/2/2008 23:24'!
isBrowserMSIE
	^self session isFromMSIE! !

!WebStyle methodsFor: 'testing' stamp: 'np 4/2/2008 23:24'!
isBrowserNetscape
	^self session isFromNetscape! !

!WebStyle methodsFor: 'testing'!
isWebStyle
	^true! !

!WebStyle methodsFor: 'private-javascript'!
javascript
	"concatenate all js* methods together, sorted my method name alphabeticaly!! "
	"WebStyle new javascript"
	| stream |
	stream := WriteStream on: String new. 
	self allJavascriptMethods do: [:method | 
		stream nextPut: Character cr;   nextPut: Character lf.
		stream nextPutAll: ('/* ', (self class classNameFor: method), ' ', method asString, ' */'). 
		stream nextPut: Character cr;  nextPut: Character lf.
		stream nextPutAll: (self perform: method)].
		stream nextPut: Character cr;  nextPut: Character lf.
	^stream contents! !

!WebStyle methodsFor: 'private-javascript' stamp: 'np 4/2/2008 23:31'!
javascriptResource
	" /scripts.js , returns all js* methods (alphabetically sorted) concatenated "
	"WebStyle new javascriptResource"
	^self resources at: #javascript ifAbsentPut:
		[WebMethodResource 
			fromMethod: #javascript on: self 
			contentType: 'text/javascript' preferedUrl: '/scripts.js' site: self site].! !

!WebStyle methodsFor: 'scripts'!
js11Common
	"common javaScript methods"
	^'
function nic() {};
'! !

!WebStyle methodsFor: 'scripts'!
js12Commands
	"Sending and receiving JSON commands"
	^'
function aidaExtractScripts(html) {
// based on PrototypeJs
    var ScriptFragment = "<script[^>]*>([\\S\\s]*?)<\/script>";
    var matchAll = new RegExp(ScriptFragment, "img");
    var matchOne = new RegExp(ScriptFragment, "im");
    return (html.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
}
function aidaEvalScripts(html) {
    return aidaExtractScripts(html).map(function(script) { return eval(script) });
}
function aidaUpdate (id, content) {
	if (document.getElementById(id)) {
		document.getElementById(id).innerHTML = content;
		aidaEvalScripts(content);
	}
}
function aidaLoad (url) {
	window.location = url;
}
function aidaExecute(cmd) {
	switch (cmd.command) {
		case "update": 
			aidaUpdate(cmd.id, cmd.value);
			break;
		case "load": 
			aidaLoad(cmd.value);
			break;
	}
}

'! !

!WebStyle methodsFor: 'scripts'!
js13Events
	"sending events (like onClick) via Ajax or WebSocket channel"
	^'
function aidaEvent(event, elementId, context, value) {
	var msg = {"event": event, "id": elementId, 
		"pageUrl": window.location.href, "context": context, "value": value};
	if (aidaWebSocket) {
		aidaWebSocket.send(JSON.stringify(msg));
		return;
	}
	xhr = new XMLHttpRequest;
	xhr.onreadystatechange = function() {
		if (xhr.readyState == 4) {
			var cmds = JSON.parse(xhr.responseText);
			for (var i=0; i < cmds.length; i++) {
				aidaExecute(cmds[i]);
			}
		}
	};
	xhr.open("post", "/aidasession/ajax", true); 
	xhr.send(JSON.stringify(msg));
};
// event send delayed since the last occurence of that event
function aidaDelayedEvent(event, elementId, context, value, delay) {
	var e = document.getElementById(elementId);
	if (e.timeoutId) { clearTimeout(e.timeoutId); };
	e.timeoutId = setTimeout(function() {aidaEvent(event, elementId, context, value)}, delay);
};
function aidaJsonReport() {   // report that JSON support exists in user browser
	if (window.JSON) {
		aidaEvent("jsonExists", document.getElementsByTagName("body")[0].id, null, null);
	}
};
function aidaUnloadReport() {   // report as event the page close, going to another page,...
	aidaEvent("unload", document.getElementsByTagName("body")[0].id, null, null);
};
function aidaNewTabReport() {   // if new tab or window opened
	if (window.sessionStorage) {
		if ( !!window.sessionStorage.aidaTabRecognised) {
			aidaEvent("newtab", null, null, null);
			window.sessionStorage.aidaTabRecognised = true;
		}
	}
};

function blockEnter(event) // prevent Enter key to submit a form
{
   if(event && event.keyCode == 13)
   {
      return false;
   }
};

'! !

!WebStyle methodsFor: 'scripts' stamp: 'janko 7/13/2011 17:37'!
js141WebSocket
	"WebSocket realtime support - opening it, receiving messages etc."

	^'
var aidaWebSocket;    // global variable

function aidaProcessRealtimeMsg (event) {  // also for Comet
//	console.log(event.data);
	var cmds = JSON.parse(event.data);
	for (var i=0; i < cmds.length; i++) {
		aidaExecute(cmds[i]);
	}
}
function aidaOpenWebSocket() {   // call it at first page load
	if (window.WebSocket) {
		url = "ws://" + window.location.host + "/aidasession/websocket?pageurl=";
		url = url + window.location.pathname + window.location.search;
	    	aidaWebSocket = new WebSocket(url);
		aidaWebSocket.onmessage = aidaProcessRealtimeMsg;
		aidaWebSocket.onclose = function(event) {
			console.log("WebSocket closed, reopening..."); 
			setTimeout(function() {aidaOpenWebSocket()}, 1000);  // reopen with delay
		};
		console.log("WebSocket open");
	} else { 
		console.log("WebSocket not supported"); 
	}
};
'! !

!WebStyle methodsFor: 'scripts'!
js142Comet
	"Comet support - if WebSocket not supported then long-polling Ajax is used for realtime"
	^'
function aidaOpenComet() {  
	console.log("comet?");
	if (!!window.WebSocket) {  // otherwise WebSocket should already be open
		console.log("comet open");
		xhrc = new XMLHttpRequest;
		xhrc.onreadystatechange = function() {
			if (xhrc.readyState == 4) {
				var cmds = JSON.parse(xhr.responseText);
				for (var i=0; i < cmds.length; i++) {
					aidaExecute(cmds[i]);
				};
			};
			aidaOpenComet(); // immediatelly open again. Recursivelly, is this ok?
		};
		xhrc.open("get", 
			"/aidasession/comet?pageurl=" + window.location.pathname + window.location.search, true); 
		xhrc.send(null);  
	};
};
'! !

!WebStyle methodsFor: 'scripts'!
js15Forms
	"serialization of form data"
	^'
function aidaSerializeForm(formId) {
	elements = document.getElementById(formId).getElementsByTagName("*");
	result = "";
	for (var i=0; i < elements.length; i++) {
		var e = elements[i];
		if (!!e.disabled && e.name && e.name.length > 0) {
			switch (e.tagName.toLowerCase()) {
				case "input":
					switch (e.type) {
						case "checkbox":
						case "radio":
							if (e.checked) {
								if (result.length > 0) { 	result += "&"; };
								result += e.name + "=" + encodeURIComponent(e.value);
							};
							break;
						case "hidden":
						case "password":
						case "text":
							if (result.length > 0 ) { result += "&"; };
							result += e.name + "=" + encodeURIComponent(e.value);
							break;
					}
					break;
					case "select":
						case "textarea":
							if (result.length > 0 ) { result += "&"; };
							result += e.name + "=" + encodeURIComponent(e.value);
							break;
			} 
		}
	}
    return result;
};
'! !

!WebStyle methodsFor: 'scripts'!
js16Geolocation
	"reporting location of browser. Every hour or after every location change"
	^'
function aidaLocationReport() {
	if(navigator.geolocation) {
		navigator.geolocation.watchPosition(aidaUpdateLocation, aidaHandleLocationError, {maximumAge:5000} );
	}
};
function aidaUpdateLocation(position) {
	xhr = new XMLHttpRequest;
	xhr.open("post", "/aidasession/geolocation", true); 
	xhr.send(JSON.stringify(position));
};
function aidaHandleLocationError(error) {
};
'! !

!WebStyle methodsFor: 'scripts'!
js20Lightbox
	^ '
function updateLightboxLevel(level) {
    var o = document.getElementById("overlay"+level);
    o.style.display = "inline";
    var e = document.getElementById("lightbox"+level);
    e.style.position = "absolute";
    e.style.display = "inline";
    e.style.width = "auto"; e.style.height = "auto";
    var width = e.offsetWidth; var height = e.offsetHeight;
    var pageWidth = window.innerWidth;  var pageHeight = window.innerHeight;
    if (typeof pageWidth !!= "number"){   // for IE
        pageWidth = document.documentElement.clientWidth;
        pageHeight = document.documentElement.clientHeight;
    };
    var x = (pageWidth - width) / 2;
    var y = ((pageHeight - height) / 2);
    x = x < 0 ? 0 : x; y = y < 0 ? 0 : y;
    e.style.left =  x + "px"; e.style.top = y + "px";
};
'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
loginBelowMessage
	^''! !

!WebStyle methodsFor: 'texts' stamp: 'janko 9/12/2011 14:54'!
loginErrorText
	^#en->'<b style={color:red}>Login failed!! Please check your entry and try again!!</b>'! !

!WebStyle methodsFor: 'texts' stamp: 'janko 9/12/2011 14:54'!
loginErrorTextSecondary
	"for WebAdminApp viewLoginSecondary, Override this for your needs"
	^#en->'Secondary error'! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
loginText
	^'Login'! !

!WebStyle methodsFor: 'texts' stamp: 'janko 9/12/2011 14:51'!
loginTitle
	^#en->'Aida/Web Login'! !

!WebStyle methodsFor: 'texts' stamp: 'janko 9/12/2011 14:52'!
loginWelcomeMessage
	^#en->'<h1>Welcome to Aida/Web Smalltalk Web Application Server!!</h1>
      <br><br>
      Please login to enter a site: '! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
logoutText
	^'Logout'! !

!WebStyle methodsFor: 'private-css'!
mobileCssResource
	" /mobile.css , returns all cssMobile* methods (alphabetically sorted) concatenated "
	"WebStyle new mobileCssResource"
	^self resources at: #cssMobile ifAbsentPut:
		[WebMethodResource 
			fromMethod: #mobileStyleSheet on: self 
			contentType: 'text/css' preferedUrl: '/mobile.css' site: self site].! !

!WebStyle methodsFor: 'private-css'!
mobileStyleSheet
	"concatenate all cssMobile* methods together, sorted my method name alphabeticaly!! "
	"WebStyle new mobileStyleSheet"
	| stream content |
	stream := WriteStream on: String new.
	self allCssMobileMethods do: [:method | 
		content := self perform: method.
		content notEmpty ifTrue: 
			[stream nextPut: Character cr.
			stream nextPutAll: ('/*', (self class classNameFor: method), ' ', method asString, '*/').
			stream nextPut: Character cr.
			stream nextPutAll: content] ].
	^stream contents! !

!WebStyle methodsFor: 'layout'!
navigationBarElement
	^WebElement new "subclasses should be more specific"! !

!WebStyle methodsFor: 'accessing' stamp: 'np 4/2/2008 23:19'!
observee

	^self app observee! !

!WebStyle methodsFor: 'defaults'!
pageContentWidth
	^660! !

!WebStyle methodsFor: 'layout' stamp: 'janko 8/6/2011 21:57'!
pageFrameWith: aWebElement title: aTitleString
	"set a web page with standard  page look (navigation bar, header) "
	^self pageFrameWith: aWebElement wide: WebElement new title: aTitleString! !

!WebStyle methodsFor: 'layout' stamp: 'janko 8/6/2011 21:56'!
pageFrameWith: aWebElement wide: aWideElement title: aTitleString
	"set a web page with standard  page look (navigation bar, header) "
	"Wide element comes below content besides navigation and it have full page width"
	| e |
	self app title: aTitleString.
	e := WebElement new
		add: self headerElement; 	
		add: (WebElement new add: self navigationBarElement; add: aWebElement;  yourself); 
		add: (WebElement new add: aWideElement; yourself);
		yourself.
	^self app add: e; yourself! !

!WebStyle methodsFor: 'defaults'!
pageWidth
	^800! !

!WebStyle methodsFor: 'private-css' stamp: 'np 4/2/2008 23:32'!
printCssResource
	" /print.css , returns all cssPrint* methods (alphabetically sorted) concatenated "
	"WebStyle new printCssResource"
	^self resources at: #cssPrint ifAbsentPut:
		[WebMethodResource 
			fromMethod: #printStyleSheet on: self 
			contentType: 'text/css' preferedUrl: '/print.css' site: self site].! !

!WebStyle methodsFor: 'private-css'!
printStyleSheet
	"concatenate all cssPrint* methods together, sorted my method name alphabeticaly!! "
	"WebStyle new printStyleSheet"
	| stream content |
	stream := WriteStream on: String new.
	self allCssPrintMethods do: [:method | 
		content := self perform: method.
		content notEmpty ifTrue: 
			[stream nextPut: Character cr.
			stream nextPutAll: ('/*', (self class classNameFor: method), ' ', method asString, '*/').
			stream nextPut: Character cr.
			stream nextPutAll: content] ].
	^stream contents! !

!WebStyle methodsFor: 'texts'!
profileIntroMessage
	"used in user profile to direct them further"
	^''! !

!WebStyle methodsFor: 'texts'!
profileText
	^'Profile'! !

!WebStyle methodsFor: 'texts'!
registerText
	^'Register'! !

!WebStyle methodsFor: 'texts'!
registrationActivatedMessage
	^'Activation sucessfull!! Proceed to editing your user profile'! !

!WebStyle methodsFor: 'texts'!
registrationActivationRequestMessage
	^'An email with confirmation request was sent to your email. Please click 
		on the link in email to activate your account'! !

!WebStyle methodsFor: 'texts'!
registrationIntroductionMessage
	^''! !

!WebStyle methodsFor: 'private'!
resourceFor: aRequest
	"request come here from a router to find an appropriate resource"
	| reqUrl |
	reqUrl := aRequest urlString.
	^self resources values 
		detect: [:resource | resource preferredUrl = reqUrl ]
		ifNone: [nil]! !

!WebStyle methodsFor: 'private'!
resources
	"a dictionary of method resources, name symbol as key, a resource as value"
	resources isNil ifTrue: [self initResources].
	^resources! !

!WebStyle methodsFor: 'scripts-components' stamp: 'np 4/2/2008 23:30'!
richEditorCssResource
	" for JavaScript rich text editor, see WebRichEditor"
	"WebStyle new richEditorCssResource"
	^self resources at: #cssRichEditor ifAbsentPut:
		[WebMethodResource 
			fromMethod: #richEditorStyleSheet on: self 
			contentType: 'text/css' preferedUrl: '/rich-editor.css' site: self site].! !

!WebStyle methodsFor: 'defaults'!
richEditorLanguage
	^'en'! !

!WebStyle methodsFor: 'scripts-components'!
richEditorStyleSheet
	" for  text area in JavaScript rich text editor, see WebRichEditor"
	"WebStyle new richEditorStyleSheet"
	| stream |
	stream := WriteStream on: String new.
	stream nextPutAll: '
body {
	font-family: verdana, sans-serif;
	font-color: #666;
	font-size: 90%;
	background-color: #FFFFFF
	};
.mceVisualAid {
	border: 1px dashed #BBBBBB;
	}
'.
	#(css21Text css22Links) do: [:method | 
		stream nextPut: Character cr.
		stream nextPutAll: ('/*', self class name, ' ', method asString, '*/').
		stream nextPut: Character cr.
		stream nextPutAll: (self perform: method)].

	stream nextPutAll: '
h1 { font-size: 130%}
h2 { font-size: 120%}
h3 { font-size: 110%}
h4 { font-size: 100%}
h5 { font-size: 90%}
'.
	^stream contents! !

!WebStyle methodsFor: 'private-css' stamp: 'np 4/2/2008 23:32'!
screenCssResource
	" /screen.css , returns all css* methods (alphabetically sorted) concatenated "
	"WebStyle new screenCssResource"
	^self resources at: #cssScreen ifAbsentPut:
		[WebMethodResource 
			fromMethod: #screenStyleSheet on: self 
			contentType: 'text/css' preferedUrl: '/screen.css' site: self site].! !

!WebStyle methodsFor: 'private-css' stamp: 'janko 8/15/2011 11:59'!
screenStyleSheet
	"concatenate all css* methods together, sorted my method name alphabeticaly!! "
	"WebStyle new screenStyleSheet"
	| stream content |
	stream := WriteStream on: String new.
	self allCssScreenMethods do: [:method | 
		content := self perform: method.
		content notEmpty ifTrue: 
			[stream nextPut: Character cr.
			stream nextPutAll: ('/*', (self class classNameFor: method), ' ', method asString, '*/').
			stream nextPut: Character cr.
			stream nextPutAll: content] ].
	stream nextPutAll: self style. . "add any custom styling information, added in instvar #style"
	^stream contents! !

!WebStyle methodsFor: 'accessing' stamp: 'np 4/2/2008 23:19'!
session
	"try to find a first sender up in calling stack, who is AIDASite and find a session in 
	its local variable stack"

	^self firstSessionFromStack
! !

!WebStyle methodsFor: 'texts' stamp: 'np 4/2/2008 23:32'!
sessionTimeoutText
	^'Session timed-out after 15min of inactivity!! '! !

!WebStyle methodsFor: 'accessing' stamp: 'np 4/2/2008 23:19'!
site
	^site! !

!WebStyle methodsFor: 'private' stamp: 'np 4/2/2008 23:24'!
site: anAIDASite
	site := anAIDASite! !

!WebStyle methodsFor: 'texts'!
statsIntroduction
	"in WebStatisticsApp"
	^''! !

!WebStyle methodsFor: 'accessing' stamp: 'np 9/26/2008 10:49'!
style
	"the result of this method will be added at the end of static css methods.
	See WebStyle>>screenStyleSheet"
	style isNil ifTrue: [style := ''].
	^style! !

!WebStyle methodsFor: 'accessing' stamp: 'np 9/26/2008 10:48'!
style: aString
	style := aString! !

!WebStyle class methodsFor: 'accessing'!
classNameFor: aMethodSymbol
	"name of a class in a superclass chain which first implement that method"
	(self selectors includes: aMethodSymbol) ifTrue: [^self name asString].
	^self superclass classNameFor: aMethodSymbol! !

!WebStyle class methodsFor: 'accessing' stamp: 'np 4/2/2008 23:34'!
default
	^AIDASite default style! !

!WebStyle class methodsFor: 'instance creation' stamp: 'np 4/2/2008 23:34'!
newOnSite: anAIDASite

	^super new site: anAIDASite! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
bgColor: aColorSymbol
	self attributesAt: #bgcolor put: (self colorValue: aColorSymbol)! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
border: aNumber
	"set the width of table border. default is 0"
	self attributesAt: #border put: aNumber printString.! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
cellPadding: aNumber
	"define spacing between vertically adjacent cells"
	self attributesAt: #cellpadding put: aNumber printString.! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
cellSpacing: aNumber
	"define spacing between adjacent cells horizontally"
	self attributesAt: #cellspacing put: aNumber printString.! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
color: aColorSymbol
	self	bgColor: aColorSymbol! !

!WebTable methodsFor: 'private'!
hasTag
	^super hasTag! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
height: aNumber
	| text |
	text := aNumber <= 1 
			ifTrue: [(aNumber * 100) asInteger printString, '%']
			ifFalse: [aNumber asInteger printString].
	self attributesAt: #height put: text! !

!WebTable methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	"self border: 0."! !

!WebTable methodsFor: 'private'!
shouldIdent
	^true! !

!WebTable methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<table'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>', self eol.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: self ident, '</table>', self eol.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebTable methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
width: aNumber
	"set the width of entire table If nil, then table automaticaly addjust itself. 
	If number is between 0 and 1 then width is percent of document width.
	If number above 1 then width in pixels"
	| text |
	text := aNumber <= 1 
			ifTrue: [(aNumber * 100) asInteger printString, '%']
			ifFalse: [aNumber asInteger printString].
	self attributesAt: #width put: text! !

!WebTable class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebTableCell methodsFor: 'attributes'!
align: aSymbol
	"set a horizontal aligment if cell content. It can be #left, #center #right or #justify"
	(#(left center right justify) includes: aSymbol) ifFalse: [self error: 'wrong align symbol'].
	self attributesAt: #align put: aSymbol asString.! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
background: aWebImage
	"bachground image"
	self attributesAt: #background put:
		(((aWebImage isKindOf: WebImage) ifTrue: [aWebImage] ifFalse: [WebImage image: aWebImage]) 
			urlOnSession: self session)! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
bgColor: aColorSymbol
	"set the color of table cell background. It can be in hex format (for example #00FF00) 
	or name of color (for example #White)"
	self attributesAt: #bgcolor put: (self colorValue: aColorSymbol)! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
color: aColorSymbol
	self	bgColor: aColorSymbol! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
colspan: aNumber
	"set the number of columns this cell will span"
	self attributesAt: #colspan put: aNumber printString.! !

!WebTableCell methodsFor: 'testing'!
hasTag
	^super hasTag! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
height: aNumber
	| text |
	text := aNumber <= 1 
			ifTrue: [(aNumber * 100) asInteger printString, '%']
			ifFalse: [aNumber asInteger printString].
	self attributesAt: #height put: text! !

!WebTableCell methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize! !

!WebTableCell methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isTableHeader
	^false! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
nowrap: aBoolean
	"if true then text is not wrapped in new lines of a cell but a cell is expanded to carry all the text"
	self attributesAt: #nowrap put: aBoolean.! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
rowspan: aNumber
	"set the number of rows this cell will span"
	self attributesAt: #rowspan put: aNumber printString.! !

!WebTableCell methodsFor: 'attributes' stamp: 'JM 4/26/2007 19:34'!
setHeader
"	self changeClassTo: WebTableHeader"
	self become: (self as: WebTableHeader)! !

!WebTableCell methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebTableCell methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident, '<td'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: self ident, '</td>', self eol.! !

!WebTableCell methodsFor: 'attributes'!
valign: aSymbol
	"set a verttical aligment if cell content. It can be #top, #middle, #bottom or #baseline"
	(#(top middle bottom baseline) includes: aSymbol) ifFalse: [self error: 'wrong valign symbol'].
	self attributesAt: #valign put: aSymbol asString.! !

!WebTableCell methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
width: aNumber
	"set the width of a cell. If nil, then cell automaticaly addjust itself. 
	If number is between 0 and 1 then width is percent of table width. 
	If number above 1 then width in pixels"
	| text |
	text := aNumber <= 1 
			ifTrue: [(aNumber * 100) asInteger printString, '%']
			ifFalse: [aNumber asInteger printString].
	self attributesAt: #width put: text! !

!WebTableCell class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebTableHeader methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isTableHeader
	^true! !

!WebTableHeader methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident, '<th'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	elements notNil ifTrue: [elements do: [:element | 
		element notNil ifTrue: 
			[element streamHtmlTo: aStream for: aRequest on: aSession] ] ].
	aStream nextPutAll: self ident, '</th>', self eol.! !

!WebTableRow methodsFor: 'attributes'!
align: aSymbol
	"set a horizontal aligment for all cells in this row. It can be #left, #center or #right"
	(#(left center right) includes: aSymbol) ifFalse: [self error: 'wrong align symbol'].
	self attributesAt: #align put: aSymbol asString.! !

!WebTableRow methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
bgColor: aColorSymbol
	"set the color of table row background. It can be in hex format (for example #00FF00) 
	or name of color (for example #White)"
	self attributesAt: #bgcolor put: (self colorValue: aColorSymbol)! !

!WebTableRow methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
color: aColorSymbol
	self	bgColor: aColorSymbol! !

!WebTableRow methodsFor: 'private'!
hasTag
	^super hasTag! !

!WebTableRow methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
height: aNumber
	| text |
	text := aNumber <= 1 
			ifTrue: [(aNumber * 100) asInteger printString, '%']
			ifFalse: [aNumber asInteger printString].
	self attributesAt: #height put: text! !

!WebTableRow methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize! !

!WebTableRow methodsFor: 'private'!
shouldIdent
	^true! !

!WebTableRow methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident, '<tr'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>', self eol.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	aStream nextPutAll: self ident, '</tr>', self eol.! !

!WebTableRow methodsFor: 'attributes'!
valign: aSymbol
	"set a vertical aligment for all cells in this row. It can be #top, #middle, #bottom or #baseline"
	(#(top middle bottom baseline) includes: aSymbol) ifFalse: [self error: 'wrong valign symbol'].
	self attributesAt: #valign put: aSymbol asString.! !

!WebTableRow class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
defaultClass
	"default CSS class for tabs, see WebStyle cssTabs1 for more info"
	^#tabs1! !

!WebTabs methodsFor: 'initialize-release'!
initialize
	super initialize.
	self unordered.
	self class: self defaultClass.
	self selected: 1! !

!WebTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selected
	^selected! !

!WebTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selected: aNumber
	"whivh tab is selected, that is in front"
	selected := aNumber! !

!WebTabs methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
selectedClass
	"CSS class for selected tab, auto coposed!! "
	^(self attributesAt: #class), 'selected'! !

!WebTabs methodsFor: 'private-streaming'!
streamHtmlTo: aStream for: aRequest on: aSession
	(self selected notNil and: [self selected <= self elements size]) ifTrue:
		[(self elements at: self selected) class: self selectedClass].
	super streamHtmlTo: aStream for: aRequest on: aSession.! !

!WebTabs class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebText methodsFor: 'accessing' stamp: 'janko 9/30/2011 12:21'!
addText: aStringOrAssociation
	"make a new element with aString. Attributes are same as previous text." 

	self add: (WebText text: aStringOrAssociation attributes: self attributes)! !

!WebText methodsFor: 'accessing' stamp: 'janko 9/30/2011 12:21'!
addText: aStringOrAssociation attributes: anArray
	"make a new element with aString. Attributes are same as previous text." 

	self add: (WebText text: aStringOrAssociation attributes: anArray)! !

!WebText methodsFor: 'accessing'!
asString
	^self text! !

!WebText methodsFor: 'private'!
basicText: aString
	text := aString! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
color: aString
	self style: '{color: ', aString asString, '}'.! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
font
	^font! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
font: aString
	font := aString! !

!WebText methodsFor: 'private'!
hasTag
	^false  "well, ...."! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
header
	^header! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
header: aNumber
	
	"Assigns this WebText as a header text. Parameter can be 1 .. 5. If this parameter is nil then WebText is not a header"

	aNumber < 1 
		ifTrue: [header:= 1.   ]
		ifFalse:
			[aNumber > 5 ifTrue: [header := 5.] ifFalse: [header := aNumber.]].
	^self! !

!WebText methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	text := ''.   
	paragraph := false.! !

!WebText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
insideSpanTag
	"to enclose or not in span tag. Only if element have any attribute!!"
	^self attributes notNil and: [self isLink not]! !

!WebText methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isLink
	^false! !

!WebText methodsFor: 'testing'!
isMultilingual
	^self text aidaIsAssociation! !

!WebText methodsFor: 'private' stamp: ' 21/8/07 09:38'!
onChangePost
	"just if addAspect:for:editing: false returns text instead of input field!!"! !

!WebText methodsFor: 'private' stamp: ' 21/8/07 09:38'!
onChangePostAndUpdate: e
	"just if addAspect:for:editing: false returns text instead of input field!!"! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
paragraph
	^paragraph! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
paragraph: aBoolean
	
	"call this method if you want this text in a new paragraph"

	paragraph := aBoolean.! !

!WebText methodsFor: 'translation'!
prepareForTranslation
	"if multilingual text, replace it with in-place input field"
	| translDict replacement session |
	self isMultilingual ifFalse: [^nil].
	session := self app session.
	translDict := session site translator 
		dictToTranslate: self text to: session languageBasic for: self  on: session. "it will create one if not exists yet"
	replacement := WebInPlaceEditableText 
		aspect: self text value for: translDict size: self text value size.
	replacement onChangePost.
"	self parent replace: self with: replacement. "
	self add: replacement. "this will encapsulate inline text editor in original text formating"
	text := nil.! !

!WebText methodsFor: 'private'!
printString

	^'''', [self text isNil ifTrue: [''] ifFalse: [self text] ] value,''''! !

!WebText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size
	^size! !

!WebText methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
size: aNumber
	
	"larger or smaller text for aNumber factor. Range -7..+7"

	aNumber < -7 
		ifTrue: [size := -7.  ]
		ifFalse:
			[aNumber > 7 ifTrue: [size := 7.  ] ifFalse: [size := aNumber.]].
	^self! !

!WebText methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	"make a header"
	self prepareToHtmlStreamingOn: aSession. 
	aStream nextPutAll: self ident.
	self insideSpanTag ifTrue: 
		[aStream nextPutAll: '<span'. self streamAttributesTo: aStream for: aSession. aStream nextPutAll: '>'].
	self header notNil ifTrue: [aStream nextPutAll: '<h', self header printString, '>'].
	"font size, color, face"
	(self size notNil | self font notNil ) ifTrue:
		[aStream nextPutAll: '<font '.
		self size notNil ifTrue:
			[aStream nextPutAll: 'size=', (self size > 0 ifTrue: ['+'] ifFalse: ['']), self size printString, ' '].
		self font notNil ifTrue:	[aStream nextPutAll: 'face=', self font, ' '].
		aStream nextPutAll: '> ' ].
	"set text attributes, if any"
	self textAttributes notNil ifTrue: 
		[self textAttributes do: [:attribute |  aStream nextPutAll: 
			'<', attribute asString, '>']].
	"print a text"
	self text notNil ifTrue: [aStream nextPutAll: 
		(AIDASite convertToWeb: 
			(self isMultilingual ifTrue: [self textFromMultilang: self text on: aSession] ifFalse: [self text]) 
			on: aSession)].
	"print composite elements"
	super streamHtmlTo: aStream for: aRequest on: aSession.
	"reset text attributes"
	self textAttributes notNil ifTrue: 
		[self textAttributes do: [:attribute |  aStream nextPutAll: 
			'</', attribute asString, '>']].
	"end of font adjustment"
	(self size notNil | self font notNil ) ifTrue: [aStream nextPutAll: '</font>'].
	self header notNil ifTrue: [aStream nextPutAll: '</h', self header printString, '>', self eol].
	self insideSpanTag ifTrue: [aStream nextPutAll: '</span>', self eol].! !

!WebText methodsFor: 'accessing'!
text
	"if text is association in format #lang->text, then this is a multilingual text"
	^text! !

!WebText methodsFor: 'accessing'!
text: aStringOrAssociation
	"if text is association in format #lang->text, then this is a multilingual text"
	self basicText: (WebFormElement 
		autoConvertToString: aStringOrAssociation).  "in case the argument  is not string but date, number  etc."
	"Slovenian csz are converted if char ^ is after such a char"
	(self text aidaIsAssociation not and: [self text includes: $^ ]) 
		ifTrue: [self basicText: self text convertToSloveneChars].! !

!WebText methodsFor: 'accessing' stamp: 'janko 9/30/2011 12:16'!
text: aStringOrAssociation attributes: anArray
	self text: aStringOrAssociation.
	self textAttributes: anArray.! !

!WebText methodsFor: 'private' stamp: ' 21/4/07 22:07'!
textAttributes
	"get the attributes of a text" 
	^textAttributes! !

!WebText methodsFor: 'private' stamp: 'janko 9/30/2011 12:07'!
textAttributes: anArray
	"check and set the attributes of a text. Atribute can be one or a set of them" 

	(anArray isKindOf: Symbol)		"if only one attribute, convert to an Array"
		ifTrue: [textAttributes := Array with: anArray.       ]
		ifFalse: [(anArray isKindOf: Array)
			ifTrue: [textAttributes := anArray.      ]
			ifFalse: [anArray isNil
				ifTrue: [textAttributes := nil.     ]
				ifFalse: 
					[self error: 'Text attributes should be Array of Symbols']]].

"WebText text: 'test' attributes: #b"
"WebText text: 'test' attributes: #( #b #i)"
"WebText text: 'test' attributes: nil"! !

!WebText class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
header: aNumber

	"create an empty header. You can add elements such as images and text later"

	^(self new) header: aNumber.

"| a | 
a := (WebText header: 1).
a add: (WebImage urlReference: 'http://pu/stefan.gif').
a inspect"! !

!WebText class methodsFor: 'instance creation'!
new
	^super new
		setCreationMethodAndObject; "Widget or App, needed for multilingual support"
		initialize! !

!WebText class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newParagraph

	"To open a new paragraph. Use addText: for adding a paragraph text."

	^self new paragraph: true.! !

!WebText class methodsFor: 'instance creation' stamp: 'janko 9/30/2011 12:22'!
text: aStringOrAssociation
	^self new text: aStringOrAssociation

"WebText text: 'test'"! !

!WebText class methodsFor: 'instance creation' stamp: 'janko 9/30/2011 12:22'!
text: aStringOrAssociation attributes: anArray

	^self new text: aStringOrAssociation attributes: anArray

"WebText text: 'test' attributes: #b"! !

!WebTextArea methodsFor: 'private'!
acceptInputFromValue: aString
	| vlue |
	aString isNil ifTrue: [^nil].  "error?"
	vlue :=  AIDASite convertFromWeb: aString on: self session. "ensure unicode!!"
	vlue := (WebFormElement autoConvertString:  vlue toObject: self value).
	self value: vlue.! !

!WebTextArea methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumber
	^self aspect: aSymbol for: anObject; size: aNumber! !

!WebTextArea methodsFor: 'private'!
autoConvertAndEncodeValue: aValue
	| vlue |
	vlue := WebFormElement autoConvertToString: aValue. "dates, numbers etc."
	vlue := AIDASite encodeQuoteEntitiesIn: vlue.               "char entity encoding just for double quote '' "
	^vlue! !

!WebTextArea methodsFor: 'private'!
autoConvertAndEncodeValue: aValue on: aSession
	| vlue |
	vlue := WebFormElement autoConvertToString: aValue.   "dates, numbers etc."
	vlue := AIDASite encodeQuoteEntitiesIn: vlue.               "char entity encoding just for double quote '' "
	vlue := AIDASite convertToWeb: vlue on: aSession.      "UTF-8 encoding"
	^vlue! !

!WebTextArea methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
columns: aNumber
	^self attributesAt: #cols put: aNumber printString! !

!WebTextArea methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	super initialize.
	self columns: 5; rows: 5; wrap: 'soft'.! !

!WebTextArea methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isTextArea
	^true! !

!WebTextArea methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
rows: aNumber
	^self attributesAt: #rows put: aNumber printString! !

!WebTextArea methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
shouldIdent
	^false! !

!WebTextArea methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
size: aPoint
	"set the size of area in format colums@rows"
	self columns: aPoint x.
	self rows: aPoint y.! !

!WebTextArea methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	self scriptBefore notNil ifTrue: 
		[self scriptBefore streamHtmlTo: aStream for: aRequest on: aSession].
	aStream nextPutAll: self ident, '<textarea'.
	self streamAttributesTo: aStream for: aSession.
	aStream nextPutAll: '>'.
	self value notNil ifTrue:
		[aStream nextPutAll:    "encode only quotes as &quot; then UTF8" 
			(self autoConvertAndEncodeValue: self value on: aSession)]. 
	aStream nextPutAll: '</textarea>'.
	self scriptAfter notNil ifTrue: 
		[self scriptAfter streamHtmlTo: aStream for: aRequest on: aSession].! !

!WebTextArea methodsFor: 'attributes' stamp: ' 21/4/07 22:07'!
wrap: aString
	"how to wrap text in area"
	^self attributesAt: #wrap put: aString! !

!WebTextArea class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject
	^self new aspect: aSymbol for: anObject! !

!WebTextArea class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
aspect: aSymbol for: anObject size: aNumber
	^self new aspect: aSymbol for: anObject size: aNumber! !

!WebTransactionMonitor class methodsFor: 'local servers' stamp: ' 21/4/07 22:07'!
addServer: aWebServer

	self localServers add: aWebServer! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
beginTransaction

	"Mark the beginning of transaction on current process. 
	Mark the end with commit or cancelTransaction"

	self beginTransactionOn: Processor activeProcess.! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
beginTransactionOn: aProcess

	"Mark the beginning of transaction. Mark the end with commit or cancelTransaction"

	self critical: 
		[self transactions add: aProcess]! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
busySessions

	"a collection of database sessions, which are busy on that moment"

	BusySessions isNil ifTrue: [self initBusySessions].
	^BusySessions! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
cancelTransaction

	"cancel the transaction without commiting on current process. 
	Used in exception handling routines"

	self cancelTransactionOn: Processor activeProcess! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
cancelTransactionOn: aProcess

	"cancel the transaction without commiting. Used in exception handling routines"

	self critical: 
		[self transactions remove: aProcess ifAbsent: []].! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
clearHangedProcesses

	"remove all processes with hanged  suspended context from set of transactions. "
	"WebTransactionMonitor clearHangedProcesses"
" TEMORARY, vw5i4 sender unknown !! "
	self transactions copy do: 
		[:each | (each suspendedContext notNil and:
""
			[(each suspendedContext sender selector = #readWait) | 
			(each suspendedContext sender selector = #writeWait)] )
""
				ifTrue:
					[each terminate.
					self transactions remove: each] ].
""! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
clearNilProcesses

	"remove all processes with nil  suspended context from set of transactions. Such processes
	died somewhere and were not removed with method cancelTransaction"

	self transactions copy do: 
		[:each | each suspendedContext isNil 
			ifTrue:
				[self transactions remove: each] ].! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
commit

	"commit the transaction if there is no more pending transactions, otherwise defer commit to
	the next call of this method."
	"WebTransactionMonitor commit"
	self critical: 
		[self clearNilProcesses.
		"self transactions isEmpty" true
			ifTrue: 
				["WebServer default diagnostics ifTrue: [Transcript show: ' comm.']."
"				Swazoo.SwazooServer isPersistent ifTrue: [self gemstoneCommit].  "
				"WebServer default diagnostics ifTrue: [Transcript show: '.ited ']."
				self setLastCommit. ]
			ifFalse: 
				[self clearHangedProcesses.
				self transactions notEmpty ifTrue: 
					[self noCommitFor10min ifTrue: 
						[self notifyNoCommiting.
"						Swazoo.SwazooServer isPersistent ifTrue: [self gemstoneCommit] "]
					]
				]
		].

"WebTransactionMonitor commit"! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
commitTransaction

	"commit the transaction on current process if there is no more pending transactions, 
	otherwise defer commit to the next call of this method."

	self commitTransactionOn: Processor activeProcess! !

!WebTransactionMonitor class methodsFor: 'transactions' stamp: ' 21/4/07 22:07'!
commitTransactionOn: aProcess

	"commit the transaction if there is no more pending transactions, otherwise defer commit to
	the next call of this method."

	self critical: 
		[self cancelTransactionOn: aProcess.
		self commit].! !

!WebTransactionMonitor class methodsFor: 'critical sections'!
critical: aBlock
	"For protecting critical sections in parallel execution of web requests. Use it always
	when you do things, which cannot be disturbed by another request. Example:
		WebTransactionMonitor critical: [<a block with critical section>]. "

	^self mutex critical: aBlock.! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
freeSession

	"find a session in a pool of sessions which is not current and not busy"

	| allSessions pick |
	allSessions := GBSM loggedInSessions asOrderedCollection.
	allSessions 
		remove: GBSM currentSession;
		removeAll: self busySessions.
	allSessions notEmpty
		ifTrue:
			[pick := (Random new next * allSessions size) truncated + 1.
			^allSessions at: pick]
		ifFalse: [^GBSM currentSession]


"WebTransactionMonitor freeSession"! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
gemstoneCommit

	| result |
	AIDARoot critical:
		[result := GBSM currentSession commitTransaction.
		result == true ifFalse: 
			[result := GBSM currentSession commitTransaction.
			result == true ifFalse: 
				[Transcript cr; show: '****** commit troubles !!!!!! ******'] ].
		].

"WebTransactionMonitor commit"! !

!WebTransactionMonitor class methodsFor: 'initialize' stamp: ' 21/4/07 22:07'!
initBusySessions

	BusySessions := Set new.! !

!WebTransactionMonitor class methodsFor: 'initialize' stamp: ' 21/4/07 22:07'!
initTransactions

	Transactions := Set new.! !

!WebTransactionMonitor class methodsFor: 'initialize' stamp: ' 21/4/07 22:07'!
initialize
	self initTransactions.
	self initBusySessions.

"WebTransactionMonitor initialize"! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
isNotificationSent

	NotificationSent isNil ifTrue: [self resetNotificationSent].
	^NotificationSent! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
lastCommit

	"return the time of last real odb commit"

	^AIDASite default lastCommitTimestamp.! !

!WebTransactionMonitor class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
localServers
	"all active web servers, whose are running on local image"
	LocalServers isNil ifTrue: [LocalServers := Set new].
	self removeNonactiveServers.
	^LocalServers! !

!WebTransactionMonitor class methodsFor: 'private' stamp: 'janko 3/19/2012 21:59'!
mutex
	"for critical sections"
	Muttex isNil ifTrue: [Muttex := AidaMutex new].
	^Muttex! !

!WebTransactionMonitor class methodsFor: 'error notifying' stamp: 'rob.rothwell 3/2/2009 22:02'!
noCommitFor10min

	"check if there was no real odb commit more than 10min"

	^(TimeStamp now asSeconds - self lastCommit asSeconds) > (10 * 60)! !

!WebTransactionMonitor class methodsFor: 'error notifying' stamp: ' 21/4/07 22:07'!
notifyNoCommiting

	"if there is no odb commit for more than 10min then an e-mail message is sent to a 
	specified address (from settings in WebServer)"
	"WebTransactionMonitor notifyNoCommiting"



	| subject body |

	self isNotificationSent ifTrue: [^self].
"
	subject := 'AIDAWeb Urgent: No odb commit!!'.
	body := 'No commit for more than 10 minutes!!'.
	WebServer default urgentEMailSubject: subject body: body.
"
	self setNotificationSent.! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
onFreeSessionFor: anObject remotePerform: aSelector

	^self onFreeSessionFor: anObject remotePerform: aSelector withArgs: #()


"WebTransactionMonitor onFreeSessionFor: AIDARoot remotePerform: #copy"! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
onFreeSessionFor: anObject remotePerform: aSelector with: anArgument

	^self onFreeSessionFor: anObject remotePerform: aSelector withArgs: (Array with: anArgument)

"WebTransactionMonitor onFreeSessionFor: AIDARoot remotePerform: #at: with: 'planid' "! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
onFreeSessionFor: anObject remotePerform: aSelector withArgs: argsArray

	| session gsObject result |
	session := self freeSession.
	[	
		self busySessions add: session.
		gsObject := anObject asGSObjectInSession: session .
		result := gsObject remotePerform: aSelector withArgs: argsArray.
		result := gsObject remotePerform: aSelector withArgs: argsArray.
		result := result asLocalObject.
		session commitTransaction
	] valueNowOrOnUnwindDo: 
		[self busySessions remove: session ifAbsent: [].
		 session disconnectST: anObject fromGS: gsObject].
	^result

"WebTransactionMonitor onFreeSessionFor: WebServer default remotePerform: #settings withArgs: #()"! !

!WebTransactionMonitor class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
removeNonactiveServers
	LocalServers copy do: [:srv | 
		srv isServing ifFalse: [LocalServers remove: srv ifAbsent: []] ]! !

!WebTransactionMonitor class methodsFor: 'local servers' stamp: ' 21/4/07 22:07'!
removeServer: aWebServer

	self localServers remove: aWebServer ifAbsent: []! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
resetNotificationSent

	NotificationSent := false.! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setLastCommit

	"set the time of last real odb commit to time now"
	
	self localServers do: [:each | each setLastCommitTimestamp].
	self resetNotificationSent! !

!WebTransactionMonitor class methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
setNotificationSent

	NotificationSent := true.! !

!WebTransactionMonitor class methodsFor: 'private' stamp: ' 21/4/07 22:07'!
transactions

	"a collection of all processes with open transactions . Such a process is 
	addded with method beginTransaction and removed with commit or cancelTransaction"
	"WebTransactionMonitor transactions"
	Transactions isNil ifTrue: [self initTransactions].
	^Transactions! !

!WebTransactionMonitor class methodsFor: 'odb specific' stamp: ' 21/4/07 22:07'!
versantCommit

"	ODBInterface checkpointCommit "! !

!WebTranslDict methodsFor: 'accessing'!
at: key
	^self dict at: key! !

!WebTranslDict methodsFor: 'accessing'!
at: key ifAbsent: aBlock
	^self dict at: key ifAbsent: aBlock! !

!WebTranslDict methodsFor: 'accessing'!
at: key ifAbsentPut: aBlock
	^self at: key ifAbsent: [self initialAt: key put: aBlock value]! !

!WebTranslDict methodsFor: 'accessing'!
at: key put: value
	"this one should be used by translation tools!!"
	"This method is called by WebInlineEditableText widget after the text change is posted. See 
       WebText>>#prepareForTranslation, how the aspect of this widget is prepared to achieve that."
	self changes add: key.
	self dict at: key put: value.
	self writeChanges. "immediatelly after each change, for now"
	^value! !

!WebTranslDict methodsFor: 'private'!
changes
	"changes of multilingual text to be written on class side of classses with translations"
	changes isNil ifTrue: [self initChanges].
	^changes! !

!WebTranslDict methodsFor: 'private'!
dict
	dict ifNil: [self initDict].
	^dict! !

!WebTranslDict methodsFor: 'initialize-release'!
initChanges
	changes := Set new.! !

!WebTranslDict methodsFor: 'initialize-release'!
initDict
	dict := Dictionary new.! !

!WebTranslDict methodsFor: 'accessing'!
initialAt: key put: value
	"this one does not register the change, use it for initial dict setup!!"
	^self dict at: key put: value! !

!WebTranslDict methodsFor: 'accessing'!
language
	"language of translations in this dictionary"
	^language! !

!WebTranslDict methodsFor: 'private'!
language: aSymbol
	language := aSymbol! !

!WebTranslDict methodsFor: 'accessing'!
method
	"a creation method which holds our translations (contains multilingual associations"
	^method! !

!WebTranslDict methodsFor: 'private'!
method: aSymbol
	"a creation method which holds our translations (contains multilingual associations"
	method := aSymbol! !

!WebTranslDict methodsFor: 'private'!
printOn: aStream
	aStream nextPutAll: 'aWebTranslDict ('.
	self dict keysAndValuesDo: [:key :value | 
		aStream nextPutAll: key printString, '->', value printString, ' '].
	aStream nextPutAll: ') '! !

!WebTranslDict methodsFor: 'accessing'!
site
	^self translator site! !

!WebTranslDict methodsFor: 'accessing'!
translClass	
	"a class holding this transactions on its class side methods. Usually a sublcass of WebApplication"
	^class! !

!WebTranslDict methodsFor: 'private'!
translClass: aClassWithTransactions
	"a class holding this transactions on its class side methods. Usually a sublcass of WebApplication"
	class := aClassWithTransactions! !

!WebTranslDict methodsFor: 'accessing'!
translator
	^translator! !

!WebTranslDict methodsFor: 'private'!
translator: aWebTranslator
	translator := aWebTranslator! !

!WebTranslDict methodsFor: 'private'!
view: aSymbol
	"a view on our App class where those translations belong"
	view := aSymbol! !

!WebTranslDict methodsFor: 'changing'!
writeChanges
	self changes do: [:key |
		self translator 
			changeTranslationKey: key 
			to: (self at: key) 
			language: self language 
			class: self translClass 
			method: self method].
	self initChanges.! !

!WebTranslDict class methodsFor: 'instance creation'!
newOn: aWebTranslator forClass: aWebAppClass method: aSymbol language: aLangSymbol
	^super new
		translator: aWebTranslator;
		translClass: aWebAppClass;
		method: aSymbol;
		language: aLangSymbol! !

!WebTranslator methodsFor: 'private-cache' stamp: 'np 3/25/2009 15:30'!
cache
	"cached translations. A multilevel dictionary"
	"class->(method->(langCode->(key->translation))))) "
	cache isNil ifTrue: [self initCache].
	^cache! !

!WebTranslator methodsFor: 'private-cache'!
cachedTranslate: aString toLanguage: aLanguageCode class: aClassWithTransl method: aMethodSymbol
	"cache hierarchy: class->(method->(langCode->(key->translation))))) "
	"last dictionary is WebTranslDict!! "
	^(((self cache at: aClassWithTransl ifAbsent: [self refreshClass: aClassWithTransl])
		at: aMethodSymbol ifAbsentPut: [^aString])
			at: aLanguageCode ifAbsent: [^aString])
				at: aString ifAbsent: [^aString]! !

!WebTranslator methodsFor: 'private-classes-changes'!
changePairs: aPairsCollection key: aKeyString value: aString
	"change (or add new pair) a value of a pair (an association) on specified key"
	| pair |
	pair := aPairsCollection 
		detect: [:assoc | assoc key = aKeyString]
		ifNone: [aPairsCollection add: (aKeyString -> '')].
	pair value: aString.
	^aPairsCollection! !

!WebTranslator methodsFor: 'translating'!
changeTranslationKey: aKeyString to: aNewString language: aLanguageCode class: aClassWithTransl method: aMethodSymbol
	"change that translation by recompiling the apropriate method in a class side of App class"
	| translMethod translPairs |
	translMethod := self translMethodForLang: aLanguageCode method: aMethodSymbol.
	self checkOrCreateMethod: translMethod onClass: aClassWithTransl.
	translPairs := self pairsForLang: aLanguageCode method: aMethodSymbol on: aClassWithTransl.
	translPairs := self changePairs: translPairs key: aKeyString value: aNewString.
	self writeBackPairs: translPairs intoMethod: translMethod onClass: aClassWithTransl! !

!WebTranslator methodsFor: 'private-classes-changes'!
checkCreateTranslation: aMultilangAssociation forLanguage: aLanguageCode inDict: aTranslDict
	"check if that translation exists and if not, create a pair in a dict. Same for original lang too!!"
	| origLang origDict |
	(aTranslDict at: aMultilangAssociation value ifAbsent: [nil]) notNil ifTrue: [^true]. "exists, no need to create"
	aTranslDict  
		at:  aMultilangAssociation value
		put:  aMultilangAssociation value. "default text is from orig lang"
	origLang := aMultilangAssociation key.
	origDict := ((self cache at: aTranslDict translClass) at: aTranslDict method) at: origLang.
	self checkCreateTranslation: aMultilangAssociation forLanguage: origLang inDict: origDict.! !

!WebTranslator methodsFor: 'private-classes-changes'!
checkOrCreateMethod: aTranslMethodSymbol onClass: aClassWithTransl
	"check if exist and if not, create that method with translations (empty so far)  on a class side of class"
	(aClassWithTransl respondsTo: aTranslMethodSymbol) ifTrue: [^true].
	self writeBackPairs: #() intoMethod: aTranslMethodSymbol onClass: aClassWithTransl! !

!WebTranslator methodsFor: 'translating'!
dictToTranslate: aMultilangAssociation to: aLanguageCode for: anElement on: aSession
	"returns WebTranslDict, for setting an aspect to edit by translation tools"
	"Open a new one automatically if not yet exist for that method and language"
	| translClass method dict |
	translClass := aSession lastApp class. "app class where translations reside"
	method := anElement creationMethod. "method which created an element with multilang text"
	dict := ((self cache at: translClass ifAbsent: [self refreshClass: translClass])
		at: method ifAbsent: 
			[self openDictsToTranslate: aMultilangAssociation 
				toLanguage: aLanguageCode forMethod: method on: translClass.
			self refreshClass: translClass.
			(self cache at: translClass) at: method])
				at: aLanguageCode ifAbsent: 
					[self openDictsToTranslate: aMultilangAssociation 
						toLanguage: aLanguageCode forMethod: method on: translClass.
						self refreshClass: translClass.
						((self cache at: translClass) at: method) at: aLanguageCode].
	self checkCreateTranslation: aMultilangAssociation forLanguage: aLanguageCode inDict: dict.
	^dict! !

!WebTranslator methodsFor: 'initialize-release' stamp: 'np 3/25/2009 15:29'!
initCache
	"cached translations"
	cache := Dictionary new.! !

!WebTranslator methodsFor: 'initialize-release' stamp: 'np 3/25/2009 15:29'!
initOther
	other := Dictionary new! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
langFromTranslMethod: aMethodSymbol
	"extract language code from transl.method:  #fr from #frViewCalendar"
	^(aMethodSymbol asString copyFrom: 1 to: 2) asSymbol! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
langsForMethod: aMethodSymbol on: aClassWithTransl
	"get all languages for which we have a translation for that creation method"
	^((self translMethodsOn: aClassWithTransl)
		 select: [:each | (self methodFromTranslMethod: each) = aMethodSymbol]) 
			collect: [:each | self langFromTranslMethod: each]! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
methodFromTranslMethod: aMethodSymbol
	"extract creation method name from transl.method:  #viewCalendar from #frViewCalendar"
	| method |
	method := String with: (aMethodSymbol asString at: 3) asLowercase.
	^(method, (aMethodSymbol asString copyFrom: 4 to: aMethodSymbol size)) asSymbol.! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
methodsOn: aClassWithTransl
	"get all creation methods for elements holding multilang text"
	^((self translMethodsOn: aClassWithTransl) collect: [:each | self methodFromTranslMethod: each]) 
		asSet "to find a unique set of those methods"! !

!WebTranslator methodsFor: 'private-classes-changes'!
openDictsToTranslate: aMultilangAssociation toLanguage: aLanguageCode forMethod: aMethodSymbol on: aClassWithTransl
	"check/create dict for orig language, then create dict for specified language"
	| origLang translMethod pairs pair |
	origLang := aMultilangAssociation key.
	translMethod := self translMethodForLang: origLang method: aMethodSymbol.
	pairs := (aClassWithTransl respondsTo: translMethod) 
		ifTrue: [self pairsForLang: origLang method: aMethodSymbol on: aClassWithTransl.]
		ifFalse: [OrderedCollection new].
	self changePairs: pairs key:  aMultilangAssociation value value: aMultilangAssociation value.
	self writeBackPairs: pairs intoMethod: translMethod onClass: aClassWithTransl.
	translMethod := self translMethodForLang: aLanguageCode method: aMethodSymbol.
	pair := aMultilangAssociation value -> aMultilangAssociation value. "default one for specified lang too"	
	self writeBackPairs: (Array with: pair) intoMethod: translMethod onClass: aClassWithTransl! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:29'!
other
	^other! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:29'!
otherAt: aSymbol
	"other values"
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:30'!
otherAt: aSymbol ifAbsent: aBlock
	"other values"
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:30'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:30'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebTranslator methodsFor: 'private-classes'!
pairsForLang: aLanguageCode method: aMethodSymbol on: aClassWithTransl
	| translMethod pairs |
	translMethod := self translMethodForLang: aLanguageCode method: aMethodSymbol.
	pairs := (aClassWithTransl perform: translMethod) 
		collect: [:triple | Association 
			key: (AIDASite convert: triple first fromCodepage: #UTF8)
			value: (AIDASite convert: triple last fromCodepage: #UTF8)]. "triple midlle is just ->"
	^pairs asOrderedCollection! !

!WebTranslator methodsFor: 'accessing' stamp: 'np 3/25/2009 15:28'!
parent
	^parent! !

!WebTranslator methodsFor: 'private' stamp: 'np 3/25/2009 15:30'!
parent: anObject
	parent := anObject! !

!WebTranslator methodsFor: 'private-cache'!
refreshClass: aClassWithTransl
	"refresh a cache from translations stored in class methods of specified class"
	| classDict methodDict langDict |
	classDict := self cache at: aClassWithTransl put: Dictionary new. "just remove old stuff"
	(self methodsOn: aClassWithTransl) do: [:method |
		methodDict := classDict at: method put: Dictionary new.
		(self langsForMethod: method on: aClassWithTransl) do: [:lang |
			langDict := methodDict 
				at: lang 
				put: (WebTranslDict newOn: self forClass: aClassWithTransl method: method language: lang).
			(self pairsForLang: lang method: method on: aClassWithTransl) do: [:assoc |
				langDict initialAt: assoc key put: assoc value ]]]. "initalAt:put: to avoid signaling change"
	^classDict! !

!WebTranslator methodsFor: 'accessing' stamp: 'np 3/25/2009 15:28'!
site	
	^self parent! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
translLanguagesOn: aClassWithTransl
	"get all languages (codes) in which we have trnaslations"
	^(self translMethodsOn: aClassWithTransl) 
		inject: Set new 
		into: [:each :set | set add: (self langFromTranslMethod: each); yourself]! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:31'!
translMethodForLang: aLanguageCode method: aMethodSymbol
	"compose that method name. For #fr and #viewCalendar = #frViewCalendar"
	^(aLanguageCode asString, (String with: aMethodSymbol asString first) asUppercase,
		(aMethodSymbol asString copyFrom: 2 to: aMethodSymbol size))
			asSymbol! !

!WebTranslator methodsFor: 'private-classes' stamp: 'np 3/25/2009 15:32'!
translMethodsOn: aClassWithTransl
	"get all class method names holding translations"
	"VW specific"
	^aClassWithTransl class organization listAtCategoryNamed: self translationsCategory! !

!WebTranslator methodsFor: 'translating'!
translate: aMultilangAssociation to: aLanguageCode for: anElement on: aSession
	| translClass translation |
	translClass := aSession lastApp class. "app class where translations reside"
	translation := self 
		cachedTranslate: aMultilangAssociation value
		toLanguage: aLanguageCode
		class: translClass
		method: anElement creationMethod. "method which created an element with multilang text"
	^translation notNil 
		ifTrue: [translation] 
		ifFalse: [aMultilangAssociation value] "original text"! !

!WebTranslator methodsFor: 'accessing' stamp: 'np 3/25/2009 15:28'!
translationsCategory
	"name of category holding translations on class side of App classes"
	^#translations! !

!WebTranslator methodsFor: 'private-classes-changes'!
writeBackPairs: aTranslPairsArray intoMethod: aTranslMethodSymbol onClass: aClassWithTransl
	| cr mstream semaphore |
	cr :=  (String with: Character cr).
	mstream := WriteStream on: String new.
	mstream
		nextPutAll: aTranslMethodSymbol asString, cr;
		nextPut: Character tab; nextPutAll: '^#('.
	aTranslPairsArray do: [:assoc |
		mstream 
			nextPut: Character cr; nextPut: Character tab; nextPutAll: '(';
			nextPut: $'; nextPutAll: (AIDASite convert: assoc key toCodepage: #UTF8); nextPut: $'; 
			nextPutAll: '->';
			nextPut: $'; nextPutAll:  (AIDASite convert: assoc value toCodepage: #UTF8); nextPut: $';
			nextPutAll: ')'].
	mstream nextPut: Character cr; nextPut: Character tab; nextPutAll: ')', cr. 
	semaphore := Semaphore new.
	[aClassWithTransl class compile: mstream contents  classified: 'translations'. semaphore signal] 
		fork. "well, don't ask why :( "
	semaphore wait. "for forked compilation to finish"! !

!WebTranslator class methodsFor: 'instance creation' stamp: 'np 3/25/2009 15:28'!
newOn: anAIDASite
	^super new
		parent: anAIDASite! !

!WebUser methodsFor: 'groups' stamp: ' 21/4/07 22:07'!
addToActivatingGroup
	self parent addActivatingUser: self! !

!WebUser methodsFor: 'groups' stamp: ' 21/4/07 22:07'!
addToRegisteredGroup
	self parent addRegisteredUser: self! !

!WebUser methodsFor: 'accessing-address'!
address
	address isNil ifTrue: [^'']. 
	^address! !

!WebUser methodsFor: 'accessing-address'!
address: aString
	address := aString.! !

!WebUser methodsFor: 'accessing' stamp: 'janko 8/6/2011 19:42'!
asPerson
	"parallel Person object (from Party framework if present, otherwise nil)"
	^self otherAt: #Person ifAbsent: [^self initPerson]! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
asWebUser
	^self! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:42'!
autoLogout
	"logout after 15min of inactivity. default is NO!! "
	^self otherAt: #AutoLogout ifAbsent: [false]! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
autoLogout: aBoolean
	"logout after 15min of inactivity"
	^self otherAt: #AutoLogout put: aBoolean! !

!WebUser methodsFor: 'groups' stamp: ' 21/4/07 22:07'!
becomeAdmin
	self parent adminGroup addUser: self! !

!WebUser methodsFor: 'accessing-address'!
city
	city isNil ifTrue: [^'']. 
	^city! !

!WebUser methodsFor: 'accessing-address'!
city: aString
	city := aString.! !

!WebUser methodsFor: 'accessing-address'!
company
	company isNil ifTrue: [^'']. 
	^company! !

!WebUser methodsFor: 'accessing-address'!
company: aString 
	company := aString.! !

!WebUser methodsFor: 'private' stamp: 'janko 4/20/2012 17:09'!
copy
	| new |
	new := super copy.
	new 
		parent: nil;
		initOtherValues;
		name: self name;
		surname: self surname. "because it can be on his aPerson"
	self copyOtherTo: new.
	^new! !

!WebUser methodsFor: 'private'!
copyOtherTo: aWebUser
	"override in subclasses for specifics here"! !

!WebUser methodsFor: 'accessing-address'!
country
	country isNil ifTrue: [^'']. 
	^country! !

!WebUser methodsFor: 'accessing-address'!
country: aString
	country := aString.! !

!WebUser methodsFor: 'accessing-address'!
email 
	email isNil ifTrue: [^''].
	^email! !

!WebUser methodsFor: 'accessing-address'!
email: aString
	email := aString.! !

!WebUser methodsFor: 'security' stamp: 'janko 4/25/2012 12:38'!
escalateToAdmin
	"escalate access rights of that use to admin rights, if user is in Administrators group"
	"WebSecurityManager default adminGroup users do: [:each | each escalateToAdmin] "
	self inAdminGroup ifFalse: [self error: 'User to escalate must be in Admin group'].
	self otherAt: #EscalatedToAdmin put: true.! !

!WebUser methodsFor: 'accessing-address'!
fax
	fax isNil ifTrue: [^''].
	^fax! !

!WebUser methodsFor: 'accessing-address'!
fax: aString 
	fax := aString.! !

!WebUser methodsFor: 'groups'!
groups 
	"where this user is a member"
	^self parent groups select: [:group | group users includes: self]! !

!WebUser methodsFor: 'security'!
hasAdminRights
	"Admin is every member of Administrators group which rights are escalated to admin rights. 
	Default Admin user is always regarded as 'escalated to admin' and is therefore admin by default "
	self isAdminUser ifTrue: [^true].
	^self inAdminGroup 
		and: [self isEscalatedToAdmin]! !

!WebUser methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
hasEMail 

	"at least email must be entered to accept a new user"
	
	^self email ~= ''! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
id
	"unique id of that user"
	^id! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
id: aNumber
	id := aNumber.! !

!WebUser methodsFor: 'testing'!
inActivatingGroup
	"user needs to confirm registration"
	^self groups contains: [:each | each isActivatingGroup]! !

!WebUser methodsFor: 'testing'!
inAdminGroup
	"all from Administrators group are admins, also default Admin user"
	^self groups contains: [:each | each isAdminGroup]! !

!WebUser methodsFor: 'testing'!
inRegisteredGroup
	^self groups contains: [:each | each isRegisteredGroup]! !

!WebUser methodsFor: 'initialize-release'!
initId
	self id: (AIDASite random next * 1000000000) rounded printString.! !

!WebUser methodsFor: 'initialize-release' stamp: 'janko 8/6/2011 19:44'!
initLoginHistory
	^self otherAt: #LoginHistory put: DailyCollection new! !

!WebUser methodsFor: 'initialize-release' stamp: 'janko 8/6/2011 19:49'!
initOtherValues
	other := Dictionary new.! !

!WebUser methodsFor: 'initialize-release' stamp: 'janko 8/6/2011 19:44'!
initPerson
	^self otherAt: #Person put: (Person new webUser: self)! !

!WebUser methodsFor: 'initialize-release' stamp: ' 21/4/07 22:07'!
initialize
	self initId! !

!WebUser methodsFor: 'private-obsolete'!
isAdmin
	"if from Administrators group and escalated to Admin. Default Admin user has always Admin rights"
	"DEPRECIATED!!, use #hasAdminRights, #inAdminGroup or #isAdminUser instead!! "
	^self hasAdminRights! !

!WebUser methodsFor: 'testing'!
isAdminUser
	"special user with name Admin"
	^self username = 'admin' and: [self name= 'Admin'].! !

!WebUser methodsFor: 'security' stamp: 'janko 4/25/2012 13:09'!
isEscalatedToAdmin
	"escalate access rights of that use to admin rights, if user is in Admin group"
	^self otherAt: #EscalatedToAdmin ifAbsent: [false]! !

!WebUser methodsFor: 'testing'!
isExtranetUser
	"a general user for extranets"
	^self name = 'Extranet' or: [(self username = 'extranet') & (self password = 'password')]! !

!WebUser methodsFor: 'testing' stamp: 'mivsek 3/7/2008 22:57'!
isGuest
	"all non registered visitors have the same user: a Guest"
	^self name = 'Guest' and: 
		[(self username = 'guest') 
			"& (self password = (WebSecurityManager hashPassword: 'guest'))"]! !

!WebUser methodsFor: 'testing' stamp: 'janko 8/6/2011 19:42'!
isLocked
	"change or delete of this user data not allowed"
	^self otherAt: #Locked ifAbsent: [false]! !

!WebUser methodsFor: 'testing' stamp: 'janko 8/8/2011 11:03'!
isLoggedIn
	^self loginHistory isEmpty not
		and: [(self loginHistory last at: 1) = #login]! !

!WebUser methodsFor: 'testing' stamp: 'np 1/18/2008 11:23'!
isPerson
	^false! !

!WebUser methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebUser
	^true! !

!WebUser methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebUserGroup
	^false! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:42'!
lastAppUrl
	"an url which last WebApplication was called. "
	^self otherAt: #LastAppUrl ifAbsent: [nil].! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
lastAppUrl: aString
	"an url which last WebApplication was called. It is set AFTER the app view is generated!!"
	^self otherAt: #LastAppUrl put: aString! !

!WebUser methodsFor: 'accessing-timestamps'!
lastLoginTimestamp
	self loginHistory isEmpty ifTrue: [^nil].
	^(self loginHistory all detect: [:array | (array at: 1) = #login] ifNone: [^nil])
		at: 2.                 	"what if he is logged in in more than one session?"! !

!WebUser methodsFor: 'accessing-timestamps'!
lastLogoutTimestamp
	self loginHistory isEmpty ifTrue: [^nil].
	^(self loginHistory all detect: [:array | (array at: 1) = #logout] ifNone: [^nil])
		at: 2.                 	"what if he is logged in in more than one session?"! !

!WebUser methodsFor: 'private' stamp: 'jm 9/8/2010 21:11'!
logLogin
	self loginHistory
		add: (Array with: #login with: SpTimestamp now)
		onDate: SpDate today! !

!WebUser methodsFor: 'private' stamp: 'jm 9/8/2010 21:11'!
logLogout
	self loginHistory 
		add: (Array with: #logout with: SpTimestamp now)
		onDate: SpDate today! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:42'!
loginHistory
	"occurences of user logged it/out. As DailyCollection of Array #login/logout, WebUser, timestamp"
	^self otherAt: #LoginHistory ifAbsent: [self initLoginHistory]! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:42'!
logoutFromUrl
	"From which page user logout. To be redirected back after login"
	^self otherAt: #LogoutFromUrl ifAbsent: [nil].! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
logoutFromUrl: aString
	"From which page user logout. To be redirected back after login"
	^self otherAt: #LogoutFromUrl put: aString! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
menuName
	"in dropdown menus"
	^self surnameName! !

!WebUser methodsFor: 'private' stamp: ' 21/4/07 22:07'!
migrateToUnicode
	"from iso8859-2"
	"WebUser allInstances do: [:each | each migrateToUnicode]"
	username notNil ifTrue: [username := username ensureUnicodeSloveneChars].
	password notNil ifTrue: [password := password ensureUnicodeSloveneChars].
	name notNil ifTrue: [name := name ensureUnicodeSloveneChars].
	surname notNil ifTrue: [surname := surname ensureUnicodeSloveneChars].
	company notNil ifTrue: [company := company ensureUnicodeSloveneChars].
	city notNil ifTrue: [city := city ensureUnicodeSloveneChars].
	country notNil ifTrue: [country := country ensureUnicodeSloveneChars].! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
name
	name isNil ifTrue: [self asPerson notNil ifTrue: [^self asPerson name] ifFalse: [^''] ].
	^name! !

!WebUser methodsFor: 'accessing'!
name: aString 
	self isLocked ifTrue: [^self error: 'user locked, changes not allowed!! '].
	self asPerson notNil ifTrue: [^self asPerson name: aString].
	name := aString trimBlanks.! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
nameSurname 
	^self name, ' ', self surname! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:49'!
other
	^other! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:43'!
otherAt: aString
	^self otherAt: aString ifAbsent: [nil]! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aString ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aString ifAbsent: [aBlock value]! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOtherValues].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
otherAt: aString put: anObject
	self other isNil ifTrue: [self initOtherValues].
	^self other at: aString put: anObject! !

!WebUser methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent
	^parent! !

!WebUser methodsFor: 'private' stamp: ' 21/4/07 22:07'!
parent: aWebSecurityManager
	parent := aWebSecurityManager! !

!WebUser methodsFor: 'accessing' stamp: 'jm 4/22/2009 22:23'!
password
	"returns SHA1 encrypted password!! "
	password isNil ifTrue: [^''].
	^password! !

!WebUser methodsFor: 'accessing' stamp: 'np 4/6/2008 15:53'!
password: aString	
	"Store hashed string"
	aString notEmpty ifTrue: [
		password := WebSecurityManager hashPassword: aString]! !

!WebUser methodsFor: 'accessing' stamp: 'jm 4/22/2009 19:56'!
passwordAsHex
	"leading zero in each byte ommited!! 0F = just F !!"
	"Squeak specific!!"
	^(self password
		inject: (WriteStream on: String new)
		into:
			[:stream :byte | 
			stream nextPutAll: 
				((byte printStringRadix: 16) copyReplaceAll: '16r' with: ''). "Squeak specific!!"
			stream]) contents! !

!WebUser methodsFor: 'accessing' stamp: 'np 10/20/2008 16:43'!
passwordText
	"password is encripted/invisible anway, so return just empty string"
	^''! !

!WebUser methodsFor: 'accessing' stamp: 'np 10/20/2008 16:43'!
passwordText: aString
	aString = self passwordText "all *****, this means that password was not changed"
		ifTrue: [^nil]. 
	aString trimBlanks isEmpty ifTrue: [^nil].
	^self password: aString! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
person: aPerson
	"connect to parrallel Person from Party framework"
	self otherAt: #Person put: aPerson.
	aPerson asWebUser ~= self ifTrue: [aPerson webUser: self].! !

!WebUser methodsFor: 'accessing-address'!
phone 
	phone isNil ifTrue: [^''].
	^phone! !

!WebUser methodsFor: 'accessing-address'!
phone: aString 
	phone := aString.! !

!WebUser methodsFor: 'private'!
preferredUrl
	| nme |
	nme := self nameSurname trimBlanks asSloveneWithoutCircumflexes asHttpFriendly.
	^'/user/', nme! !

!WebUser methodsFor: 'private'!
printString 
	^'a', self class name, ' named ', self surname, ', ', self name, ' (', self username, ') '! !

!WebUser methodsFor: 'accessing-timestamps' stamp: 'janko 8/6/2011 19:42'!
registeredTimestamp
	"when this user was registered (personally or by someone else)"
	^self otherAt: #RegisteredTimestamp ifAbsent: [nil]! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
resetLocked
	"changes of user data allowed again"
	^self otherAt: #Locked put: false! !

!WebUser methodsFor: 'accessing-other' stamp: 'janko 8/6/2011 19:44'!
setLocked
	"changes of user data not allowed"
	^self otherAt: #Locked put: true! !

!WebUser methodsFor: 'private' stamp: 'janko 8/6/2011 19:44'!
setRegisteredTimestamp
	"when this user was registered (personally or by someone else)"
	^self otherAt: #RegisteredTimestamp put: SpTimestamp now! !

!WebUser methodsFor: 'accessing'!
site
	^self parent site! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
someId
	"just return some text, possibly surnameName"
	self surnameName trimBlanks notEmpty ifTrue: [^self surnameName].
	self email notEmpty ifTrue: [^self email].
	^'----'! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
surname
	surname isNil ifTrue: [self asPerson notNil ifTrue: [^self asPerson surname] ifFalse: [^''] ].
	^surname! !

!WebUser methodsFor: 'accessing'!
surname: aString 
	self isLocked ifTrue: [^self error: 'user locked, changes not allowed!! '].
	self asPerson notNil ifTrue: [^self asPerson surname: aString].
	surname := aString trimBlanks.! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
surnameName
	^self surname, ' ', self name! !

!WebUser methodsFor: 'security' stamp: 'janko 4/25/2012 13:10'!
unEscalateFromAdmin
	"cancel escalation of that user from admin rights"
	self isEscalatedToAdmin ifTrue:
		[self otherAt: #EscalatedToAdmin put: false].! !

!WebUser methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
username
 
	username isNil ifTrue: [^''].
	^username.! !

!WebUser methodsFor: 'accessing'!
username: aString 
	self isLocked ifTrue: [^self error: 'user locked, changes not allowed!! '].
	username := aString asLowercase trimBlanks.! !

!WebUser methodsFor: 'accessing' stamp: 'janko 8/6/2011 19:43'!
uuid
	"unique identifier "
	^self otherAt: #uuid ifAbsentPut: [(AIDASite random next * 1000000000) rounded printString]! !

!WebUser methodsFor: 'accessing-address'!
website
	website isNil ifTrue: [^''].
	^website! !

!WebUser methodsFor: 'accessing-address'!
website: aString
	website := aString! !

!WebUser methodsFor: 'accessing-address'!
zip
	zip isNil ifTrue: [^'']. 
	^zip! !

!WebUser methodsFor: 'accessing-address'!
zip: aString
	zip := aString.! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminEMail
	^'admin'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminName
	^'Admin'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminPassword
	^'password'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminSurname
	^''! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminUsername
	^'admin'! !

!WebUser class methodsFor: 'defaults' stamp: 'mivsek 1/10/2008 19:04'!
extranetEMail
	^'extranet'! !

!WebUser class methodsFor: 'defaults' stamp: 'mivsek 1/10/2008 19:04'!
extranetName
	^'Extranet'! !

!WebUser class methodsFor: 'defaults' stamp: 'mivsek 1/10/2008 19:04'!
extranetPassword
	^'password'! !

!WebUser class methodsFor: 'defaults' stamp: 'mivsek 1/10/2008 19:04'!
extranetSurname
	^''! !

!WebUser class methodsFor: 'defaults' stamp: 'mivsek 1/10/2008 19:05'!
extranetUsername
	^'extranet'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestEMail
	^'guest'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestName
	^'Guest'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestPassword
	^'guest'! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestSurname
	^''! !

!WebUser class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestUsername
	^'guest'! !

!WebUser class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
new
	^super new initialize! !

!WebUser class methodsFor: 'instance creation' stamp: 'janko 3/16/2008 13:30'!
newAdmin
	^self new
		name: self adminName;
		surname: self adminSurname;
		email: self adminEMail;
		username: self adminUsername;
		password: self adminPassword! !

!WebUser class methodsFor: 'instance creation' stamp: 'janko 3/16/2008 13:30'!
newExtranet
	"a common extranet user, for easier setup of access rights"
	^self new
		name: self extranetName;
		surname: self extranetSurname;
		email: self extranetEMail;
		username: self extranetUsername;
		password: self extranetPassword! !

!WebUser class methodsFor: 'instance creation' stamp: 'np 3/17/2008 21:43'!
newGuest
	^self new
		name: self guestName;
		surname: self guestSurname;
		email: self guestEMail;
		username: self guestUsername;
		password: self guestPassword! !

!WebUserGroup methodsFor: 'adding-removing'!
addUser: aWebUser
 	self users add: aWebUser.! !

!WebUserGroup methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
allUsers
	^self users copy! !

!WebUserGroup methodsFor: 'accessing'!
allUsersSorted
	"..by name and surname"
	^self allUsers asSortedCollection: [:a :b | a nameSurname < b nameSurname]! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
includes: aWebUser
	^self users includes: aWebUser! !

!WebUserGroup methodsFor: 'initialize-release'!
initOther
	other := Dictionary new.! !

!WebUserGroup methodsFor: 'private' stamp: ' 21/4/07 22:07'!
initUsers 
	users  := Set new.! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isActivatingGroup
	"group of users waiting to confirm registration"
	^self name = self class activatingGroupName! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isAdminGroup
	^self name = self class adminGroupName! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isAllUsersGroup
	^self name = self class allUsersGroupName! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isGuestGroup
	^self name = self class guestGroupName! !

!WebUserGroup methodsFor: 'testing'!
isLocked
	"change or delete this group not allowed"
	^self otherAt: #Locked ifAbsent: [false]! !

!WebUserGroup methodsFor: 'testing' stamp: 'np 1/18/2008 11:23'!
isPerson
	^false! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isRegisteredGroup
	^self name = self class registeredGroupName! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebUser
	^false! !

!WebUserGroup methodsFor: 'testing' stamp: ' 21/4/07 22:07'!
isWebUserGroup
	^true! !

!WebUserGroup methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
menuName
	"in dropdown menus"
	^name! !

!WebUserGroup methodsFor: 'private' stamp: ' 21/4/07 22:07'!
migrateToUnicode
	"from iso8859-2"
	"WebUserGroup allInstances do: [:each | each migrateToUnicode]"
	name notNil ifTrue: [name := name ensureUnicodeSloveneChars].! !

!WebUserGroup methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
name
	name isNil ifTrue: [self name: '']. 
	^name! !

!WebUserGroup methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
name: aString
	name := aString.! !

!WebUserGroup methodsFor: 'private-other'!
other
	^other! !

!WebUserGroup methodsFor: 'private-other'!
otherAt: aSymbol
	^self otherAt: aSymbol ifAbsent: [nil]! !

!WebUserGroup methodsFor: 'private-other'!
otherAt: aSymbol ifAbsent: aBlock
	self other isNil ifTrue: [^aBlock value].
	^self other at: aSymbol ifAbsent: aBlock! !

!WebUserGroup methodsFor: 'private-other'!
otherAt: aSymbol ifAbsentPut: aBlock
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol ifAbsent: [self other at: aSymbol put: aBlock value]! !

!WebUserGroup methodsFor: 'private-other'!
otherAt: aSymbol put: anObject
	self other isNil ifTrue: [self initOther].
	^self other at: aSymbol put: anObject! !

!WebUserGroup methodsFor: 'private'!
preferredUrl
	| nme |
	nme := self name trimBlanks asHttpFriendly.
	^'/group/', nme! !

!WebUserGroup methodsFor: 'private'!
printString
	^'aWebUserGroup: ', self name! !

!WebUserGroup methodsFor: 'adding-removing'!
removeUser: aWebUser
 	self users remove: aWebUser ifAbsent: [].! !

!WebUserGroup methodsFor: 'accessing-other'!
resetLocked
	"change or delete this group allowed again"
	^self otherAt: #Locked put: false! !

!WebUserGroup methodsFor: 'accessing-other'!
setLocked
	"change or delete this group not allowed"
	^self otherAt: #Locked put: true! !

!WebUserGroup methodsFor: 'private' stamp: ' 21/4/07 22:07'!
users
	users isNil ifTrue: [self initUsers]. 
	^users! !

!WebUserGroup methodsFor: 'accessing' stamp: ' 21/4/07 22:07'!
uuid
	"some unique identifier. Hash for now, probably unique enough!! "
	^self hash printString! !

!WebUserGroup class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
activatingGroupName
	"group of users waiting to confirm registration"
	^'Users waiting activation'! !

!WebUserGroup class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
adminGroupName
	"return a name of group for administrators" 
	^'Administrators'! !

!WebUserGroup class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
allUsersGroupName
	"return a name of group, where all users are there by default" 
	^'AllUsers'! !

!WebUserGroup class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
guestGroupName
	"return a name of group for guests" 
	^self allUsersGroupName! !

!WebUserGroup class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newActivating
	^super new name: self activatingGroupName! !

!WebUserGroup class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newAdmin
	^super new name: self adminGroupName! !

!WebUserGroup class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newAllUsers
	^super new name: self allUsersGroupName! !

!WebUserGroup class methodsFor: 'instance creation' stamp: ' 21/4/07 22:07'!
newRegistered
	^super new name: self registeredGroupName! !

!WebUserGroup class methodsFor: 'defaults' stamp: ' 21/4/07 22:07'!
registeredGroupName
	"return a name of group of registered users" 
	^'Registered Users'! !

!WebUserRole methodsFor: 'private' stamp: ' 10/1/08 16:41'!
printString
	^'aWebUserRole ', self name! !

!WebValidationError methodsFor: 'printing' stamp: 'janko 10/31/2011 20:25'!
build
	| text |
	self class: #validationError.	"CSS"	"red background etc. See DefaultWebStyle>>css231Validation"
	(self origin isNil or: [self origin isValid]) ifFalse:
		[text := self origin errorText trimBlanks.
		text isEmpty ifTrue: [text := 'Error!!'].
		self addText: text]! !

!WebValidationError methodsFor: 'accessing' stamp: ' 3/8/10 15:32'!
origin
	
	^origin! !

!WebValidationError methodsFor: 'accessing' stamp: 'jm 8/3/2010 15:38'!
origin: aWebFormElement
	
	origin := aWebFormElement! !

!WebValidationError class methodsFor: 'instance creation'!
newFor: aFormElement
	^super new
		origin: aFormElement;
		build! !

!WebVideo methodsFor: 'attributes'!
autoplay
	"video will start playing as soon as it is ready"
	self attributes at: #autoplay put: true! !

!WebVideo methodsFor: 'attributes'!
controls: aString
	"Specifies that video controls should be displayed (such as a play/pause button etc)."
	self attributes at: #controls put: aString! !

!WebVideo methodsFor: 'attributes'!
height: anInteger
	self attributesAt: #height put: anInteger printString! !

!WebVideo methodsFor: 'attributes'!
loop
	"video will start over again, every time it is finished"
	self attributes at: #loop put: true! !

!WebVideo methodsFor: 'attributes'!
muted
	"audio output of the video should be muted"
	self attributes at: #muted put: true! !

!WebVideo methodsFor: 'attributes'!
poster: anUrlString
	"Specifies an image to be shown while the video is downloading, or until the user hits the play button"
	self attributes at: #poster put: anUrlString! !

!WebVideo methodsFor: 'attributes'!
preload: aSymbol
	"Specifies if and how the author thinks the video should be loaded when the page loads"
	" #auto #metadata or #none "
	self attributes at: #preload put: aSymbol asString! !

!WebVideo methodsFor: 'attributes'!
size: aPoint
	"set the size of a video player in format width@height"
	self width: aPoint x.
	self height: aPoint y.! !

!WebVideo methodsFor: 'attributes'!
src: anUrlString
	"Specifies the URL of the video file"
	" #auto #metadata or #none "
	self attributes at: #src put: anUrlString! !

!WebVideo methodsFor: 'private'!
tag
	^#video! !

!WebVideo methodsFor: 'attributes'!
text: aString
	"will be shown if browser does not support video"
	self addText: aString! !

!WebVideo methodsFor: 'attributes'!
width: anInteger
	self attributesAt: #width put: anInteger printString! !

!WebWidget methodsFor: 'private' stamp: 'janko 10/27/2011 12:42'!
add: anElement
	"all adding delegated to the form"
	self form add: anElement.
	anElement postAddAction.
	^anElement! !

!WebWidget methodsFor: 'views' stamp: 'janko 10/27/2011 11:28'!
ajaxUpdate
	"update a widget from the Ajax call"
	"override if you want to update a widget differently"
	self rebuild.! !

!WebWidget methodsFor: 'accessing'!
app
	"an App on which this widget is built"
	^self parent notNil 
		ifTrue: [self parent app]
		ifFalse: [self context app]! !

!WebWidget methodsFor: 'views' stamp: 'janko 10/27/2011 11:29'!
build
	"Build your widget by overriding this method. #build is called in two occassions: first when this 
	widget is first built and second from every Ajax update call"! !

!WebWidget methodsFor: 'testing'!
buildImmediatelly
	"shall we build a widget immediatelly when a widget is created?"
	"override in your sublclass if needed"
	^true! !

!WebWidget methodsFor: 'testing'!
buildWhileStreaming
	"shall we build a widget in a streaming state, just before starting to stream to response?"
	"override in your sublclass if needed"
	^false! !

!WebWidget methodsFor: 'views' stamp: 'janko 10/31/2011 20:37'!
clear
	self initElements.
	self clearTableInfo.
	self initScripts.
	self initForm.
	(self parent notNil and: [self parent form notNil]) ifTrue:
		[self parent form addSubform: self form]! !

!WebWidget methodsFor: 'accessing'!
form
	"WebForm is first and only subelement of the widget, all element addings go to it and not direclty to widget!!"
	self elements isEmpty ifTrue: [self initForm].
	^self elements first! !

!WebWidget methodsFor: 'events-actions'!
ifFalse: aBlock
	"run a block if answer is set to false when this widget is closed"
	self onCloseDo:
		[self context answer = false ifTrue: [aBlock value] ]! !

!WebWidget methodsFor: 'events-actions'!
ifTrue: aBlock
	"run a block if answer is set to true when this widget is closed"
	self onCloseDo:
		[self context answer = true ifTrue: [aBlock value] ]! !

!WebWidget methodsFor: 'events-actions'!
ifTrue: aTrueBlock ifFalse: aFalseBlock
	"run appropriate block if result is set to true or false when this widget is closed"
	self ifTrue: [aTrueBlock value].
	self ifFalse: [aFalseBlock value].! !

!WebWidget methodsFor: 'initialize-release'!
initForm
	"WebForm is a first element in a widget  and all adds go to this form and not direclty to the widget!! "
	(self elements add: (WebForm new parent: self))
		registerId! !

!WebWidget methodsFor: 'initialize-release' stamp: 'NicolasPetton 11/2/2011 12:28'!
initialize
	super initialize.
	self
		creationObject: self;
		creationMethod: #ajaxUpdate; "be sure to change it accordingly in subclasses if needed!! "
		creationContext: self context;
		setDiv; registerId; "Widgets must always have a web element id!! "
		attributesAt: #comment put: self class name; "unofficial attribute, just for easier debuging in browser"
		initForm;
		setStateComposing.
	self buildImmediatelly ifTrue: [self build]! !

!WebWidget methodsFor: 'state'!
isComposing
	"widget (or window or page) is in building state, composing from web elements"
	^state = #composing! !

!WebWidget methodsFor: 'state'!
isFinished
	"composing and streaming finished"
	^state = #finished! !

!WebWidget methodsFor: 'testing'!
isPureWidget
	"not a window or page, which are also widgets, as subclasses"
	^self isWebWindow not! !

!WebWidget methodsFor: 'state'!
isStreaming
	"printing, that is streaming to the tcp socket"
	^state = #streaming! !

!WebWidget methodsFor: 'testing'!
isWebWidget
	^true! !

!WebWidget methodsFor: 'events-actions'!
onAnswerDo: aBlock
	"if widget returns some answer on close, run that block with answer as an argument"
	self onCloseDo:
		[self context answer notNil ifTrue: 
			[aBlock value: self context answer] ]! !

!WebWidget methodsFor: 'events-actions'!
onCloseDo: aBlock
	"execute that block when this widget is closed"
	"Triggered in WebEventHandler addCloseWindow block"
	(self eventHandlerFor: #close)  "close is pseudo event, not browser native"
		addActionBlock: aBlock.! !

!WebWidget methodsFor: 'accessing'!
page
	"a webpage on which this widget resides"
	^self context page! !

!WebWidget methodsFor: 'private'!
postAddAction
	| sform c |
	sform := (self parent notNil and: [self parent creationObject notNil])
		ifTrue: [self parent form]
		ifFalse: 
			[c := (self widgetsAndAppsFromStack at: 2). "skip first because it is this widget"
			c isWebWidget ifTrue: [c form] ifFalse: [self context form] ].
	sform addSubform: self form.! !

!WebWidget methodsFor: 'views' stamp: 'janko 10/27/2011 11:28'!
rebuild
	"Rebuld first clears then builds this widget again. Used mostly to update a widget from Ajax update call"
	self clear.
	self build.
! !

!WebWidget methodsFor: 'accessing'!
session
	"a session on which this widget is built"
	^self app session! !

!WebWidget methodsFor: 'state'!
setComposing
	state := #composing! !

!WebWidget methodsFor: 'state'!
setFinished
	state := #finished! !

!WebWidget methodsFor: 'state'!
setStateComposing
	state := #composing! !

!WebWidget methodsFor: 'state'!
setStateFinished
	state := #finished! !

!WebWidget methodsFor: 'state'!
setStateStreaming
	state := #streaming! !

!WebWidget methodsFor: 'accessing'!
site
	"a website on which this widget is built"
	^self app site! !

!WebWidget methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession 
	self buildWhileStreaming
		ifTrue: [self build].
	self registerFormElementsTo: self form.	
	self setStateStreaming.
	super streamHtmlTo: aStream for: aRequest on: aSession.
	self setStateFinished.! !

!WebWidget methodsFor: 'events-actions'!
update
	"update (recreate or refresh) that widget by returning a recreated one"
	| superform new |
	superform := self form superform.
	superform notNil ifTrue: 
		[superform removeSubform: self form.
		superform isTopForm ifTrue: [self parent: nil] ]. "probably from previous popup with now nonexistent context"
	self context cancelReplacement. "widget is rebuilt, not replaced with new instance!!"
	new := (self creationMethod asString last = $: )
		ifTrue: [self creationObject perform: self creationMethod with: self updateArgument] 
		ifFalse: [self updateArgument notNil  "try to call the method with that argument"
			ifTrue: [self creationObject perform: (self creationMethod, ':') asSymbol with: self updateArgument]
			ifFalse: [self creationObject perform: self creationMethod] ].
	superform notNil ifTrue: 
		[superform isTopForm ifTrue: [superform := self context window form]. "new popup context!!"
		superform addSubform: new form].
	self session queueUpdateElement: new. "to be sent immediatelly via WebSocket if open, or in Ajax response"
	^new! !

!WebWidget methodsFor: 'accessing'!
user
	"a currently logged-in user on the session on which this widget is built"
	^self session user! !

!WebWidget methodsFor: 'private'!
widget
	^self! !

!WebWidget class methodsFor: 'instance creation' stamp: 'NicolasPetton 11/2/2011 12:29'!
new
	^self basicNew initialize! !

!WebWindow methodsFor: 'accessing'!
app
	^self context app! !

!WebWindow methodsFor: 'initialize-release'!
clear
	self setStateComposing.
	^self form clear! !

!WebWindow methodsFor: 'accessing'!
close
	"close that window and also its execution context. Call this method from Ajax closing link 
	on the window"
	"only the subwindow can be closed that way, not a main page"
	self context close.! !

!WebWindow methodsFor: 'accessing' stamp: 'janko 11/1/2011 14:46'!
context
	^self parent notNil 
		ifTrue: [self parent]
		ifFalse: [self firstContextFromStack]! !

!WebWindow methodsFor: 'accessing'!
form
	"form is a second, not first element in Window, first is popup stub"
	^self elements at: 2! !

!WebWindow methodsFor: 'initialize-release'!
initPopupStub
	self elements first isStubElement ifTrue: [^nil].
	self elements addFirst: 
		(WebStubElement newOn: self firstContextFromStack)! !

!WebWindow methodsFor: 'testing'!
isWebWindow
	^true! !

!WebWindow methodsFor: 'private'!
parent: aContext
	"temporary, for debugging!!"
	^super parent: aContext! !

!WebWindow methodsFor: 'accessing'!
popupStub
	"empty stub element for eventual popup window"
	self elements first isStubElement ifFalse: [^self error: 'not a popup stub!! '].
	^self elements first! !

!WebWindow methodsFor: 'private'!
popupStyle
	"for popup windows. Because they are stackable, we need to consider a level in the stack too"
	| level lvl |
	level :=self context level. lvl := level printString.
	^ '
form {width: 100%}
div#overlay', lvl ,' {
	position: fixed;
	width: 100%;
	height: 100%;
	z-index: ', (9000+(level*2)) printString, ';
	background-color: black;
	filter: alpha(opacity=10);
	-moz-opacity: 0.1;
	opacity: 0.1;
}
div#lightbox', lvl, ' { 
	background: #ffffff;
	z-index: ', (9001+(level*2)) printString, ';
	padding: 10px;
	border: 5px solid #888888;
	border-radius: 10px;
	box-shadow: 0 0 10px #333333;
}'! !

!WebWindow methodsFor: 'subelements'!
registerFormElementsTo: aWebForm
	self form initSubforms. "to avoid accumulating subforms during posting on the same page"
	^super registerFormElementsTo: aWebForm! !

!WebWindow methodsFor: 'private'!
shouldIdent
	^true! !

!WebWindow methodsFor: 'private'!
streamHtmlTo: aStream for: aRequest on: aSession
	self prepareToHtmlStreamingOn: aSession.
	self setStateStreaming.
	super streamHtmlTo: aStream for: aRequest on: aSession. "a form"
	self setStateFinished.! !

!WebWindow class methodsFor: 'instance creation'!
new
	^super new
		initPopupStub! !
AIDASite initialize!
GifImageStream initialize!
ImageStream initialize!
WebTransactionMonitor initialize!
